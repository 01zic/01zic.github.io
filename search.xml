<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build Your Own Text Editor</title>
    <url>/2022/06/28/Build_Your_Own_Text_Editor/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>构建你自己的文本编辑器</li>
<li><a href="https://viewsourcecode.org/snaptoken/kilo/index.html">学习的开源的项目地址</a></li>
<li>在linux环境编译运行</li>
</ul>
<h2 id="第一章-安装"><a href="#第一章-安装" class="headerlink" title="第一章 安装"></a>第一章 安装</h2><ol>
<li>安装一个C编译器</li>
<li>main()函数介绍</li>
<li>使用make来编译</li>
</ol>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">kilo</span><span class="token punctuation">:</span> kilo.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> kilo.c -o kilo -Wall -Wextra -pedantic -std<span class="token operator">=</span>c99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="第二章-进入原始模式"><a href="#第二章-进入原始模式" class="headerlink" title="第二章 进入原始模式"></a>第二章 进入原始模式</h2><ul>
<li>kilo.c文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//read()从标准输入中读取1个字节的字符到变量c中</span>
<span class="token comment">//read()函数的返回值是成功读取的字节数，当返回值为0表示文件末尾</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">Include<span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">></span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>press q to quit</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//输入q退出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>turn off echoing</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//echo 在规范模式下可以在终端输出用户键入的字符</span>
<span class="token comment">//但是在原始模式不太好，所以要关掉它</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token comment">//开启原始模式</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw<span class="token punctuation">;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>退出时禁用原始模式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭规范模式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//逐字节读取输入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>显示按键</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//iscntrl()来自&lt;ctype.h></span>
<span class="token comment">/*iscntrl()测试字符是否为控制字符。控制字符是我们不想打印到屏/幕上的不可打印字符。ASCII码0-31都是控制字符，127也是控制字符。ASCII码32-126都是可打印的。
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭<code>Ctrl-C</code>和<code>Ctrl-Z</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//关闭退出和回退信号</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭<code>Ctrl-S</code>和<code>Ctrl-Q</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Ctrl-S停止数据传输到终端</span>
<span class="token comment">//Ctrl-Q暂停数据传输</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭<code>Ctrl-V</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>修复<code>Ctrl-M</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Ctrl-M和Enter都是13</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ICRNL <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭输出处理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ICRNL <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关掉其他信号</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>暂停read()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设定读取超时</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>错误处理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">perror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcgetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>小结</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token comment">/*** data ***/</span>

<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>

<span class="token comment">/*** terminal ***/</span>

<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">perror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcgetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*** init ***/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第三章-原始输入和输出"><a href="#第三章-原始输入和输出" class="headerlink" title="第三章 原始输入和输出"></a>第三章 原始输入和输出</h2><h3 id="按Ctrl-Q退出"><a href="#按Ctrl-Q退出" class="headerlink" title="按Ctrl-Q退出"></a>按<code>Ctrl-Q</code>退出</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token comment">/*** defines ***/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CTRL_KEY</span><span class="token expression"><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1f</span><span class="token punctuation">)</span></span></span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token comment">/*** init ***/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">CTRL_KEY</span><span class="token punctuation">(</span><span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>这个<code>CTRL_KEY</code>宏按位与字符的值相加<code> 00011111</code></li>
<li>（在C语言中，通常使用十六进制指定位掩码，因为<code>Cdoesn</code>没有二进制字面值，而一旦习惯了十六进制，它会更加简洁易读。）换句话说，它将字符的高位3位设置为<code>0</code>. 这反映了<code>Ctrl</code>键按键在终端中的作用：它会从你按下的任何键中去除第5位和第6位<code>Ctrl</code>键，然后发送。（按照惯例，位编号从0开始。）ASCII字符集似乎是故意这样设计的。<h3 id="重构键盘输入"><a href="#重构键盘输入" class="headerlink" title="重构键盘输入"></a>重构键盘输入</h3></li>
<li>创建一个用于低级按键读取的函数，以及另一个将按键映射到编辑器操作的函数。此时我们也将停止打印按键。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token comment">/*** defines ***/</span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token function">editorReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> nread<span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** input ***/</span>
<span class="token keyword">void</span> <span class="token function">editorProcessKeypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">editorReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token function">CTRL_KEY</span><span class="token punctuation">(</span><span class="token char">'q'</span><span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** init ***/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">editorProcessKeypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>editorReadKey()</code>的工作是等待一次按键，然后返回。稍后，我们将扩展此函数来处理转义序列，这涉及到读取多个表示单个按键的字节，如箭头键的情况。</li>
<li><code>editorProcessKeypress()</code>等待按键，然后处理它。稍后，它将映射各种Ctrl键组合键和其他特殊键到不同的编辑器功能，并将任何字母数字和其他可打印键的字符插入正在编辑的文本中。</li>
<li><code>editorReadKey()</code>属于<code>/***终端***/</code>部分是因为它处理低电平终端输入，而<code>editorProcessKeypress()</code>属于新的<code>/***输入***/</code>因为它在更高的级别处理映射keysto编辑器函数。</li>
</ul>
<h3 id="清除屏幕"><a href="#清除屏幕" class="headerlink" title="清除屏幕"></a>清除屏幕</h3><ul>
<li>我们将在每次按键后将编辑器的用户界面呈现到屏幕上。让我们从清理屏幕开始。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token comment">/*** defines ***/</span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token function">editorReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token comment">/*** output ***/</span>
<span class="token keyword">void</span> <span class="token function">editorRefreshScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"\x1b[2J"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** input ***/</span>
<span class="token comment">/*** init ***/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">editorRefreshScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">editorProcessKeypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>4意味着4个字节输出到终端，第一个字节是<code>\x1b型</code>，它是转义字符，或者<code>27</code>索引的。（试着记住<code>\x1b型</code>，我们将经常使用它。）其他三个字节是<code>[2J</code> .</p>
</li>
<li><p>我们正在写一个<em>转义序列</em>到终点站。转义序列总是从转义字符开始(<code>27</code>)后面跟着一个<code> [</code>性格。Escapesequences指示终端执行各种文本格式化任务，例如对文本进行着色、在屏幕上四处移动光标以及清除部分屏幕。</p>
</li>
<li><p>我们正在使用<code>J</code>命令(<a href="http://vt100.net/docs/vt100-ug/chapter3.html#ED">在显示中擦除</a>)清除屏幕。转义序列命令接受位于命令之前的参数。在这种情况下，论点是<code>2</code>，表示要清除整个屏幕。<code>&lt;esc&gt;[1J</code>会将屏幕清除到光标所在的位置，并且<code>&lt;esc&gt;[0J</code>将清除屏幕从光标到屏幕末尾。也，<code> zero</code>的默认参数<code>J</code>，所以只是<code>&lt;esc&gt;[J</code>它本身也会将屏幕从光标一直清除到最后。</p>
</li>
<li><p>对于我们的文本编辑器，我们将主要使用<a href="https://en.wikipedia.org/wiki/VT100">VT100型</a>转义序列，被现代终端仿真器广泛支持。见<a href="http://vt100.net/docs/vt100-ug/chapter3.html">VT100用户指南</a>每个转义序列的完整文档。</p>
<p>如果我们想支持最大数量的终端，我们可以使用<a href="https://en.wikipedia.org/wiki/Ncurses"> 课程</a>库，它使用<a href="https://en.wikipedia.org/wiki/Terminfo"> 终点站</a>数据库来计算终端的容量以及该终端使用的转义序列。</p>
</li>
</ul>
<h3 id="重新定位光标"><a href="#重新定位光标" class="headerlink" title="重新定位光标"></a>重新定位光标</h3><ul>
<li>你可能会注意到<code>&lt;esc&gt;[2J</code>命令将光标留在屏幕底部。让我们重新定位它在左上角，这样我们就可以从上到下绘制编辑器界面了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token comment">/*** defines ***/</span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token comment">/*** output ***/</span>
<span class="token keyword">void</span> <span class="token function">editorRefreshScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"\x1b[2J"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"\x1b[H"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** input ***/</span>
<span class="token comment">/*** init ***/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>这个转义序列只是<code>3</code>字节长，并使用<code>H</code>命令(<a href="http://vt100.net/docs/vt100-ug/chapter3.html#CUP">光标位置</a>)地形定位光标。这个<code>H</code>命令实际上有两个参数：行号和光标所在的列号。因此，如果您有一个80×24大小的终端，并且您希望光标位于屏幕的中心，您可以使用命令<code>&lt;esc&gt;[12;40H</code>. （多个参数之间用<code>;</code>字符。）的默认参数<code>H</code>两者碰巧都是<code>1</code>，所以我们可以省略这两个参数，它将光标定位在第一行和第一列，就像我们发送<code>&lt;esc&gt;[1;1H</code>命令。（行和列从开始编号<code>1</code>，不是<code> zero</code> .)</li>
</ul>
<h3 id="退出时清除屏幕"><a href="#退出时清除屏幕" class="headerlink" title="退出时清除屏幕"></a>退出时清除屏幕</h3><ul>
<li>当程序退出时，让我们清除屏幕并重新定位光标。如果在渲染屏幕的过程中出现错误，我们不希望在屏幕上留下一堆垃圾，也不希望在光标恰好位于该点的任何位置打印错误。</li>
</ul>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*** includes ***&#x2F;
&#x2F;*** defines ***&#x2F;
&#x2F;*** data ***&#x2F;
&#x2F;*** terminal ***&#x2F;
void die(const char *s) &#123;
  write(STDOUT_FILENO, &quot;\x1b[2J&quot;, 4);
  write(STDOUT_FILENO, &quot;\x1b[H&quot;, 3);
  perror(s);
  exit(1);
&#125;
void disableRawMode() &#123; … &#125;
void enableRawMode() &#123; … &#125;
char editorReadKey() &#123; … &#125;
&#x2F;*** output ***&#x2F;
&#x2F;*** input ***&#x2F;
void editorProcessKeypress() &#123;
  char c &#x3D; editorReadKey();
  switch (c) &#123;
    case CTRL_KEY(&#39;q&#39;):
      write(STDOUT_FILENO, &quot;\x1b[2J&quot;, 4);
      write(STDOUT_FILENO, &quot;\x1b[H&quot;, 3);
      exit(0);
      break;
  &#125;
&#125;
&#x2F;*** init ***&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>We have two exit points we want to clear the screen at:<code>die()</code>, and when theuser pressesCtrl-Qto quit.</li>
<li>We could use<code>atexit()</code>to clear the screen when our program exits, but thenthe error message printed by<code>die()</code>would get erased right after printing it.</li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>C++STL</title>
    <url>/2022/07/06/C-STL/</url>
    <content><![CDATA[<h2 id="第一章-STL理论基础"><a href="#第一章-STL理论基础" class="headerlink" title="第一章 STL理论基础"></a><strong>第一章 STL理论基础</strong></h2><h3 id="1-1本章学习重点"><a href="#1-1本章学习重点" class="headerlink" title="1.1本章学习重点"></a><strong>1.1本章学习重点</strong></h3><ul>
<li>STL基本概念</li>
<li>理解容器的概念</li>
<li>理解迭代器的概念</li>
<li>理解算法的概念</li>
</ul>
<h3 id="1-2-STL基本概念"><a href="#1-2-STL基本概念" class="headerlink" title="1.2 STL基本概念"></a><strong>1.2 STL基本概念</strong></h3><ul>
<li><p>STL(Standard Template Library,标准模板库)，是惠普实验室开发的一系列软件的统称。现在主要出现在c++中，但是在引入c++之前该技术已经存在很长时间了。</p>
</li>
<li><p>STL从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator),容器和算法之间通过迭代器进行无缝连接。STL几乎所有的代码都采用了模板类或者模板函数，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。</p>
</li>
<li><p>STL(Standard Template Library)标准模板库,在我们c++标准程序库中隶属于STL的占到了80%以上。</p>
</li>
</ul>
<p>在c++标准中，STL被组织成以下13个头文件：</p>
<ul>
<li><p><algorithm>、<deque>、<functional>、<iterator>、<vector>、<list>、<map>、<memory>、<numeric>、<queue>、<set>、<stack> 和<utility></p>
</li>
<li><p>那么说了这么多，STL还有什么优点呢？</p>
</li>
<li><p>STL是C++的一部分，因此不用额外安装什么，它被内建在你的编译器之内。</p>
</li>
<li><p>STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但是这种分离确实使得STL变得非常通用。例如:在STL的vector容器中，可以放入元素、基础数据类型变量、元素的地址；STL的sort() 排序函数可以用来操作vector,list等容器。</p>
</li>
<li><p>程序员可以不用思考STL具体的实现过程，只要能够熟练使用STL就OK了。这样他们就可以把精力放在程序开发的别的方面。</p>
</li>
<li><p>STL具有高可重用性，高性能，高移植性，跨平台的优点。</p>
<ul>
<li>高可重用性：STL中几乎所有的代码都采用了模板类和模版函数的方式实现，这相比于传统的由函数和类组成的库来说提供了更好的代码重用机会。关于模板的知识，已经给大家介绍了。</li>
<li>高性能：如map可以高效地从十万条记录里面查找出指定的记录，因为map是采用红黑树的变体实现的。(红黑树是平横二叉树的一种)</li>
<li>高移植性：如在项目A上用STL编写的模块，可以直接移植到项目B上。</li>
<li>跨平台：如用windows的Visual Studio编写的代码可以在Mac OS的XCode上直接编译。</li>
</ul>
</li>
</ul>
<h3 id="1-3-STL三大组件介绍"><a href="#1-3-STL三大组件介绍" class="headerlink" title="1.3 STL三大组件介绍"></a><strong>1.3 STL三大组件介绍</strong></h3><h4 id="1-3-1容器概念介绍"><a href="#1-3-1容器概念介绍" class="headerlink" title="1.3.1容器概念介绍"></a><strong>1.3.1容器概念介绍</strong></h4><ul>
<li>STL中容器是指存储有限数据元素的一种数据结构。比如栈(stack)，队列(queue)…那么什么是数据结构，我们研究把数据按照特定的方式排列起来，便于我们查找 删除 排序或者其他一些目的，这种不同的排列方式我们就可以叫数据结构。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDAB.tmp.jpg" alt="img"> </p>
<ul>
<li><p>教室中包含了很多学生，教室就是一个容器，学生就是容器中存储的一个元素，教学楼包含了很多教室，教学楼就是一个容器，教室就是容器中的一个元素。</p>
</li>
<li><p>这里面还包含了一层含义：容器可以包含容器(教学楼和教室都是容器，但是教学楼里可以放教室)</p>
</li>
<li><p>比如拿教室这个容器来举例：我们怎么能快速定位教室中某个人的位置，是不是需要我们教室中的所有人按照一定的规则排序，这样我就能快速定位一个学生的坐在那里，那么依据我们的需求，让学生按照不同的规则排列，这种不同的排列就叫做数据结构。</p>
</li>
<li><p>在我们STL中容器分为：序列式容器和关联式容器。</p>
<ul>
<li>序列式容器就是根据学生进入教室的时间和地点来决定学生在那个位置，跟学生是谁没关系。</li>
<li>关联式容器是指我教室的座位按照一定规则确定好了，每个学生进来，比如根据学生出生年月，从小到大排列，学生坐在那个位置，必须由我的规则来规定。</li>
</ul>
</li>
</ul>
<h4 id="1-3-2迭代器介绍"><a href="#1-3-2迭代器介绍" class="headerlink" title="1.3.2迭代器介绍"></a><strong>1.3.2迭代器介绍</strong></h4><ul>
<li><p>迭代器是一种抽象出来的概念，现实中不容易找出来某项事物与之对应，所以较难理解。</p>
</li>
<li><p>但是在我们程序中，比如我们写的数据，我们通过[]操作符遍历取值，那么[]就是一个迭代器，也必须说我们经常用的指针，他也是一种迭代器。</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDAC.tmp.jpg" alt="img"> </p>
<ul>
<li>迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。迭代器修改了常规指针的接口，所谓迭代器是一种概念上的抽象：那些行为上像迭代器的东西都可以叫做迭代器，也就是说迭代器就是对我们普通的指针做了一层封装，其行为也类似指针。我们现在呢？可以单纯得把迭代器理解为，它就是一个指针，用来指向不同的元素,既然是指针，那么指针的一些基本运算操作，比如*、++、==、!=、=,迭代器也可以进行这样的操作。</li>
</ul>
<h4 id="1-3-3算法介绍"><a href="#1-3-3算法介绍" class="headerlink" title="1.3.3算法介绍"></a><strong>1.3.3算法介绍</strong></h4><ul>
<li><p>以有限的步骤，解决逻辑或者数学上的问题，这门学科我们就叫做算法。一般来说，我们每天都在写各种各样的算法，比如我们写的每一个函数，它被用来解决或大或小的问题。</p>
</li>
<li><p>在我们工作中，我们要写一个算法来解决一个问题的时候，那么需要考虑你写的算法需要消耗的计算机资源，包括时间和空间，如果你写一个算法需要消耗1G内存来解决这个问题，那么你这个算法也就没有什么价值了。</p>
</li>
<li><p>STL为我们的提供的算法，都很高效，而且还有个最大的特点，可复用性。那么我们学习算法，就很简单了，我们只需要去熟悉并且能熟练应用STL为我们提供的常用算法就OK了。</p>
</li>
<li><p>STL提供了大约100个实现算法的模版函数，比如算法for_each将为指定序列中的每一个元素调用指定的函数等。这样一来，只要我们熟悉了STL之后，许多代码可以被大大的化简，只需要通过调用一两个算法函数，就可以完成所需要的功能并大大地提升效率</p>
</li>
</ul>
<h4 id="1-3-4案例"><a href="#1-3-4案例" class="headerlink" title="1.3.4案例"></a><strong>1.3.4案例</strong></h4><h5 id="1-3-4-1-案例一-STL入门hello-world"><a href="#1-3-4-1-案例一-STL入门hello-world" class="headerlink" title="1.3.4.1 案例一: STL入门hello world"></a><strong>1.3.4.1 案例一: STL入门hello world</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;

using namespace std;


&#x2F;&#x2F;STL中的容器 算法 迭代器
void test01()&#123;
	
	vector&lt;int&gt; v;  &#x2F;&#x2F;STL中的标准容器之一 ：动态数组
	v.push_back(1); &#x2F;&#x2F;vector容器提供的插入数据的方法
	v.push_back(5);
	v.push_back(3);
	v.push_back(7);


	&#x2F;&#x2F;迭代器
	vector&lt;int&gt;::iterator pStart &#x3D; v.begin(); &#x2F;&#x2F;vector容器提供了begin()方法 返回指向第一个元素的迭代器
	vector&lt;int&gt;::iterator pEnd &#x3D; v.end(); &#x2F;&#x2F;vector容器提供了end()方法 返回指向最后一个元素下一个位置的迭代器

	&#x2F;&#x2F;通过迭代器遍历
	while (pStart !&#x3D; pEnd)&#123;
		cout &lt;&lt; *pStart &lt;&lt; &quot; &quot;;
		pStart++;
	&#125;
	cout &lt;&lt; endl;

	&#x2F;&#x2F;算法 count算法 用于统计元素的个数
	int n &#x3D; count(pStart, pEnd, 5);
	cout &lt;&lt; &quot;n:&quot; &lt;&lt; n &lt;&lt; endl;

&#125;

&#x2F;&#x2F;STL容器不单单可以存储基础数据类型，也可以存储类对象
class  Teacher
&#123;
public:
	Teacher(int age) :age(age)&#123;&#125;;
	~Teacher()&#123;&#125;;
public:
	int age;
&#125;;

void test02()&#123;

	vector&lt;Teacher&gt; v; &#x2F;&#x2F;存储Teacher类型数据的容器
	Teacher t1(10), t2(20), t3(30);
	v.push_back(t1);
	v.push_back(t2);
	v.push_back(t3);

	vector&lt;Teacher&gt;::iterator pStart &#x3D; v.begin();
	vector&lt;Teacher&gt;::iterator pEnd &#x3D; v.end();

	&#x2F;&#x2F;通过迭代器遍历
	while (pStart !&#x3D; pEnd)&#123;
		cout &lt;&lt; pStart-&gt;age &lt;&lt; &quot; &quot;;
		pStart++;
	&#125;
	cout &lt;&lt; endl;

&#125;

&#x2F;&#x2F;存储Teacher类型指针
void test03()&#123;
	
	vector&lt;Teacher*&gt; v; &#x2F;&#x2F;存储Teacher类型指针
	Teacher* t1 &#x3D; new Teacher(10);
	Teacher* t2 &#x3D; new Teacher(20);
	Teacher* t3 &#x3D; new Teacher(30);

	v.push_back(t1);
	v.push_back(t2);
	v.push_back(t3);

	&#x2F;&#x2F;拿到容器迭代器
	vector&lt;Teacher*&gt;::iterator pStart &#x3D; v.begin();
	vector&lt;Teacher*&gt;::iterator pEnd &#x3D; v.end();

	&#x2F;&#x2F;通过迭代器遍历
	while (pStart !&#x3D; pEnd)&#123;
		cout &lt;&lt; (*pStart)-&gt;age &lt;&lt; &quot; &quot;;
		pStart++;
	&#125;
	cout &lt;&lt; endl;

&#125;
 
&#x2F;&#x2F;容器嵌套容器  难点(不理解，可以跳过)
void test04()&#123;
	
	vector&lt;vector&lt;int&gt;&gt; v; &#x2F;&#x2F;容器中存储容器
	vector&lt;int&gt; v1,v2,v3;
	v1.push_back(1);
	v1.push_back(2);

	v2.push_back(10);

	v3.push_back(100);
	v3.push_back(200);

	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);

	&#x2F;&#x2F;拿到容器迭代器
	vector&lt;vector&lt;int&gt;&gt;::iterator pStart &#x3D; v.begin();
	vector&lt;vector&lt;int&gt;&gt;::iterator pEnd &#x3D; v.end();

	&#x2F;&#x2F;通过迭代器遍历
	while (pStart !&#x3D; pEnd)&#123;
		vector&lt;int&gt; vTemp &#x3D; *pStart; &#x2F;&#x2F;获得迭代器当前指向的容器

		vector&lt;int&gt;::iterator tmpStart &#x3D; vTemp.begin();
		vector&lt;int&gt;::iterator tmpEnd &#x3D; vTemp.end();
		for (; tmpStart !&#x3D; tmpEnd;tmpStart++)&#123;
			cout &lt;&lt; *tmpStart &lt;&lt; &quot; &quot;;
		&#125;
		cout &lt;&lt; endl;
		pStart++; 
	&#125;
&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	&#x2F;&#x2F;test02();
	&#x2F;&#x2F;test03();
	test04();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="13-4-2-案例二-容器算法迭代器实现基本原理"><a href="#13-4-2-案例二-容器算法迭代器实现基本原理" class="headerlink" title="13.4.2 案例二: 容器算法迭代器实现基本原理"></a><strong>13.4.2 案例二: 容器算法迭代器实现基本原理</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
&#x2F;&#x2F;算法
int mycount(int* start, int* end, int val)&#123;
	int n &#x3D; 0;
	for (int* it &#x3D; start; it !&#x3D; end;it++)&#123;
		if (*it &#x3D;&#x3D; val)&#123;
			n++;
		&#125;	
	&#125;
	return n;
&#125;
int main()&#123;

	&#x2F;&#x2F;容器&#x3D;&gt;数组
	int arr[] &#x3D; &#123; 1, 2, 3, 5,4, 5, 6 &#125;;
	&#x2F;&#x2F;迭代器 [] int*p []也是一种迭代器
	int* pStart &#x3D; arr;  &#x2F;&#x2F;开始迭代器
	int* pEnd &#x3D; &amp;(arr[sizeof(arr) &#x2F; sizeof(int)]);  &#x2F;&#x2F;结束迭代器
	&#x2F;&#x2F;p++;
	&#x2F;&#x2F;cout &lt;&lt; *p &lt;&lt; endl;
	&#x2F;&#x2F;p++;
	&#x2F;&#x2F;cout &lt;&lt; *p &lt;&lt; endl;
	&#x2F;&#x2F;遍历容器
	while (pStart !&#x3D; pEnd)&#123;
		cout &lt;&lt; *pStart &lt;&lt; endl;
		pStart++;
	&#125;

	int n &#x3D; mycount(pStart, pEnd, 5); &#x2F;&#x2F;算法 通过迭代器对容器中的元素进行统计
	cout &lt;&lt; &quot;n:&quot; &lt;&lt; n &lt;&lt; endl;

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-3-5总结"><a href="#1-3-5总结" class="headerlink" title="1.3.5总结"></a><strong>1.3.5总结</strong></h4><ul>
<li>容器就是数据结构，用来将数据元素按照一定的规则进行排列，不同的容器拥有不同的排列规则，不同的排列规则可以达到不同的数据操作特点，比如数据这种数据结构，我们随机存取就很高效，算法就是提供对容器数据元素的一些操作，比如遍历容器元素，删除容器元素等迭代器就是容器和算法之间的桥梁，粘合剂，用来将两个相对独立的部件建立起关系。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDBC.tmp.jpg" alt="img"> </p>
<ul>
<li><p>STL中容器和算法的设计是彼此分离，这样的好处就是：</p>
<ul>
<li><p>容器和算法的编写可以分别编写，互补影响</p>
</li>
<li><p>容器只需要提供迭代器 算法只需要拿到迭代器就可以完成容器和算法之间的关联和操作</p>
</li>
</ul>
</li>
</ul>
<h2 id="第二章-常用容器"><a href="#第二章-常用容器" class="headerlink" title="第二章 常用容器"></a><strong>第二章 常用容器</strong></h2><h3 id="2-1本章学习重点"><a href="#2-1本章学习重点" class="headerlink" title="2.1本章学习重点"></a><strong>2.1本章学习重点</strong></h3><ul>
<li>掌握string容器特性,及其相关API的使用</li>
<li>掌握vector容器特性,及其相关API的使用</li>
<li>掌握deque容器特性,及其相关API的使用</li>
<li>掌握queue容器特性,及其相关API的使用</li>
<li>掌握stack容器特性,及其相关API的使用</li>
<li>掌握list容器特性,及其相关API的使用</li>
<li>掌握set/multiset容器特性,及其相关API的使用</li>
<li>掌握map/multiset容器特性,及其相关API的使用</li>
<li>掌握函数对象的概念</li>
<li>理解STL容器元素的深拷贝和浅拷贝问题</li>
</ul>
<h3 id="2-2-string容器"><a href="#2-2-string容器" class="headerlink" title="2.2 string容器"></a><strong>2.2 string容器</strong></h3><h4 id="2-2-1-string的特性"><a href="#2-2-1-string的特性" class="headerlink" title="2.2.1 string的特性"></a><strong>2.2.1 string的特性</strong></h4><ul>
<li><p>说到string的特性，就不得不和char*类型的字符串的对比：</p>
</li>
<li><p>Char*是一个指针，String是一个类</p>
</li>
<li><p>string封装了char * ，管理这个字符串，是一个char*型的容器。</p>
</li>
<li><p>String封装了很多实用的成员方法</p>
</li>
<li><p>查找find，拷贝copy，删除delete 替换replace，插入insert</p>
</li>
<li><p>不用考虑内存释放和越界</p>
</li>
<li><p>string管理char * 所分配的内存。每一次string的复制，取值都由string类负责维护，不用担心复制越界和取值越界等。</p>
</li>
<li><p>string和char*可以互相转换吗？如果能，怎么转换呢？</p>
</li>
<li><p>答案是可以转换。string转char*通过string提供的c_str()方法。</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;string 转 char*
string str &#x3D; &quot;itcast&quot;;
const char* cstr &#x3D; str.c_str();
&#x2F;&#x2F;char* 转 string 
char* s &#x3D; &quot;itcast&quot;;
string sstr(s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-2-2-string-常用API"><a href="#2-2-2-string-常用API" class="headerlink" title="2.2.2 string 常用API"></a><strong>2.2.2 string 常用API</strong></h4><h5 id="2-2-2-1-string构造函数"><a href="#2-2-2-1-string构造函数" class="headerlink" title="2.2.2.1 string构造函数"></a><strong>2.2.2.1 string构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string();&#x2F;&#x2F;创建一个空的字符串 例如: string str;      
string(const string&amp; str);&#x2F;&#x2F;使用一个string对象初始化另一个string对象
string(const char* s);&#x2F;&#x2F;使用字符串s初始化
string(int n, char c);&#x2F;&#x2F;使用n个字符c初始化 
&#x2F;&#x2F;例子:
&#x2F;&#x2F;默认构造函数
string s1;
&#x2F;&#x2F;拷贝构造函数
string s2(s1);
string s2 &#x3D; s1;
&#x2F;&#x2F;带参数构造函数
char* str &#x3D; &quot;itcast&quot;;
string s3(str);
string s4(10, &#39;a&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-2-2-2-string基本赋值操作"><a href="#2-2-2-2-string基本赋值操作" class="headerlink" title="2.2.2.2 string基本赋值操作"></a><strong>2.2.2.2 string基本赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string&amp; operator&#x3D;(const char* s);&#x2F;&#x2F;char*类型字符串 赋值给当前的字符串
string&amp; operator&#x3D;(const string &amp;s);&#x2F;&#x2F;把字符串s赋给当前的字符串
string&amp; operator&#x3D;(char c);&#x2F;&#x2F;字符赋值给当前的字符串
string&amp; assign(const char *s);&#x2F;&#x2F;把字符串s赋给当前的字符串
string&amp; assign(const char *s, int n);&#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串
string&amp; assign(const string &amp;s);&#x2F;&#x2F;把字符串s赋给当前字符串
string&amp; assign(int n, char c);&#x2F;&#x2F;用n个字符c赋给当前字符串
string&amp; assign(const string &amp;s, int start, int n);&#x2F;&#x2F;将s从start开始n个字符赋值给字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-2-2-3-string存取字符操作"><a href="#2-2-2-3-string存取字符操作" class="headerlink" title="2.2.2.3 string存取字符操作"></a><strong>2.2.2.3 string存取字符操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char&amp; operator[](int n);&#x2F;&#x2F;通过[]方式取字符
char&amp; at(int n);&#x2F;&#x2F;通过at方法获取字符
&#x2F;&#x2F;例子:
string s &#x3D; &quot;itcast&quot;;
char c &#x3D; s[1];
c &#x3D; s.at(1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><strong>问：</strong>string中存取字符[]和at的异同?</p>
<p><strong>答: 1 相同,[]和at都可以返回第n个字符</strong></p>
<p><strong>2 不同，at访问越界会抛出异常，[]越界会直接程序会挂掉。</strong></p>
</blockquote>
<h5 id="2-2-2-4-string拼接操作"><a href="#2-2-2-4-string拼接操作" class="headerlink" title="2.2.2.4 string拼接操作"></a><strong>2.2.2.4 string拼接操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string&amp; operator+&#x3D;(const string&amp; str);&#x2F;&#x2F;重载+&#x3D;操作符
string&amp; operator+&#x3D;(const char* str);&#x2F;&#x2F;重载+&#x3D;操作符
string&amp; operator+&#x3D;(const char c);&#x2F;&#x2F;重载+&#x3D;操作符
string&amp; append(const char *s);&#x2F;&#x2F;把字符串s连接到当前字符串结尾
string&amp; append(const char *s, int n);&#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾
string&amp; append(const string &amp;s);&#x2F;&#x2F;同operator+&#x3D;()
string&amp; append(const string &amp;s, int pos, int n);&#x2F;&#x2F;把字符串s中从pos开始的n个字符连接到当前字符串结尾
	string&amp; append(int n, char c);&#x2F;&#x2F;在当前字符串结尾添加n个字符c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-2-2-5-string查找和替换"><a href="#2-2-2-5-string查找和替换" class="headerlink" title="2.2.2.5 string查找和替换"></a><strong>2.2.2.5 string查找和替换</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int find(const string&amp; str, int pos &#x3D; 0) const; &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找
int find(const char* s, int pos &#x3D; 0) const;  &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找
int find(const char* s, int pos, int n) const;  &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置
int find(const char c, int pos &#x3D; 0) const;  &#x2F;&#x2F;查找字符c第一次出现位置
int rfind(const string&amp; str, int pos &#x3D; npos) const;&#x2F;&#x2F;查找str最后一次位置,从pos开始查找
int rfind(const char* s, int pos &#x3D; npos) const;&#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找
int rfind(const char* s, int pos, int n) const;&#x2F;&#x2F;从pos查找s的前n个字符最后一次位置
int rfind(const char c, int pos &#x3D; 0) const; &#x2F;&#x2F;查找字符c最后一次出现位置
string&amp; replace(int pos, int n, const string&amp; str); &#x2F;&#x2F;替换从pos开始n个字符为字符串str
string&amp; replace(int pos, int n, const char* s); &#x2F;&#x2F;替换从pos开始的n个字符为字符串s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-2-2-6-string比较操作"><a href="#2-2-2-6-string比较操作" class="headerlink" title="2.2.2.6 string比较操作"></a><strong>2.2.2.6 string比较操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
compare函数在&gt;时返回 1，&lt;时返回 -1，&#x3D;&#x3D;时返回 0。
比较区分大小写，比较时参考字典顺序，排越前面的越小。
大写的A比小写的a小。
*&#x2F;
int compare(const string &amp;s) const;&#x2F;&#x2F;与字符串s比较
int compare(const char *s) const;&#x2F;&#x2F;与字符串s比较<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-2-2-7-string子串"><a href="#2-2-2-7-string子串" class="headerlink" title="2.2.2.7 string子串"></a><strong>2.2.2.7 string子串</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string substr(int pos &#x3D; 0, int n &#x3D; npos) const;&#x2F;&#x2F;返回由pos开始的n个字符组成的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="2-2-2-8-string插入和删除操作"><a href="#2-2-2-8-string插入和删除操作" class="headerlink" title="2.2.2.8 string插入和删除操作"></a><strong>2.2.2.8 string插入和删除操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string&amp; insert(int pos, const char* s); &#x2F;&#x2F;插入字符串
string&amp; insert(int pos, const string&amp; str); &#x2F;&#x2F;插入字符串
string&amp; insert(int pos, int n, char c);&#x2F;&#x2F;在指定位置插入n个字符c
string&amp; erase(int pos, int n &#x3D; npos);&#x2F;&#x2F;删除从Pos开始的n个字符 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-3-string课后练习"><a href="#2-2-3-string课后练习" class="headerlink" title="2.2.3 string课后练习"></a><strong>2.2.3 string课后练习</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;用户邮箱地址验证
&#x2F;&#x2F; 1 判断邮箱有效性 是否包含@和. 并且.在@之后
&#x2F;&#x2F; 2 判断用户输入的用户名中是否包含除了小写字母之外字符(ASCII范围97~122)
&#x2F;&#x2F; 3 判断用户输入的邮箱地址是否正确(zhaosi@itcast.cn)

#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;

&#x2F;&#x2F; 1 判断邮箱有效性 是否包含@和.并且.在@之后
bool Check_Valid(string&amp; email)&#123;

	int pos1 &#x3D; email.find(&quot;@&quot;);
	int pos2 &#x3D; email.find(&quot;.&quot;);

	&#x2F;&#x2F;判断@和.是否存在
	if (pos1  &#x3D;&#x3D; -1 || pos2 &#x3D;&#x3D; -1)&#123;
		return false;
	&#125;
	&#x2F;&#x2F;判断@在.之前
	if (pos1 &gt; pos2)&#123;
		return false;
	&#125;

	return true;
&#125;

&#x2F;&#x2F;2 判断用户输入的用户名中是否包含除了小写字母之外字符(ASCII范围97~122)
bool Check_Username(string&amp; email)&#123;
	
	int pos &#x3D; email.find(&quot;@&quot;);
	string username &#x3D; email.substr(0,pos-1);
	for (string::iterator it &#x3D; username.begin(); it !&#x3D; username.end(); it++)&#123;
		if (*it &lt; 97 || *it &gt; 122)&#123;
			return false;
		&#125;
	&#125;

	return true;

&#125;

&#x2F;&#x2F; 3 判断用户输入的邮箱地址是否正确(zhaosi@itcast.cn)
bool Check_EqualtTo(string&amp; email)&#123;
	
	string rightEmail &#x3D; &quot;zhaosi@itcast.cn&quot;;
	if (email.compare(rightEmail) !&#x3D; 0)&#123;
		return false;
	&#125;
	return true;
&#125;

void testEmail()&#123;

	&#x2F;&#x2F;用户邮箱地址验证
	&#x2F;&#x2F; 1 判断邮箱有效性 是否包含@和. 并且.在@之后
	&#x2F;&#x2F; 2 判断用户输入的用户名中是否包含除了小写字母之外字符(ASCII范围97~122)
	&#x2F;&#x2F; 3 判断用户输入的邮箱地址是否正确(zhaosi@itcast.cn)

	string email;
	cout &lt;&lt; &quot;请输入您的邮箱：&quot; &lt;&lt; endl;
	cin &gt;&gt; email;

	bool flag &#x3D; Check_Valid(email);
	if (!flag)&#123;
		cout &lt;&lt; &quot;emain格式不合法!&quot; &lt;&lt; endl;
		return;
	&#125;

	flag &#x3D; Check_Username(email);
	if (!flag)&#123;
		cout &lt;&lt; &quot;用户名中包含除小写字母之外的字母!&quot; &lt;&lt; endl;
		return;
	&#125;

	flag &#x3D; Check_EqualtTo(email);
	if (!flag)&#123;
		cout &lt;&lt; &quot;邮箱地址不正确!&quot; &lt;&lt; endl;
		return;
	&#125;

	cout &lt;&lt; &quot;邮箱输入正确!&quot; &lt;&lt; endl;
&#125;

int main()&#123;

	testEmail();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3-vector容器"><a href="#2-3-vector容器" class="headerlink" title="2.3 vector容器"></a><strong>2.3 vector容器</strong></h3><h4 id="2-3-1-vector特性"><a href="#2-3-1-vector特性" class="headerlink" title="2.3.1 vector特性"></a><strong>2.3.1 vector特性</strong></h4><ul>
<li>vector容器是一个长度动态改变的动态数组，既然也是数组，那么其内存是一段连续的内存，具有数组的随机存取的优点。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDCD.tmp.jpg" alt="img"> </p>
<ul>
<li><p><strong>特性总结:</strong></p>
</li>
<li><p><strong>vector是动态数组，连续内存空间，具有随机存取效率高的优点。</strong></p>
</li>
<li><p><strong>vector是单口容器，在队尾插入和删除元素效率高，在指定位置插入会导致数据元素移动，效率低。</strong></p>
</li>
</ul>
<blockquote>
<p><strong>问：</strong>vector如何实现动态增长?</p>
<p><strong>答: 当vector空间满的时候，再当插入新元素的时候，vector会重新申请一块更大的内存空间，将原空间数据拷贝到新的内存空间，然后释放旧的内存空间，再将新元素插入到新空间中，以此可以看出vector的空间动态增长效率较低。</strong></p>
</blockquote>
<h4 id="2-3-2-vector常用API"><a href="#2-3-2-vector常用API" class="headerlink" title="2.3.2 vector常用API"></a><strong>2.3.2 vector常用API</strong></h4><h5 id="2-3-2-1-vector构造函数"><a href="#2-3-2-1-vector构造函数" class="headerlink" title="2.3.2.1 vector构造函数"></a><strong>2.3.2.1 vector构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;T&gt; v; &#x2F;&#x2F;采用模板实现类实现，默认构造函数
vector(v.begin(), v.end());&#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。
vector(n, elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。
vector(const vector &amp;vec);&#x2F;&#x2F;拷贝构造函数。

&#x2F;&#x2F;例子 使用第二个构造函数 我们可以...
int arr[] &#x3D; &#123;2,3,4,1,9&#125;;
vector&lt;int&gt; v1(arr, arr + sizeof(arr) &#x2F; sizeof(int)); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-3-2-2-vector常用赋值操作"><a href="#2-3-2-2-vector常用赋值操作" class="headerlink" title="2.3.2.2 vector常用赋值操作"></a><strong>2.3.2.2 vector常用赋值操作</strong></h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。
assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。
vector&amp; operator&#x3D;(const vector  &amp;vec);&#x2F;&#x2F;重载等号操作符
swap(vec);&#x2F;&#x2F; 将vec与本身的元素互换。

&#x2F;&#x2F;第一个赋值函数，可以这么写：
int arr[] &#x3D; &#123; 0, 1, 2, 3, 4 &#125;;
assign(arr, arr + 5);&#x2F;&#x2F;使用数组初始化vector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-2-3-vector大小操作"><a href="#2-3-2-3-vector大小操作" class="headerlink" title="2.3.2.3 vector大小操作"></a><strong>2.3.2.3 vector大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的个数
empty();&#x2F;&#x2F;判断容器是否为空
resize(int num);&#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。
resize(int num, elem);&#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。
capacity();&#x2F;&#x2F;容器的容量
reserve(int len);&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>注意: resize 若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li>
</ul>
<blockquote>
<p><strong>问：reserve和resize的区别?</strong></p>
<p><strong>答: reserve是容器预留空间，但在空间内不真正创建元素对象，所以在没有添加新的对象之前，不能引用容器内的元素.</strong></p>
<p><strong>resize是改变容器的大小，且在创建对象，因此，调用这个函数之后，就可以引用容器内的对象了.</strong></p>
<p><strong>巧用reserve增加程序效率？</strong></p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;
int* p &#x3D; NULL;
int count &#x3D; 0;&#x2F;&#x2F; 统计vector容量增长几次？
for (int i &#x3D; 0; i &lt; 100000;i++)&#123;
	v.push_back(i);
	if (p !&#x3D; &amp;v[0])&#123;
		p &#x3D; &amp;v[0];
		count++;
	&#125;
&#125;
cout &lt;&lt; &quot;count:&quot; &lt;&lt; count &lt;&lt; endl; &#x2F;&#x2F;打印出30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我向vector插入了10万个元素，vector一共重新分配内存30次.</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;
v.reserve(100000);
int* p &#x3D; NULL;
int count &#x3D; 0;&#x2F;&#x2F; 统计vector容量增长几次？
for (int i &#x3D; 0; i &lt; 100000;i++)&#123;
	v.push_back(i);
	if (p !&#x3D; &amp;v[0])&#123;
		p &#x3D; &amp;v[0];
		count++;
	&#125;
&#125;
cout &lt;&lt; &quot;count:&quot; &lt;&lt; count &lt;&lt; endl; &#x2F;&#x2F;打印出30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>再次向vector插入了10万个元素，vector一共重新分配内存1次.</p>
</li>
<li><p>当我们知道我们存储的元素大概有多少的时候,我们就可以使用reserve方法，来减少vector重新申请内存-拷贝数据-释放旧空间的次数。</p>
</li>
</ul>
<h5 id="2-3-2-4-vector数据存取操作"><a href="#2-3-2-4-vector数据存取操作" class="headerlink" title="2.3.2.4 vector数据存取操作"></a><strong>2.3.2.4 vector数据存取操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">at(int idx); &#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。
operator[];&#x2F;&#x2F;返回索引idx所指的数据，越界时，运行直接报错
front();&#x2F;&#x2F;返回容器中第一个数据元素
back();&#x2F;&#x2F;返回容器中最后一个数据元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-3-2-5-vector插入和删除操作"><a href="#2-3-2-5-vector插入和删除操作" class="headerlink" title="2.3.2.5 vector插入和删除操作"></a><strong>2.3.2.5 vector插入和删除操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(const_iterator pos, int count,ele);&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele.
push_back(ele); &#x2F;&#x2F;尾部插入元素ele
pop_back();&#x2F;&#x2F;删除最后一个元素
erase(const_iterator start, const_iterator end);&#x2F;&#x2F;删除迭代器从start到end之间的元素
erase(const_iterator pos);&#x2F;&#x2F;删除迭代器指向的元素
clear();&#x2F;&#x2F;删除容器中所有元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>总结: vector是个动态数组，当空间不足的时候插入新元素，vector会重新申请一块更大的内存空间，将旧空间数据拷贝到新空间，然后释放旧空间。vector是单口容器，所以在尾端插入和删除元素效率较高，在指定位置插入，势必会引起数据元素移动，效率较低。</li>
</ul>
<h3 id="2-3-deque容器"><a href="#2-3-deque容器" class="headerlink" title="2.3 deque容器"></a><strong>2.3 deque容器</strong></h3><h4 id="2-3-1-deque特性"><a href="#2-3-1-deque特性" class="headerlink" title="2.3.1 deque特性"></a><strong>2.3.1 deque特性</strong></h4><ul>
<li><p>deque是“double-ended queue”的缩写,和vector一样，deque也支持随机存取。vector是单向开口的连续性空间，deque则是一种双向开口的连续性空间，所谓双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，vector当然也可以在头尾两端进行插入和删除操作，但是头部插入和删除操作效率奇差，无法被接受。</p>
</li>
<li><p>deque和vector的最大差异？</p>
</li>
<li><p>一在于deque允许常数时间内对头端进行元素插入和删除操作。</p>
</li>
<li><p>二在于deque没有容量的概念，因为它是动态的以分段的连续空间组合而成，随时可以增加一段新的空间并链接起来，换句话说，像vector那样“因旧空间不足而重新分配一块更大的空间，然后再复制元素，释放空间”这样的操作不会发生在deque身上，也因此deque没有必要提供所谓的空间保留功能。</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDCE.tmp.jpg" alt="img"> </p>
<p><strong>deque操作示意图</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wpsDDCF.tmp.jpg" alt="img"> </p>
<p><strong>deque原理示意图</strong></p>
<ul>
<li><p><strong>特性总结:</strong></p>
</li>
<li><p><strong>双端插入和删除元素效率较高.</strong></p>
</li>
<li><p><strong>指定位置插入也会导致数据元素移动,降低效率.</strong></p>
</li>
<li><p><strong>可随机存取,效率高.</strong></p>
</li>
</ul>
<h4 id="2-3-2-deque常用API"><a href="#2-3-2-deque常用API" class="headerlink" title="2.3.2 deque常用API"></a><strong>2.3.2 deque常用API</strong></h4><h5 id="2-3-2-1-deque构造函数"><a href="#2-3-2-1-deque构造函数" class="headerlink" title="2.3.2.1 deque构造函数"></a><strong>2.3.2.1 deque构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">deque&lt;T&gt; deqT;&#x2F;&#x2F;默认构造形式
deque(beg, end);&#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。
deque(n, elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。
deque(const deque &amp;deq);&#x2F;&#x2F;拷贝构造函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-3-2-2-deque赋值操作"><a href="#2-3-2-2-deque赋值操作" class="headerlink" title="2.3.2.2 deque赋值操作"></a><strong>2.3.2.2 deque赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。
assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。
deque&amp; operator&#x3D;(const deque &amp;deq); &#x2F;&#x2F;重载等号操作符 
swap(deq);&#x2F;&#x2F; 将deq与本身的元素互换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-2-3-deque大小操作"><a href="#2-3-2-3-deque大小操作" class="headerlink" title="2.3.2.3 deque大小操作"></a><strong>2.3.2.3 deque大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">deque.size();&#x2F;&#x2F;返回容器中元素的个数
deque.empty();&#x2F;&#x2F;判断容器是否为空
deque.resize(num);&#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。
deque.resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置,如果容器变短，则末尾超出容器长度的元素被删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-2-3-deque双端插入和删除操作"><a href="#2-3-2-3-deque双端插入和删除操作" class="headerlink" title="2.3.2.3 deque双端插入和删除操作"></a><strong>2.3.2.3 deque双端插入和删除操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push_back(elem);&#x2F;&#x2F;在容器尾部添加一个数据
push_front(elem);&#x2F;&#x2F;在容器头部插入一个数据
pop_back();&#x2F;&#x2F;删除容器最后一个数据
pop_front();&#x2F;&#x2F;删除容器第一个数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-2-4-deque数据存取"><a href="#2-3-2-4-deque数据存取" class="headerlink" title="2.3.2.4 deque数据存取"></a><strong>2.3.2.4 deque数据存取</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">at(idx);&#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range。
operator[];&#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。
front();&#x2F;&#x2F;返回第一个数据。
back();&#x2F;&#x2F;返回最后一个数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-3-2-5-deque插入操作"><a href="#2-3-2-5-deque插入操作" class="headerlink" title="2.3.2.5 deque插入操作"></a><strong>2.3.2.5 deque插入操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(pos,elem);&#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。
insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。
insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>经验之谈 : deque是分段连续的内存空间，通过中控器维持一种连续内存空间的状态，其实现复杂性要大于vector queue stack等容器，其迭代器的实现也更加复杂，在需要对deque容器元素进行排序的时候，建议先将deque容器中数据数据元素拷贝到vector容器中，对vector进行排序，然后再将排序完成的数据拷贝回deque容器。</li>
</ul>
<h5 id="2-3-2-5-deque删除操作"><a href="#2-3-2-5-deque删除操作" class="headerlink" title="2.3.2.5 deque删除操作"></a><strong>2.3.2.5 deque删除操作</strong></h5><pre class="line-numbers language-\" data-language="\"><code class="language-\">clear();&#x2F;&#x2F;移除容器的所有数据
erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。
erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3-3-deque课后练习"><a href="#2-3-3-deque课后练习" class="headerlink" title="2.3.3 deque课后练习"></a><strong>2.3.3 deque课后练习</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;评委打分案例(sort算法排序)
&#x2F;&#x2F;创建5个选手(姓名，得分)，10个评委对5个选手进行打分
&#x2F;&#x2F;得分规则：去除最高分，去除最低分，取出平均分
&#x2F;&#x2F;按得分对5名选手进行排名

#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;deque&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
using namespace std;

&#x2F;&#x2F;选手类
class Player&#123;
public:
	string name;
	int score;
&#125;;

&#x2F;&#x2F;创建选手
void Create_Player(vector&lt;Player&gt;&amp; plist)&#123;

	string randseed &#x3D; &quot;ABCDE&quot;;
	for (int i &#x3D; 0; i &lt; 5;i++)&#123;
		Player player;
		player.name &#x3D; &quot;选手&quot;;
		player.name +&#x3D; randseed[i];
		player.score &#x3D; 0;

		plist.push_back(player);
	&#125;
&#125;


bool myconpare(int v1,int v2)&#123;
	return v1 &lt; v2;
&#125;
&#x2F;&#x2F;对选手进行打分
&#x2F;&#x2F;打分规则： 去除最高分 去除最低分 取平均分
void Set_Player_Score(vector&lt;Player&gt;&amp; plist)&#123;

	for (vector&lt;Player&gt;::iterator it &#x3D; plist.begin(); it !&#x3D; plist.end();it++)&#123;
		
		deque&lt;int&gt; dscore; &#x2F;&#x2F;保存评委的10次打分
		for (int i &#x3D; 0; i &lt; 10;i++)&#123;
			int score &#x3D; 50 + rand() % 50;
			dscore.push_back(score);
		&#125;
		&#x2F;&#x2F;排序从大到小或者从小到大 sort算法
		sort(dscore.begin(), dscore.end(), myconpare);
		&#x2F;&#x2F;去除最低分 去除最高分
		dscore.pop_front();
		dscore.pop_back();
		&#x2F;&#x2F;求平均分
		int totalscore &#x3D; 0;
		for (deque&lt;int&gt;::iterator dit &#x3D; dscore.begin(); dit !&#x3D; dscore.end();dit++)&#123;
			totalscore +&#x3D; *dit;
		&#125;
		int scoreavg &#x3D; totalscore &#x2F; dscore.size();
		(*it).score &#x3D; scoreavg;
	&#125;

&#125;

bool conparePlayer(Player player1, Player player2)&#123;
	return player1.score &gt; player2.score;
&#125;
&#x2F;&#x2F;按照得分排名
void Show_Player_List(vector&lt;Player&gt;&amp; plist)&#123;

	sort(plist.begin(), plist.end(), conparePlayer);
	cout &lt;&lt; &quot;选手得分排名:&quot; &lt;&lt; endl;
	for (vector&lt;Player&gt;::iterator it &#x3D; plist.begin(); it !&#x3D; plist.end();it++)&#123;
		cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; it-&gt;name &lt;&lt; &quot; 得分:&quot; &lt;&lt; it-&gt;score &lt;&lt; endl;
	&#125;

&#125;

void test()&#123;

	vector&lt;Player&gt; plist;
	&#x2F;&#x2F;创建5名选手
	Create_Player(plist);
	&#x2F;&#x2F;对5名选手进行打分
	Set_Player_Score(plist);
	&#x2F;&#x2F;按照得分排名
	Show_Player_List(plist);

&#125;
int main()&#123;

	test();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-4-stack容器"><a href="#2-4-stack容器" class="headerlink" title="2.4 stack容器"></a><strong>2.4 stack容器</strong></h3><h4 id="2-4-1-stack特性"><a href="#2-4-1-stack特性" class="headerlink" title="2.4.1 stack特性"></a><strong>2.4.1 stack特性</strong></h4><ul>
<li>stack是一种先进后出(first in last out,FILO)的数据结构，它只有一个出口，stack只允许在栈顶新增元素，移除元素，获得顶端元素，但是除了顶端之外，其他地方不允许存取元素，只有栈顶元素可以被外界使用，也就是说stack不具有遍历行为，没有迭代器。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDE0.tmp.jpg" alt="img"> </p>
<p><strong>特性总结:</strong></p>
<p><strong>栈不能遍历,不支持随机存取，只能通过top从栈顶获取和删除元素.</strong></p>
<p>​    </p>
<h4 id="2-4-2-stack常用API"><a href="#2-4-2-stack常用API" class="headerlink" title="2.4.2 stack常用API"></a><strong>2.4.2 stack常用API</strong></h4><h5 id="2-4-2-1-stack构造函数"><a href="#2-4-2-1-stack构造函数" class="headerlink" title="2.4.2.1 stack构造函数"></a><strong>2.4.2.1 stack构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">stack&lt;T&gt; stkT;&#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式： 
stack(const stack &amp;stk);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-4-2-2-stack赋值操作"><a href="#2-4-2-2-stack赋值操作" class="headerlink" title="2.4.2.2 stack赋值操作"></a><strong>2.4.2.2 stack赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">stack&amp; operator&#x3D;(const stack &amp;stk);&#x2F;&#x2F;重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="2-4-2-3-stack数据存取操作"><a href="#2-4-2-3-stack数据存取操作" class="headerlink" title="2.4.2.3 stack数据存取操作"></a><strong>2.4.2.3 stack数据存取操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push(elem);&#x2F;&#x2F;向栈顶添加元素
pop();&#x2F;&#x2F;从栈顶移除第一个元素
top();&#x2F;&#x2F;返回栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="2-4-2-3-stack大小操作"><a href="#2-4-2-3-stack大小操作" class="headerlink" title="2.4.2.3 stack大小操作"></a><strong>2.4.2.3 stack大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">empty();&#x2F;&#x2F;判断堆栈是否为空
size();&#x2F;&#x2F;返回堆栈的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="2-5-queue容器"><a href="#2-5-queue容器" class="headerlink" title="2.5 queue容器"></a><strong>2.5 queue容器</strong></h3><h4 id="2-5-1-queue特性"><a href="#2-5-1-queue特性" class="headerlink" title="2.5.1 queue特性"></a><strong>2.5.1 queue特性</strong></h4><ul>
<li>queue是一种先进先出(first in first out, FIFO)的数据类型,他有两个口，数据元素只能从一个口进，从另一个口出.队列只允许从队尾加入元素，队头删除元素，必须符合先进先出的原则，queue和stack一样不具有遍历行为。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDF0.tmp.jpg" alt="img"> </p>
<p><strong>特性总结：</strong></p>
<ul>
<li><p> 必须从一个口数据元素入队，另一个口数据元素出队。</p>
</li>
<li><p> 不能随机存取，不支持遍历</p>
</li>
</ul>
<h4 id="2-5-2-queue常用API"><a href="#2-5-2-queue常用API" class="headerlink" title="2.5.2 queue常用API"></a><strong>2.5.2 queue常用API</strong></h4><h5 id="2-5-2-1-queue构造函数"><a href="#2-5-2-1-queue构造函数" class="headerlink" title="2.5.2.1 queue构造函数"></a><strong>2.5.2.1 queue构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">queue&lt;T&gt; queT;&#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式：
queue(const queue &amp;que);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-5-2-2-queue存取、插入和删除操作"><a href="#2-5-2-2-queue存取、插入和删除操作" class="headerlink" title="2.5.2.2 queue存取、插入和删除操作"></a><strong>2.5.2.2 queue存取、插入和删除操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push(elem);&#x2F;&#x2F;往队尾添加元素
pop();&#x2F;&#x2F;从队头移除第一个元素
back();&#x2F;&#x2F;返回最后一个元素
front();&#x2F;&#x2F;返回第一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-5-2-3-queue赋值操作"><a href="#2-5-2-3-queue赋值操作" class="headerlink" title="2.5.2.3 queue赋值操作"></a><strong>2.5.2.3 queue赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">queue&amp; operator&#x3D;(const queue &amp;que);&#x2F;&#x2F;重载等号操作符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="2-5-2-3-queue大小操作"><a href="#2-5-2-3-queue大小操作" class="headerlink" title="2.5.2.3 queue大小操作"></a><strong>2.5.2.3 queue大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">empty();&#x2F;&#x2F;判断队列是否为空
size();&#x2F;&#x2F;返回队列的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>课后思考：</strong></p>
<p><strong>队列和栈的共同点是什么？</strong></p>
<p><strong>A. 都是先进先出 B.都是先进后出 C.只允许在端点出删除和插入操作 D.没有共同点</strong></p>
<h3 id="2-6-list容器"><a href="#2-6-list容器" class="headerlink" title="2.6 list容器"></a><strong>2.6 list容器</strong></h3><h4 id="2-6-1-list特性"><a href="#2-6-1-list特性" class="headerlink" title="2.6.1 list特性"></a><strong>2.6.1 list特性</strong></h4><ul>
<li>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDDF1.tmp.jpg" alt="img"> </p>
<p><strong>list示意图</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wpsDDF2.tmp.jpg" alt="img"> </p>
<p><strong>list操作示意图</strong></p>
<p><strong>特性总结:</strong></p>
<ul>
<li>采用动态存储分配，不会造成内存浪费和溢出</li>
<li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素</li>
<li>链表灵活，但是空间和时间额外耗费较大</li>
</ul>
<h4 id="2-6-2-list-常用API"><a href="#2-6-2-list-常用API" class="headerlink" title="2.6.2 list 常用API"></a><strong>2.6.2 list 常用API</strong></h4><h5 id="2-6-2-1-list构造函数"><a href="#2-6-2-1-list构造函数" class="headerlink" title="2.6.2.1 list构造函数"></a><strong>2.6.2.1 list构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">list&lt;T&gt; lstT;&#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式：
list(beg,end);&#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。
list(n,elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。
list(const list &amp;lst);&#x2F;&#x2F;拷贝构造函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-6-2-2-list数据元素插入和删除操作"><a href="#2-6-2-2-list数据元素插入和删除操作" class="headerlink" title="2.6.2.2 list数据元素插入和删除操作"></a><strong>2.6.2.2 list数据元素插入和删除操作</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素
pop_back();&#x2F;&#x2F;删除容器中最后一个元素
push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素
pop_front();&#x2F;&#x2F;从容器开头移除第一个元素
insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。
insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。
insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。
clear();&#x2F;&#x2F;移除容器的所有数据
erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。
erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。
remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-6-2-3-list大小操作"><a href="#2-6-2-3-list大小操作" class="headerlink" title="2.6.2.3 list大小操作"></a><strong>2.6.2.3 list大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的个数
empty();&#x2F;&#x2F;判断容器是否为空
resize(num);&#x2F;&#x2F;重新指定容器的长度为num，
若容器变长，则以默认值填充新位置。
如果容器变短，则末尾超出容器长度的元素被删除。
resize(num, elem);&#x2F;&#x2F;重新指定容器的长度为num，
若容器变长，则以elem值填充新位置。
如果容器变短，则末尾超出容器长度的元素被删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="2-6-2-4-list赋值操作"><a href="#2-6-2-4-list赋值操作" class="headerlink" title="2.6.2.4 list赋值操作"></a><strong>2.6.2.4 list赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。
assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。
list&amp; operator&#x3D;(const list &amp;lst);&#x2F;&#x2F;重载等号操作符
swap(lst);&#x2F;&#x2F;将lst与本身的元素互换。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-6-2-5-list数据的存取"><a href="#2-6-2-5-list数据的存取" class="headerlink" title="2.6.2.5 list数据的存取"></a><strong>2.6.2.5 list数据的存取</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">front();&#x2F;&#x2F;返回第一个元素。
back();&#x2F;&#x2F;返回最后一个元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h5 id="2-6-2-5-list反转排列排序"><a href="#2-6-2-5-list反转排列排序" class="headerlink" title="2.6.2.5 list反转排列排序"></a><strong>2.6.2.5 list反转排列排序</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">reverse();&#x2F;&#x2F;反转链表，比如lst包含1,3,5元素，运行此方法后，lst就包含5,3,1元素。
sort(); &#x2F;&#x2F;list排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>课后思考:</strong> </p>
<ul>
<li>链表和数组有什么区别？</li>
<li>数组必须事先定义固定的长度（元素个数），不能适应数据动态地增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费。</li>
<li>链表动态地进行存储分配，可以适应数据动态地增减的情况，且可以方便地插入、删除数据元素。（数组中插入、删除数据项时，需要移动其它数据项）</li>
</ul>
<h3 id="2-7-set-multiset容器"><a href="#2-7-set-multiset容器" class="headerlink" title="2.7 set/multiset容器"></a><strong>2.7 set/multiset容器</strong></h3><h3 id="2-7-1-set-multis4et特性"><a href="#2-7-1-set-multis4et特性" class="headerlink" title="2.7.1 set/multis4et特性"></a><strong>2.7.1 set/multis4et特性</strong></h3><ul>
<li>set/multiset的特性是所有元素会根据元素的值自动进行排序。set是以RB-tree（红黑树，平衡二叉树的一种）为底层机制，其查找效率非常好。set容器中不允许重复元素,multiset允许重复元素。</li>
</ul>
<ul>
<li>二叉树就是任何节点最多只允许有两个字节点。分别是左子结点和右子节点。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE03.tmp.png" alt="img"></p>
<p><strong>二叉树示意图</strong></p>
<ul>
<li>二叉搜索树，是指二叉树中的节点按照一定的规则进行排序，使得对二叉树中元素访问更加高效。二叉搜索树的放置规则是：任何节点的元素值一定大于其左子树中的每一个节点的元素值，并且小于其右子树的值。因此从根节点一直向左走，一直到无路可走，即得到最小值，一直向右走，直至无路可走，可得到最大值。那么在二叉搜索树中找到最大元素和最小元素是非常简单的事情。下图为二叉搜索树：</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE04.tmp.jpg" alt="img"></p>
<ul>
<li>上面我们介绍了二叉搜索树，那么当一个二叉搜索树的左子树和右子树不平衡的时候，那么搜索依据上图表示，搜索9所花费的时间要比搜索17所花费的时间要多，由于我们的输入或者经过我们插入或者删除操作，二叉树失去平衡，造成搜索效率降低。</li>
</ul>
<ul>
<li>所以我们有了一个平衡二叉树的概念，所谓的平衡不是指的完全平衡。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE05.tmp.jpg" alt="img"> </p>
<ul>
<li>RB-tree(红黑树)为二叉树的一种。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE15.tmp.jpg" alt="img"> </p>
<ul>
<li>问：我们可以通过set的迭代器改变元素的值吗？</li>
</ul>
<ul>
<li>答: 不行，因为set集合是根据元素值进行排序，关系到set的排序规则，如果任意改变set的元素值，会严重破坏set组织。</li>
</ul>
<h4 id="2-7-2set-常用API"><a href="#2-7-2set-常用API" class="headerlink" title="2.7.2set 常用API"></a><strong>2.7.2set 常用API</strong></h4><h5 id="2-7-2-1-set构造函数"><a href="#2-7-2-1-set构造函数" class="headerlink" title="2.7.2.1 set构造函数"></a><strong>2.7.2.1 set构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">set&lt;T&gt; st;&#x2F;&#x2F;set默认构造函数：
mulitset&lt;T&gt; mst; &#x2F;&#x2F;multiset默认构造函数: 
set(const set &amp;st);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h5 id="2-7-2-2-set赋值操作"><a href="#2-7-2-2-set赋值操作" class="headerlink" title="2.7.2.2 set赋值操作"></a><strong>2.7.2.2 set赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">set&amp; operator&#x3D;(const set &amp;st);&#x2F;&#x2F;重载等号操作符
swap(st);&#x2F;&#x2F;交换两个集合容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-7-2-2-set大小操作"><a href="#2-7-2-2-set大小操作" class="headerlink" title="2.7.2.2 set大小操作"></a><strong>2.7.2.2 set大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的数目
empty();&#x2F;&#x2F;判断容器是否为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h5 id="2-7-2-2-set插入和删除操作"><a href="#2-7-2-2-set插入和删除操作" class="headerlink" title="2.7.2.2 set插入和删除操作"></a><strong>2.7.2.2 set插入和删除操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(elem);&#x2F;&#x2F;在容器中插入元素。
clear();&#x2F;&#x2F;清除所有元素
erase(pos);&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。
erase(beg, end);&#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。
erase(elem);&#x2F;&#x2F;删除容器中值为elem的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-7-2-3-set查找操作"><a href="#2-7-2-3-set查找操作" class="headerlink" title="2.7.2.3 set查找操作"></a><strong>2.7.2.3 set查找操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find(key);&#x2F;&#x2F;查找键key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回map.end();
lower_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;&#x3D;keyElem元素的迭代器。
upper_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。
equal_range(keyElem);&#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>问题:</strong> 我们发现打印出来set集合中的元素是从小到大的升序排列，那么我们如何指定排序为降序呢？这个问题呢？我们需要了解函数对象的概念。</li>
</ul>
<h3 id="2-8-map-multimap容器"><a href="#2-8-map-multimap容器" class="headerlink" title="2.8 map/multimap容器"></a><strong>2.8</strong> <strong>map/multimap容器</strong></h3><h4 id="2-8-1-map-multimap特性"><a href="#2-8-1-map-multimap特性" class="headerlink" title="2.8.1 map/multimap特性"></a><strong>2.8.1 map/multimap特性</strong></h4><ul>
<li>map相对于set区别，map具有键值和实值，所有元素根据键值自动排序。pair的第一元素被称为键值，第二元素被称为实值。map也是以红黑树为底层实现机制。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE16.tmp.jpg" alt="img"> </p>
<p><strong>set容器示意图</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wpsDE17.tmp.jpg" alt="img"> </p>
<p><strong>multiset容器示意图</strong></p>
<ul>
<li>问题 : 我们通过map的迭代器可以修改map的键值吗？</li>
</ul>
<ul>
<li>答案是否定的，键值关系到容器内元素的排列规则，任意改变键值会破坏容器的排列规则，但是你可以改变实值。</li>
</ul>
<ul>
<li>map和multimap区别在于，map不允许相同key值存在，multimap则允许相同key值存在。</li>
</ul>
<h4 id="2-8-2-对组"><a href="#2-8-2-对组" class="headerlink" title="2.8.2 对组"></a><strong>2.8.2 对组</strong></h4><ul>
<li>对组(pair)将一对值组合成一个值，这一对值可以具有不同的数据类型，两个值可以分别用pair的两个公有函数first和second访问。</li>
</ul>
<ul>
<li>类模板：template &lt;class T1, class T2&gt; struct pair.</li>
</ul>
<ul>
<li>如何创建对组?</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;第一种方法创建一个对组
pair&lt;string, int&gt; pair1(string(&quot;name&quot;), 20);
cout &lt;&lt; pair1.first &lt;&lt; endl; &#x2F;&#x2F;访问pair第一个值
cout &lt;&lt; pair1.second &lt;&lt; endl;&#x2F;&#x2F;访问pair第二个值
&#x2F;&#x2F;第二种
pair&lt;string, int&gt; pair2 &#x3D; make_pair(&quot;name&quot;, 30);
cout &lt;&lt; pair2.first &lt;&lt; endl;
cout &lt;&lt; pair2.second &lt;&lt; endl;
&#x2F;&#x2F;pair&#x3D;赋值
pair&lt;string, int&gt; pair3 &#x3D; pair2;
cout &lt;&lt; pair3.first &lt;&lt; endl;
cout &lt;&lt; pair3.second &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-8-3-map常用API"><a href="#2-8-3-map常用API" class="headerlink" title="2.8.3 map常用API"></a><strong>2.8.3 map常用API</strong></h4><h5 id="2-8-3-1-map构造函数"><a href="#2-8-3-1-map构造函数" class="headerlink" title="2.8.3.1 map构造函数"></a><strong>2.8.3.1 map构造函数</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map&lt;T1, T2&gt; mapTT;&#x2F;&#x2F;map默认构造函数: 
map(const map &amp;mp);&#x2F;&#x2F;拷贝构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-8-3-2-map赋值操作"><a href="#2-8-3-2-map赋值操作" class="headerlink" title="2.8.3.2 map赋值操作"></a><strong>2.8.3.2 map赋值操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map&amp; operator&#x3D;(const map &amp;mp);&#x2F;&#x2F;重载等号操作符
swap(mp);&#x2F;&#x2F;交换两个集合容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="2-8-3-3-map大小操作"><a href="#2-8-3-3-map大小操作" class="headerlink" title="2.8.3.3 map大小操作"></a><strong>2.8.3.3 map大小操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">size();&#x2F;&#x2F;返回容器中元素的数目
empty();&#x2F;&#x2F;判断容器是否为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h5 id="2-8-3-4-map插入数据元素操作"><a href="#2-8-3-4-map插入数据元素操作" class="headerlink" title="2.8.3.4 map插入数据元素操作"></a><strong>2.8.3.4 map插入数据元素操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">map.insert(...); &#x2F;&#x2F;往容器插入元素，返回pair&lt;iterator,bool&gt;
map&lt;int, string&gt; mapStu;
&#x2F;&#x2F; 第一种 通过pair的方式插入对象
mapStu.insert(pair&lt;int, string&gt;(3, &quot;小张&quot;));
&#x2F;&#x2F; 第二种 通过pair的方式插入对象
mapStu.inset(make_pair(-1, &quot;校长&quot;));
&#x2F;&#x2F; 第三种 通过value_type的方式插入对象
mapStu.insert(map&lt;int, string&gt;::value_type(1, &quot;小李&quot;));
&#x2F;&#x2F; 第四种 通过数组的方式插入值
mapStu[3] &#x3D; &quot;小刘&quot;;
mapStu[5] &#x3D; &quot;小王&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意:</strong></p>
<ul>
<li>前三种方法，采用的是insert()方法，该方法返回值为pair&lt;iterator,bool&gt;</li>
<li>第四种方法非常直观，但存在一个性能的问题。插入3时，先在mapStu中查找主键为3的项，若没发现，则将一个键为3，值为初始化值的对组插入到mapStu中，然后再将值修改成“小刘”。若发现已存在3这个键，则修改这个键对应的value</li>
<li>string strName = mapStu[2];  //取操作或插入操作</li>
<li>只有当mapStu存在2这个键时才是正确的取操作，否则会自动插入一个实例，    键为2，值为初始化值。</li>
</ul>
<h5 id="2-8-3-5-map删除操作"><a href="#2-8-3-5-map删除操作" class="headerlink" title="2.8.3.5 map删除操作"></a><strong>2.8.3.5 map删除操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">clear();&#x2F;&#x2F;删除所有元素
erase(pos);&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。
erase(beg,end);&#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。
erase(keyElem);&#x2F;&#x2F;删除容器中key为keyElem的对组。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="2-8-3-5-map查找操作"><a href="#2-8-3-5-map查找操作" class="headerlink" title="2.8.3.5 map查找操作"></a><strong>2.8.3.5 map查找操作</strong></h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">find(key);&#x2F;&#x2F;查找键key是否存在,若存在，返回该键的元素的迭代器；&#x2F;若不存在，返回map.end();
count(keyElem);&#x2F;&#x2F;返回容器中key为keyElem的对组个数。对map来说，要么是0，要么是1。对multimap来说，值可能大于1。
lower_bound(keyElem);&#x2F;&#x2F;返回第一个key&lt;&#x3D;keyElem元素的迭代器。
upper_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。
equal_range(keyElem);&#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-8-4-multimap案例操练"><a href="#2-8-4-multimap案例操练" class="headerlink" title="2.8.4 multimap案例操练"></a><strong>2.8.4 multimap案例操练</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;map&gt;
#include&lt;string&gt;
#include&lt;vector&gt;
using namespace std;

&#x2F;&#x2F;multimap 案例
&#x2F;&#x2F;公司今天招聘了 5 个员工，5 名员工进入公司之后，需要指派员工在那个部门工作
&#x2F;&#x2F;人员信息有: 姓名 年龄 电话 工资等组成
&#x2F;&#x2F;通过 Multimap 进行信息的插入 保存 显示
&#x2F;&#x2F;分部门显示员工信息 显示全部员工信息


#define SALE_DEPATMENT 1 &#x2F;&#x2F;销售部门
#define DEVELOP_DEPATMENT 2 &#x2F;&#x2F;研发部门
#define FINACIAL_DEPATMENT 3 &#x2F;&#x2F;财务部门
#define ALL_DEPATMENT 4 &#x2F;&#x2F;所有部门

&#x2F;&#x2F;员工类
class person&#123;
public:
	string name; &#x2F;&#x2F;员工姓名
	int age; &#x2F;&#x2F;员工年龄
	double salary; &#x2F;&#x2F;员工工资
	string tele; &#x2F;&#x2F;员工电话
&#125;;

&#x2F;&#x2F;创建5个员工
void CreatePerson(vector&lt;person&gt;&amp; vlist)&#123;

	string seed &#x3D; &quot;ABCDE&quot;;
	for (int i &#x3D; 0; i &lt; 5;i++)&#123;
		person p;
		p.name &#x3D; &quot;员工&quot;;
		p.name +&#x3D; seed[i];
		p.age &#x3D; rand() % 30 + 20;
		p.salary &#x3D; rand() % 20000 + 10000;
		p.tele &#x3D; &quot;010-8888888&quot;;
		vlist.push_back(p);
	&#125;
	
&#125;

&#x2F;&#x2F;5名员工分配到不同的部门
void PersonByGroup(vector&lt;person&gt;&amp; vlist, multimap&lt;int, person&gt;&amp; plist)&#123;


	int operate &#x3D; -1; &#x2F;&#x2F;用户的操作

	for (vector&lt;person&gt;::iterator it &#x3D; vlist.begin(); it !&#x3D; vlist.end();it++)&#123;
		
		cout &lt;&lt; &quot;当前员工信息:&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; it-&gt;age &lt;&lt; &quot; 工资:&quot; &lt;&lt; it-&gt;salary &lt;&lt; &quot; 电话：&quot; &lt;&lt; it-&gt;tele &lt;&lt; endl;
		cout &lt;&lt; &quot;请对该员工进行部门分配(1 销售部门, 2 研发部门, 3 财务部门):&quot; &lt;&lt; endl;
		scanf(&quot;%d&quot;, &amp;operate);	
		
		while (true)&#123;
			
			if (operate &#x3D;&#x3D; SALE_DEPATMENT)&#123;  &#x2F;&#x2F;将该员工加入到销售部门
				plist.insert(make_pair(SALE_DEPATMENT, *it));
				break;
			&#125;
			else if (operate &#x3D;&#x3D; DEVELOP_DEPATMENT)&#123;
				plist.insert(make_pair(DEVELOP_DEPATMENT, *it));
				break;
			&#125;
			else if (operate &#x3D;&#x3D; FINACIAL_DEPATMENT)&#123;
				plist.insert(make_pair(FINACIAL_DEPATMENT, *it));
				break;
			&#125;else&#123;
				cout &lt;&lt; &quot;您的输入有误，请重新输入(1 销售部门, 2 研发部门, 3 财务部门):&quot; &lt;&lt; endl;
				scanf(&quot;%d&quot;, &amp;operate);
			&#125;
		
		&#125;

	&#125;
	cout &lt;&lt; &quot;员工部门分配完毕!&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;***********************************************************&quot; &lt;&lt; endl;

&#125;

&#x2F;&#x2F;打印员工信息
void printList(multimap&lt;int, person&gt;&amp; plist, int myoperate)&#123;

	if (myoperate &#x3D;&#x3D; ALL_DEPATMENT)&#123;	
		for (multimap&lt;int, person&gt;::iterator it &#x3D; plist.begin(); it !&#x3D; plist.end(); it++)&#123;
			cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;second.name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; it-&gt;second.age &lt;&lt; &quot; 工资:&quot; &lt;&lt; it-&gt;second.salary &lt;&lt; &quot; 电话：&quot; &lt;&lt; it-&gt;second.tele &lt;&lt; endl;
		&#125;
		return;
	&#125;

	multimap&lt;int, person&gt;::iterator it &#x3D; plist.find(myoperate);
	int depatCount &#x3D; plist.count(myoperate);
	int num &#x3D; 0;
	if (it !&#x3D; plist.end())&#123;
		while (it !&#x3D; plist.end() &amp;&amp; num &lt; depatCount)&#123;
			cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;second.name &lt;&lt; &quot; 年龄:&quot; &lt;&lt; it-&gt;second.age &lt;&lt; &quot; 工资:&quot; &lt;&lt; it-&gt;second.salary &lt;&lt; &quot; 电话：&quot; &lt;&lt; it-&gt;second.tele &lt;&lt; endl;
			it++;
			num++;
		&#125;
	&#125;
&#125;

&#x2F;&#x2F;根据用户操作显示不同部门的人员列表
void ShowPersonList(multimap&lt;int, person&gt;&amp; plist, int myoperate)&#123;

	switch (myoperate)
	&#123;
	case SALE_DEPATMENT:
		printList(plist, SALE_DEPATMENT);
		break;
	case DEVELOP_DEPATMENT:
		printList(plist, DEVELOP_DEPATMENT);
		break;
	case FINACIAL_DEPATMENT:
		printList(plist, FINACIAL_DEPATMENT);
		break;
	case ALL_DEPATMENT:
		printList(plist, ALL_DEPATMENT);
		break;
	&#125;
&#125;

&#x2F;&#x2F;用户操作菜单
void PersonMenue(multimap&lt;int, person&gt;&amp; plist)&#123;
	
	int flag &#x3D; -1;
	int isexit &#x3D; 0;
	while (true)&#123;
		cout &lt;&lt; &quot;请输入您的操作((1 销售部门, 2 研发部门, 3 财务部门, 4 所有部门, 0退出)：&quot; &lt;&lt; endl;
		scanf(&quot;%d&quot;,&amp;flag);

		switch (flag)
		&#123;
			case SALE_DEPATMENT:
				ShowPersonList(plist, SALE_DEPATMENT);
				break;
			case DEVELOP_DEPATMENT:
				ShowPersonList(plist, DEVELOP_DEPATMENT);
				break;
			case FINACIAL_DEPATMENT:
				ShowPersonList(plist, FINACIAL_DEPATMENT);
				break;
			case ALL_DEPATMENT:
				ShowPersonList(plist, ALL_DEPATMENT);
				break;
			case 0:
				isexit &#x3D; 1;
				break;
			default:
				cout &lt;&lt; &quot;您的输入有误，请重新输入!&quot; &lt;&lt; endl;
				break;
		&#125;

		if (isexit &#x3D;&#x3D; 1)&#123;
			break;
		&#125;
	&#125;

&#125;



int main()&#123;

	vector&lt;person&gt;  vlist; &#x2F;&#x2F;创建的5个员工 未分组
	multimap&lt;int, person&gt; plist; &#x2F;&#x2F;保存分组后员工信息

	&#x2F;&#x2F;创建5个员工
	CreatePerson(vlist);
	&#x2F;&#x2F;5名员工分配到不同的部门
	PersonByGroup(vlist, plist);
	&#x2F;&#x2F;根据用户输入显示不同部门员工信息列表 或者 显示全部员工的信息列表
	PersonMenue(plist);
	
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-9-STL容器共性机制"><a href="#2-9-STL容器共性机制" class="headerlink" title="2.9 STL容器共性机制"></a><strong>2.9 STL容器共性机制</strong></h3><ul>
<li><p>STL容器所提供的都是值(value)寓意，而非引用(reference)寓意，也就是说当我们给容器中插入元素的时候，容器内部实施了拷贝动作，将我们要插入的元素再另行拷贝一份放入到容器中，而不是将原数据元素直接放进容器中，也就是说我们提供的元素必须能够被拷贝。</p>
</li>
<li><p>除了queue和stack之外，每个容器都提供可返回迭代器的函数，运用返回的迭代器就可以访问元素。</p>
</li>
<li><p>通常STL不会抛出异常，需要使用者传入正确参数。</p>
</li>
<li><p>每个容器都提供了一个默认的构造函数和默认的拷贝构造函数。</p>
</li>
<li><p>大小相关的构造方法: 1 size()返回容器中元素的个数 2 empty()判断容器是否为空</p>
</li>
<li><p>那么当我们在向容器插入元素的时候，需要考虑一种情况，代码：</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;

class myclass&#123;
public:
	myclass(char* data)&#123;
		int len &#x3D; strlen(data) + 1; &#x2F;&#x2F;计算传进来的字符串长度
		this-&gt;data &#x3D; new char[len];  &#x2F;&#x2F;在堆区分配了len字节内存
		strcpy(this-&gt;data, data); &#x2F;&#x2F;将数据拷贝到我们在堆分配的内存中
	&#125;
	&#x2F;&#x2F;既然我们在堆区分配了内存，需要在析构函数中释放内存
	~myclass()&#123;
		delete[] this-&gt;data;
		this-&gt;data &#x3D; NULL;
	&#125;
private:
	char* data;
&#125;;

void test_deep_copy()&#123;
	char* data &#x3D; &quot;abcd&quot;;
	myclass mc(data); &#x2F;&#x2F;创建myclass的实例 并用char*字符串data初始化对象

	vector&lt;myclass&gt; v;&#x2F;&#x2F;创建vector容器
	v.push_back(mc); &#x2F;&#x2F;将mc实例插入到vector容器尾部
&#125;

int main()&#123;
	test_deep_copy(); &#x2F;&#x2F;调用测试函数
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>那么以上代码会发生什么问题呢？我们在函数test_deep_copy()中创建了一个myclass对象，vector对象，这两个对象在函数test_deep_copy()执行完毕之后，会调用自身的析构函数，我们开题说了，STL容器都是值引用，再向容器中加入元素的时候，实际上是对元数据进行了一份拷贝，将拷贝的数据放入到容器中，如下图：</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE28.tmp.jpg" alt="img"></p>
<ul>
<li>由于我们没有提供拷贝构造函数,没有重载=操作符，vector对我们的mc对象进行的简单的浅拷贝，将拷贝的对象插入到容器中，导致我们的mc对象的data指针和容器中mc对象的拷贝对象中的data指针都指向了我们在堆区分配的内存，当函数结束，两个对象都调用了析构函数，先调用析构函数的对象成功释放了堆区内存，后调用析构函数的对象一释放，程序挂掉了。</li>
</ul>
<ul>
<li>原因在于两个指针指向了同一块堆区内存，这样会导致不可预知的结果，函数结束其中一个调用析构函数，销毁了data指向的内存空间，而另一个对象析构的时候就会挂掉。</li>
</ul>
<ul>
<li>问题的解决办法就是，给我们的对象提供一个拷贝构造函数，并且重载=操作符,两个指针分别指向自己的那一块内存，互不影响。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsDE39.tmp.jpg" alt="img">  </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;

class myclass&#123;
public:
	myclass(char* data)&#123;
		int len &#x3D; strlen(data) + 1; &#x2F;&#x2F;计算传进来的字符串长度
		this-&gt;data &#x3D; new char[len];  &#x2F;&#x2F;在堆区分配了len字节内存
		strcpy(this-&gt;data, data); &#x2F;&#x2F;将数据拷贝到我们在堆分配的内存中
	&#125;
	&#x2F;&#x2F;增加拷贝构造函数
	myclass(const myclass&amp; mc)&#123;
		int len &#x3D; strlen(mc.data) + 1;
		this-&gt;data &#x3D; new char[len];
		strcpy(this-&gt;data, mc.data);
	&#125;
	&#x2F;&#x2F;重载operator&#x3D;操作符
	myclass&amp; operator&#x3D;(const myclass&amp; mc)&#123;
		int len &#x3D; strlen(mc.data) + 1;
		this-&gt;data &#x3D; new char[len];
		strcpy(this-&gt;data, mc.data);
		return *this;
	&#125;
	&#x2F;&#x2F;既然我们在堆区分配了内存，需要在析构函数中释放内存
	~myclass()&#123;
		if (NULL !&#x3D; this-&gt;data)&#123;
			delete[] this-&gt;data;
			this-&gt;data &#x3D; NULL;
		&#125;
	&#125;
private:
	char* data;
&#125;;

void test_deep_copy()&#123;
	char* data &#x3D; “abcd”;
	myclass mc(data); &#x2F;&#x2F;创建myclass的实例 并用char*字符串data初始化对象

	vector&lt;myclass&gt; v;&#x2F;&#x2F;创建vector容器
	v.push_back(mc); &#x2F;&#x2F;将mc实例插入到vector容器尾部

&#125;

int main()&#123;
	test_deep_copy(); &#x2F;&#x2F;调用测试函数
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="2-10-STL容器使用时机"><a href="#2-10-STL容器使用时机" class="headerlink" title="2.10 STL容器使用时机"></a><strong>2.10 STL容器使用时机</strong></h3><table>
<thead>
<tr>
<th></th>
<th>vector</th>
<th>deque</th>
<th>list</th>
<th>set</th>
<th>multiset</th>
<th>map</th>
<th>multimap</th>
</tr>
</thead>
<tbody><tr>
<td>典型内存结构</td>
<td>单端数组</td>
<td>双端数组</td>
<td>双向链表</td>
<td>二叉树</td>
<td>二叉树</td>
<td>二叉树</td>
<td>二叉树</td>
</tr>
<tr>
<td>可随机存取</td>
<td>是</td>
<td>是</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>对key而言：是</td>
<td>否</td>
</tr>
<tr>
<td>元素搜寻速度</td>
<td>慢</td>
<td>慢</td>
<td>非常慢</td>
<td>快</td>
<td>快</td>
<td>对key而言：快</td>
<td>对key而言：快</td>
</tr>
<tr>
<td>元素安插移除</td>
<td>尾端</td>
<td>头尾两端</td>
<td>任何位置</td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<ul>
<li>vector的使用场景：比如软件历史操作记录的存储，我们经常要查看历史记录，比如上一次的记录，上上次的记录，但却不会去删除记录，因为记录是事实的描述。</li>
</ul>
<ul>
<li>deque的使用场景：比如排队购票系统，对排队者的存储可以采用deque，支持头端的快速移除，尾端的快速添加。如果采用vector，则头端移除时，会移动大量的数据，速度慢。</li>
</ul>
<ul>
<li><p>vector与deque的比较：</p>
<ul>
<li><p>vector.at()比deque.at()效率高，比如vector.at(0)是固定的，deque的开始位置却是不固定的。</p>
</li>
<li><p>如果有大量释放操作的话，vector花的时间更少，这跟二者的内部实现有关。</p>
</li>
<li><p>deque支持头部的快速插入与快速移除，这是deque的优点。</p>
</li>
</ul>
</li>
<li><p>list的使用场景：比如公交车乘客的存储，随时可能有乘客下车，支持频繁的不确实位置元素的移除插入。</p>
</li>
<li><p>set的使用场景：比如对手机游戏的个人得分记录的存储，存储要求从高分到低分的顺序排列。 </p>
</li>
<li><p>map的使用场景：比如按ID号存储十万个用户，想要快速要通过ID查找对应的用户。二叉树的查找效率，这时就体现出来了。如果是vector容器，最坏的情况下可能要遍历完整个容器才能找到该用户。</p>
</li>
</ul>
<h2 id="第三章-常用算法"><a href="#第三章-常用算法" class="headerlink" title="第三章 常用算法"></a><strong>第三章 常用算法</strong></h2><ul>
<li>掌握函数对象适配器</li>
<li>了解算法基本分类</li>
<li>掌握常用遍历算法</li>
<li>掌握常用查找算法</li>
<li>掌握常用排序算法</li>
<li>掌握常用拷贝和替换算法</li>
<li>掌握常用算数生成算法</li>
<li>掌握集合常用算法</li>
</ul>
<h3 id="3-1-函数对象"><a href="#3-1-函数对象" class="headerlink" title="3.1 函数对象"></a><strong>3.1 函数对象</strong></h3><h4 id="3-1-1-函数对象的概念"><a href="#3-1-1-函数对象的概念" class="headerlink" title="3.1.1 函数对象的概念"></a><strong>3.1.1 函数对象的概念</strong></h4><ul>
<li>重载函数调用操作符的类，其对象常称为函数对象（function object），即它们是行为类似函数的对象，也叫仿函数(functor),其实就是重载“()”操作符，使得类对象可以像函数那样调用。</li>
</ul>
<ul>
<li><p>注意:1.函数对象(仿函数)是一个类，不是一个函数。</p>
</li>
<li><p>2.函数对象(仿函数)重载了”() ”操作符使得它可以像函数一样调用。</p>
</li>
<li><p>假定某个类有一个重载的operator()，而且重载的operator()要求获取一个参数，我们就将这个类称为“一元仿函数”（unary functor）；相反，如果重载的operator()要求获取两个参数，就将这个类称为“二元仿函数”（binary functor）。</p>
</li>
</ul>
<ul>
<li>函数对象基本概念</li>
</ul>
<ul>
<li>函数对象也可以有参数和返回值</li>
</ul>
<ul>
<li>函数对象超出函数概念，可以保存函数调用状态</li>
</ul>
<ul>
<li>函数对象做参数和返回值</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;functional&gt;
using namespace std;

class FuncObject01&#123;
public:
	void operator()()&#123;
		cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
	&#125;
&#125;;

void FuncObject02()&#123;
	cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
&#125;

&#x2F;&#x2F;函数对象概念
void test01()&#123;
	
	FuncObject01 fobj;
	fobj();
	FuncObject02();

&#125;

class FuncObject03&#123;
public:
	int operator()(int a, int b)&#123;
		return a + b;
	&#125;
&#125;;

int FuncObject04(int a,int b)&#123;
	return a + b;
&#125;
&#x2F;&#x2F;函数对象也可以像普通函数一样 具有返回值和参数
void test02()&#123;
	
	FuncObject03 fobj;
	int ret &#x3D; fobj(10,20);
	cout &lt;&lt; &quot;ret :&quot; &lt;&lt; ret &lt;&lt; endl;

	ret &#x3D; FuncObject04(10,20);
	cout &lt;&lt; &quot;ret :&quot; &lt;&lt; ret &lt;&lt; endl;

&#125;
&#x2F;&#x2F;函数对象超出了普通函数的功能，可以具有保存函数调用状态
&#x2F;&#x2F;例如 我们要统计函数调用次数

class FuncObject05&#123;
public:
	FuncObject05() :count(0)&#123;&#125;
	void operator()()&#123;
		cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
		count++;
	&#125;
	int count;
&#125;;

&#x2F;&#x2F;普通函数要统计调用次数 需要一个全局变量
int g_count &#x3D; 0;
void FuncObject06()&#123;
	cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
	g_count++;
&#125;
void test03()&#123;

	FuncObject06();
	FuncObject06();
	cout &lt;&lt; &quot;函数调用次数：&quot; &lt;&lt; g_count &lt;&lt; endl;

	&#x2F;&#x2F;使用函数对象 不需要使用全局变量
	FuncObject05 fobj;
	fobj();
	fobj();
	fobj();

	cout &lt;&lt; &quot;函数调用次数：&quot; &lt;&lt; fobj.count &lt;&lt; endl;

&#125;

&#x2F;&#x2F;函数对象做参数和返回值
class print&#123;
public:
	print() :count(0)&#123;&#125;
	void operator()(const int&amp; val)&#123;
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
		count++;
	&#125;
	int count;
&#125;;
void test04()&#123;
	
	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(3);
	v.push_back(5);
	v.push_back(2);

	&#x2F;&#x2F;通过for_each算法 遍历容器元素
	print myprint;
	&#x2F;&#x2F;函数对象做返回值和参数
	myprint &#x3D; for_each(v.begin(), v.end(), myprint);
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;函数对象调用次数:&quot; &lt;&lt; myprint.count &lt;&lt; endl;
&#125;

int main()&#123;
	test01();
	test02();
	test03();
	test04();
	
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-1-2-谓词概念"><a href="#3-1-2-谓词概念" class="headerlink" title="3.1.2 谓词概念"></a><strong>3.1.2 谓词概念</strong></h4><ul>
<li>谓词是指普通函数或重载的operator()返回值是bool类型的函数对象(仿函数)。如果operator接受一个参数，那么叫做一元谓词,如果接受两个参数，那么叫做二元谓词，谓词可作为一个判断式。</li>
</ul>
<ul>
<li>例如：</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct myfuncobj01&#123;
      bool operator(int v)&#123;&#125;  &#x2F;&#x2F;接受一个参数，并且返回值为Bool 即一元谓词
&#125;
bool compare01(int v); &#x2F;&#x2F;同样是叫做一元谓词

struct myfuncobj02&#123;
      bool operator(int v1，int v2)&#123;&#125;  &#x2F;&#x2F;接受两个参数，返回值为Bool 即二元谓词
&#125;
bool compare02(int v1，int v2); &#x2F;&#x2F;同样是叫做二元谓词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>一元函数对象 应用举例: for_each</li>
</ul>
<ul>
<li>一元谓词 应用举例：find_if</li>
</ul>
<ul>
<li>二元函数对象 应用举例: transform</li>
</ul>
<ul>
<li>二元谓词 应用举例 : sort</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;functional&gt;

using namespace std;

&#x2F;&#x2F;一元函数对象
class print&#123;
public:
	void operator()(const int&amp; v)&#123;
		cout &lt;&lt; v &lt;&lt; &quot; &quot;;
	&#125;
&#125;;
void test01()&#123;

	vector&lt;int&gt; v;

	v.push_back(1);
	v.push_back(2);
	v.push_back(5);
	v.push_back(3);

	&#x2F;&#x2F;一元函数对象
	for_each(v.begin(),v.end(), print());
	cout &lt;&lt; endl;

&#125;

&#x2F;&#x2F;一元谓词
class mygreater&#123;
public:
	bool operator()(const int&amp; v)&#123;
		return v &gt; 2;
	&#125;
&#125;;
void test02()&#123;
	
	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(5);
	v.push_back(3);

	vector&lt;int&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), mygreater()); &#x2F;&#x2F;匿名函数对象
	cout &lt;&lt; *it &lt;&lt; endl;
&#125;

&#x2F;&#x2F;二元函数对象
class myplus&#123;
public:
	int operator()(int v1,int v2)&#123;
		return v1 + v2;
	&#125;
&#125;;
void test03()&#123;

	vector&lt;int&gt; v1, v2,v3;
	v1.push_back(3);
	v1.push_back(4);
	v1.push_back(5);

	v2.push_back(7);
	v2.push_back(8);
	v2.push_back(2);


	v3.resize(v1.size()+ v2.size()); &#x2F;&#x2F; 给v3开辟空间

	transform(v1.begin(), v1.end(), v2.begin(),v3.begin(), myplus());
	for_each(v3.begin(), v3.end(), print());
	cout &lt;&lt; endl;
&#125;

&#x2F;&#x2F;二元谓词
class mycompare&#123;
public:
	bool operator()(int v1,int v2)&#123;
		return v1 &gt; v2;
	&#125;
&#125;;
void test04()&#123;

	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(5);
	v.push_back(3);

	sort(v.begin(), v.end(), mycompare());
	for_each(v.begin(), v.end(), print());
&#125;

int main()&#123;

	test01();
	test02();
	test03();
	test04();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-1-3-内建函数对象"><a href="#3-1-3-内建函数对象" class="headerlink" title="3.1.3 内建函数对象"></a><strong>3.1.3 内建函数对象</strong></h4><ul>
<li>STL内建了一些函数对象。分为:算数类函数对象,关系运算类函数对象，逻辑运算类仿函数。这些仿函数所产生的对象，用法和一般函数完全相同，当然我们还可以产生无名的临时对象来履行函数功能。使用内建函数对象，需要引入头文件 #include<functional>。</li>
</ul>
<ul>
<li>6个算数类函数对象,除了negate是一元运算，其他都是二元运算。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;class T&gt; T plus&lt;T&gt;&#x2F;&#x2F;加法仿函数
template&lt;class T&gt; T minute&lt;T&gt;&#x2F;&#x2F;减法仿函数
template&lt;class T&gt; T multiplies&lt;T&gt;&#x2F;&#x2F;乘法仿函数
template&lt;class T&gt; T divides&lt;T&gt;&#x2F;&#x2F;除法仿函数
template&lt;class T&gt; T modulus&lt;T&gt;&#x2F;&#x2F;取模仿函数
template&lt;class T&gt; T negate&lt;T&gt;&#x2F;&#x2F;取反仿函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>6个关系运算类函数对象,每一种都是二元运算。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;class T&gt; bool equal_to&lt;T&gt;&#x2F;&#x2F;等于
template&lt;class T&gt; bool not_equal_to&lt;T&gt;&#x2F;&#x2F;不等于
template&lt;class T&gt; bool greater&lt;T&gt;&#x2F;&#x2F;大于
template&lt;class T&gt; bool greater_equal&lt;T&gt;&#x2F;&#x2F;大于等于
template&lt;class T&gt; bool less&lt;T&gt;&#x2F;&#x2F;小于
template&lt;class T&gt; bool less_equal&lt;T&gt;&#x2F;&#x2F;小于等于<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>逻辑运算类运算函数,not为一元运算，其余为二元运算。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;class T&gt; bool logical_and&lt;T&gt;&#x2F;&#x2F;逻辑与
template&lt;class T&gt; bool logical_or&lt;T&gt;&#x2F;&#x2F;逻辑或
template&lt;class T&gt; bool logical_not&lt;T&gt;&#x2F;&#x2F;逻辑非<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>使用例子:</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;使用内建函数对象声明一个对象
plus&lt;int&gt; myPlus;
cout &lt;&lt; myPlus(5, 3) &lt;&lt; endl;
&#x2F;&#x2F;使用匿名临时对象
cout &lt;&lt; plus&lt;int&gt;()(5, 6) &lt;&lt; endl;
sort排序使用预定义函数对象进行排序。
count_if equal_to 参数绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-1-4-函数对象适配器"><a href="#3-1-4-函数对象适配器" class="headerlink" title="3.1.4 函数对象适配器"></a><strong>3.1.4 函数对象适配器</strong></h4><ul>
<li>函数对象适配器是完成一些配接工作，这些配接包括绑定(bind)，否定(negate),以及对一般函数或成员函数的修饰，使其成为函数对象，重点掌握函数对象适配器(红色字体):</li>
</ul>
<ul>
<li>bind1st ：将参数绑定为函数对象的第一个参数</li>
</ul>
<ul>
<li>bind2nd ： 将参数绑定为函数对象的第二个参数</li>
</ul>
<ul>
<li>not1 ： 对一元函数对象取反</li>
</ul>
<ul>
<li>not2 : 对二元函数对象取反</li>
</ul>
<ul>
<li>ptr_fun ： 将普通函数修饰成函数对象</li>
</ul>
<ul>
<li>mem_fun ： 修饰成员函数</li>
</ul>
<ul>
<li>mem_fun_ref ： 修饰成员函数</li>
</ul>
<ul>
<li>预定义函数对象</li>
</ul>
<ul>
<li>仿函数适配器bind1st bind2nd</li>
</ul>
<ul>
<li>仿函数适配器not1 not2</li>
</ul>
<ul>
<li>仿函数适配器 ptr_fun</li>
</ul>
<ul>
<li>成员函数适配器 mem_fun mem_fun_ref</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;functional&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
using namespace std;

&#x2F;*
	template&lt;class T&gt; T plus&lt;T&gt;&#x2F;&#x2F;加法仿函数
	template&lt;class T&gt; T minute&lt;T&gt;&#x2F;&#x2F;减法仿函数
	template&lt;class T&gt; T multiplies&lt;T&gt;&#x2F;&#x2F;乘法仿函数
	template&lt;class T&gt; T divides&lt;T&gt;&#x2F;&#x2F;除法仿函数
	template&lt;class T&gt; T modulus&lt;T&gt;&#x2F;&#x2F;取模仿函数
	template&lt;class T&gt; T negate&lt;T&gt;&#x2F;&#x2F;取反仿函数
*&#x2F;
&#x2F;&#x2F;预定义函数对象
class print&#123;
public:
	void operator()(int v)&#123;
		cout &lt;&lt; v &lt;&lt; &quot;    &quot;;
	&#125;
&#125;;
void test01()&#123;
	
	plus&lt;int&gt; myplus; &#x2F;&#x2F;实例化一个对象
	int ret &#x3D; myplus(10, 20);
	cout &lt;&lt; &quot;ret : &quot; &lt;&lt; ret &lt;&lt; endl;

	cout &lt;&lt; plus&lt;int&gt;()(30, 40) &lt;&lt; endl;

	vector&lt;int&gt; v1, v2, v3;
	for (int i &#x3D; 0; i &lt; 10;i++)&#123;
		v1.push_back(i);
		v2.push_back(i + 1);
	&#125;

	v3.resize(v1.size());
	transform(v1.begin(),v1.end(),v2.begin(),v3.begin(),plus&lt;int&gt;());

	for_each(v1.begin(), v1.end(), print());
	cout &lt;&lt; endl;

	for_each(v2.begin(), v2.end(), print());
	cout &lt;&lt; endl;

	for_each(v3.begin(), v3.end(), print());
	cout &lt;&lt; endl;

&#125;

&#x2F;&#x2F;函数适配器bind1st bind2nd
&#x2F;&#x2F;现在我有这个需求 在遍历容器的时候，我希望将容器中的值全部加上100之后显示出来，怎么做哇？
struct myprint : public binary_function&lt;int,int,void&gt;&#123;   &#x2F;&#x2F;二元函数对象 所以需要继承 binary_fucntion&lt;参数类型,参数类型,返回值类型&gt;
	void operator()(int v1 ,int v2) const&#123;
		cout &lt;&lt; v1 + v2 &lt;&lt; &quot; &quot;;
	&#125;
&#125;;
void test02()&#123;
	
	vector&lt;int&gt; v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);

	&#x2F;&#x2F;我们直接给函数对象绑定参数 编译阶段就会报错
	&#x2F;&#x2F;for_each(v.begin(), v.end(), bind2nd(myprint(),100));
	&#x2F;&#x2F;如果我们想使用绑定适配器,需要我们自己的函数对象继承binary_function 或者 unary_function
	&#x2F;&#x2F;根据我们函数对象是一元函数对象 还是二元函数对象
	for_each(v.begin(), v.end(), bind2nd(myprint(), 100));
	cout &lt;&lt; endl;

	&#x2F;&#x2F;总结：  bind1st和bind2nd区别?
	&#x2F;&#x2F;bind1st ： 将参数绑定为函数对象的第一个参数
	&#x2F;&#x2F;bind2nd ： 将参数绑定为函数对象的第二个参数
	&#x2F;&#x2F;bind1st bind2nd将二元函数对象转为一元函数对象

&#125;

&#x2F;&#x2F;函数对象适配器 not1 not2
struct myprint02 &#123;
	void operator()(int v1) const&#123;
		cout &lt;&lt; v1 &lt;&lt; &quot; &quot;;
	&#125;
&#125;;
void test03()&#123;

	vector&lt;int&gt; v;
	v.push_back(2);
	v.push_back(1);
	v.push_back(5);
	v.push_back(4);
	
	vector&lt;int&gt;::iterator it &#x3D;  find_if(v.begin(), v.end(), not1(bind2nd(less_equal&lt;int&gt;(), 2)));
	cout &lt;&lt; &quot;it:&quot; &lt;&lt; *it &lt;&lt; endl;
	sort(v.begin(),v.end(),not2(greater&lt;int&gt;()));

	for_each(v.begin(), v.end(), myprint02());
	cout &lt;&lt; endl;

	&#x2F;&#x2F;not1 对一元函数对象取反
	&#x2F;&#x2F;not2 对二元函数对象取反
&#125;

&#x2F;&#x2F;如何给一个普通函数使用绑定适配器(bind1st bind2nd)绑定一个参数？(拓展)
&#x2F;&#x2F;ptr_fun
void myprint04(int v1,int v2)&#123;
	cout &lt;&lt; v1 + v2 &lt;&lt; &quot; &quot;;
&#125;
void test04()&#123;
	
	vector&lt;int&gt; v;
	v.push_back(2);
	v.push_back(1);
	v.push_back(5);
	v.push_back(4);


	&#x2F;&#x2F;1 将普通函数适配成函数对象
	&#x2F;&#x2F;2 然后通过绑定器绑定参数
	for_each(v.begin(), v.end(), bind2nd(ptr_fun(myprint04),100));
	cout &lt;&lt; endl;

	&#x2F;&#x2F;总结: ptr_fun 将普通函数转变为函数对象
&#125;

&#x2F;&#x2F;mem_fun mem_fun_ref
&#x2F;&#x2F;如果我们容器中存储的是对象或者对象指针，如果能指定某个成员函数处理成员数据。
class student&#123;
public:
	student(string name, int age) :name(name), age(age)&#123;&#125;
	void print()&#123;
		cout &lt;&lt; &quot;name:&quot; &lt;&lt; name &lt;&lt; &quot; age:&quot; &lt;&lt; age &lt;&lt; endl;;
	&#125;
	void print2(int a)&#123;
		cout &lt;&lt; &quot;name:&quot; &lt;&lt; name &lt;&lt; &quot; age:&quot; &lt;&lt; age &lt;&lt; &quot; a:&quot; &lt;&lt; a &lt;&lt; endl;
	&#125;
	int age;
	string name;
&#125;;
void test05()&#123;
	

	&#x2F;&#x2F;mem_fun : 如果存储的是对象指针，需要使用mem_fun
	vector&lt;student*&gt; v;
	student* s1 &#x3D; new student(&quot;zhaosi&quot;,10);
	student* s2 &#x3D; new student(&quot;liuneng&quot;, 20);
	student* s3 &#x3D; new student(&quot;shenyang&quot;, 30);
	student* s4 &#x3D; new student(&quot;xiaobao&quot;, 40);

	v.push_back(s1);
	v.push_back(s2);
	v.push_back(s3);
	v.push_back(s4);

	for_each(v.begin(), v.end(), mem_fun(&amp;student::print));
	cout &lt;&lt; &quot;-----------------------------&quot; &lt;&lt; endl;

	&#x2F;&#x2F;mem_fun_ref : 如果存储的是对象，需要使用mem_fun_ref

	vector&lt;student&gt; v2;
	v2.push_back(student(&quot;zhaosi&quot;,50));
	v2.push_back(student(&quot;liuneng&quot;, 60));
	v2.push_back(student(&quot;shenyang&quot;, 70));
	v2.push_back(student(&quot;xiaobao&quot;, 80));

	for_each(v2.begin(), v2.end(), mem_fun_ref(&amp;student::print));

&#125;


int main()&#123;

	&#x2F;&#x2F;test01();
	&#x2F;&#x2F;test02();
	&#x2F;&#x2F;test03();
	&#x2F;&#x2F;test04();
	test05();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-2-算法概述"><a href="#3-2-算法概述" class="headerlink" title="3.2 算法概述"></a><strong>3.2 算法概述</strong></h3><ul>
<li>算法主要是由头文件<algorithm> <functional> <numeric>组成。</li>
</ul>
<ul>
<li><p><algorithm>是所有STL头文件中最大的一个,其中常用的功能涉及到比较，交换，查找,遍历，复制，修改，反转，排序，合并等…</p>
</li>
<li><p><numeric>体积很小，只包括在几个序列容器上进行的简单运算的模板函数.</p>
</li>
<li><p><functional> 定义了一些模板类,用以声明函数对象。</p>
</li>
<li><p>STL算法分为：<strong>质变算法</strong>和<strong>非质变算法</strong>。</p>
</li>
</ul>
<ul>
<li>所有的STL算法都作用在由迭代器[first,end)所标示出来的区间上，所谓质变算法，是指运算过程中会改变区间内的(迭代器所指)的元素内容。比如，拷贝(copy)、互换(swap)、替换(replace)、填写(fill)、删除(remove)、排序(sort)等算法都属于此类。</li>
</ul>
<ul>
<li>非质变算法是指是指在运算过程中不会区间内(迭代器所指)的元素内容，比如查找(find)、计数(count)、遍历(for_each)、寻找极值(max,min)等，都属于此类。但是如果你在for_each遍历每个元素的时候试图应用一个会改变元素内容的仿函数，那么元素当然也会改变。</li>
</ul>
<h3 id="3-3-常用遍历算法"><a href="#3-3-常用遍历算法" class="headerlink" title="3.3 常用遍历算法"></a><strong>3.3 常用遍历算法</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
    遍历算法 遍历容器元素
	@param beg 开始迭代器
	@param end 结束迭代器
	@param _callback  函数回调或者函数对象
	@return 函数对象
*&#x2F;
for_each(iterator beg, iterator end, _callback);
&#x2F;*
	transform算法 将指定容器区间元素搬运到另一容器中
	注意 : transform 不会给目标容器分配内存，所以需要我们提前分配好内存
	@param beg1 源容器开始迭代器
	@param end1 源容器结束迭代器
	@param beg2 目标容器开始迭代器
	@param _cakkback 回调函数或者函数对象
	@return 返回目标容器迭代器
*&#x2F;
transform(iterator beg1, iterator end1, iterator beg2, _callbakc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-3-1-for-each练习代码："><a href="#3-3-1-for-each练习代码：" class="headerlink" title="3.3.1 for_each练习代码："></a><strong>3.3.1 for_each练习代码：</strong></h4><ul>
<li>基本正向遍历和逆向遍历</li>
</ul>
<ul>
<li>for_each绑定参数输出</li>
</ul>
<ul>
<li>for_each修改容器元素</li>
</ul>
<ul>
<li>for_each返回值</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;functional&gt;

using namespace std;

&#x2F;&#x2F;for_each正向遍历 反向遍历
struct print01&#123;
	void operator()(int v)&#123;
		cout &lt;&lt; v &lt;&lt; &quot; &quot;;
	&#125;
&#125;;
void test01()&#123;
	
	vector&lt;int&gt; v;
	for (int i &#x3D; 0; i &lt; 10;i++)&#123;
		v.push_back(rand() % 100);
	&#125;

	&#x2F;&#x2F;正向遍历
	for_each(v.begin(), v.end(), print01());
	cout &lt;&lt; endl;
	&#x2F;&#x2F;反向遍历
	for_each(v.rbegin(), v.rend(), print01());
	cout &lt;&lt; endl;
&#125;


&#x2F;&#x2F;for_each算法 绑定参数
&#x2F;&#x2F;将容器中的元素加上100 再输出
struct print2 : public binary_function&lt;int,int,void&gt;&#123;
	void operator()(int v1,int v2) const&#123;
		cout &lt;&lt; v1+v2 &lt;&lt; &quot; &quot;;
	&#125;
&#125;;
void print21(int v1, int v2)&#123;
	cout &lt;&lt; v1 + v2 &lt;&lt; &quot; &quot;;
&#125;
void test02()&#123;
	
	vector&lt;int&gt; v;
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		v.push_back(rand() % 100);
	&#125;

	for_each(v.begin(), v.end(), print01());
	cout &lt;&lt; endl;

	&#x2F;&#x2F;函数对象做参数
	for_each(v.begin(), v.end(), bind2nd(print2(), 100));
	cout &lt;&lt; endl;
	&#x2F;&#x2F;普通回调函数做参数，并且绑定参数
	for_each(v.begin(), v.end(), bind2nd(ptr_fun(print21), 100));
	cout &lt;&lt; endl;

&#125;

&#x2F;&#x2F;for_each修改元素值
struct print3 &#123;
	void operator()(int&amp; v1) const&#123;
		v1 &#x3D; v1 + 100;
		cout &lt;&lt; v1 &lt;&lt; &quot; &quot;;
	&#125;
&#125;;
void test03()&#123;
	
	vector&lt;int&gt; v;
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		v.push_back(rand() % 100);
	&#125;

	for_each(v.begin(), v.end(), print01());
	cout &lt;&lt; endl;

	for_each(v.begin(), v.end(), print3());
	cout &lt;&lt; endl;

	for_each(v.begin(), v.end(), print01());
	cout &lt;&lt; endl;
&#125;

&#x2F;&#x2F;for_each返回值
struct print4 &#123;
	print4() :count(0)&#123;&#125;
	void operator()(int v1)&#123;
		count++;
		cout &lt;&lt; v1 &lt;&lt; &quot; &quot;;
	&#125;
	int count;
&#125;;
void test04()&#123;
	
	vector&lt;int&gt; v;
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		v.push_back(rand() % 100);
	&#125;
	print4 temp1;
	print4 temp2 &#x3D; for_each(v.begin(), v.end(), temp1);
	cout &lt;&lt; endl;

	cout &lt;&lt; &quot;temp1:&quot; &lt;&lt; temp1.count &lt;&lt; endl;
	cout &lt;&lt; &quot;temp2:&quot; &lt;&lt; temp2.count &lt;&lt; endl;

&#125;
int main()&#123;

	&#x2F;&#x2F;test01();
	test02();
	test03();
	test04();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-3-2-transform练习代码："><a href="#3-3-2-transform练习代码：" class="headerlink" title="3.3.2 transform练习代码："></a><strong>3.3.2 transform练习代码：</strong></h4><ul>
<li>从一个容器经过处理搬运到另一个容器:</li>
</ul>
<ul>
<li>两个容器数据处理搬运到第三个容器</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;functional&gt;

using namespace std;

&#x2F;&#x2F;容器中元素加10 搬运到另一容器中
void print1(int v)&#123;
	cout &lt;&lt; v &lt;&lt; &quot; &quot;;
&#125;
struct myplus01&#123;
	int operator()(int v1)&#123;
		return v1 + 100;
	&#125;
&#125;;
void test01()&#123;
	
	vector&lt;int&gt; v,dest;
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		v.push_back(rand() % 100);
	&#125;
	for_each(v.begin(), v.end(), print1);
	cout &lt;&lt; endl;
	&#x2F;&#x2F;首先给dest开辟足够内存
	dest.resize(v.size());
	&#x2F;&#x2F;搬运元素

	&#x2F;*
		template&lt;class _InIt,
		class _OutIt,
		class _Fn1&gt; inline
		_OutIt _Transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
		&#123;	&#x2F;&#x2F; transform [_First, _Last) with _Func
		for (; _First !&#x3D; _Last; ++_First, ++_Dest)
		*_Dest &#x3D; _Func(*_First);
		return (_Dest);
		&#125;
	*&#x2F;
	transform(v.begin(), v.end(), dest.begin(), myplus01());
	for_each(dest.begin(), dest.end(), print1);
	cout &lt;&lt; endl;

&#125;

&#x2F;&#x2F;容器1的元素 + 容器2的元素 搬运到 第三个容器中
struct myplus02&#123;
	int operator()(int v1,int v2)&#123;
		return v1 + v2;
	&#125;
&#125;;
void test02()&#123;

	vector&lt;int&gt; v1,v2, dest;
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		v1.push_back(i);
		v2.push_back(i + 1);
	&#125;
	for_each(v1.begin(), v1.end(), print1);
	cout &lt;&lt; endl;
	&#x2F;*
		template&lt;class _InIt1,
		class _InIt2,
		class _OutIt,
		class _Fn2&gt; inline
		_OutIt transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
		&#123;	&#x2F;&#x2F; transform [_First1, _Last1) and [_First2, ...) with _Func
		_DEBUG_RANGE(_First1, _Last1);
		_DEBUG_POINTER(_Dest);
		_DEBUG_POINTER(_Func);
		if (_First1 !&#x3D; _Last1)
		return (_Transform2(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Dest, _Func,
		_Is_checked(_Dest)));
		return (_Dest);
		&#125;


		template&lt;class _InIt1,
		class _InIt2,
		class _OutIt,
		class _Fn2&gt; inline
		_OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
		&#123;	&#x2F;&#x2F; transform [_First1, _Last1) and [_First2, ...) with _Func
		for (; _First1 !&#x3D; _Last1; ++_First1, ++_First2, ++_Dest)
		*_Dest &#x3D; _Func(*_First1, *_First2);
		return (_Dest);
		&#125;

	*&#x2F;

	dest.resize(v1.size());
	transform(v1.begin(), v1.end(), v2.begin(), dest.begin(), myplus02());

	for_each(dest.begin(), dest.end(), print1);
	cout &lt;&lt; endl;
&#125;
int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-4-常用查找算法"><a href="#3-4-常用查找算法" class="headerlink" title="3.4 常用查找算法"></a><strong>3.4 常用查找算法</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
	find算法 查找元素
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param value 查找的元素
	@return 返回查找元素的位置
*&#x2F;
find(iterator beg, iterator end, value)
&#x2F;*
	adjacent_find算法 查找相邻重复元素
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param  _callback 回调函数或者谓词(返回bool类型的函数对象)
	@return 返回相邻元素的第一个位置的迭代器
*&#x2F;
adjacent_find(iterator beg, iterator end, _callback);
&#x2F;*
	binary_search算法 二分查找法
	注意: 在无序序列中不可用
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param value 查找的元素
	@return bool 查找返回true 否则false
*&#x2F;
bool binary_search(iterator beg, iterator end, value);
&#x2F;*
	find_if算法 条件查找
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param  callback 回调函数或者谓词(返回bool类型的函数对象)
	@return bool 查找返回true 否则false
*&#x2F;
find_if(iterator beg, iterator end, _callback);
&#x2F;*
	count算法 统计元素出现次数
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param  value回调函数或者谓词(返回bool类型的函数对象)
	@return int返回元素个数
*&#x2F;
count(iterator beg, iterator end, value);
&#x2F;*
	count算法 统计元素出现次数
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param  callback 回调函数或者谓词(返回bool类型的函数对象)
	@return int返回元素个数
*&#x2F;
count_if(iterator beg, iterator end, _callback);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-4-1-find算法案例"><a href="#3-4-1-find算法案例" class="headerlink" title="3.4.1 find算法案例"></a><strong>3.4.1 find算法案例</strong></h3><ul>
<li>find查找基本数据类型，类对象，类指针:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS

#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;functional&gt;

using namespace std;


&#x2F;&#x2F;find 算法
void test01()&#123;
	
	int arr[] &#x3D; &#123;5,2,8,9,1,3&#125;;
	vector&lt;int&gt; v(arr, arr + sizeof(arr) &#x2F; sizeof(int));

	&#x2F;*
		template&lt;class _InIt,
		class _Ty&gt; inline
		_InIt find(_InIt _First, _InIt _Last, const _Ty&amp; _Val)
		&#123;	&#x2F;&#x2F; find first matching _Val
		_DEBUG_RANGE(_First, _Last);
		return (_Rechecked(_First,
			_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
		&#125;
	
	*&#x2F;

	&#x2F;&#x2F;这里注意find返回值 如果没有找到 返回 v.end()
	vector&lt;int&gt;::iterator it &#x3D;  find(v.begin(),v.end(),1);
	&#x2F;&#x2F;可以这样判断是否找到元素
	if (it &#x3D;&#x3D; v.end())&#123;
		cout &lt;&lt; &quot;没有找到!&quot; &lt;&lt; endl;
	&#125;
	else&#123;
		cout &lt;&lt; *it &lt;&lt; endl;
	&#125;

&#125;

&#x2F;&#x2F;find查找对象
class sutdent&#123;
public:
	sutdent(int age, int salary) :age(age), salary(salary)&#123;&#125;
	int age;
	int salary;

	bool operator&#x3D;&#x3D;(const sutdent&amp; stu)&#123;
		if (this-&gt;age &#x3D;&#x3D; stu.age &amp;&amp; this-&gt;salary &#x3D;&#x3D; stu.salary)&#123;
			return true;
		&#125;
		else&#123;
			return false;
		&#125;
	&#125;
&#125;;
void test02()&#123;
	
	&#x2F;&#x2F;对象查找  重载&#x3D;&#x3D;操作符
	sutdent s1(1, 2), s2(3, 4), s3(5, 6);
	vector&lt;sutdent&gt; vs;
	vs.push_back(s1);
	vs.push_back(s2);
	vs.push_back(s3);

	vector&lt;sutdent&gt;::iterator its &#x3D; find(vs.begin(), vs.end(), s2);
	if (its &#x3D;&#x3D; vs.end())&#123;
		cout &lt;&lt; &quot;s2没有找到！&quot; &lt;&lt; endl;
	&#125;
	else&#123;
		cout &lt;&lt; &quot;s2找到！&quot; &lt;&lt; endl;
	&#125;

&#125;


int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-5-常用排序算法"><a href="#3-5-常用排序算法" class="headerlink" title="3.5 常用排序算法"></a><strong>3.5 常用排序算法</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
	merge算法 容器元素合并，并存储到另一容器中
	@param beg1 容器1开始迭代器
	@param end1 容器1结束迭代器
	@param beg2 容器2开始迭代器
	@param end2 容器2结束迭代器
	@param dest  目标容器开始迭代器
*&#x2F;
merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)
&#x2F;*
	sort算法 容器元素排序
	注意:两个容器必须是有序的
	@param beg 容器1开始迭代器
	@param end 容器1结束迭代器
	@param _callback 回调函数或者谓词(返回bool类型的函数对象)
*&#x2F;
sort(iterator beg, iterator end, _callback)
&#x2F;*
	sort算法 对指定范围内的元素随机调整次序
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
*&#x2F;
random_shuffle(iterator beg, iterator end)
&#x2F;*
	reverse算法 反转指定范围的元素
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
*&#x2F;
reverse(iterator beg, iterator end)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="3-6-常用拷贝和替换算法"><a href="#3-6-常用拷贝和替换算法" class="headerlink" title="3.6 常用拷贝和替换算法"></a><strong>3.6 常用拷贝和替换算法</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
	copy算法 将容器内指定范围的元素拷贝到另一容器中
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param dest 目标容器结束迭代器
*&#x2F;
copy(iterator beg, iterator end, iterator dest)
&#x2F;*
	replace算法 将容器内指定范围的旧元素修改为新元素
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param oldvalue 旧元素
	@param oldvalue 新元素
*&#x2F;
replace(iterator beg, iterator end, oldvalue, newvalue)
&#x2F;*
	replace_if算法 将容器内指定范围满足条件的元素替换为新元素
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param callback函数回调或者谓词(返回Bool类型的函数对象)
	@param oldvalue 新元素
*&#x2F;
replace_if(iterator beg, iterator end, _callback, newvalue)
&#x2F;*
	swap算法 互换两个容器的元素
	@param c1容器1
	@param c2容器2
*&#x2F;
swap(container c1, container c2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-7-常用算数生成算法"><a href="#3-7-常用算数生成算法" class="headerlink" title="3.7 常用算数生成算法"></a><strong>3.7 常用算数生成算法</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
	accumulate算法 计算容器元素累计总和
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param value累加值
*&#x2F;
accumulate(iterator beg, iterator end, value)
&#x2F;*
	fill算法 向容器中添加元素
	@param beg 容器开始迭代器
	@param end 容器结束迭代器
	@param value t填充元素
*&#x2F;
fill(iterator beg, iterator end, value)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="3-8-常用集合算法"><a href="#3-8-常用集合算法" class="headerlink" title="3.8 常用集合算法"></a><strong>3.8 常用集合算法</strong></h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
	set_intersection算法 求两个set集合的交集
	注意:两个集合必须是有序序列
	@param beg1 容器1开始迭代器
	@param end1 容器1结束迭代器
	@param beg2 容器2开始迭代器
	@param end2 容器2结束迭代器
	@param dest  目标容器开始迭代器
	@return 目标容器的最后一个元素的迭代器地址
*&#x2F;
set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)
&#x2F;*
	set_union算法 求两个set集合的并集
	注意:两个集合必须是有序序列
	@param beg1 容器1开始迭代器
	@param end1 容器1结束迭代器
	@param beg2 容器2开始迭代器
	@param end2 容器2结束迭代器
	@param dest  目标容器开始迭代器
	@return 目标容器的最后一个元素的迭代器地址
*&#x2F;
set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)
&#x2F;*
	set_difference算法 求两个set集合的差集
	注意:两个集合必须是有序序列
	@param beg1 容器1开始迭代器
	@param end1 容器1结束迭代器
	@param beg2 容器2开始迭代器
	@param end2 容器2结束迭代器
	@param dest  目标容器开始迭代器
	@return 目标容器的最后一个元素的迭代器地址
*&#x2F;
set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第四章-STL综合案例"><a href="#第四章-STL综合案例" class="headerlink" title="第四章 STL综合案例"></a><strong>第四章 STL综合案例</strong></h2><h3 id="4-1案例学校演讲比赛"><a href="#4-1案例学校演讲比赛" class="headerlink" title="4.1案例学校演讲比赛"></a><strong>4.1案例学校演讲比赛</strong></h3><h3 id="4-2学校演讲比赛介绍"><a href="#4-2学校演讲比赛介绍" class="headerlink" title="4.2学校演讲比赛介绍"></a><strong>4.2学校演讲比赛介绍</strong></h3><p>1）某市举行一场演讲比赛（ speech_contest ），共有24个人参加。比赛共三轮，前两轮为淘汰赛，第三轮为决赛。</p>
<p>2）比赛方式：分组比赛，每组6个人；选手每次要随机分组，进行比赛；</p>
<p>第一轮分为4个小组，每组6个人。比如100-105为一组，106-111为第二组，依次类推，</p>
<p>3)每人分别按照抽签（draw）顺序演讲。当小组演讲完后，淘汰组内排名最后的三个选手，然后继续下一个小组的比赛。</p>
<p> 第二轮分为2个小组，每组6人。比赛完毕，淘汰组内排名最后的三个选手，然后继续下一个小组的比赛。</p>
<p>第三轮只剩下6个人，本轮为决赛，选出前三名。</p>
<p>​    </p>
<p>4）比赛评分：10个评委打分，去除最低、最高分，求平均分</p>
<p>每个选手演讲完由10个评委分别打分。该选手的最终得分是去掉一个最高分和一个最低分，求得剩下的8个成绩的平均分。</p>
<p>选手的名次按得分降序排列，若得分一样，按参赛号升序排名。</p>
<p>用STL编程，求解这个问题</p>
<p>1） 请打印出所有选手的名字与参赛号，并以参赛号的升序排列。</p>
<p>2） 打印每一轮比赛后，小组比赛成绩和小组晋级名单</p>
<p>3） 打印决赛前三名，选手名称、成绩。</p>
<h3 id="4-3需求分析"><a href="#4-3需求分析" class="headerlink" title="4.3需求分析"></a><strong>4.3需求分析</strong></h3><p>​        //产生选手 （ ABCDEFGHIJKLMNOPQRSTUVWXYZ ） 姓名、得分；选手编号</p>
<p>​        //第1轮    选手抽签 选手比赛 查看比赛结果 </p>
<p>​        //第2轮    选手抽签 选手比赛 查看比赛结果</p>
<p>​        //第3轮    选手抽签 选手比赛 查看比赛结果</p>
<h3 id="4-4实现思路"><a href="#4-4实现思路" class="headerlink" title="**4.**4实现思路"></a>**4.**4实现思路</h3><p>​        需要把选手信息、选手得分信息、选手比赛抽签信息、选手的晋级信息保存在容器中，需要涉及到各个容器的选型。（相当于信息的数据库E-R图设计）</p>
<p>​        选手可以设计一个类Speaker（姓名和得分）</p>
<p>​        所有选手编号和选手信息，可以放在容器内：map&lt;int, Speaker&gt; </p>
<p>​        所有选手的编号信息，可以放在容器：vecter<int> v1中</p>
<p>​        第1轮晋级名单，可以放在容器vecter<int> v2中 </p>
<p>​        第2轮晋级名单，可以放在容器vecter<int> v3中</p>
<p>​        第3轮前三名名单，可以放在容器vecter<int> v4中</p>
<p>​    </p>
<p>​        每个小组的比赛得分信息，按照从小到大的顺序放在 </p>
<p>​        multimap&lt;成绩, 编号, greater<int>&gt; multmapGroup      </p>
<p>​        也就是：multimap&lt;int, int, greater<int> &gt; multmapGroup;    </p>
<p>​        每个选手的得分，可以放在容器deque<int> dscore; 方便去除最低最高分</p>
<h3 id="4-5实现细节"><a href="#4-5实现细节" class="headerlink" title="**4.**5实现细节"></a>**4.**5实现细节</h3><p>1） 搭建框架</p>
<p>2） 完善业务函数</p>
<p>random_shuffle</p>
<p>3） 测试</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void main()
&#123;
	&#x2F;&#x2F;定义数据结构 所有选手放到容器中
	map&lt;int, Speaker&gt;	mapSpeaker;
	vector&lt;int&gt;			v1; &#x2F;&#x2F;第1轮演讲比赛 名单
	vector&lt;int&gt;			v2; &#x2F;&#x2F;第2轮演讲比赛 名单
	vector&lt;int&gt;			v3; &#x2F;&#x2F;第3轮演讲比赛 名单
	vector&lt;int&gt;			v4; &#x2F;&#x2F;最后 演讲比赛 名单

	&#x2F;&#x2F;产生选手
	GenSpeaker(mapSpeaker, v1);

	&#x2F;&#x2F;第1轮	选手抽签 选手比赛 查看比赛结果(晋级名单 得分情况)
	cout &lt;&lt; &quot;\n\n\n任意键,开始第一轮比赛&quot; &lt;&lt; endl;
	cin.get();
	speech_contest_draw(v1);
	speech_contest(0,  v1, mapSpeaker, v2);
	speech_contest_print(0, v2, mapSpeaker);

	&#x2F;&#x2F;第2轮 选手抽签 选手比赛 查看比赛结果
	cout &lt;&lt; &quot;\n\n\n任意键,开始第二轮比赛&quot; &lt;&lt; endl;
	cin.get();
	speech_contest_draw(v2);
	speech_contest(1,  v2, mapSpeaker, v3);
	speech_contest_print(1, v3, mapSpeaker);

	&#x2F;&#x2F;第3轮 选手抽签 选手比赛 查看比赛结果
	cout &lt;&lt; &quot;\n\n\n任意键,开始第三轮比赛&quot; &lt;&lt; endl;
	cin.get();
	speech_contest_draw(v3);
	speech_contest(2,  v3, mapSpeaker, v4);
	speech_contest_print(2, v4, mapSpeaker);

	system(&quot;pause&quot;);
&#125;

&#x2F;&#x2F;产生选手
int GenSpeaker(map&lt;int, Speaker&gt; &amp;mapSpeaker, vector&lt;int&gt; &amp;v1)

&#x2F;&#x2F;选手抽签
int speech_contest_draw(vector&lt;int&gt;	&amp;v)

&#x2F;&#x2F;选手比赛
int speech_contest(int index,  vector&lt;int&gt; &amp;v1, map&lt;int, Speaker&gt; &amp;mapSpeaker, vector&lt;int&gt; &amp;v2)

&#x2F;&#x2F;打印选手比赛晋级名单
int speech_contest_print(int index, vector&lt;int&gt; v, map&lt;int, Speaker&gt; &amp; mapSpeaker)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>C++通讯录管理系统</title>
    <url>/2022/07/08/C-%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="1、系统需求"><a href="#1、系统需求" class="headerlink" title="1、系统需求"></a>1、系统需求</h2><p>通讯录是一个可以记录亲人、好友信息的工具。</p>
<p>本教程主要利用C++来实现一个通讯录管理系统</p>
<p>系统中需要实现的功能如下：</p>
<ul>
<li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址）最多记录1000人</li>
<li>显示联系人：显示通讯录中所有联系人信息</li>
<li>删除联系人：按照姓名进行删除指定联系人</li>
<li>查找联系人：按照姓名查看指定联系人信息</li>
<li>修改联系人：按照姓名重新修改指定联系人</li>
<li>清空联系人：清空通讯录中所有信息</li>
<li>退出通讯录：退出当前使用的通讯录</li>
</ul>
<h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>创建项目步骤如下：</p>
<ul>
<li>创建新项目</li>
<li>添加文件</li>
</ul>
<h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><p>打开vs2017后，点击创建新项目，创建新的C++项目</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544151401138.png" alt="1544151401138"></p>
<p>填写项目名称，选择项目路径</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544151579620.png" alt="1544151579620"></p>
<h3 id="2-2添加文件"><a href="#2-2添加文件" class="headerlink" title="2.2添加文件"></a>2.2添加文件</h3><p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544161551746.png" alt="1544161551746"></p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544161648175.png" alt="1544161648175"></p>
<p>添加成功后，效果如图：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544162344057.png" alt="1544162344057"></p>
<p>至此，项目已创建完毕</p>
<h2 id="3、菜单功能"><a href="#3、菜单功能" class="headerlink" title="3、菜单功能"></a>3、菜单功能</h2><p><strong>功能描述：</strong> 用户选择功能的界面</p>
<p>菜单界面效果如下图：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544149559893.png" alt="1544149559893"></p>
<p><strong>步骤：</strong></p>
<ul>
<li>封装函数显示该界面  如 <code>void showMenu()</code></li>
<li>在main函数中调用封装好的函数</li>
</ul>
<p><strong>代码：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;菜单界面
void showMenu()
&#123;
	cout &lt;&lt; &quot;***************************&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  1、添加联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  2、显示联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  3、删除联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  4、查找联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  5、修改联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  6、清空联系人  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;*****  0、退出通讯录  *****&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;***************************&quot; &lt;&lt; endl;
&#125;

int main() &#123;

	showMenu();

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<h2 id="4、退出功能"><a href="#4、退出功能" class="headerlink" title="4、退出功能"></a>4、退出功能</h2><p>功能描述：退出通讯录系统</p>
<p>思路：根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建</p>
<p>当用户选择0时候，执行退出，选择其他先不做操作，也不会退出程序</p>
<p><strong>代码：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int select &#x3D; 0;

	while (true)
	&#123;
		showMenu();

		cin &gt;&gt; select;
		
		switch (select)
		&#123;
		case 1:  &#x2F;&#x2F;添加联系人
			break;
		case 2:  &#x2F;&#x2F;显示联系人
			break;
		case 3:  &#x2F;&#x2F;删除联系人
			break;
		case 4:  &#x2F;&#x2F;查找联系人
			break;
		case 5:  &#x2F;&#x2F;修改联系人
			break;
		case 6:  &#x2F;&#x2F;清空联系人
			break;
		case 0:  &#x2F;&#x2F;退出通讯录
			cout &lt;&lt; &quot;欢迎下次使用&quot; &lt;&lt; endl;
			system(&quot;pause&quot;);
			return 0;
			break;
		default:
			break;
		&#125;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>效果图：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544163868043.png" alt="1544163868043"></p>
<h2 id="5、添加联系人"><a href="#5、添加联系人" class="headerlink" title="5、添加联系人"></a>5、添加联系人</h2><p>功能描述：</p>
<p>实现添加联系人功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话、家庭住址）</p>
<p>添加联系人实现步骤：</p>
<ul>
<li>设计联系人结构体</li>
<li>设计通讯录结构体</li>
<li>main函数中创建通讯录</li>
<li>封装添加联系人函数</li>
<li>测试添加联系人功能</li>
</ul>
<h3 id="5-1-设计联系人结构体"><a href="#5-1-设计联系人结构体" class="headerlink" title="5.1 设计联系人结构体"></a>5.1 设计联系人结构体</h3><p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址</p>
<p>设计如下：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;string&gt;  &#x2F;&#x2F;string头文件
&#x2F;&#x2F;联系人结构体
struct Person
&#123;
	string m_Name; &#x2F;&#x2F;姓名
	int m_Sex; &#x2F;&#x2F;性别：1男 2女
	int m_Age; &#x2F;&#x2F;年龄
	string m_Phone; &#x2F;&#x2F;电话
	string m_Addr; &#x2F;&#x2F;住址
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="5-2-设计通讯录结构体"><a href="#5-2-设计通讯录结构体" class="headerlink" title="5.2 设计通讯录结构体"></a>5.2 设计通讯录结构体</h3><p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量</p>
<p>设计如下</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#define MAX 1000 &#x2F;&#x2F;最大人数

&#x2F;&#x2F;通讯录结构体
struct Addressbooks
&#123;
	struct Person personArray[MAX]; &#x2F;&#x2F;通讯录中保存的联系人数组
	int m_Size; &#x2F;&#x2F;通讯录中人员个数
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="5-3-main函数中创建通讯录"><a href="#5-3-main函数中创建通讯录" class="headerlink" title="5.3 main函数中创建通讯录"></a>5.3 main函数中创建通讯录</h3><p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mian函数起始位置添加：

	&#x2F;&#x2F;创建通讯录
	Addressbooks abs;
	&#x2F;&#x2F;初始化通讯录中人数
	abs.m_Size &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h3 id="5-4-封装添加联系人函数"><a href="#5-4-封装添加联系人函数" class="headerlink" title="5.4 封装添加联系人函数"></a>5.4 封装添加联系人函数</h3><p>思路：添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录</p>
<p>添加联系人代码：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、添加联系人信息
void addPerson(Addressbooks *abs)
&#123;
	&#x2F;&#x2F;判断电话本是否满了
	if (abs-&gt;m_Size &#x3D;&#x3D; MAX)
	&#123;
		cout &lt;&lt; &quot;通讯录已满，无法添加&quot; &lt;&lt; endl;
		return;
	&#125;
	else
	&#123;
		&#x2F;&#x2F;姓名
		string name;
		cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;
		cin &gt;&gt; name;
		abs-&gt;personArray[abs-&gt;m_Size].m_Name &#x3D; name;

		cout &lt;&lt; &quot;请输入性别：&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;1 -- 男&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;2 -- 女&quot; &lt;&lt; endl;

		&#x2F;&#x2F;性别
		int sex &#x3D; 0;
		while (true)
		&#123;
			cin &gt;&gt; sex;
			if (sex &#x3D;&#x3D; 1 || sex &#x3D;&#x3D; 2)
			&#123;
				abs-&gt;personArray[abs-&gt;m_Size].m_Sex &#x3D; sex;
				break;
			&#125;
			cout &lt;&lt; &quot;输入有误，请重新输入&quot;;
		&#125;

		&#x2F;&#x2F;年龄
		cout &lt;&lt; &quot;请输入年龄：&quot; &lt;&lt; endl;
		int age &#x3D; 0;
		cin &gt;&gt; age;
		abs-&gt;personArray[abs-&gt;m_Size].m_Age &#x3D; age;

		&#x2F;&#x2F;联系电话
		cout &lt;&lt; &quot;请输入联系电话：&quot; &lt;&lt; endl;
		string phone &#x3D; &quot;&quot;;
		cin &gt;&gt; phone;
		abs-&gt;personArray[abs-&gt;m_Size].m_Phone &#x3D; phone;

		&#x2F;&#x2F;家庭住址
		cout &lt;&lt; &quot;请输入家庭住址：&quot; &lt;&lt; endl;
		string address;
		cin &gt;&gt; address;
		abs-&gt;personArray[abs-&gt;m_Size].m_Addr &#x3D; address;

		&#x2F;&#x2F;更新通讯录人数
		abs-&gt;m_Size++;

		cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; endl;
		system(&quot;pause&quot;);
		system(&quot;cls&quot;);
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<h3 id="5-5-测试添加联系人功能"><a href="#5-5-测试添加联系人功能" class="headerlink" title="5.5 测试添加联系人功能"></a>5.5 测试添加联系人功能</h3><p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能</p>
<p>在switch case 语句中，case1里添加：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 1:  &#x2F;&#x2F;添加联系人
	addPerson(&amp;abs);
	break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>测试效果如图：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544165554002.png" alt="1544165554002"></p>
<h2 id="6、显示联系人"><a href="#6、显示联系人" class="headerlink" title="6、显示联系人"></a>6、显示联系人</h2><p>功能描述：显示通讯录中已有的联系人信息</p>
<p>显示联系人实现步骤：</p>
<ul>
<li>封装显示联系人函数</li>
<li>测试显示联系人功能</li>
</ul>
<h3 id="6-1-封装显示联系人函数"><a href="#6-1-封装显示联系人函数" class="headerlink" title="6.1 封装显示联系人函数"></a>6.1 封装显示联系人函数</h3><p>思路：判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯录中信息</p>
<p>显示联系人代码：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;2、显示所有联系人信息
void showPerson(Addressbooks * abs)
&#123;
	if (abs-&gt;m_Size &#x3D;&#x3D; 0)
	&#123;
		cout &lt;&lt; &quot;当前记录为空&quot; &lt;&lt; endl;
	&#125;
	else
	&#123;
		for (int i &#x3D; 0; i &lt; abs-&gt;m_Size; i++)
		&#123;
			cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; abs-&gt;personArray[i].m_Name &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;性别：&quot; &lt;&lt; (abs-&gt;personArray[i].m_Sex &#x3D;&#x3D; 1 ? &quot;男&quot; : &quot;女&quot;) &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; abs-&gt;personArray[i].m_Age &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;电话：&quot; &lt;&lt; abs-&gt;personArray[i].m_Phone &lt;&lt; &quot;\t&quot;;
			cout &lt;&lt; &quot;住址：&quot; &lt;&lt; abs-&gt;personArray[i].m_Addr &lt;&lt; endl;
		&#125;
	&#125;
	
	system(&quot;pause&quot;);
	system(&quot;cls&quot;);

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h3 id="6-2-测试显示联系人功能"><a href="#6-2-测试显示联系人功能" class="headerlink" title="6.2 测试显示联系人功能"></a>6.2 测试显示联系人功能</h3><p>在switch case语句中，case 2 里添加</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 2:  &#x2F;&#x2F;显示联系人
	showPerson(&amp;abs);
	break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>测试效果如图：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544166401582.png" alt="1544166401582"></p>
<h2 id="7、删除联系人"><a href="#7、删除联系人" class="headerlink" title="7、删除联系人"></a>7、删除联系人</h2><p>功能描述：按照姓名进行删除指定联系人</p>
<p>删除联系人实现步骤：</p>
<ul>
<li>封装检测联系人是否存在</li>
<li>封装删除联系人函数</li>
<li>测试删除联系人功能</li>
</ul>
<h3 id="7-1-封装检测联系人是否存在"><a href="#7-1-封装检测联系人是否存在" class="headerlink" title="7.1  封装检测联系人是否存在"></a>7.1  封装检测联系人是否存在</h3><p>设计思路：</p>
<p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在提示用户没有要删除的联系人</p>
<p>因此我们可以把检测联系人是否存在封装成一个函数中，如果存在，返回联系人在通讯录中的位置，不存在返回-1</p>
<p>检测联系人是否存在代码：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;判断是否存在查询的人员，存在返回在数组中索引位置，不存在返回-1
int isExist(Addressbooks * abs, string name)
&#123;
	for (int i &#x3D; 0; i &lt; abs-&gt;m_Size; i++)
	&#123;
		if (abs-&gt;personArray[i].m_Name &#x3D;&#x3D; name)
		&#123;
			return i;
		&#125;
	&#125;
	return -1;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="7-2-封装删除联系人函数"><a href="#7-2-封装删除联系人函数" class="headerlink" title="7.2 封装删除联系人函数"></a>7.2 封装删除联系人函数</h3><p>根据用户输入的联系人判断该通讯录中是否有此人</p>
<p>查找到进行删除，并提示删除成功</p>
<p>查不到提示查无此人。</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;3、删除指定联系人信息
void deletePerson(Addressbooks * abs)
&#123;
	cout &lt;&lt; &quot;请输入您要删除的联系人&quot; &lt;&lt; endl;
	string name;
	cin &gt;&gt; name;

	int ret &#x3D; isExist(abs, name);
	if (ret !&#x3D; -1)
	&#123;
		for (int i &#x3D; ret; i &lt; abs-&gt;m_Size; i++)
		&#123;
			abs-&gt;personArray[i] &#x3D; abs-&gt;personArray[i + 1];
		&#125;
         abs-&gt;m_Size--;
		cout &lt;&lt; &quot;删除成功&quot; &lt;&lt; endl;
	&#125;
	else
	&#123;
		cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);
	system(&quot;cls&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="7-3-测试删除联系人功能"><a href="#7-3-测试删除联系人功能" class="headerlink" title="7.3 测试删除联系人功能"></a>7.3 测试删除联系人功能</h3><p>在switch case 语句中，case3里添加：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 3:  &#x2F;&#x2F;删除联系人
	deletePerson(&amp;abs);
	break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>测试效果如图：</p>
<p>存在情况：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544167951559.png" alt="1544167951559"></p>
<p>不存在情况：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544168010831.png" alt="1544168010831"></p>
<h2 id="8、查找联系人"><a href="#8、查找联系人" class="headerlink" title="8、查找联系人"></a>8、查找联系人</h2><p>功能描述：按照姓名查看指定联系人信息</p>
<p>查找联系人实现步骤</p>
<ul>
<li>封装查找联系人函数</li>
<li>测试查找指定联系人</li>
</ul>
<h3 id="8-1-封装查找联系人函数"><a href="#8-1-封装查找联系人函数" class="headerlink" title="8.1 封装查找联系人函数"></a>8.1 封装查找联系人函数</h3><p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。</p>
<p>查找联系人代码：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;4、查找指定联系人信息
void findPerson(Addressbooks * abs)
&#123;
	cout &lt;&lt; &quot;请输入您要查找的联系人&quot; &lt;&lt; endl;
	string name;
	cin &gt;&gt; name;

	int ret &#x3D; isExist(abs, name);
	if (ret !&#x3D; -1)
	&#123;
		cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Name &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;性别：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Sex &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;年龄：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Age &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;电话：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Phone &lt;&lt; &quot;\t&quot;;
		cout &lt;&lt; &quot;住址：&quot; &lt;&lt; abs-&gt;personArray[ret].m_Addr &lt;&lt; endl;
	&#125;
	else
	&#123;
		cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);
	system(&quot;cls&quot;);

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="8-2-测试查找指定联系人"><a href="#8-2-测试查找指定联系人" class="headerlink" title="8.2 测试查找指定联系人"></a>8.2 测试查找指定联系人</h3><p>在switch case 语句中，case4里添加：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 4:  &#x2F;&#x2F;查找联系人
	findPerson(&amp;abs);
	break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>测试效果如图</p>
<p>存在情况：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544170057646.png" alt="1544170057646"></p>
<p>不存在情况：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544170254021.png" alt="1544170254021"></p>
<h2 id="9、修改联系人"><a href="#9、修改联系人" class="headerlink" title="9、修改联系人"></a>9、修改联系人</h2><p>功能描述：按照姓名重新修改指定联系人</p>
<p>修改联系人实现步骤</p>
<ul>
<li>封装修改联系人函数</li>
<li>测试修改联系人功能</li>
</ul>
<h3 id="9-1-封装修改联系人函数"><a href="#9-1-封装修改联系人函数" class="headerlink" title="9.1 封装修改联系人函数"></a>9.1 封装修改联系人函数</h3><p>实现思路：查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示查无此人</p>
<p>修改联系人代码：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;5、修改指定联系人信息
void modifyPerson(Addressbooks * abs)
&#123;
	cout &lt;&lt; &quot;请输入您要修改的联系人&quot; &lt;&lt; endl;
	string name;
	cin &gt;&gt; name;

	int ret &#x3D; isExist(abs, name);
	if (ret !&#x3D; -1)
	&#123;
		&#x2F;&#x2F;姓名
		string name;
		cout &lt;&lt; &quot;请输入姓名：&quot; &lt;&lt; endl;
		cin &gt;&gt; name;
		abs-&gt;personArray[ret].m_Name &#x3D; name;

		cout &lt;&lt; &quot;请输入性别：&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;1 -- 男&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;2 -- 女&quot; &lt;&lt; endl;

		&#x2F;&#x2F;性别
		int sex &#x3D; 0;
		while (true)
		&#123;
			cin &gt;&gt; sex;
			if (sex &#x3D;&#x3D; 1 || sex &#x3D;&#x3D; 2)
			&#123;
				abs-&gt;personArray[ret].m_Sex &#x3D; sex;
				break;
			&#125;
			cout &lt;&lt; &quot;输入有误，请重新输入&quot;;
		&#125;

		&#x2F;&#x2F;年龄
		cout &lt;&lt; &quot;请输入年龄：&quot; &lt;&lt; endl;
		int age &#x3D; 0;
		cin &gt;&gt; age;
		abs-&gt;personArray[ret].m_Age &#x3D; age;

		&#x2F;&#x2F;联系电话
		cout &lt;&lt; &quot;请输入联系电话：&quot; &lt;&lt; endl;
		string phone &#x3D; &quot;&quot;;
		cin &gt;&gt; phone;
		abs-&gt;personArray[ret].m_Phone &#x3D; phone;

		&#x2F;&#x2F;家庭住址
		cout &lt;&lt; &quot;请输入家庭住址：&quot; &lt;&lt; endl;
		string address;
		cin &gt;&gt; address;
		abs-&gt;personArray[ret].m_Addr &#x3D; address;

		cout &lt;&lt; &quot;修改成功&quot; &lt;&lt; endl;
	&#125;
	else
	&#123;
		cout &lt;&lt; &quot;查无此人&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);
	system(&quot;cls&quot;);

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h3 id="9-2-测试修改联系人功能"><a href="#9-2-测试修改联系人功能" class="headerlink" title="9.2 测试修改联系人功能"></a>9.2 测试修改联系人功能</h3><p>在switch case 语句中，case 5里添加：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 5:  &#x2F;&#x2F;修改联系人
	modifyPerson(&amp;abs);
	break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>测试效果如图：</p>
<p>查不到指定联系人情况：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544172265676.png" alt="1544172265676"></p>
<p>查找到联系人，并修改成功：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544172164141.png" alt="1544172164141"></p>
<p>再次查看通讯录，确认修改完毕</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544172228627.png" alt="1544172228627"></p>
<h2 id="10、清空联系人"><a href="#10、清空联系人" class="headerlink" title="10、清空联系人"></a>10、清空联系人</h2><p>功能描述：清空通讯录中所有信息</p>
<p>清空联系人实现步骤</p>
<ul>
<li>封装清空联系人函数</li>
<li>测试清空联系人</li>
</ul>
<h3 id="10-1-封装清空联系人函数"><a href="#10-1-封装清空联系人函数" class="headerlink" title="10.1 封装清空联系人函数"></a>10.1 封装清空联系人函数</h3><p>实现思路： 将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。</p>
<p>清空联系人代码：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;6、清空所有联系人
void cleanPerson(Addressbooks * abs)
&#123;
	abs-&gt;m_Size &#x3D; 0;
	cout &lt;&lt; &quot;通讯录已清空&quot; &lt;&lt; endl;
	system(&quot;pause&quot;);
	system(&quot;cls&quot;);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="10-2-测试清空联系人"><a href="#10-2-测试清空联系人" class="headerlink" title="10.2  测试清空联系人"></a>10.2  测试清空联系人</h3><p>在switch case 语句中，case 6 里添加：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">case 6:  &#x2F;&#x2F;清空联系人
	cleanPerson(&amp;abs);
	break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>测试效果如图：</p>
<p>清空通讯录</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544172909693.png" alt="1544172909693"></p>
<p>再次查看信息，显示记录为空</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-通讯录管理系统\1544172943653.png" alt="1544172943653"></p>
<p><strong>至此，通讯录管理系统完成！</strong></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>项目</tag>
        <tag>通讯录管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础教程整理</title>
    <url>/2022/07/01/C-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="C语言提高"><a href="#C语言提高" class="headerlink" title="C语言提高"></a>C语言提高</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马教程资料总结</li>
<li> [Linux C 函数.chm](C-基础教程整理\07_Linux C 函数.chm) </li>
</ul>
<h3 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h3><h4 id="数据类型本质分析"><a href="#数据类型本质分析" class="headerlink" title="数据类型本质分析"></a>数据类型本质分析</h4><h5 id="数据类型概念"><a href="#数据类型概念" class="headerlink" title="数据类型概念"></a>数据类型概念</h5><ul>
<li> “类型”是对数据的抽象 </li>
<li> 类型相同的数据有相同的表示形式、存储格式以及相关的操作 </li>
<li> 程序中使用的所有数据都必定属于某一种数据类型 </li>
<li><img src="http://qiniu.orangew.cn/img/wps39B3.tmp.jpg" alt="img"></li>
</ul>
<h5 id="数据类型的本质"><a href="#数据类型的本质" class="headerlink" title="数据类型的本质"></a>数据类型的本质</h5><ul>
<li>数据类型可理解为创建变量的模具：是固定内存大小的别名。</li>
<li>数据类型的作用：编译器预算对象（变量）分配的内存空间大小</li>
<li>注意：数据类型只是模具，编译器并没有分配空间，只有根据类型（模具）创建变量（实物），编译器才会分配空间。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//告诉编译器，分配4个字节的内存</span>
    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//告诉编译器，分配4*10 = 40 个字节的内存</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b:%p, b+1: %p, &amp;b:%p, &amp;b+1: %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//b+1 和 &amp;b+1的结果不一样 </span>
    <span class="token comment">//是因为 b 和 &amp;b 所代表的数据类型不一样</span>
    <span class="token comment">//b  代表数组首元素的地址</span>
    <span class="token comment">//&amp;b 代表整体数组的地址</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><img src="http://qiniu.orangew.cn/img/20220702085501.png" alt="20220702085501"></li>
</ul>
<h5 id="数据类型的大小"><a href="#数据类型的大小" class="headerlink" title="数据类型的大小"></a>数据类型的大小</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//告诉编译器，分配4个字节的内存</span>
    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//告诉编译器，分配4*10 = 40 个字节的内存</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(int *):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b[0]):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(*b):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><img src="http://qiniu.orangew.cn/img/20220702090155.png" alt="20220702090155"></li>
<li>sizeof是操作符，不是函数；sizeof测量的实体大小为编译期间就已确定。</li>
</ul>
<h5 id="数据类型的别名"><a href="#数据类型的别名" class="headerlink" title="数据类型的别名"></a>数据类型的别名</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">People</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">People</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">people_t</span><span class="token punctuation">;</span>
<span class="token comment">/* 给结构体类型起别名 */</span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u32<span class="token punctuation">;</span>   <span class="token comment">//给unsigned int类型取别名</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">People</span> p1<span class="token punctuation">;</span> 
    <span class="token class-name">people_t</span> p2<span class="token punctuation">;</span>
    u32 a<span class="token punctuation">;</span>      

    p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    
    p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        

    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                 

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="数据类型的封装"><a href="#数据类型的封装" class="headerlink" title="数据类型的封装"></a>数据类型的封装</h5><ul>
<li> void的字面意思是“无类型”，void *则为“无类型指针”，void *可以指向任何类型的数据。</li>
</ul>
<ol>
<li>用法1：数据类型的封装</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InitHardEnv</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>典型的如内存操作函数memcpy和memset的函数原型分别为</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memset</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>用法2：void修饰函数返回值和参数，仅表示无<ul>
<li>如果函数没有返回值，那么应该将其声明为void型</li>
<li>如果函数没有参数，应该声明其参数为void</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>void指针的意义<ul>
<li>C语言规定只有相同类型的指针才可以相互赋值</li>
<li>void * 指针作为左值用于“接收”任意类型的指针</li>
<li>void * 指针作为右值赋值给其它指针时需要强制类型转换</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
<span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizoeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>不存在void类型的变量</li>
<li>C语言没有定义void究竟是多大内存的别名</li>
</ul>
<h5 id="数类型的总结与拓展"><a href="#数类型的总结与拓展" class="headerlink" title="数类型的总结与拓展"></a>数类型的总结与拓展</h5><blockquote>
<p>​    1、数据类型本质是固定内存大小的别名，是个模具，c语言规定：通过数据类型定义变量。</p>
<p>​    2、数据类型大小计算（sizeof）</p>
<p>​    3、可以给已存在的数据类型起别名typedef</p>
<p>​    4、数据类型封装概念（void 万能类型）</p>
</blockquote>
<h4 id="变量的本质分析"><a href="#变量的本质分析" class="headerlink" title="变量的本质分析"></a>变量的本质分析</h4><h5 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h5><ul>
<li>概念：既能读又能写的内存对象，称为变量；若一旦初始化后不能修改的对象则称为常量。</li>
<li>变量定义形式：   类型 标识符, 标识符, … , 标识符 ; </li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>   	x<span class="token punctuation">;</span>
<span class="token keyword">int</span>   	wordCut<span class="token punctuation">,</span>  Radius<span class="token punctuation">,</span>  Height<span class="token punctuation">;</span>       
<span class="token keyword">double</span>   FlightTime<span class="token punctuation">,</span>  Mileage<span class="token punctuation">,</span>  Speed<span class="token punctuation">;</span>    
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">double</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h5><ol>
<li>程序通过变量来申请和命名内存空间 int a = 0。</li>
<li>通过变量名访问内存空间。</li>
<li>变量：一段连续内存空间的别名.</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 通过变量直接操作内存</span>
	i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;i:%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p:%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 通过内存编号间接操作内存</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, *p = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>数据类型和变量的关系<ul>
<li>通过数据类型定义变量</li>
</ul>
</li>
<li>总结</li>
</ol>
<blockquote>
<p>1 对内存，可读可写；</p>
<p>2 通过变量往内存读写数据；</p>
<p>3 不是向变量读写数据，而是向变量所代表的内存空间中写数据。</p>
</blockquote>
<h4 id="程序的内存四区模型"><a href="#程序的内存四区模型" class="headerlink" title="程序的内存四区模型"></a>程序的内存四区模型</h4><p><img src="http://qiniu.orangew.cn/img/wpsE914.tmp.jpg" alt="img"></p>
<ul>
<li><p>流程说明</p>
<ul>
<li><p>操作系统把物理硬盘代码load到内存</p>
</li>
<li><p>操作系统把c代码分成四个区</p>
</li>
<li><p><img src="file:///C:\Users\10559\AppData\Local\Temp\ksohtml\wps9FF2.tmp.jpg" alt="img"></p>
</li>
<li><p>操作系统找到main函数入口执行</p>
</li>
<li><p>建立正确程序运行内存布局图是学好C的关键</p>
</li>
</ul>
</li>
</ul>
<h5 id="栈区和堆区"><a href="#栈区和堆区" class="headerlink" title="栈区和堆区"></a>栈区和堆区</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//堆</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                   
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                
    <span class="token punctuation">&#125;</span>                                   
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>      
<span class="token punctuation">&#125;</span>

<span class="token comment">//栈</span>

<span class="token comment">//注意 return不是把内存块 64个字节,给return出来</span>
<span class="token comment">//而是把内存块的首地址(比如内存的编号0xaa11) ，返回给 tmp</span>
<span class="token comment">// 理解指针的关键是内存，没有内存哪里来的指针 </span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//临时变量 栈区存放</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//printf("buf:%s\n", buf);</span>
    <span class="token keyword">return</span> buf<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                   
        <span class="token keyword">return</span> <span class="token punctuation">;</span>                    
    <span class="token punctuation">&#125;</span>                                   
    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"111222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向tmp做指向的内存空间中copy数据</span>

    tmp <span class="token operator">=</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//tmp = 0xaa11;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token string">"abcdefg2"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token string">"abcdefg2"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> <span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//打印p1 p2 所指向内存空间的数据</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%s , p2:%s \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//打印p1 p2 的值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p , p2:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="函数的调用模型"><a href="#函数的调用模型" class="headerlink" title="函数的调用模型"></a>函数的调用模型</h5><ul>
<li><img src="http://qiniu.orangew.cn/img/wpsFE.tmp.jpg" alt="img"></li>
</ul>
<h5 id="函数调用变量传递分析"><a href="#函数调用变量传递分析" class="headerlink" title="函数调用变量传递分析"></a>函数调用变量传递分析</h5><ol>
<li><p><img src="http://qiniu.orangew.cn/img/wps2BC3.tmp.png" alt="img"></p>
</li>
<li><p> <img src="http://qiniu.orangew.cn/img/wpsCC98.tmp.png" alt="img"></p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wps996F.tmp.png" alt="img"></p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wps6422.tmp.png" alt="img"></p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wpsBE4A.tmp.png" alt="img"></p>
</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wps2E6A.tmp.jpg" alt="img"> </p>
<ol>
<li>main函数中可以在栈/堆/全局分配内存，都可以被func1和func2使用</li>
<li>func2在栈上分配的内存，不能被func1和main函数使用</li>
<li>func2中malloc的内存(堆),可以被main和func1函数使用</li>
<li>func2中全局分配“abcdefg”(常量全局区)内存，可以被func1和main函数使用</li>
</ol>
<h5 id="栈的生长方向和内存存放方向"><a href="#栈的生长方向和内存存放方向" class="headerlink" title="栈的生长方向和内存存放方向"></a>栈的生长方向和内存存放方向</h5><p><img src="http://qiniu.orangew.cn/img/wpsC94E.tmp.png" alt="img"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;b: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf的地址 : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf+1地址: %p \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h4 id="指针强化"><a href="#指针强化" class="headerlink" title="指针强化"></a>指针强化</h4><h5 id="指针是一种数据类型"><a href="#指针是一种数据类型" class="headerlink" title="指针是一种数据类型"></a>指针是一种数据类型</h5><ol>
<li><p>指针变量也是一种变量，占有内存空间，用来保存内存地址</p>
<p>测试指针变量占有内存空间大小。</p>
</li>
<li><p>*p操作内存</p>
</li>
</ol>
<blockquote>
<p>在指针声明时，* 号表示所声明的变量为指针</p>
<p>在指针使用时，* 号表示操作指针所指向的内存空间中的值</p>
</blockquote>
<ul>
<li>*p相当于通过地址(p变量的值)找到一块内存，然后操作内存</li>
<li>*p放在等号的左边赋值（给内存赋值，写内存）</li>
<li>*p放在等号的右边取值（从内存获取值，读内存）</li>
</ul>
<ol start="3">
<li>指针变量和它指向的内存块是两个不同的概念。</li>
</ol>
<blockquote>
<p>​        规则1： 给p赋值p=0x1111; 只会改变指针变量值，不会改变所指的内容；</p>
<p>​        p = p +1; //p++</p>
<p>​        规则2 ：给*p赋值 *p=’a’; 不会改变指针变量的值，只会改变所指的内存块的值 </p>
<p>​        规则3 ：= 左边 *p 表示 给内存赋值， = 右边 *p 表示取值，含义不同切记！</p>
<p>​        规则4 ：保证所指的内存块能修改</p>
</blockquote>
<ol start="4">
<li>指针是一种数据类型，是指它指向的内存空间的数据类型 。</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> 
p<span class="token operator">++</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>指针步长（p++），根据所致内存空间的数据类型来确定。</li>
<li>p++ 等价于 (unsigned char )p+sizeof(a);    </li>
</ul>
<ol start="5">
<li>当我们不断的给指针变量赋值，就是不断的改变指针变量（和所指向内存空间没有任何关系）。指针指向谁，就把谁的地址赋值给指针。</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>


<span class="token comment">//不断给指针赋值就是不断改变指针的指向</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     i<span class="token punctuation">;</span>

    <span class="token keyword">char</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//不断的修改p1的值 相当于 不断改变指针的指向</span>
    p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//不断改变p1本身变量</span>
        p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token string">"abcdefg1212333333333311"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//不断的改变p1本身变量，跟p1指向的内存块无关</span>
        p1 <span class="token operator">=</span> p2<span class="token operator">+</span>i<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>不允许向NULL和未知非法地址拷贝内存。</li>
</ol>
<h5 id="简接赋值-p-是指针存在的最大意义"><a href="#简接赋值-p-是指针存在的最大意义" class="headerlink" title="简接赋值(* p)是指针存在的最大意义"></a>简接赋值(* p)是指针存在的最大意义</h5><blockquote>
<p>*p间接赋值成立条件： 三大条件 </p>
<p>条件一： 2个变量（通常一个实参，一个形参）</p>
<p>条件二：建立关系，实参取地址赋给形参指针 </p>
<p>条件三：*p形参去间接修改实参的值 </p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 条件一：两个变量</span>
            
p <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>       <span class="token comment">// 条件二：建立关系</span>

Num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>        <span class="token comment">// 条件三：通过* 操作符， 间接的给变量内存赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>间接操作：从0级指针到1级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//使用一级指针</span>
<span class="token keyword">void</span>  <span class="token function">getFileLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span>    <span class="token comment">//  p的值是file_len的地址 *p的地址间接修改file_len的值 </span>
                     <span class="token comment">//在被调用函数里面 通过形参 去 间接的修改 实参的值...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span>  <span class="token function">getFileLen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//不使用指针， 0级指针</span>
<span class="token keyword">void</span>  <span class="token function">getFileLen3</span><span class="token punctuation">(</span><span class="token keyword">int</span> file_len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    file_len <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//1级指针的技术推演</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> file_len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment">//条件1  定义了两个变量(实参 另外一个变量是形参p)</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    p <span class="token operator">=</span> <span class="token operator">&amp;</span>file_len<span class="token punctuation">;</span>          <span class="token comment">//条件2 建立关联</span>

    file_len <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token comment">//直接修改</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>               <span class="token comment">//条件3 p的值是file_len的地址 </span>
                           <span class="token comment">//      *就像一把钥匙 通过地址 </span>
                           <span class="token comment">//      找到一块内存空间 间接的修改了file_len的值</span>

    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  <span class="token comment">//  p的值是a的地址 *a的地址间接修改a的值  //条件3 *p</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"file_len: %d\n"</span><span class="token punctuation">,</span> file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">getFileLen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file_len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立关联: 把实参取地址 传递给 形参</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getFileLen后 file_len: %d \n"</span><span class="token punctuation">,</span> file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getFileLen3</span><span class="token punctuation">(</span>file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getFileLen3后 file_len: %d \n"</span><span class="token punctuation">,</span> file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>间接操作：从1级别指针到2级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>


<span class="token keyword">void</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    p2 <span class="token operator">=</span> <span class="token number">0x80088008</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0x40044004</span><span class="token punctuation">;</span> <span class="token comment">//间接赋值  p2是p1的地址</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">//直接修改p1的值</span>
    p1 <span class="token operator">=</span> <span class="token number">0x11001100</span><span class="token punctuation">;</span>

    <span class="token comment">//间接修改p1的值</span>
    p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>

    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0x10101010</span><span class="token punctuation">;</span>    <span class="token comment">//间接赋值  p2是p1的地址</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0x20022002</span><span class="token punctuation">;</span> <span class="token comment">//间接赋值  p2是p1的地址</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">getMem</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>函数调用时，形参传给实参，用实参取地址，传给形参，在被调用函数里面用*p，来改变实参，把运算结果传出来。</p>
</blockquote>
<ul>
<li>间接赋值的推论</li>
</ul>
<blockquote>
<p>用1级指针形参，去间接修改了0级指针(实参)的值。</p>
<p>用2级指针形参，去间接修改了1级指针(实参)的值。</p>
<p>用3级指针形参，去间接修改了2级指针(实参)的值。</p>
<p>用n级指针形参，去间接修改了n-1级指针(实参)的值。</p>
</blockquote>
<ul>
<li>间接操作：应用场景<ul>
<li>正常：    条件一，条件二，条件三都写在一个函数里。</li>
<li>间接赋值：条件一，条件二写在一个函数里， 条件三写在另一个函数里</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">/* 间接赋值成立的三个条件
   条件1    定义1个变量（实参） 
   条件2    建立关联：把实参取地址传给形参
   条件3：  *形参去间接地的修改了实参的值。
 */</span>
<span class="token keyword">void</span> <span class="token function">copy_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p1 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
        p2<span class="token operator">++</span><span class="token punctuation">;</span>
        p1<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//间接赋值的应用场景</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//1写在一个函数中 2作为形参建立关联   3 单独写在另外一个函数里面 </span>
    <span class="token keyword">char</span> from<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> to<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token string">"1122233133332fafdsafas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copy_str</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"to:%s \n"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="理解指针必须和内存四区概念结合"><a href="#理解指针必须和内存四区概念结合" class="headerlink" title="理解指针必须和内存四区概念结合"></a>理解指针必须和内存四区概念结合</h5><ol>
<li>主调函数 被调函数 <ul>
<li>主调函数可把堆区、栈区、全局数据内存地址传给被调用函数</li>
<li>被调用函数只能返回堆区、全局数据</li>
</ul>
</li>
<li>内存分配方式<ul>
<li>指针做函数参数，是有输入和输出特性的。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>mylen1<span class="token punctuation">,</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>mylen2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>tmp1<span class="token punctuation">,</span> <span class="token operator">*</span>tmp2<span class="token punctuation">;</span>

    tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token string">"1132233"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//间接赋值 </span>
    <span class="token operator">*</span>mylen1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1级指针</span>
    <span class="token operator">*</span>myp1 <span class="token operator">=</span> tmp1<span class="token punctuation">;</span>            <span class="token comment">//2级指针的间接赋值</span>

    tmp2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> <span class="token string">"aaaaavbdddddddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>mylen2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1级指针</span>
    <span class="token operator">*</span>myp2 <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>            <span class="token comment">//2级指针的间接赋值</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func getMem() err:%d \n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%s \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2:%s \n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="应用指针必须和函数调用相结合（指针做函数参数）"><a href="#应用指针必须和函数调用相结合（指针做函数参数）" class="headerlink" title="应用指针必须和函数调用相结合（指针做函数参数）"></a>应用指针必须和函数调用相结合（指针做函数参数）</h5><ul>
<li><p>指针作为函数参数是研究指针的重点。</p>
</li>
<li><p>一级指针典型用法:</p>
<ul>
<li><p>一级指针做输入</p>
</li>
<li><blockquote>
<p>int showbuf(char *p);</p>
<p>int showArray(int *array, int iNum);</p>
</blockquote>
</li>
<li><p>一级指针做输出</p>
</li>
<li><blockquote>
<p>int getLen(char *pFileName, int *pfileLen);</p>
</blockquote>
<blockquote>
<p>理解</p>
<p>​        输入：主调函数分配内存</p>
<p>​        输出：被调用函数分配内存</p>
<p>​        被调用函数是在heap上分配内存而非stack上</p>
</blockquote>
</li>
</ul>
</li>
<li><p>二级指针典型用法</p>
<ul>
<li><p>二级指针做输入</p>
</li>
<li><blockquote>
<p>int main(int arc ,char * arg[]);     //字符串数组</p>
<p>int shouMatrix(int [3] [4], int iLine);</p>
</blockquote>
</li>
<li><p>二级指针做输出</p>
</li>
<li><blockquote>
<p>int Demo64_GetTeacher(Teacher **ppTeacher);</p>
<p>int Demo65_GetTeacher_Free(Teacher **ppTeacher);</p>
<p>int getData(char **data, int *dataLen);</p>
<p>int getData_Free(void *data);</p>
<p>int getData_Free2(void **data);       //避免野指针</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="经典语录"><a href="#经典语录" class="headerlink" title="经典语录"></a>经典语录</h4><blockquote>
<p>1）指针也是一种数据类型，指针的数据类型是指它所指向内存空间的数据类型</p>
<p>2）间接赋值*p是指针存在的最大意义 </p>
<p>3）理解指针必须和内存四区概念相结合 </p>
<p>4）应用指针必须和函数调用相结合（指针做函数参数）</p>
<p>指针是子弹，函数是枪管；子弹只有沿着枪管发射才能显示它的威力；指针的学习重点不言而喻了吧。接口的封装和设计、模块的划分、解决实际应用问题；它是你的工具。</p>
<p>5）指针指向谁就把谁的地址赋给指针 </p>
<p>6）C/C++语言有它自己的学习特点；若java语言的学习特点是学习、应用、上项目；那么C/C++语言的学习特点是：学习、理解、应用、上项目。多了一个步骤。</p>
<p>7)理解指针关键在内存，没有内存哪来的内存首地址，没有内存首地址，哪来的指针。</p>
</blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h4><h5 id="字符串数组初始化方法"><a href="#字符串数组初始化方法" class="headerlink" title="字符串数组初始化方法"></a>字符串数组初始化方法</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//一级指针的典型用法</span>
<span class="token comment">//字符串 </span>
<span class="token comment">//1 C语言的字符串 以零'\0'结尾的字符串</span>
<span class="token comment">//2 在C语言中没有字符串类型  通过字符数组 来模拟字符串 </span>
<span class="token comment">//3 字符串的内存分配  堆上 栈上 全局区 </span>

<span class="token comment">//字符数组 初始化</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//1 不指定长度  C编译器会自动帮程序员 求元素的个数</span>
    <span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//buf1是一个数组 不是一个以0结尾的字符串</span>

    <span class="token comment">//2 指定长度  </span>
    <span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">//后面的buf2[4]-buf2[99] 个字节均默认填充0</span>

    <span class="token comment">//char buf3[2] = &#123;'a', 'b', 'c', 'd'&#125;; </span>
    <span class="token comment">//如果初始化的个数大于内存的个数 编译错误</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf1: %s\n"</span><span class="token punctuation">,</span> buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2: %s \n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2[88]:%d \n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//3 用字符串初始化 字符数组</span>
    <span class="token keyword">char</span> buf3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>       <span class="token comment">//buf3 作为字符数组 有5个字节</span>
                                <span class="token comment">//      作为字符串有 4个字节</span>

    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf3字符的长度:%d \n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4</span>

    <span class="token comment">//buf3 作为数组 数组是一种数据类型 本质(固定小大内存块的别名)</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf3数组所占内存空间大小:%d \n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>


    <span class="token keyword">char</span> buf4<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span> <span class="token comment">// buf</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf4[100]:%d \n"</span><span class="token punctuation">,</span> buf4<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>sizeof 和 strlen的区别</p>
</li>
<li><blockquote>
<ol>
<li><p>sizeof为一个操作符，执行sizeof的结果，在编译期间就已经确定；</p>
<p>strlen是一个函数，是在程序执行的时候才确定结果。</p>
</li>
<li><p>sizeof和strlen对于求字符串来讲，sizeof() 字符串类型的大小，包括’\0’；strlen() 字符串的长度不包括‘\0’（数字 0 和字符‘\0’等价）。</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<h5 id="数组法和指针法操作字符串"><a href="#数组法和指针法操作字符串" class="headerlink" title="数组法和指针法操作字符串"></a>数组法和指针法操作字符串</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    <span class="token keyword">char</span>    buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>  

    <span class="token comment">//通过[]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                       
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          
    <span class="token punctuation">&#125;</span>                                       
                        
    p <span class="token operator">=</span> buf<span class="token punctuation">;</span> <span class="token comment">//buf 代表数组首元素的地址</span>
    <span class="token comment">//通过指针</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                                                          
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>                            
    <span class="token punctuation">&#125;</span>                                                       

    <span class="token comment">//通过数组首元素地址 buf 来操作</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                                   
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>buf<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>                                                   
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>[]</code> 的本质 和 <code>*p</code> 是一样。</li>
<li><code>buf</code> 是一个指针，只读的常量。之所以<code>buf</code>是一个常量指针是为了释放内存的时候,保证<code>buf</code>所指向的内存空间安全。</li>
</ul>
<h4 id="字符串做函数参数"><a href="#字符串做函数参数" class="headerlink" title="字符串做函数参数"></a>字符串做函数参数</h4><ul>
<li>数组偏移来拷贝</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"i am a student"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//0没有copy到b的buf中.</span>

    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//重要</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%s \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b:%s \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>用一个一级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//字符串copy函数</span>

<span class="token comment">//form形参 形参to 的值 不停的在变化....</span>
<span class="token comment">//不断的修改了from和to的指向</span>
<span class="token keyword">void</span> <span class="token function">copy_str1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span> from<span class="token operator">++</span><span class="token punctuation">,</span> to<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">copy_str2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//  先 *to = *from;  再from++, to++ </span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> 

    <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str3</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        from <span class="token operator">++</span><span class="token punctuation">;</span>
        to <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str4</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str5</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//*(0) = 'a';</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str5_err</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//*(0) = 'a';</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from:%s \n"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//不要轻易改变形参的值, 要引入一个辅助的指针变量. 把形参给接过来.....</span>
<span class="token keyword">int</span> <span class="token function">copy_str6</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//*(0) = 'a';</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tmpfrom <span class="token operator">=</span> from<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tmpto <span class="token operator">=</span> to<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> from <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> to <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>tmpto<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>tmpfrom<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">//空语句</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from:%s \n"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
    <span class="token function">copy_str1</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str2</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str3</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str4</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str5</span><span class="token punctuation">(</span>from <span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf:%s \n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token comment">//错误案例</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>myto <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//要分配内存</span>
        <span class="token comment">//copy_str25(from,myto);</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>myto <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//要分配内存</span>

        ret <span class="token operator">=</span> <span class="token function">copy_str6</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> myto<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func copy_str6() err:%d  "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
	
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="项目开发常用字符串应用模型"><a href="#项目开发常用字符串应用模型" class="headerlink" title="项目开发常用字符串应用模型"></a>项目开发常用字符串应用模型</h4><h5 id="strstr中的while和do-while模型"><a href="#strstr中的while和do-while模型" class="headerlink" title="strstr中的while和do-while模型"></a>strstr中的while和do-while模型</h5><ul>
<li>利用strstr标准库函数找出一个字符串中substr出现的个数。</li>
<li>do-while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//strstr(str, str2)</span>

    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//初始化 让p指针达到查找的条件</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"11abcd111122abcd3333322abcd3333322qqq"</span><span class="token punctuation">;</span>

    <span class="token keyword">do</span>
    <span class="token punctuation">&#123;</span>
        p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ncount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//</span>
            p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指针达到下次查找的条件</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ncount:%d \n"</span><span class="token punctuation">,</span> ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//初始化 让p指针达到查找的条件</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"2abcd3333322qqqabcd"</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ncount <span class="token operator">++</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让p指针达到查找的条件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ncount:%d \n"</span><span class="token punctuation">,</span> ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="两头堵模型"><a href="#两头堵模型" class="headerlink" title="两头堵模型"></a>两头堵模型</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>

<span class="token keyword">int</span> <span class="token function">get_count_non_space</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> count_p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> count_p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"str == NULL, count_p == NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ncount <span class="token operator">=</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>count_p <span class="token operator">=</span> ncount<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"      abcdefg      "</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">get_count_non_space</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"get_count_non_space err, ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ncount = %d\n"</span><span class="token punctuation">,</span> ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="字符串反转模型"><a href="#字符串反转模型" class="headerlink" title="字符串反转模型"></a>字符串反转模型</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> tmp_ch<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    p1 <span class="token operator">=</span> str<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> str <span class="token operator">+</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tmp_ch <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
        <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> tmp_ch<span class="token punctuation">;</span>
        <span class="token operator">++</span>p1<span class="token punctuation">;</span>
        <span class="token operator">--</span>p2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="递归思想"><a href="#递归思想" class="headerlink" title="递归思想"></a>递归思想</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">char</span> g_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//3 递归和非全局变量</span>
<span class="token keyword">int</span> <span class="token function">inverse4</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>dst<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归技术的条件</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inverse4</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span>  <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">strncat</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//2 递归和全局变量(把逆序的结果放在全局变量里)</span>
<span class="token keyword">int</span> <span class="token function">inverse3</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归技术的条件</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inverse3</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">strncat</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//1 通过递归的方式逆序打印</span>
<span class="token keyword">int</span> <span class="token function">inverse2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归技术的条件</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inverse2</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// test inverse()</span>
    <span class="token comment">//printf("buf : %s\n", inverse(buf));</span>

    <span class="token comment">// test inverse2();</span>
    <span class="token comment">//inverse2(buf);</span>

    <span class="token comment">// test inverse3();</span>
    <span class="token comment">//inverse3(buf);</span>
    <span class="token comment">//printf("g_buf : %s\n", g_buf);</span>

    <span class="token comment">// test inverse4();</span>
    <span class="token function">inverse4</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> dst_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dst_buf : %s\n"</span><span class="token punctuation">,</span> dst_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="一级指针-char-易错地方"><a href="#一级指针-char-易错地方" class="headerlink" title="一级指针(char*)易错地方"></a>一级指针(char*)易错地方</h4><h5 id="对空字符串和非法字符串的判断"><a href="#对空字符串和非法字符串的判断" class="headerlink" title="对空字符串和非法字符串的判断"></a>对空字符串和非法字符串的判断</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">copy_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>from <span class="token operator">==</span> <span class="token char">'\0'</span> <span class="token operator">||</span> <span class="token operator">*</span>to <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func copy_str() err\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span> from<span class="token operator">++</span><span class="token punctuation">,</span> to<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span><span class="token string">"aabbccdd"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> to<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">copy_str</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"to : %s\n"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="越界"><a href="#越界" class="headerlink" title="越界"></a>越界</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="指针的叠加会不断改变指针的方向"><a href="#指针的叠加会不断改变指针的方向" class="headerlink" title="指针的叠加会不断改变指针的方向"></a>指针的叠加会不断改变指针的方向</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getKeyByValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>keyvaluebuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>keybuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span>keyvaluebuf <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>a<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyvaluebuf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>           

    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   

<span class="token keyword">void</span> <span class="token function">copy_str_err</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span> from<span class="token operator">++</span><span class="token punctuation">,</span> to<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>           
        <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>        
    <span class="token punctuation">&#125;</span>                           
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"to:%s"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from:%s"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="局部变量不要外传"><a href="#局部变量不要外传" class="headerlink" title="局部变量不要外传"></a>局部变量不要外传</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">my_stract</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>z<span class="token operator">=</span>str<span class="token punctuation">;</span>           <span class="token comment">/*指针z指向数组str*/</span>  

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    z<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token comment">/*去掉串尾结束标志*/</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    z<span class="token operator">=</span>str<span class="token punctuation">;</span>                 <span class="token comment">/*将str地址赋给指针变量z*/</span>

    <span class="token keyword">return</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="函数内使用辅助变量的重要性"><a href="#函数内使用辅助变量的重要性" class="headerlink" title="函数内使用辅助变量的重要性"></a>函数内使用辅助变量的重要性</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//char *p = "abcd11111abcd2222abcdqqqqq"; </span>
<span class="token comment">//字符串中"abcd"出现的次数。</span>
<span class="token keyword">int</span> <span class="token function">getSubCount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>substr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>mycount<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>sub <span class="token operator">=</span> substr<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> substr<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> mycount <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">do</span>
    <span class="token punctuation">&#123;</span>
        p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token operator">*</span>mycount<span class="token operator">++</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcd11111abcd2222abcdqqqqq"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSubCount</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abcd's count :%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><h5 id="const知识点"><a href="#const知识点" class="headerlink" title="const知识点"></a>const知识点</h5><ol>
<li>const声明的变量只能被读</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

i<span class="token operator">=</span>j<span class="token punctuation">;</span>   <span class="token comment">//非法，导致编译错误</span>
j<span class="token operator">=</span>i<span class="token punctuation">;</span>   <span class="token comment">//合法 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>必须初始化</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">//合法</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>      <span class="token comment">//非法，导致编译错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li>在另一.c源文件中引用const常量</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token comment">//合法</span>
<span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment">//非法，常量不可以被再次赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="4">
<li>避免不必要的内存分配</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STRING</span> <span class="token string">"abcdefghijklmn"</span></span>
<span class="token keyword">const</span> <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"ABCDEFGHIJK"</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为STRING分配了第一次内存</span>
<span class="token function">printf</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为string一次分配了内存，以后不再分配</span>

<span class="token function">printf</span><span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为STRING分配了第二次内存</span>
<span class="token function">printf</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>      
<span class="token comment">/*
由于const定义常量从汇编的角度来看，只是给出了对应的内存地址，
而不是象#define一样给出的是立即数，所以，const定义的常量在
程序运行过程中只有一份拷贝，而#define定义的常量在内存中有
若干个拷贝。
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>C语言中const是一个冒牌货<ul>
<li>通过强制类型转换，将地址赋给变量，再作修改即可以改变const常量值。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">nt <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment">//代表一个常整型数</span>
    <span class="token keyword">int</span> <span class="token keyword">const</span> b<span class="token punctuation">;</span>    <span class="token comment">//代表一个常整型数  </span>

    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>  <span class="token comment">// 是一个指向常整型数的指针</span>
                    <span class="token comment">// (所指向的内存数据不能修改，</span>
                    <span class="token comment">//  但是本身可以修改)</span>
    
    <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> d<span class="token punctuation">;</span> <span class="token comment">// 常指针(指针变量不能被修改，</span>
                    <span class="token comment">//        但是它所指向的内存空间可以被修改)</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> e<span class="token punctuation">;</span><span class="token comment">// 一个指向常量整型的常指针</span>
                         <span class="token comment">// (指针和它所指向的内存空间，</span>
                         <span class="token comment">//  均不可以修改)</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>const好处</li>
</ul>
<blockquote>
<p>合理的利用const，</p>
<p>1 指针做函数参数，可以有效的提高代码可读性，减少bug；</p>
<p>2 清楚的分清参数的输入和输出特性</p>
</blockquote>
<h4 id="强化练习"><a href="#强化练习" class="headerlink" title="强化练习"></a>强化练习</h4><blockquote>
<p>有一个字符串开头或结尾含有n个空格 （”   abcdefgdddd    “），欲去掉前后空格，返回一个新字符串。<br>    要求1：请自己定义一个接口（函数），并实现功能；<br>    要求2：编写测试用例。<br>    int trimSpace(char *inbuf, char *outbuf);</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">/*
2. 有一个字符串开头或结尾含有n个空格 （"   abcdefgdddd    "），欲去掉前后空格，返回一个新字符串。
	要求1：请自己定义一个接口（函数），并实现功能；
	要求2：编写测试用例。
	int trimSpace(char *inbuf, char *outbuf);
*/</span>


<span class="token comment">/* 
功能：获取非空字符串
参数：
	inbuf： 原始字符串buf首地址
	outbuf：非空字符串buf首地址
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>inbuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>outbuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inbuf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> outbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//字符串第一个元素位置</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>inbuf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//字符串最后一个元素位置</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//出错处理</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从左往右，如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//往右移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左，如果当前字符为空</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//非空元素个数</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> inbuf <span class="token operator">+</span> begin<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	outbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//因为strncpy()不会自动添加'\0'，所以需要人为添加</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"   abcdefgdddd    "</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"trimSpace err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf:%s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>要求写一个函数实现如下功能：</p>
<p>功能1：把偶数位字符挑选出来，组成一个字符串1。</p>
<p>功能2：把奇数位字符挑选出来，组成一个字符串2。</p>
<p>功能3：把字符串1和字符串2，通过函数参数，传送给main，并打印。</p>
<p>功能4：主函数能测试通过。</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getStr1Str2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>source<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">getstr1str2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> source<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token operator">=</span>source<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
cnt<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token operator">*</span>buf1<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
<span class="token operator">*</span>buf2<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">*</span>buf1<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token operator">*</span>buf2<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">char</span> nullc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> testc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"fsadfweeuwru"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>buf1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>buf2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"char is null  value is %d\n"</span><span class="token punctuation">,</span><span class="token function">getstr1str2</span><span class="token punctuation">(</span>nullc<span class="token punctuation">,</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getstr1str2</span><span class="token punctuation">(</span>testc<span class="token punctuation">,</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf1 is %s  buf2 is %s"</span><span class="token punctuation">,</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>要求1：请自己定义一个接口，实现根据key获取.</p>
<p>要求2：编写测试用例。</p>
<p>要求3：键值对中间可能有n多空格，请去除空格</p>
<p>格式如下：</p>
<p>“key1 = value1”</p>
<p>“key2 =    value2”</p>
<p>“key3 = value3”</p>
<p>“key4    = value4”</p>
<p>“key5  =  “</p>
<p>“key6  =”</p>
<p>int getKeyByValue(char *keyvaluebuf, char *keybuf, char *valuebuf, int * valuebuflen);</p>
<p>int main(void)</p>
<p>{</p>
<p>//…</p>
<p>getKeyByValude(“key1 = valude1”, “key1”, buf, &amp;len);</p>
<p>//…</p>
<p>return 0;</p>
<p>}</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
功能：获取非空字符串
参数：
	inbuf： 原始字符串buf首地址
	outbuf：非空字符串buf首地址
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>inbuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>outbuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inbuf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> outbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//字符串第一个元素位置</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>inbuf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//字符串最后一个元素位置</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//出错处理</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从左往右，如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//往右移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左，如果当前字符为空</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//非空元素个数</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> inbuf <span class="token operator">+</span> begin<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	outbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//因为strncpy()不会自动添加'\0'，所以需要人为添加</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
功能：
	键值对（“key = value”）字符串根据键key查找对应的值value
参数：
	keyval：键值对（“key = value”）字符串
	pkey：键
	buf：匹配键所对应的内容
	len：匹配键所对应内容的长度
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">getKeyByValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>keyval<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pkey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>keyval <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pkey <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> buf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//辅助变量把形参接过来</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> keyval<span class="token punctuation">;</span> <span class="token comment">//"key1 =    valude1"</span>

	<span class="token comment">//查看key是否在母串</span>
	<span class="token comment">//查找 key1 是否在 "key1 =    valude1"</span>
	p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token comment">//没有匹配键</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//重新设置起点位置，字符串跳过key值</span>
	<span class="token comment">//"key1 =    valude1" -> " =    valude1"</span>
	p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pkey<span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token comment">//查找是否包含=号</span>
	p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token comment">//没有</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//字符串跳过"="</span>
	<span class="token comment">//" =    valude1" -> "    valude1"</span>
	p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//获取非空字符串</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//通过*操作符操作内存</span>
	<span class="token comment">//间接赋值</span>
	<span class="token operator">*</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> keyval<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"key1 =    valude1"</span><span class="token punctuation">;</span> <span class="token comment">//键值对字符串</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>pkey <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span> <span class="token comment">//键值</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">getKeyByValue</span><span class="token punctuation">(</span>keyval<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getKeyByValue: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value: %s\nlen = %d\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><h4 id="二级指针基本概念"><a href="#二级指针基本概念" class="headerlink" title="二级指针基本概念"></a>二级指针基本概念</h4><ul>
<li>如果一个指针变量存放的又是另一个指针变量的地址,则称这个指针变量为指向指针的指针 变量。也称为“二级指针”。</li>
<li>通过指针访问变量称为间接访问。由于指针变量直接指向变量,所以称为“一级指针”。而如果通过指向指针的指针变量来访问变量则构成“二级指针”。 </li>
<li><img src="http://qiniu.orangew.cn/img/wpsA271.tmp.jpg" alt="img"></li>
</ul>
<h5 id="二级指针输出特性"><a href="#二级指针输出特性" class="headerlink" title="二级指针输出特性"></a>二级指针输出特性</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token comment">/*out*/</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp1<span class="token punctuation">,</span> <span class="token comment">/*out*/</span><span class="token keyword">int</span> <span class="token operator">*</span>mylen1<span class="token punctuation">,</span> 
		 <span class="token comment">/*out*/</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp2<span class="token punctuation">,</span> <span class="token comment">/*out*/</span><span class="token keyword">int</span> <span class="token operator">*</span>mylen2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getMem_Free</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="二级指针输入特性"><a href="#二级指针输入特性" class="headerlink" title="二级指针输入特性"></a>二级指针输入特性</h5><ul>
<li>第一种输入模型：指针数组</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>myArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaaaaa"</span><span class="token punctuation">,</span> <span class="token string">"ccccc"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbb"</span><span class="token punctuation">,</span> <span class="token string">"111111"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sortMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二种输入模型：二维数组</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> myArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaaaaa"</span><span class="token punctuation">,</span> <span class="token string">"ccccc"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbb"</span><span class="token punctuation">,</span> <span class="token string">"1111111111111"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> myArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sortMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> myArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第三种输入模型：手工二维内存</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sortMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">arrayFree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//指针数组</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">,</span> <span class="token string">"789"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">//二维数组</span>
    <span class="token keyword">char</span> p2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">,</span> <span class="token string">"789"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">//手工二维内存</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char *array[3];</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        p3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char buf[10]</span>

        <span class="token function">sprintf</span><span class="token punctuation">(</span>p3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token comment">//在函数里面分配内存并赋值</span>
<span class="token comment">//char ***p是二维字符串数组的地址</span>
<span class="token comment">//num是字符串数组中字符串的个数</span>
<span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>p <span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//二维字符串数组地址不存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//给临时二维字符串数组分配内存</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//内存分配失败</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//给每一个字符串分配内存</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>  <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//sprintf函数将格式化输入到字符串中</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//将指针p指向临时字符串</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//释放内存</span>
<span class="token keyword">void</span> <span class="token function">memFree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>p <span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//判断二维字符串的地址是否为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token comment">//释放每一个字符串</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//将指针指向空</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//把实参赋值成null</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>array <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">memFree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h5><blockquote>
<p>有字符串有以下特征（“abcd11111abcd2222abcdqqqqq”）,求写一个函数接口，输出以下结果。</p>
<p>把字符串替换成（dcba11111dcba2222dcbaqqqqq），并把结果传出。</p>
<p>要求：</p>
<p>​    1. 正确实现接口和功能</p>
<p>​    2. 编写测试用例</p>
<p>/*</p>
<p>src:  原字符串</p>
<p>dst:  生成的或需要填充的字符串</p>
<p>sub:  需要查找的子字符串</p>
<p>new_sub:提换的新子字符串</p>
<p>return : 0 成功</p>
<p>​    -1 失败</p>
<p> */</p>
<p>int replaceSubstr(/* in <em>/char <em>src, /</em> out <em>/char</em></em> dst, </p>
<p>​         /* in */char <em>sub, /</em> in */char *new_sub);</p>
<p>有一个字符串符合以下特征（“abcdef,acccd,eeee,aaaa,e3eeee,ssss,”）</p>
<p>写两个函数(API)，输出以下结果</p>
<p>第一个API(第二种内存模型)</p>
<p>1)以逗号分隔字符串，形成二维数组，并把结果传出</p>
<p>2)把二维数组行数运算结果也传出</p>
<p>int spitString(const char *str, char c, char buf[10] [30], int *count);</p>
<p>第二个API(第三种内存模型)</p>
<p>1)以逗号分隔字符串，形成一个二级指针。</p>
<p>2)把一共拆分多少行字符串个数传出</p>
<p>int spitString2(const char *str, char c, char ** myp / * in */, int *count);</p>
<p>要求：</p>
<p>1, 能正确表达功能的要求，定义出接口。</p>
<p>2, 正确实现接口和功能.</p>
<p>3, 编写正确的测试用例.</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第一个作业</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">/*
src:    原字符串
dst:    生成的或需要填充的字符串
sub:    需要查找的子字符串
new_sub:提换的新子字符串

return : 0 成功
-1 失败
*/</span>
<span class="token keyword">int</span> <span class="token function">replaceSubstr</span><span class="token punctuation">(</span><span class="token comment">/* in */</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token comment">/* out */</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> dst<span class="token punctuation">,</span>
	<span class="token comment">/* in */</span><span class="token keyword">char</span> <span class="token operator">*</span>sub<span class="token punctuation">,</span>  <span class="token comment">/* in */</span><span class="token keyword">char</span> <span class="token operator">*</span>new_sub<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// src = "22abcd11111abcd2222abcdqqqqq"</span>
	<span class="token comment">// dst = "22dcba11111dcba2222dcbaqqqqq"</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> dst <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> sub <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> new_sub <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//临时变量, 字符数组</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> src<span class="token punctuation">;</span> <span class="token comment">//记录查找的起点</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">//匹配字符串的首地址</span>

	<span class="token keyword">do</span> 
	<span class="token punctuation">&#123;</span>
		<span class="token comment">// src = "22abcd11111abcd2222abcdqqqqq"</span>
		p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> len <span class="token operator">=</span> p <span class="token operator">-</span> start<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//把匹配字符串前面的内容连接过去</span>
				<span class="token function">strncat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>

			<span class="token function">strncat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> new_sub<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>new_sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//追加替换的新串</span>

			<span class="token comment">//更改查找的起点位置</span>
			start <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">strcat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>dst <span class="token operator">=</span> buf<span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcd11111abcd2222abcdqqqqq"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">replaceSubstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"replaceSubstr err:　%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">spitString</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> str<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//第几行</span>

	<span class="token keyword">do</span> 
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span>
		p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> len <span class="token operator">=</span> p <span class="token operator">-</span> start<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">//添加结束符</span>
				buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

				i<span class="token operator">++</span><span class="token punctuation">;</span> 
			<span class="token punctuation">&#125;</span>
			start <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>


	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>count <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//有多少行字符串</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char *p[]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//每个元素的空间</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char a[30]</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> p<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">getMemFree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">spitString2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> str<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//第几行</span>

	<span class="token keyword">do</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span>
		p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> len <span class="token operator">=</span> p <span class="token operator">-</span> start<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">//添加结束符</span>
				buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

				i<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			start <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>


	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>count <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//有多少行字符串</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">spitString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态打造二维数组</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">spitString2</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">getMemFree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><h4 id="数组的基本概念"><a href="#数组的基本概念" class="headerlink" title="数组的基本概念"></a>数组的基本概念</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul>
<li>元素类型角度：数组是相同类型的变量的有序集合</li>
<li>内存角度：连续的一大片内存空间</li>
</ul>
<h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><ul>
<li>所谓多维数组就是二维和大于二维的数组,在C语言中并不直接支持多维数组,包括二维数 组。多维数组的声明是使用一维数组的嵌套声明实现的。一个一维数组的每个元素又被声明为一 维数组,从而构成二维数组,可以说二维数组是特殊的一维数组。</li>
<li>二维数组定义的一般形式是:</li>
<li>类型说明符 数组名[常量表达式1] [常量表达式2] </li>
</ul>
<h5 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h5><ul>
<li>数组首元素的地址和数组地址是两个不同的概念</li>
<li>数组名代表数组首元素的地址，它是个常量。 </li>
<li>变量本质是内存空间的别名，一定义数组，就分配内存，内存就固定了。所以数组名起名以后就不能被修改了。</li>
<li>数组首元素的地址和数组的地址值相等。</li>
</ul>
<h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><ul>
<li>数组的类型由元素类型和数组大小共同决定</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">/*
   typedef int(MYINT5)[5];   
   typedef float(MYFLOAT10)[10];

   数组定义：

   MYINT5       iArray;  等价于 int iArray[5];
   MYFLOAT10    fArray;  等价于 float fArray[10];
 */</span>

<span class="token comment">/*定义 数组类型，并用数组类型定义变量*/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>MYINT5<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    MYINT5 array<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>                       
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                   
    <span class="token punctuation">&#125;</span>                                       
                     
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>                           
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
    <span class="token punctuation">&#125;</span>                                           
                         
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="数组指针和指针数组"><a href="#数组指针和指针数组" class="headerlink" title="数组指针和指针数组"></a>数组指针和指针数组</h4><h5 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>point_array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>point_array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>指针数组，是一个数组, 里面的每一个元素都是一个指针。（多个指针）</li>
<li>每个指针可以指向不同的数据块</li>
</ul>
<h5 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>array_point<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>是一个指针，指向一个数组。（一个指针）</li>
<li>指针本是一种类型，但又说什么类型的指针，只不过是说指针所指向的数据是什么类型而已。那么指向数组类型的指针，就只好叫数组指针。</li>
</ul>
<h5 id="定义数组指针"><a href="#定义数组指针" class="headerlink" title="定义数组指针"></a>定义数组指针</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//a的类型是一个指向int类型的指针。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>数组名a是数组首元素的起始地址，但并不是数组的起始地址。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>         <span class="token comment">//&amp;a的类型是一个指向数组int[10]类型的指针。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>通过将取地址符&amp;作用于数组名可以得到整个数组的起始地址。</li>
<li>通过数组类型定义数组指针: </li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>ArrayType<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//定义类型ArrayType 为int[5]类型</span>

ArrayType<span class="token operator">*</span> pointer<span class="token punctuation">;</span>         <span class="token comment">//那么指向ArrayType的指针就是指向int[5]类型的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>通过数组指针定义数组指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyPointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义类型MyPointer 为指向int[5]类型的指针</span>

MyPointer myPoint<span class="token punctuation">;</span>          <span class="token comment">//那么用这种类型的指针定义的便都是指向int[5]类型的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>直接定义</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="多维数组名的本质"><a href="#多维数组名的本质" class="headerlink" title="多维数组名的本质"></a>多维数组名的本质</h4><p><img src="http://qiniu.orangew.cn/img/wps8B37.tmp.jpg" alt="img"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// a 多维数组名 代表？</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a %d , a+1:%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//a+1的步长 是20个字节 5*4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a %d , &amp;a+1:%d "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//&amp;+1的步长 是5*4*3 = 60</span>

    <span class="token comment">//多维数组名的本质就是一个指向第一个维度的数组的指针</span>
    <span class="token comment">//步长为第一个维度的数据类型大小</span>

    <span class="token comment">//定义一个指向数组的指针变量 </span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>      <span class="token comment">//告诉编译器  分配 4个字节的内存 32bit平台下</span>
pArray <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
                                                     
    <span class="token comment">// (a+i)                代表是整个第i行的地址  二级指针</span>
    <span class="token comment">// *(a+i)               代表 1级指针  第i行首元素的地址</span>
    <span class="token comment">// *(a+i) + j  ===> &amp;  (a[i][j])</span>
    <span class="token comment">//*( *(a+i) + j) ===>   a[i][j]元素的值</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多维数组的参数退化"><a href="#多维数组的参数退化" class="headerlink" title="多维数组的参数退化"></a>多维数组的参数退化</h3><h4 id="多维数组的线性存储特性"><a href="#多维数组的线性存储特性" class="headerlink" title="多维数组的线性存储特性"></a>多维数组的线性存储特性</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printfArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//把二维数组 当成  1维数组 来打印 证明线性存储</span>
    <span class="token function">printfArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220702201301.png" alt="20220702201301"></p>
<h4 id="多维数组的3种形式参数"><a href="#多维数组的3种形式参数" class="headerlink" title="多维数组的3种形式参数"></a>多维数组的3种形式参数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printArray01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printArray02</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printArray03</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printArray03</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形参退化成指针的原因"><a href="#形参退化成指针的原因" class="headerlink" title="形参退化成指针的原因"></a>形参退化成指针的原因</h4><ul>
<li>原因1：高效</li>
<li>原因2：C语言处理a[n]的时候，它没有办法知道n是几，它只知道&amp;n[0]是多少，它的值作为参数传递进去了，虽然c语言可以做到直接int fun(char a[20])，然后函数能得到20这个数字，但是，C没有这么做。 </li>
</ul>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="结构体的类型和定义"><a href="#结构体的类型和定义" class="headerlink" title="结构体的类型和定义"></a>结构体的类型和定义</h4><ul>
<li>结构体是一种构造数据类型。</li>
<li>用途：把不同类型的数据组合成一个整体——-自定义数据类型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//声明一个结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">_Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//定义结构体变量的方法</span>
<span class="token comment">/*
   1)定义类型 用类型定义变量
   2)定义类型的同时，定义变量；
   3）直接定义结构体变量；
 */</span>

<span class="token keyword">struct</span> <span class="token class-name">_Student</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>  <span class="token comment">//定义类型的同时，定义变量；</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s3<span class="token punctuation">,</span>s4<span class="token punctuation">;</span> <span class="token comment">//直接定义结构体变量</span>

<span class="token comment">//初始化结构体变量的几种方法</span>
<span class="token comment">//1)</span>
<span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> t4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"tile2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"addr2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//2)</span>
<span class="token keyword">struct</span> <span class="token class-name">Dog1</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>d5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"gongzhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//3)</span>
<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>d6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"gongzhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//结构体变量的引用</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//struct _Teacher t1, t2;</span>
    <span class="token comment">//定义同时初始化</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> t3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"tile2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"addr2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span>tile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//用指针法和变量法分别操作结构体</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> t4<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> <span class="token operator">*</span>pTeacher <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    pTeacher <span class="token operator">=</span> <span class="token operator">&amp;</span>t4<span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>t4<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>pTeacher<span class="token operator">-></span>addr<span class="token punctuation">,</span> <span class="token string">"ddddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"t4.name:%s\n"</span><span class="token punctuation">,</span> t4<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体的赋值"><a href="#结构体的赋值" class="headerlink" title="结构体的赋值"></a>结构体的赋值</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//声明一个结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    title<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span> <span class="token class-name">teacher_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">show_teacher</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> t<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"title : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age : %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"addr : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span>  <span class="token function">copyTeacher</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> to<span class="token punctuation">,</span> <span class="token class-name">teacher_t</span> from <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    to <span class="token operator">=</span> from<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span>  <span class="token function">copyTeacher2</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token class-name">teacher_t</span> <span class="token operator">*</span>from <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//结构体赋值和实参形参赋值行为研究</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">teacher_t</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//结构体直接赋值</span>
    t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>
    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copyTeacher</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copyTeacher2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//声明一个结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    title<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span> <span class="token class-name">teacher_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">show_teacher</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> t<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"title : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age : %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"addr : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义结构体数组</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span> teaArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show_teacher</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体作为函数参数"><a href="#结构体作为函数参数" class="headerlink" title="结构体作为函数参数"></a>结构体作为函数参数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>alisname<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Teacher<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name : %s\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"alisname : %s\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age:%d \n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">sortTeacer</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    Teacher tmp<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//=号操作  赋值操作</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Teacher <span class="token operator">*</span> <span class="token function">createTeacher01</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Teacher <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Teacher     Array[3]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span> <span class="token comment">//</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>pT<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Teacher <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Teacher     Array[3]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">*</span>pT <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//二级指针 形参 去间接的修改 实参 的值 </span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>         ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    Teacher <span class="token operator">*</span>pArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func createTeacher02() er:%d \n "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter age:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>  pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向指针所指的内存空间copy数据</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter alias:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>  pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//向指针所指的内存空间copy数据</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sortTeacer</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序之后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体嵌套指针"><a href="#结构体嵌套指针" class="headerlink" title="结构体嵌套指针"></a>结构体嵌套指针</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>student_name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> stu_num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Teacher<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n-------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"teacher'name:%s\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id:%d \n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"student's count:%d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tstudent[%d]:%s\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">sortTeacer</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    Teacher tmp<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//=号操作  赋值操作</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">createStudents</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">int</span> stunum<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//二级指针的第三种内存模型</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>stunum <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打造二维内存</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>stunum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    t<span class="token operator">-></span>student_name <span class="token operator">=</span> p<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>pT<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Teacher <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token comment">//malloc一级指针</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token operator">*</span>pT <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//二级指针 形参 去间接的修改 实参 的值 </span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//释放一级指针</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//释放二级指针</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name <span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>myp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token function">free</span><span class="token punctuation">(</span>myp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>myp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>         ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    Teacher <span class="token operator">*</span>pArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func createTeacher02() er:%d \n "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter id:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>  pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter student number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span><span class="token punctuation">(</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//之所以在这开辟学生名称的内存 是因为在这里才知道这个老师</span>
        <span class="token comment">//对应的学生数目</span>
        <span class="token function">createStudents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter student name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sortTeacer</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序之后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="有关浅拷贝深拷贝问题"><a href="#有关浅拷贝深拷贝问题" class="headerlink" title="有关浅拷贝深拷贝问题"></a>有关浅拷贝深拷贝问题</h4><p><img src="http://qiniu.orangew.cn/img/wpsCBF1.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>pname2<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>Teacher_t<span class="token punctuation">;</span>
<span class="token comment">//结构体中套一个 1级指针 或 二级指针 </span>

<span class="token comment">//编译器的=号操作,只会把指针变量的值,从from  copy 到 to,但 </span>
<span class="token comment">//不会 把指针变量 所指 的 内存空间 给copy过去..//浅copy</span>

<span class="token comment">//如果 想执行深copy,再显示的分配内存</span>
<span class="token keyword">void</span> <span class="token function">deepCopyTeacher</span><span class="token punctuation">(</span>Teacher_t <span class="token operator">*</span>to<span class="token punctuation">,</span> Teacher_t <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>

    to<span class="token operator">-></span>pname2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>to<span class="token operator">-></span>pname2<span class="token punctuation">,</span> from<span class="token operator">-></span>pname2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//memcpy(to, from , sizeof(Teacher_t));</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//浅拷贝</span>
<span class="token keyword">void</span> <span class="token function">copyTeacher</span><span class="token punctuation">(</span>Teacher_t <span class="token operator">*</span>to<span class="token punctuation">,</span> Teacher_t <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// or</span>
    <span class="token comment">//*to = *from;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Teacher_t t1<span class="token punctuation">;</span>
    Teacher_t t2<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span>pname2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>pname2<span class="token punctuation">,</span> <span class="token string">"ssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//t1 copy t2</span>
    <span class="token function">deepCopyTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>pname2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>pname2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span>pname2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span>pname2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>pname2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span>pname2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体成员偏移量"><a href="#结构体成员偏移量" class="headerlink" title="结构体成员偏移量"></a>结构体成员偏移量</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//一旦结构体定义下来,则结构体中的成员..内存布局 就定下了</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//64</span>
    <span class="token keyword">int</span> age <span class="token punctuation">;</span>       <span class="token comment">//4</span>
    <span class="token keyword">int</span> p<span class="token punctuation">;</span>          <span class="token comment">//4</span>

<span class="token punctuation">&#125;</span> Teacher_t<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Teacher_t  t1<span class="token punctuation">;</span>
    Teacher_t <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">;</span>

    <span class="token keyword">int</span> offsize1 <span class="token operator">=</span>   <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-></span>age<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span> <span class="token comment">//age 相对于结构体 Teacher的偏移量</span>
    <span class="token keyword">int</span> offsize2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Teacher_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-></span>age <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绝对0地址 age的偏移量</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offsize1:%d \n"</span><span class="token punctuation">,</span> offsize1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offsize2:%d \n"</span><span class="token punctuation">,</span> offsize2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体字节对齐"><a href="#结构体字节对齐" class="headerlink" title="结构体字节对齐"></a>结构体字节对齐</h4><ul>
<li>在用sizeof运算符求算某结构体所占空间时，并不是简单地将结构体中所有元素各自占的空间相加，这里涉及到内存字节对齐的问题。</li>
<li>从理论上讲，对于任何变量的访问都可以从任何地址开始访问，但是事实上不是如此，实际上访问特定类型的变量只能在特定的地址访问，这就需要各个变量在空间上按一定的规则排列， 而不是简单地顺序排列，这就是内存对齐。</li>
</ul>
<h5 id="内存对齐的原因"><a href="#内存对齐的原因" class="headerlink" title="内存对齐的原因"></a>内存对齐的原因</h5><ul>
<li><p>某些平台只能在特定的地址处访问特定类型的数据。</p>
</li>
<li><p>提高存取数据的速度。比如有的平台每次都是从偶地址处读取数据，对于一个int型的变量，若从偶地址单元处存放，则只需一个读取周期即可读取该变量；但是若从奇地址单元处存放，则需要2个读取周期读取该变量。</p>
</li>
</ul>
<h5 id="内存对齐的原则"><a href="#内存对齐的原则" class="headerlink" title="内存对齐的原则"></a>内存对齐的原则</h5><ul>
<li><p>默认情况下，数据成员的对齐规则(以最大的类型字节为单位)。</p>
</li>
<li><p>当然，字节对齐可以通过程序控制，采用指令：</p>
</li>
<li><blockquote>
<p>#pragma pack(xx)  </p>
<p>#pragma pack(1)   //1字节对齐</p>
<p>#pragma pack(2)   //2字节对齐</p>
<p>#pragma pack(4)   //4字节对齐</p>
<p>#pragma pack(8)   //8字节对齐</p>
<p>#pragma pack(16)  //16字节对齐</p>
</blockquote>
</li>
</ul>
<h4 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h4><blockquote>
<ol>
<li>列出定义结构体变量的几种方法。</li>
</ol>
<ol start="2">
<li><p>同类型结构体变量是否可以相互赋值？会存在什么风险？</p>
</li>
<li><p>练习结构体数组排序　　<br> 从键盘输入3个学生的信息（姓名、学号、成绩），存入一个结构体数组中，计算平均分，并按成绩<br> 高低排序并输出<br> typedef struct Stu<br> {</p>
<pre><code> char name[50];
 int id;
 double score;
</code></pre>
<p> }Stu;</p>
<p> int main(void)<br> {</p>
<pre><code> Stu s[3];
 int n = 3;
</code></pre>
 <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//从键盘输入学生信息</span>
<span class="token function">initStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
														
<span class="token comment">//aveStu(s, 3)：平均分</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n平均分为： %lf\n"</span><span class="token punctuation">,</span>  <span class="token function">aveStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
														
<span class="token comment">//分数排序，降序</span>
<span class="token function">sortStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
														
<span class="token comment">//打印学生信息</span>
<span class="token function">showStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
														
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> }</p>
</li>
</ol>
<ol start="4">
<li><p>重写结构体嵌套一级指针老师和二级指针学生的代码</p>
<p> //结构体类型，每个导师有三个学生<br> typedef struct Teacher<br> {</p>
<pre><code> char *tName; //导师
 char  * * stu;  //三个学生
 int age;
</code></pre>
<p> }Teacher;</p>
<p> //在createTeacher中分配空间<br> int createTeacher( Teacher  * * p / * out * / , int n1, int n2);</p>
<p> //给成员赋值<br> void initTeacher(Teacher *p, int n1, int n2);</p>
<p> //打印结构体成员信息<br> void printTeacher(Teacher *p, int n1, int n2);</p>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//根据导师名字排序, 降序</span>
<span class="token keyword">void</span> <span class="token function">sortTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
<span class="token keyword">void</span> <span class="token function">freeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span> <span class="token operator">*</span> p <span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//导师个数</span>
	<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//学生</span>
	Teacher <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-c" data-language="c"><code class="language-c">ret <span class="token operator">=</span> <span class="token function">createTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"createTeacher err:%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">initTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给成员赋值</span>

<span class="token comment">//打印成员，排序前</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c">	<span class="token comment">//根据导师名字排序, 降序</span>
	<span class="token function">sortTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//打印成员，排序后</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
	<span class="token function">freeTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<ol start="5">
<li><p>画一下第4题createTeacher()的内存四区图</p>
</li>
<li><p>分析以下结构体所占空间大小<br> typedef struct Stu<br> {</p>
<pre><code> char a[4];
 int b;
 double c;
 short d;
</code></pre>
<p> }Stu;</p>
<p> #pragma pack(1)     //1字节对齐<br> #pragma pack(2)     //2字节对齐<br> #pragma pack(4)     //4字节对齐<br> #pragma pack(8)     //8字节对齐<br> #pragma pack(16)    //16字节对齐</p>
</li>
</ol>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

<span class="token comment">//从键盘输入学生信息</span>
<span class="token keyword">void</span> <span class="token function">initStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个学生信息：\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入分数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//求平均分</span>
<span class="token keyword">double</span> <span class="token function">aveStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> allScore <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		allScore <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span> <span class="token comment">//分数累加</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">return</span> allScore <span class="token operator">/</span> <span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//分数排序，降序</span>
<span class="token keyword">void</span> <span class="token function">sortStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	Stu tmp<span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token comment">//降序</span>
			<span class="token punctuation">&#123;</span>
				tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//打印学生信息</span>
<span class="token keyword">void</span> <span class="token function">showStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n学生信息如下：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名\t学号\t分数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\t%d\t%lf\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

	<span class="token comment">//从键盘输入学生信息</span>
	<span class="token function">initStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token comment">//aveStu(s, 3)：平均分</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n平均分为： %lf\n"</span><span class="token punctuation">,</span>  <span class="token function">aveStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//分数排序，降序</span>
	<span class="token function">sortStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//打印学生信息</span>
	<span class="token function">showStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型，每个导师有三个学生</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>tName<span class="token punctuation">;</span> <span class="token comment">//导师</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>stu<span class="token punctuation">;</span>  <span class="token comment">//三个学生</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Teacher<span class="token punctuation">;</span>

<span class="token comment">//在createTeacher中分配空间</span>
<span class="token keyword">int</span> <span class="token function">createTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>p<span class="token comment">/*out*/</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//三个结构体，Teacher t[3]</span>
	Teacher <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span><span class="token operator">*</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//每个老师的导师，n2个学生分配空间</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//导师名字</span>
		t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//每个导师有n2个学生</span>
		<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n2 <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char *tmp[i]</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu <span class="token operator">=</span> tmp<span class="token punctuation">;</span> <span class="token comment">//重要</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">//间接赋值是指针存在最大意义</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> t<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//给成员赋值</span>
<span class="token keyword">void</span> <span class="token function">initTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//导师名字</span>
		<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"teacher%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">//每个导师有n2个学生</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"stu%d%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//年龄</span>
		p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//打印结构体成员信息</span>
<span class="token keyword">void</span> <span class="token function">printTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先打印导师，再打印学生</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s[%d]\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//每个导师有n2个学生</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%s"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//根据导师名字排序, 降序</span>
<span class="token keyword">void</span> <span class="token function">sortTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	Teacher tmp<span class="token punctuation">;</span>

	<span class="token comment">//选择法排序</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//降序</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//交换成员变量的值</span>
				tmp <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
<span class="token keyword">void</span> <span class="token function">freeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	Teacher <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//先释放导师</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">)</span><span class="token punctuation">;</span>
			t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//再释放导师名下的学生</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
			t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//导师个数</span>
	<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//学生</span>
	Teacher <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">createTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"createTeacher err:%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">initTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给成员赋值</span>

	<span class="token comment">//打印成员，排序前</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//根据导师名字排序, 降序</span>
	<span class="token function">sortTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//打印成员，排序后</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
	<span class="token function">freeTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件操作的步骤"><a href="#文件操作的步骤" class="headerlink" title="文件操作的步骤"></a>文件操作的步骤</h4><ol>
<li>引入头文件(stdio.h ) </li>
<li>定义文件指针 </li>
<li>打开文件 </li>
<li>文件读写 </li>
<li>关闭文件 </li>
</ol>
<h4 id="有关文件的概念"><a href="#有关文件的概念" class="headerlink" title="有关文件的概念"></a>有关文件的概念</h4><ul>
<li><p>按文件的逻辑结构：</p>
</li>
<li><blockquote>
<p>记录文件：由具有一定结构的记录组成（定长和不定长）</p>
<p>流式文件：由一个个字符（字节）数据顺序组成</p>
</blockquote>
</li>
<li><p>按存储介质：</p>
</li>
<li><blockquote>
<p>普通文件：存储介质文件（磁盘、磁带等）</p>
<p>设备文件：非存储介质（键盘、显示器、打印机等）</p>
</blockquote>
</li>
<li><p> 按数据的组织形式：</p>
</li>
</ul>
<blockquote>
<p>文本文件： ASCII文件，每个字节存放一个字符的ASCII码</p>
<p>二进制文件：数据按其在内存中的存储形式原样存放</p>
<p><img src="http://qiniu.orangew.cn/img/wps3AB2.tmp.jpg" alt="img"></p>
</blockquote>
<ul>
<li>流概念<ul>
<li>是一个动态的概念，可以将一个字节形象地比喻成一滴水，字节在设备、文件和程序之间的传输就是流，类似于水在管道中的传输，可以看出，流是对输入输出源的一种抽象，也是对传输信息的一种抽象。通过对输入输出源的抽象，屏蔽了设备之间的差异，使程序员能以一种通用的方式进行存储操作，通过对传输信息的抽象，使得所有信息都转化为字节流的形式传输，信息解读的过程与传输过程分离。</li>
<li>C语言中，I/O操作可以简单地看作是从程序移进或移出字节，这种搬运的过程便称为流(stream)。程序只需要关心是否正确地输出了字节数据，以及是否正确地输入了要读取字节数据，特定I/O设备的细节对程序员是隐藏的。</li>
</ul>
</li>
<li>文件处理方法<ol>
<li>文件缓冲区<ul>
<li>ANSIC标准采用“缓冲文件系统”处理数据文件 所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区。从内存向磁盘输出数据必须先送到内存中的缓冲区,装满缓冲区后才一起送到磁盘去 如果从磁盘向计算机读入数据,则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲 区),然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) </li>
</ul>
</li>
<li>输入输出流<ul>
<li>输入输出是数据传送的过程,数据如流水一样从一处流向另一处,因此常将输入输出形象地称为 流(stream),即数据流。流表示了信息从源到目的端的流动。 </li>
<li><img src="http://qiniu.orangew.cn/img/wps62C.tmp.jpg" alt="img"></li>
<li>输入操作时,数据从文件流向计算机内存 — 文件的读取 </li>
<li><img src="http://qiniu.orangew.cn/img/wpsC2C6.tmp.jpg" alt="img"></li>
<li>输出操作时,数据从计算机流向文件 — 文件的写入 </li>
<li><img src="http://qiniu.orangew.cn/img/wps15D8.tmp.jpg" alt="img"></li>
<li>无论是用Word打开或保存文件,还是C程序中的输入输出都是通过操作系统进行的 “流”是一个传输通道,数据可以从运行环境流入程序中,或从程序流至运行环境 。</li>
</ul>
</li>
</ol>
</li>
<li>文件句柄</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">short</span>           level<span class="token punctuation">;</span>      <span class="token comment">/* 缓冲区"满"或者"空"的程度 */</span>
    <span class="token keyword">unsigned</span>        flags<span class="token punctuation">;</span>      <span class="token comment">/* 文件状态标志 */</span>
    <span class="token keyword">char</span>            fd<span class="token punctuation">;</span>         <span class="token comment">/* 文件描述符 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   hold<span class="token punctuation">;</span>       <span class="token comment">/* 如无缓冲区不读取字符 */</span>
    <span class="token keyword">short</span>           bsize<span class="token punctuation">;</span>      <span class="token comment">/* 缓冲区的大小 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   <span class="token operator">*</span>buffer<span class="token punctuation">;</span>    <span class="token comment">/* 数据缓冲区的位置 */</span>
    <span class="token keyword">unsigned</span>        ar<span class="token punctuation">;</span>         <span class="token comment">/* 指针，当前的指向 */</span>
    <span class="token keyword">unsigned</span>        istemp<span class="token punctuation">;</span>     <span class="token comment">/* 临时文件，指示器 */</span>
    <span class="token keyword">short</span>           token<span class="token punctuation">;</span>      <span class="token comment">/* 用于有效性的检查 */</span>
<span class="token punctuation">&#125;</span>FILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="C语言文件指针"><a href="#C语言文件指针" class="headerlink" title="C语言文件指针"></a>C语言文件指针</h4><ul>
<li><p>在C语言中用一个指针变量指向一个文件,这个指针称为文件指针。 </p>
</li>
<li><p>声明FILE结构体类型的信息包含在头文件“stdio.h”中</p>
</li>
<li><p>一般设置一个指向FILE类型变量的指针变量,然后通过它来引用这些FILE类型变量 通过文件指针就可对它所指的文件进行各种操作。 </p>
<p>定义说明文件指针的一般形式为:</p>
</li>
<li><p>FILE * 指针变量标识符; </p>
</li>
<li><p>其中FILE应为大写,它实际上是由系统定义的一个结构,该结构中含有文件名、文件状态和文件 当前位置等信息。在编写源程序时不必关心FILE结构的细节。 </p>
</li>
<li><p>FILE *fp; </p>
</li>
<li><p>表示<code>fp</code>是指向FILE结构的指针变量,通过fp即可找存放某个文件信息的结构变量,然后按结构变 量�供的信息找到该文件,实施对文件的操作。习惯上也笼统地把<code>fp</code>称为指向一个文件的指针。 </p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wps476.tmp.jpg" alt="img"></p>
</li>
</ul>
<h4 id="文件操作API"><a href="#文件操作API" class="headerlink" title="文件操作API"></a>文件操作API</h4><blockquote>
<p><code>fgetc fputc</code> 按照字符读写文件</p>
<p>​        </p>
<p><code>fputs fgets</code>     按照行读写文件 （读写配置文件）</p>
<p>​        </p>
<p><code>fread fwirte</code> 按照块读写文件 （大数据块迁移）</p>
<p>​        </p>
<p><code>fprintf    fscanf</code>    按照格式化进行读写文件</p>
</blockquote>
<h4 id="标准的文件读写"><a href="#标准的文件读写" class="headerlink" title="标准的文件读写"></a>标准的文件读写</h4><ol>
<li><p>文件的打开fopen()</p>
<ul>
<li><p>文件的打开操作表示将给用户指定的文件在内存分配一个FILE结构区，并将该结构的指针返回给用户程序，以后用户程序就可用此FILE指针来实现对指定文件的存取操作了。当使用打开函数时，必须给出文件名、文件操作方式(读、写或读写),如果该文件名不存在，就意味着建立(只对写文件而言，对读文件则出错)，并将文件指针指向文件开头。若已有一个同名文件存在，则删除该文件，若无同名文件，则建立该文件，并将文件指针指向文件开头。</p>
</li>
<li><p><code>fopen(char *filename,char *type);</code></p>
</li>
<li><p>其中* filename是要打开文件的文件名指针，一般用双引号括起来的文件名表示，也可使用双反斜杠隔开的路径名。而*type参数表示了对打开文件的操作方式。其可采用的操作方式如下：</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>方式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>“r”</td>
<td>打开，只读，文件必须已经存在。</td>
</tr>
<tr>
<td>“w”</td>
<td>只写,如果文件不存在则创建,如果文件已存在则把文件长度截断(Truncate)为0字节。再重新写,也就是替换掉原来的文件内容文件指针指到头。</td>
</tr>
<tr>
<td>“a”</td>
<td>只能在文件末尾追加数据,如果文件不存在则创建</td>
</tr>
<tr>
<td>“rb”</td>
<td>打开一个二进制文件，只读</td>
</tr>
<tr>
<td>“wb”</td>
<td>打开一个二进制文件，只写</td>
</tr>
<tr>
<td>“ab”</td>
<td>打开一个二进制文件，追加</td>
</tr>
<tr>
<td>“r+”</td>
<td>允许读和写,文件必须已存在</td>
</tr>
<tr>
<td>“w+”</td>
<td>允许读和写,如果文件不存在则创建,如果文件已存在则把文件长度截断为0字节再重新写 。</td>
</tr>
<tr>
<td>“a+”</td>
<td>允许读和追加数据,如果文件不存在则创建</td>
</tr>
<tr>
<td>“rb+”</td>
<td>以读/写方式打开一个二进制文件</td>
</tr>
<tr>
<td>“wb+”</td>
<td>以读/写方式建立一个新的二进制文件</td>
</tr>
<tr>
<td>“ab+”</td>
<td>以读/写方式打开一个二进制文件进行追加</td>
</tr>
</tbody></table>
</li>
<li><p>当用fopen()成功的打开一个文件时，该函数将返回一个FILE指针，如果文件打开失败，将返回一个NULL指针。如想打开test文件，进行写：</p>
</li>
<li><blockquote>
<p>FILE *fp;</p>
<p>if((fp=fopen(“test”,”w”))==NULL)</p>
<p>{</p>
<p>  printf(“File cannot be  opened\n”);</p>
<p>  exit();</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>  printf(“File opened for writing\n”);</p>
<p>}</p>
<p>fclose(fp);</p>
</blockquote>
</li>
<li><p>c语言中有三个特殊的文件指针无需定义、打开可直接使用:</p>
<ol>
<li>stdin： 标准输入 默认为当前终端（键盘）<ul>
<li>我们使用的scanf、getchar函数默认从此终端获得数据</li>
</ul>
</li>
<li>stdout：标准输出 默认为当前终端（屏幕）<ul>
<li>我们使用的printf、puts函数默认输出信息到此终端</li>
</ul>
</li>
<li>stderr：标准出错 默认为当前终端（屏幕）<ul>
<li>当我们程序出错或者使用:perror函数时信息打印在此终端</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>关闭文件函数fclose()</p>
<ul>
<li><p>文件操作完成后，必须要用fclose()函数进行关闭，这是因为对打开的文件进行写入时，若文件缓冲区的空间未被写入的内容填满，这些内容不会写到打开的文件中去而丢失。只有对打开的文件进行关闭操作时，停留在文件缓冲区的内容才能写到该文件中去，从而使文件完整。再者一旦关闭了文件，该文件对应的FILE结构将被释放，从而使关闭的文件得到保护，因为这时对该文件的存取操作将不会进行。文件的关闭也意味着释放了该文件的缓冲区。</p>
</li>
<li><p><code>int fclose(FILE *stream);</code></p>
</li>
<li><p>它表示该函数将关闭FILE指针对应的文件，并返回一个整数值。若成功地关闭了文件，则返回一个0值，否则返回一个非0值。常用以下方法进行测试</p>
</li>
<li><blockquote>
<p>if(fclose(fp)!=0)</p>
<p>{</p>
<p>  printf(“File cannot be closed\n”);</p>
<p>  exit(1);</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>  printf(“File is now closed\n”);</p>
<p>}</p>
</blockquote>
</li>
</ul>
</li>
<li><p>文件的读写</p>
</li>
</ol>
<ul>
<li><p>读写文件中字符的函数(一次只读写文件中的一个字符)：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">putc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>其中fgetc()函数将把由流指针指向的文件中的一个字符读出，例如：</p>
</li>
<li><p><code>ch=fgetc(fp);</code></p>
</li>
<li><p>将把流指针fp指向的文件中的一个字符读出，并赋给ch，当执行fgetc()函数时，若当时文件指针指到文件尾，即遇到文件结束标志EOF(其对应值为-1)，该函数返回一个-1给ch，在程序中常用检查该函数返回值是否为-1来判断是否已读到文件尾，从而决定是否继续。</p>
</li>
<li><blockquote>
<p>#include &lt;stdio.h&gt;</p>
<p>int main(void)</p>
<p>{</p>
<p>  FILE *fp;</p>
<p>  char ch;</p>
<p>  if((fp=fopen(“myfile.txt”,”r”))==NULL)</p>
<p>  {</p>
<p>​    printf(“file cannot be opened\n”);</p>
<p>​    exit(1);</p>
<p>  }</p>
<p>  while((ch=fgetc(fp))!=EOF) {</p>
<p>​    fputc(ch,stdout);</p>
<p>  }</p>
<p>  fclose(fp);</p>
<p>  return 0;</p>
<p>}</p>
</blockquote>
</li>
<li><p>该程序以只读方式打开myfile.txt文件，在执行while循环时，文件指针每循环一次后移一个字符位置。用fgetc()函数将文件指针指定的字符读到ch变量中，然后用fputc()函数在屏幕上显示，当读到文件结束标志EOF时，变关闭该文件。</p>
</li>
<li><p>上面的程序用到了fputc()函数，该函数将字符变量ch的值写到流指针指定的文件中去，由于流指针用的是标准输出(显示器)的FILE指针stdout，故读出的字符将在显示器上显示。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>读写文件中字符串的函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>其中fgets()函数将把由流指针指定的文件中n-1个字符，读到由指针stream指向的字符数组中去，例如：</p>
</li>
<li><p><code>fgets(buffer, 9, fp);</code></p>
</li>
<li><p>将把fp指向的文件中的8个字符读到buffer内存区，buffer可以是定义的字符数组，也可以是动态分配的内存区。</p>
</li>
<li><p>注意，fgets()函数读到’\n’就停止，而不管是否达到数目要求。同时在读取字符串的最后加上’\0’。</p>
</li>
<li><p>fgets()函数执行完以后，返回一个指向该串的指针。如果读到文件尾或出错，则均返回一个空指针NULL，所以长用feof()函数来测定是否到了文件尾或者是ferror()函数来测试是否出错，例如下面的程序用fgets()函数读test.txt文件中的第一行并显示出来：</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cannot open file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fputs()函数想指定文件写入一个由string指向的字符串，’\0’不写入文件。     </li>
<li>fprintf()同printf()函数类似，不同之处就是printf()函数是想显示器输出，fprintf()则是向流指针指向的文件输出。</li>
<li>下面程序是向文件test.dat里输入一些字符：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token operator">=</span><span class="token string">"That's good news"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">617</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>

    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.dat"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"Your score of TOEFLis"</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">':'</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>文件二进制块读写函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回值:读或写的记录数,成功时返回的记录数等于nmemb,</span>
<span class="token comment">//出错或读到文件末尾时返回 的记录数小于nmemb,也可能返回0          </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>fread</code>和<code>fwrite</code>用于读写记录,这里的记录是指一串固定长度的字节,比如一个int、一个结构 体或者一个定长数组。参数<code>size</code>指出一条记录的长度,而<code>nmemb</code>指出要读或写多少条记录,这些 记录在<code>ptr</code>所指的内存空间中连续存放,共占<code>size * nmemb</code>个字节,<code>fread</code>从文件<code>stream</code>中读 出<code>size * nmemb</code>个字节保存到<code>ptr</code>中,而<code>fwrite</code>把<code>ptr</code>中的<code>size * nmemb</code>个字节写到文件<code>stream</code>中。</li>
<li> <code>nmemb</code>是请求读或写的记录数,<code>fread</code>和<code>fwrite</code>返回的记录数有可能小于<code>nmemb</code>指定的记录数。例 如当前读写位置距文件末尾只有一条记录的长度,调用<code>fread</code>时指定<code>nmemb</code>为2,则返回值为1。 如果当前读写位置已经在文件末尾了,或者读文件时出错了,则<code>fread</code>返回0。如果写文件时出 错了,则<code>fwrite</code>的返回值小于<code>nmemb</code>指定的值。下面的例子由两个程序组成,一个程序把结构体 保存到文件中,另一个程序和从文件中读出结构体。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">record</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">record</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"Ken"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"Knuth"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"recfile"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file recfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>   
    
    <span class="token function">fwrite</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">record</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">record</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">record</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"recfile"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file recfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fread</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">record</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name1: %s\tAge1: %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rintf</span><span class="token punctuation">(</span><span class="token string">"Name2: %s\tAge2: %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.清除和设置文件缓冲区</p>
<ul>
<li><code>int fflush(FILE *stream);</code></li>
<li><code>fflush()</code>函数将清除由<code>stream</code>指向的文件缓冲区里的内容，常用于写完一些数据后，立即用该函数清除缓冲区，以免误操作时，破坏原来的数据。</li>
</ul>
<ol start="5">
<li>  文件的随机读写函数</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回值:成功返回0,出错返回-1并设置errno </span>

<span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回值:成功返回当前读写位置,出错返回-1并设置errno </span>

<span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>fseek的whence和offset参数共同决定了读写位置移动到何处,whence参数的含义如下: </p>
</li>
<li><blockquote>
<p>SEEK_SET </p>
<p>​    从文件开头移动offset个字节</p>
<p>SEEK_CUR </p>
<p>​    从当前位置移动offset个字节 </p>
<p>SEEK_END <img src="E:\Computer\myblog\hexo\source_posts\C-基础教程整理\wps2394.tmp.jpg" alt="img"> </p>
<p>​    从文件末尾移动offset个字节 </p>
</blockquote>
</li>
<li><p>offset可正可负,负值表示向前(向文件开头的方向)移动,正值表示向后(向文件末尾的方 向)移动,如果向前移动的字节数超过了文件开头则出错返回,如果向后移动的字节数超过了 文件末尾,再次写入时将增大文件尺寸,从原来的文件末尾到fseek移动之后的读写位置之间的 字节都是0。 </p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"textfile"</span><span class="token punctuation">,</span><span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>"Open file textfile\n”<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Seek file textfile\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">'K'</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="文件操作案例"><a href="#文件操作案例" class="headerlink" title="文件操作案例"></a>文件操作案例</h4><ol>
<li><p>配置文件读写（自定义接口）</p>
<blockquote>
<p>配置文件读写案例实现分析</p>
<p>​    1、    功能划分</p>
<p>​        a)    界面测试（功能集成）</p>
<p>​            自己动手规划接口模型。</p>
<p>​        b)    配置文件读写    </p>
<p>​            i.    配置文件读（根据key，读取valude）</p>
<p>​            ii.    配置文件写（输入key、valude）</p>
<p>​            iii.    配置文件修改（输入key、valude）</p>
<p>​            iv.    优化 ===》接口要求紧 模块要求松</p>
<p>​    2、    实现及代码讲解</p>
<p>​    3、    测试。</p>
<p>（2）加密文件读写 （使用别人写好的接口）</p>
</blockquote>
</li>
</ol>
<ul>
<li>cfg.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//防止头文件重复包含</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token comment">//为了兼容C++编译器</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __cplusplus</span></span>

<span class="token comment">//函数的声明</span>

<span class="token comment">//读配置文件</span>
<span class="token keyword">int</span> <span class="token function">ReadCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>pLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//写、修改配置文件</span>
<span class="token keyword">int</span> <span class="token function">WriteCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __cplusplus</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>ctg.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>

<span class="token comment">//文件最大大小</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span> </span><span class="token comment">//8K</span></span>

<span class="token comment">/*
功能：获取非空字符串
参数：
	inbuf： 原始字符串buf首地址
	outbuf：非空字符串buf首地址
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>inbuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>outbuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inbuf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> outbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> inbuf<span class="token punctuation">;</span>
	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从左往右移动，如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//位置从右移动一位</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左移动，如果当前字符为空</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//非空元素个数</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> p <span class="token operator">+</span> begin<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	outbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//读配置文件</span>
<span class="token keyword">int</span> <span class="token function">ReadCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>pLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pKey <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pVal <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pLen <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//如果没有key所对应的value，flag则为0</span>

	<span class="token comment">//读方式打开文件</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ReadCfgFile[fopen]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//如果文件没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		tmp <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//判断每行中是否包含key</span>
		tmp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span><span class="token comment">//如果没有包含key</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//跳出本次循环</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//重新设置搜索字符串的位置（跳过key）</span>
		<span class="token comment">// "k1 = 1111" -> " = 1111"</span>
		tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//判断是否包含=</span>
		tmp <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token char">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//跳出本次循环</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//重新设置搜索字符串的位置(跳过=)</span>
		<span class="token comment">//"= 1111" -> "   1111  "</span>
		tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token comment">//获取非空字符，两头堵模型</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> pVal<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//到这，已经找到你所要求的value</span>
			<span class="token operator">*</span>pLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pVal<span class="token punctuation">)</span><span class="token punctuation">;</span> 
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//很重要</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有%s所对应的值\n"</span><span class="token punctuation">,</span> pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//关闭文件</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//写、修改配置文件</span>
<span class="token comment">//实现流程</span>
<span class="token comment">//循环读每一行</span>
<span class="token comment">//此行包含key，则把key的value修改</span>
<span class="token comment">//如果所有行都不包含key，则在文件结尾追加： "key = value"</span>
<span class="token comment">//难点：如何修改</span>
<span class="token keyword">int</span> <span class="token function">WriteCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pKey <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pVal <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> tmpBuf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> lineBuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//0: 不包括key</span>

	<span class="token comment">//打开文件，读写方式打开，文件不存在，打开失败</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//文件不存在时，新建文件</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//perror("WriteCfgFile ")</span>
		<span class="token comment">//return -2;</span>

		<span class="token comment">//写读方式打开文件，文件不存在则创建</span>
		fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"WriteCfgFile fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//假如文件存在</span>
	<span class="token comment">//获取文件内容大小，看是否超出范围</span>

	<span class="token comment">//把文件光标移动到结尾处</span>
	<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//获取文件内容大小</span>
	<span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//如果文件大小超过8k，中断程序</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> MAXSIZE<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件大小超过8k，不支持\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//把文件光标移动到最开始位置</span>
	<span class="token comment">//fseek(fp, 0, SEEK_SET);</span>
	<span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//循环读每一行</span>
	<span class="token comment">//此行包含key，则把key的value修改</span>
	<span class="token comment">//如果所有行都不包含key，则在文件结尾追加： "key = value"</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">fgets</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//此行是否包含key</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">,</span> pKey<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//包含</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//重写给lineBuf格式化</span>
			<span class="token function">sprintf</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">,</span> <span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> pKey<span class="token punctuation">,</span> pVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">strcat</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> lineBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">strcat</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> lineBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span> <span class="token comment">//文件中没有key值</span>
	<span class="token punctuation">&#123;</span><span class="token comment">//如果所有行都不包含key，则在文件结尾追加： "key = value"</span>
		<span class="token comment">//sprintf(lineBuf, "%s = %s", pKey, pVal);	</span>

		<span class="token comment">//到这一步，文件光标已经移动到结尾处</span>
		<span class="token comment">//如果此时往文件中写内容，肯定是追加到结尾处</span>
		<span class="token comment">//格式化方式写文件</span>
		<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> pKey<span class="token punctuation">,</span> pVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>	<span class="token comment">//关闭文件</span>
		<span class="token comment">//重写以写方式打开文件，重写给文件写内容</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//写读方式打开文件，文件不存在则创建</span>
		fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"WriteCfgFile fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//往文件写内容</span>
		<span class="token function">fputs</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>main.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//&lt;>: 从系统目录找</span>
<span class="token comment">//"": 从当前目录找，没有找到再从系统目录中寻找</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cfg.h"</span> </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">CFGNAME</span> <span class="token string">"./mycfg.ini"</span></span>

<span class="token keyword">void</span> <span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 写配置文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 读配置文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4 退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">MyWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入key: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">WriteCfgFile</span><span class="token punctuation">(</span>CFGNAME<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//失败</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WriteCfgFile err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n写入的内容：%s = %s\n\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">MyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入key: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">ReadCfgFile</span><span class="token punctuation">(</span>CFGNAME<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//失败</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ReadCfgFile err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n %s对应的value为：%s, 长度为：%d\n\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> cmd<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cmd:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">MyWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">MyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>拷贝文件</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">2</span> </span><span class="token comment">//每次读写2k数据</span></span>

<span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 拷贝文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">myCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> rPath<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//源文件</span>
	<span class="token keyword">char</span> wPath<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//目的文件</span>
	FILE <span class="token operator">*</span>rFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>wFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入源文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> rPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入目的文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> wPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>rPath<span class="token punctuation">,</span> wPath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"源文件和目的文件不能相同\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//只读方式打开源文件</span>
	rFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>rPath<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen rPath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//只写方式打开目的文件</span>
	wFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>wPath<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen wFp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">do</span> 
	<span class="token punctuation">&#123;</span>
		n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token comment">//读多少，写多少</span>
		n <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"拷贝：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"拷贝完成\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	

	<span class="token keyword">int</span> cmd<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cmd: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">myCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>加密 解密文件</p>
</blockquote>
<ul>
<li>des.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*********************************************************
 *  des.h
 *  用户使用des算法头文件
 *	
 *********************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_OPENDESS_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_OPENDESS_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>


<span class="token comment">//加密小于4k的数据（encrypt：加密）</span>
<span class="token comment">//pInData：明文数据</span>
<span class="token comment">//nInDataLen：明文数据长度</span>
<span class="token comment">//pOutData：加密后的数据</span>
<span class="token comment">//pOutDataLen：加密数据的长度</span>
<span class="token keyword">int</span> <span class="token function">DesEnc</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//加密等于4k的数据</span>
<span class="token keyword">int</span> <span class="token function">DesEnc_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//解密小于4k的数据(decrypt：解密)</span>
<span class="token comment">//pInData：密文数据</span>
<span class="token comment">//nInDataLen：密文数据长度</span>
<span class="token comment">//pOutData：解密后的数据</span>
<span class="token comment">//pOutDataLen：解密数据的长度</span>
<span class="token keyword">int</span> <span class="token function">DesDec</span><span class="token punctuation">(</span>
	   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	   <span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	   <span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//解密等于4k的数据</span>
<span class="token keyword">int</span> <span class="token function">DesDec_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>des.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/******************************************************
 *
 *  des.c
 *  common des......
 *
 ******************************************************/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"des.h"</span></span>

<span class="token comment">/*********************************************************
  data type definition for Des;
**********************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EN0</span>	<span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DE1</span>	<span class="token expression"><span class="token number">1</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DES_KEYBYTES</span>	<span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DES_KEYLONGS</span>	<span class="token expression"><span class="token number">32</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DES_BLOCKLEN</span>	<span class="token expression"><span class="token number">8</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ek<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	ekLen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dk<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	dkLen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> CbcCtx<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> DES_CTX<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ek1<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	ek1Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dk1<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	dk1Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ek2<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	ek2Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dk2<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	dk2Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> CbcCtx<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">//int	IsFirstBlock;</span>
<span class="token punctuation">&#125;</span> DES3_CTX<span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pc1<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span>
	 <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span>
	<span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span>
	<span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pc2<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>		 <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>
	<span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> 	<span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span>		<span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span>
	<span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> 	<span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bytebit<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0200</span><span class="token punctuation">,</span><span class="token number">0100</span><span class="token punctuation">,</span><span class="token number">040</span><span class="token punctuation">,</span><span class="token number">020</span><span class="token punctuation">,</span><span class="token number">010</span><span class="token punctuation">,</span><span class="token number">04</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">01</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> totrot<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> bigbyte<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0x800000L</span><span class="token punctuation">,</span>	<span class="token number">0x400000L</span><span class="token punctuation">,</span>	<span class="token number">0x200000L</span><span class="token punctuation">,</span>	<span class="token number">0x100000L</span><span class="token punctuation">,</span>
	<span class="token number">0x80000L</span><span class="token punctuation">,</span>	<span class="token number">0x40000L</span><span class="token punctuation">,</span>	<span class="token number">0x20000L</span><span class="token punctuation">,</span>	<span class="token number">0x10000L</span><span class="token punctuation">,</span>
	<span class="token number">0x8000L</span><span class="token punctuation">,</span>	<span class="token number">0x4000L</span><span class="token punctuation">,</span>	<span class="token number">0x2000L</span><span class="token punctuation">,</span>	<span class="token number">0x1000L</span><span class="token punctuation">,</span>
	<span class="token number">0x800L</span><span class="token punctuation">,</span>		<span class="token number">0x400L</span><span class="token punctuation">,</span>		<span class="token number">0x200L</span><span class="token punctuation">,</span>		<span class="token number">0x100L</span><span class="token punctuation">,</span>
	<span class="token number">0x80L</span><span class="token punctuation">,</span>		<span class="token number">0x40L</span><span class="token punctuation">,</span>		<span class="token number">0x20L</span><span class="token punctuation">,</span>		<span class="token number">0x10L</span><span class="token punctuation">,</span>
	<span class="token number">0x8L</span><span class="token punctuation">,</span>		<span class="token number">0x4L</span><span class="token punctuation">,</span>		<span class="token number">0x2L</span><span class="token punctuation">,</span>		<span class="token number">0x1L</span>	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//insert digits</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP1<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>
       <span class="token number">0x01010400l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00010000l</span><span class="token punctuation">,</span><span class="token number">0x01010404l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010004l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span><span class="token number">0x00010000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000400l</span><span class="token punctuation">,</span><span class="token number">0x01010400l</span><span class="token punctuation">,</span><span class="token number">0x01010404l</span><span class="token punctuation">,</span><span class="token number">0x00000400l</span><span class="token punctuation">,</span>
       <span class="token number">0x01000404l</span><span class="token punctuation">,</span><span class="token number">0x01010004l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x00010400l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010400l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span><span class="token number">0x01000404l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010004l</span><span class="token punctuation">,</span><span class="token number">0x01000004l</span><span class="token punctuation">,</span><span class="token number">0x01000004l</span><span class="token punctuation">,</span><span class="token number">0x00010004l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010000l</span><span class="token punctuation">,</span><span class="token number">0x01010404l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010400l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span><span class="token number">0x00000400l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010004l</span><span class="token punctuation">,</span><span class="token number">0x00010000l</span><span class="token punctuation">,</span><span class="token number">0x00010400l</span><span class="token punctuation">,</span><span class="token number">0x01000004l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000400l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span><span class="token number">0x01000404l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010404l</span><span class="token punctuation">,</span><span class="token number">0x00010004l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span><span class="token number">0x01000404l</span><span class="token punctuation">,</span>
       <span class="token number">0x01000004l</span><span class="token punctuation">,</span><span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span><span class="token number">0x01010400l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010004l</span><span class="token punctuation">,</span><span class="token number">0x00010400l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x01010004l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP2<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>
       <span class="token number">0x80108020l</span><span class="token punctuation">,</span><span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span><span class="token number">0x00108020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00100000l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span><span class="token number">0x80008020l</span><span class="token punctuation">,</span>
       <span class="token number">0x80000020l</span><span class="token punctuation">,</span><span class="token number">0x80108020l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x80000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00100000l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00108000l</span><span class="token punctuation">,</span><span class="token number">0x00100020l</span><span class="token punctuation">,</span><span class="token number">0x80008020l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80000000l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span><span class="token number">0x00108020l</span><span class="token punctuation">,</span><span class="token number">0x80100000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00100020l</span><span class="token punctuation">,</span><span class="token number">0x80000020l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00108000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00008020l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x80100000l</span><span class="token punctuation">,</span><span class="token number">0x00008020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00108020l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span><span class="token number">0x00100000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80008020l</span><span class="token punctuation">,</span><span class="token number">0x80100000l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80100000l</span><span class="token punctuation">,</span><span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x80108020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00108020l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span><span class="token number">0x80000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00008020l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x00100000l</span><span class="token punctuation">,</span><span class="token number">0x80000020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00100020l</span><span class="token punctuation">,</span><span class="token number">0x80008020l</span><span class="token punctuation">,</span><span class="token number">0x80000020l</span><span class="token punctuation">,</span><span class="token number">0x00100020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00108000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00008020l</span><span class="token punctuation">,</span>
       <span class="token number">0x80000000l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span><span class="token number">0x80108020l</span><span class="token punctuation">,</span><span class="token number">0x00108000l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP3<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span> 
       <span class="token number">0x00000208l</span><span class="token punctuation">,</span><span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00020208l</span><span class="token punctuation">,</span><span class="token number">0x08000200l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x08000008l</span><span class="token punctuation">,</span><span class="token number">0x08000008l</span><span class="token punctuation">,</span><span class="token number">0x00020000l</span><span class="token punctuation">,</span>
       <span class="token number">0x08020208l</span><span class="token punctuation">,</span><span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x08020000l</span><span class="token punctuation">,</span><span class="token number">0x00000208l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000000l</span><span class="token punctuation">,</span><span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x00000200l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020200l</span><span class="token punctuation">,</span><span class="token number">0x08020000l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span><span class="token number">0x00020208l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000208l</span><span class="token punctuation">,</span><span class="token number">0x00020200l</span><span class="token punctuation">,</span><span class="token number">0x00020000l</span><span class="token punctuation">,</span><span class="token number">0x08000208l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x08020208l</span><span class="token punctuation">,</span><span class="token number">0x00000200l</span><span class="token punctuation">,</span><span class="token number">0x08000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x08000000l</span><span class="token punctuation">,</span><span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x00000208l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020000l</span><span class="token punctuation">,</span><span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x08000200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000200l</span><span class="token punctuation">,</span><span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x08020208l</span><span class="token punctuation">,</span><span class="token number">0x08000200l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000008l</span><span class="token punctuation">,</span><span class="token number">0x00000200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000208l</span><span class="token punctuation">,</span><span class="token number">0x00020000l</span><span class="token punctuation">,</span><span class="token number">0x08000000l</span><span class="token punctuation">,</span><span class="token number">0x08020208l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x00020208l</span><span class="token punctuation">,</span><span class="token number">0x00020200l</span><span class="token punctuation">,</span><span class="token number">0x08000008l</span><span class="token punctuation">,</span>
       <span class="token number">0x08020000l</span><span class="token punctuation">,</span><span class="token number">0x08000208l</span><span class="token punctuation">,</span><span class="token number">0x00000208l</span><span class="token punctuation">,</span><span class="token number">0x08020000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020208l</span><span class="token punctuation">,</span><span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span><span class="token number">0x00020200l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP4<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>             
       <span class="token number">0x00802001l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00000080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00802080l</span><span class="token punctuation">,</span><span class="token number">0x00800081l</span><span class="token punctuation">,</span><span class="token number">0x00800001l</span><span class="token punctuation">,</span><span class="token number">0x00002001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span><span class="token number">0x00802081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000081l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00800080l</span><span class="token punctuation">,</span><span class="token number">0x00800001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000001l</span><span class="token punctuation">,</span><span class="token number">0x00002000l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00802001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000080l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00002001l</span><span class="token punctuation">,</span><span class="token number">0x00002080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00800081l</span><span class="token punctuation">,</span><span class="token number">0x00000001l</span><span class="token punctuation">,</span><span class="token number">0x00002080l</span><span class="token punctuation">,</span><span class="token number">0x00800080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00002000l</span><span class="token punctuation">,</span><span class="token number">0x00802080l</span><span class="token punctuation">,</span><span class="token number">0x00802081l</span><span class="token punctuation">,</span><span class="token number">0x00000081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00800080l</span><span class="token punctuation">,</span><span class="token number">0x00800001l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span><span class="token number">0x00802081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000081l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00002080l</span><span class="token punctuation">,</span><span class="token number">0x00800080l</span><span class="token punctuation">,</span><span class="token number">0x00800081l</span><span class="token punctuation">,</span><span class="token number">0x00000001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00802001l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00000080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00802081l</span><span class="token punctuation">,</span><span class="token number">0x00000081l</span><span class="token punctuation">,</span><span class="token number">0x00000001l</span><span class="token punctuation">,</span><span class="token number">0x00002000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00800001l</span><span class="token punctuation">,</span><span class="token number">0x00002001l</span><span class="token punctuation">,</span><span class="token number">0x00802080l</span><span class="token punctuation">,</span><span class="token number">0x00800081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00002001l</span><span class="token punctuation">,</span><span class="token number">0x00002080l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00802001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000080l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00002000l</span><span class="token punctuation">,</span><span class="token number">0x00802080l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP5<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>   
       <span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x02080100l</span><span class="token punctuation">,</span><span class="token number">0x02080000l</span><span class="token punctuation">,</span><span class="token number">0x42000100l</span><span class="token punctuation">,</span>
       <span class="token number">0x00080000l</span><span class="token punctuation">,</span><span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x40000000l</span><span class="token punctuation">,</span><span class="token number">0x02080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x40080100l</span><span class="token punctuation">,</span><span class="token number">0x00080000l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x42000100l</span><span class="token punctuation">,</span><span class="token number">0x42080000l</span><span class="token punctuation">,</span><span class="token number">0x00080100l</span><span class="token punctuation">,</span><span class="token number">0x40000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x02000000l</span><span class="token punctuation">,</span><span class="token number">0x40080000l</span><span class="token punctuation">,</span><span class="token number">0x40080000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x42080100l</span><span class="token punctuation">,</span><span class="token number">0x42080100l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span>
       <span class="token number">0x42080000l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x42000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x02080100l</span><span class="token punctuation">,</span><span class="token number">0x02000000l</span><span class="token punctuation">,</span><span class="token number">0x42000000l</span><span class="token punctuation">,</span><span class="token number">0x00080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x00080000l</span><span class="token punctuation">,</span><span class="token number">0x42000100l</span><span class="token punctuation">,</span><span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x02000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x40000000l</span><span class="token punctuation">,</span><span class="token number">0x02080000l</span><span class="token punctuation">,</span><span class="token number">0x42000100l</span><span class="token punctuation">,</span><span class="token number">0x40080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40000000l</span><span class="token punctuation">,</span><span class="token number">0x42080000l</span><span class="token punctuation">,</span><span class="token number">0x02080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x40080100l</span><span class="token punctuation">,</span><span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x42080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x42080100l</span><span class="token punctuation">,</span><span class="token number">0x00080100l</span><span class="token punctuation">,</span><span class="token number">0x42000000l</span><span class="token punctuation">,</span><span class="token number">0x42080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x02080000l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x00080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00080100l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x00080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x40080000l</span><span class="token punctuation">,</span><span class="token number">0x02080100l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP6<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span> 
       <span class="token number">0x20000010l</span><span class="token punctuation">,</span><span class="token number">0x20400000l</span><span class="token punctuation">,</span><span class="token number">0x00004000l</span><span class="token punctuation">,</span><span class="token number">0x20404010l</span><span class="token punctuation">,</span>
       <span class="token number">0x20400000l</span><span class="token punctuation">,</span><span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x20404010l</span><span class="token punctuation">,</span><span class="token number">0x00400000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x00404010l</span><span class="token punctuation">,</span><span class="token number">0x00400000l</span><span class="token punctuation">,</span><span class="token number">0x20000010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x00004010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span><span class="token punctuation">,</span><span class="token number">0x00004000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00404000l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span><span class="token punctuation">,</span><span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x20400010l</span><span class="token punctuation">,</span>
       <span class="token number">0x20400010l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00404010l</span><span class="token punctuation">,</span><span class="token number">0x20404000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00004010l</span><span class="token punctuation">,</span><span class="token number">0x00404000l</span><span class="token punctuation">,</span><span class="token number">0x20404000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x20400010l</span><span class="token punctuation">,</span><span class="token number">0x00404000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20404010l</span><span class="token punctuation">,</span><span class="token number">0x00400000l</span><span class="token punctuation">,</span><span class="token number">0x00004010l</span><span class="token punctuation">,</span><span class="token number">0x20000010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00400000l</span><span class="token punctuation">,</span><span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x00004010l</span><span class="token punctuation">,</span>
       <span class="token number">0x20000010l</span><span class="token punctuation">,</span><span class="token number">0x20404010l</span><span class="token punctuation">,</span><span class="token number">0x00404000l</span><span class="token punctuation">,</span><span class="token number">0x20400000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00404010l</span><span class="token punctuation">,</span><span class="token number">0x20404000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x20400010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x00004000l</span><span class="token punctuation">,</span><span class="token number">0x20400000l</span><span class="token punctuation">,</span><span class="token number">0x00404010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00004000l</span><span class="token punctuation">,</span><span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20404000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
            
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP7<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0x00200000L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x04000802L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000800L</span><span class="token punctuation">,</span> <span class="token number">0x04000802L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04200802L</span><span class="token punctuation">,</span> <span class="token number">0x00200000L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x04000002L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000002L</span><span class="token punctuation">,</span> <span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x00000802L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000800L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x00200002L</span><span class="token punctuation">,</span> <span class="token number">0x04000800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000002L</span><span class="token punctuation">,</span> <span class="token number">0x04200000L</span><span class="token punctuation">,</span> <span class="token number">0x04200800L</span><span class="token punctuation">,</span> <span class="token number">0x00200002L</span><span class="token punctuation">,</span>
	<span class="token number">0x04200000L</span><span class="token punctuation">,</span> <span class="token number">0x00000800L</span><span class="token punctuation">,</span> <span class="token number">0x00000802L</span><span class="token punctuation">,</span> <span class="token number">0x04200802L</span><span class="token punctuation">,</span>
	<span class="token number">0x00200800L</span><span class="token punctuation">,</span> <span class="token number">0x00000002L</span><span class="token punctuation">,</span> <span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x00200800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x00200800L</span><span class="token punctuation">,</span> <span class="token number">0x00200000L</span><span class="token punctuation">,</span> <span class="token number">0x04000802L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000802L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x00000002L</span><span class="token punctuation">,</span>
	<span class="token number">0x00200002L</span><span class="token punctuation">,</span> <span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x04000800L</span><span class="token punctuation">,</span> <span class="token number">0x00200000L</span><span class="token punctuation">,</span>
	<span class="token number">0x04200800L</span><span class="token punctuation">,</span> <span class="token number">0x00000802L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200800L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000802L</span><span class="token punctuation">,</span> <span class="token number">0x04000002L</span><span class="token punctuation">,</span> <span class="token number">0x04200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00200800L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x00000002L</span><span class="token punctuation">,</span> <span class="token number">0x04200802L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200000L</span><span class="token punctuation">,</span> <span class="token number">0x00000800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000002L</span><span class="token punctuation">,</span> <span class="token number">0x04000800L</span><span class="token punctuation">,</span> <span class="token number">0x00000800L</span><span class="token punctuation">,</span> <span class="token number">0x00200002L</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP8<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0x10001040L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span> <span class="token number">0x10041040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10000000L</span><span class="token punctuation">,</span> <span class="token number">0x10001040L</span><span class="token punctuation">,</span> <span class="token number">0x00000040L</span><span class="token punctuation">,</span> <span class="token number">0x10000000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10040000L</span><span class="token punctuation">,</span> <span class="token number">0x10041040L</span><span class="token punctuation">,</span> <span class="token number">0x00041000L</span><span class="token punctuation">,</span>
	<span class="token number">0x10041000L</span><span class="token punctuation">,</span> <span class="token number">0x00041040L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span> <span class="token number">0x00000040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10040000L</span><span class="token punctuation">,</span> <span class="token number">0x10000040L</span><span class="token punctuation">,</span> <span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x00001040L</span><span class="token punctuation">,</span>
	<span class="token number">0x00041000L</span><span class="token punctuation">,</span> <span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10040040L</span><span class="token punctuation">,</span> <span class="token number">0x10041000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00001040L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x10040040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10000040L</span><span class="token punctuation">,</span> <span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x00041040L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00041040L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span> <span class="token number">0x10041000L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000040L</span><span class="token punctuation">,</span> <span class="token number">0x10040040L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span> <span class="token number">0x00041040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x00000040L</span><span class="token punctuation">,</span> <span class="token number">0x10000040L</span><span class="token punctuation">,</span> <span class="token number">0x10040000L</span><span class="token punctuation">,</span>
	<span class="token number">0x10040040L</span><span class="token punctuation">,</span> <span class="token number">0x10000000L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span> <span class="token number">0x10001040L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x10041040L</span><span class="token punctuation">,</span> <span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10000040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10040000L</span><span class="token punctuation">,</span> <span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x10001040L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span>
	<span class="token number">0x10041040L</span><span class="token punctuation">,</span> <span class="token number">0x00041000L</span><span class="token punctuation">,</span> <span class="token number">0x00041000L</span><span class="token punctuation">,</span> <span class="token number">0x00001040L</span><span class="token punctuation">,</span>
	<span class="token number">0x00001040L</span><span class="token punctuation">,</span> <span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10000000L</span><span class="token punctuation">,</span> <span class="token number">0x10041000L</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">deskey</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span><span class="token keyword">short</span> edf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cookey</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>raw1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>dough<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//void cpkey(register unsigned long *into);</span>
<span class="token comment">//void usekey(register unsigned long *from);</span>
<span class="token comment">//void des(unsigned char *inblock,unsigned char *outblock);</span>
<span class="token keyword">void</span> <span class="token function">scrunch</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>into<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">unscrun</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>into<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">desfunc</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>block<span class="token punctuation">,</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*****************  DES Function  *****************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandEncKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesEncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandDecKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesDecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesEncRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesEncKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesDecRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesDecKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">deskey</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span><span class="token keyword">short</span> edf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>kn<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> pc1m<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pcr<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span>
		l <span class="token operator">=</span> pc1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		m <span class="token operator">=</span> l <span class="token operator">&amp;</span> <span class="token number">07</span><span class="token punctuation">;</span>
		pc1m<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> key<span class="token punctuation">[</span>l <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>bytebit<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> edf <span class="token operator">==</span> DE1 <span class="token punctuation">)</span>	m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>	m <span class="token operator">=</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
		n <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		kn<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> kn<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			l <span class="token operator">=</span> j <span class="token operator">+</span> totrot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> l <span class="token operator">&lt;</span> <span class="token number">28</span> <span class="token punctuation">)</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> 
		<span class="token punctuation">&#123;</span>
			l <span class="token operator">=</span> j <span class="token operator">+</span> totrot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> l <span class="token operator">&lt;</span> <span class="token number">56</span> <span class="token punctuation">)</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> 
		<span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> 
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> pcr<span class="token punctuation">[</span>pc2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>	kn<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">|=</span> bigbyte<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> pcr<span class="token punctuation">[</span>pc2<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>	kn<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">|=</span> bigbyte<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">cookey</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>raw1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>dough<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>cook<span class="token punctuation">,</span><span class="token operator">*</span>raw0<span class="token punctuation">;</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
	
	cook <span class="token operator">=</span> dough<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> raw1<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		raw0 <span class="token operator">=</span> raw1<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x00fc0000L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x00000fc0L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x00fc0000L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x00000fc0L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x0003f000L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x0000003fL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x0003f000L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x0000003fL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">scrunch</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>into<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>into	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof   <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">unscrun</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>into<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token operator">*</span>outof<span class="token operator">++</span>	  <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token operator">*</span>outof		  <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">desfunc</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>block<span class="token punctuation">,</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>keys<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fval<span class="token punctuation">,</span> work<span class="token punctuation">,</span> right<span class="token punctuation">,</span> leftt<span class="token punctuation">;</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> round<span class="token punctuation">;</span>
	
	leftt <span class="token operator">=</span> block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	right <span class="token operator">=</span> block<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f0f0f0fL</span><span class="token punctuation">;</span>
	
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000ffffL</span><span class="token punctuation">;</span>
	
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333L</span><span class="token punctuation">;</span>
	
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff00ffL</span><span class="token punctuation">;</span>
	
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffL</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xaaaaaaaaL</span><span class="token punctuation">;</span>
	
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffL</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span>round <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> round <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> round<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		work  <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		work <span class="token operator">^=</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval  <span class="token operator">=</span> SP7<span class="token punctuation">[</span> work	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP5<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP3<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP1<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		work  <span class="token operator">=</span> right <span class="token operator">^</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP8<span class="token punctuation">[</span> work 	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP6<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP4<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP2<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		leftt <span class="token operator">^=</span> fval<span class="token punctuation">;</span>
		work  <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		work <span class="token operator">^=</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval  <span class="token operator">=</span> SP7<span class="token punctuation">[</span> work 	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP5<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP3<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP1<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		work  <span class="token operator">=</span> leftt <span class="token operator">^</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP8<span class="token punctuation">[</span> work 	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP6<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP4<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP2<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		right <span class="token operator">^=</span> fval<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	right <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xaaaaaaaaL</span><span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff00ffL</span><span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span>  <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333L</span><span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000ffffL</span><span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span>  <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f0f0f0fL</span><span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>block<span class="token operator">++</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
	<span class="token operator">*</span>block <span class="token operator">=</span> leftt<span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************************************************
	OPENCOMM_DesExpandEncKey	: Expand Des Enc Key 扩展des加密密钥
	Return value:
		0         : Success
		other     : failed
	Parameters:
		pbDesKey        : 扩展前的DES密钥(8字节)       input
		ulDesKeyLen     : 扩展前的DES密钥长度          input
		pbDesEncKey     : 扩展后的DES加密密钥(128字节)  output
		*ulDesEncKeyLen : 扩展后的DES加密密钥长度       output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandEncKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesEncKeyLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> kn<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dough<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">deskey</span><span class="token punctuation">(</span>pbDesKey<span class="token punctuation">,</span> EN0<span class="token punctuation">,</span> kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cookey</span><span class="token punctuation">(</span>kn<span class="token punctuation">,</span> dough<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>ulDesEncKeyLen <span class="token operator">=</span> DES_KEYBYTES<span class="token punctuation">;</span>  <span class="token comment">//32 long = 128 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbDesEncKey<span class="token punctuation">,</span> dough<span class="token punctuation">,</span> <span class="token operator">*</span>ulDesEncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************************************************
	OPENCOMM_DesExpandDecKey	: Expand Des Dec Key 扩展des解密密钥
	Return value:
		0       : Success
		other   : failed
	Parameters:
		pbDesKey        : 扩展前的DES密钥(8字节)      input
		ulDesKeyLen     : 扩展前的DES密钥长度         input
		pbDesDecKey     : 扩展后的DES解密密钥(128字节) output
		*ulDesDecKeyLen : 扩展后的DES解密密钥长度      output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandDecKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesDecKeyLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> kn<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dough<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">deskey</span><span class="token punctuation">(</span>pbDesKey<span class="token punctuation">,</span> DE1<span class="token punctuation">,</span> kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cookey</span><span class="token punctuation">(</span>kn<span class="token punctuation">,</span> dough<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>ulDesDecKeyLen <span class="token operator">=</span> DES_KEYBYTES<span class="token punctuation">;</span>  <span class="token comment">//32 long = 128 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbDesDecKey<span class="token punctuation">,</span> dough<span class="token punctuation">,</span> <span class="token operator">*</span>ulDesDecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/****************************************************************
	OPENCOMM_DesEncRaw		: Des算法加密小整块明文8字节 
	Return value:
		0       : Success
		other   : failed
	Parameters:
		pbDesEncKey    : DES加密密钥    input
		ulDesEncKeyLen : DES加密密钥长度 input
		pbInData       : 待加密的明文    input
		ulInDataLen    : 待加密的明文长度 input
		pbOutData      : 加密后的密文    output
		*ulOutDataLen  : 加密后的密文长度 output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesEncRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesEncKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> work<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ek<span class="token punctuation">[</span>DES_KEYLONGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> cp<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulInDataLen <span class="token operator">!=</span> DES_BLOCKLEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesEncKeyLen <span class="token operator">!=</span> DES_KEYBYTES<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> pbInData<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scrunch</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8 bytes -> 2 long</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> pbDesEncKey<span class="token punctuation">,</span> ulDesEncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">desfunc</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>ek<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">unscrun</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 long -> 8 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbOutData<span class="token punctuation">,</span> cp<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>ulOutDataLen <span class="token operator">=</span> DES_BLOCKLEN<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************************************************
	OPENCOMM_DesDecRaw : Des算法解密小整块密文8字节 
	Return value:
		0     : Success
		other : failed
	Parameters:
		pbDesDecKey    : DES解密密钥     input
		ulDesDecKeyLen : DES解密密钥长度  input
		pbInData       : 待解密的密文     input
		ulInDataLen    : 待解密的密文长度  input
		pbOutData      : 解密后的明文     output
		*ulOutDataLen  : 解密后的明文长度  output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesDecRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesDecKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> work<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dk<span class="token punctuation">[</span>DES_KEYLONGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> cp<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulInDataLen <span class="token operator">!=</span> DES_BLOCKLEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesDecKeyLen <span class="token operator">!=</span> DES_KEYBYTES<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> pbInData<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scrunch</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8 bytes -> 2 long</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>dk<span class="token punctuation">,</span> pbDesDecKey<span class="token punctuation">,</span> ulDesDecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">desfunc</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>dk<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">unscrun</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 long -> 8 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbOutData<span class="token punctuation">,</span> cp<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	des_enc(pbDesEncKey, pbInData, pbOutData);</span>
	<span class="token operator">*</span>ulOutDataLen <span class="token operator">=</span> DES_BLOCKLEN<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*********************   DES    *********************/</span>

<span class="token keyword">int</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesKeyBuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesEncKeyBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> EncKeyLen<span class="token punctuation">,</span> KeyLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> loops<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nInDataLen<span class="token operator">%</span><span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	KeyLen <span class="token operator">=</span> nDesKeyLen<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> pDesKey<span class="token punctuation">,</span> nDesKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	
	retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesExpandEncKey</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> KeyLen<span class="token punctuation">,</span>
		DesEncKeyBuf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>EncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> retval<span class="token punctuation">;</span>

	loops <span class="token operator">=</span> nInDataLen<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesEncRaw</span><span class="token punctuation">(</span>DesEncKeyBuf<span class="token punctuation">,</span> EncKeyLen<span class="token punctuation">,</span> pInData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>
			<span class="token number">8</span><span class="token punctuation">,</span> pOutData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>pOutDataLen <span class="token operator">=</span> nInDataLen<span class="token punctuation">;</span>
	<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesKeyBuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesDecKeyBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> DecKeyLen<span class="token punctuation">,</span> KeyLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> loops<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nInDataLen<span class="token operator">%</span><span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	KeyLen <span class="token operator">=</span> nDesKeyLen<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> pDesKey<span class="token punctuation">,</span> nDesKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesExpandDecKey</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> KeyLen<span class="token punctuation">,</span>
		DesDecKeyBuf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>DecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
	
	loops <span class="token operator">=</span> nInDataLen<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesDecRaw</span><span class="token punctuation">(</span>DesDecKeyBuf<span class="token punctuation">,</span> DecKeyLen<span class="token punctuation">,</span> pInData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>
			<span class="token number">8</span><span class="token punctuation">,</span> pOutData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>pOutDataLen <span class="token operator">=</span> nInDataLen<span class="token punctuation">;</span>
	<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//对称明文数据打pading</span>
<span class="token keyword">void</span>  <span class="token function">CW_dataPadAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> tag<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>date<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dateLen<span class="token punctuation">,</span> 
					<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>padDate<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>padDateLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>           i<span class="token punctuation">,</span> padLen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pTmp   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	
	pTmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>dateLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pTmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token operator">*</span>padDate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dateLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">,</span> date<span class="token punctuation">,</span> dateLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		padLen <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">-</span> dateLen <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>padLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			pTmp<span class="token punctuation">[</span>dateLen<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>padLen<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">*</span>padDateLen <span class="token operator">=</span> dateLen <span class="token operator">+</span> padLen<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		padLen <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> dateLen <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>padLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			pTmp<span class="token punctuation">[</span>dateLen<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>padLen<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>		
	<span class="token punctuation">&#125;</span>
	
	<span class="token operator">*</span>padDateLen <span class="token operator">=</span> dateLen <span class="token operator">+</span> padLen<span class="token punctuation">;</span>	
	<span class="token operator">*</span>padDate <span class="token operator">=</span> pTmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">USER_PASSWORD_KEY</span> <span class="token string">"abcd1234"</span></span>


<span class="token comment">//数据加密</span>
<span class="token keyword">int</span> <span class="token function">DesEnc</span><span class="token punctuation">(</span>
		 <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		 <span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		 <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		 <span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>	<span class="token operator">*</span>padDate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>	padDateLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">CW_dataPadAdd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pInData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>nInDataLen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>padDate<span class="token punctuation">,</span> <span class="token operator">&amp;</span>padDateLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	rv <span class="token operator">=</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		padDate<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padDateLen<span class="token punctuation">,</span> pOutData<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>padDate <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>padDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>padDate <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>padDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//数据加密</span>
<span class="token keyword">int</span> <span class="token function">DesEnc_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>	<span class="token operator">*</span>padDate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>	padDateLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	rv <span class="token operator">=</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		pInData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>nInDataLen<span class="token punctuation">,</span> pOutData<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//解密分配内存错误</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">ERR_MALLOC</span> <span class="token expression"><span class="token number">20</span></span></span>
<span class="token comment">//密码长度不是8的整数倍, 不合法</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">ERR_FILECONT</span> <span class="token expression"><span class="token number">20</span></span></span>


<span class="token comment">//用户使用函数des解密</span>
<span class="token keyword">int</span> <span class="token function">DesDec</span><span class="token punctuation">(</span>
		   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		   <span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		   <span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token keyword">char</span>			padChar<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> 	<span class="token operator">*</span>tmpPlain <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	
	tmpPlain <span class="token operator">=</span>		<span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nInDataLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ERR_MALLOC<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nInDataLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//解密</span>
	rv <span class="token operator">=</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		pInData<span class="token punctuation">,</span> nInDataLen<span class="token punctuation">,</span> tmpPlain<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//去pading</span>
	padChar <span class="token operator">=</span> tmpPlain<span class="token punctuation">[</span><span class="token operator">*</span>pOutDataLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padChar<span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padChar<span class="token operator">></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">//异常处理</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ERR_FILECONT<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token operator">*</span>pOutDataLen <span class="token operator">=</span> <span class="token operator">*</span>pOutDataLen <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padChar<span class="token punctuation">;</span>	
	<span class="token comment">//memset(tmpPlain + *pOutDataLen, 0, (int)padChar);	</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pOutData<span class="token punctuation">,</span> tmpPlain<span class="token punctuation">,</span> <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//用户使用函数des解密</span>
<span class="token keyword">int</span> <span class="token function">DesDec_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token comment">//char			padChar;</span>
	<span class="token comment">//unsigned char 	*tmpPlain = NULL;</span>

	<span class="token comment">/*
	tmpPlain =		(unsigned char *)malloc(nInDataLen+24);
	if (tmpPlain == NULL)
	&#123;
		return ERR_MALLOC;
	&#125;
	memset(tmpPlain, 0, nInDataLen+24);
	*/</span>

	<span class="token comment">//解密</span>
	rv <span class="token operator">=</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		pInData<span class="token punctuation">,</span> nInDataLen<span class="token punctuation">,</span> pOutData<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//if (tmpPlain != NULL) free(tmpPlain);</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">/*
	//去pading
	padChar = tmpPlain[*pOutDataLen - 1];
	if ( (int)padChar&lt;=0 || (int)padChar>8) //异常处理
	&#123;
		if (tmpPlain) free(tmpPlain);
		return ERR_FILECONT;
	&#125;

	*pOutDataLen = *pOutDataLen - (int)padChar;	
	//memset(tmpPlain + *pOutDataLen, 0, (int)padChar);	
	memcpy(pOutData, tmpPlain, *pOutDataLen);
	if (tmpPlain) free(tmpPlain);	
	*/</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>main.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"des.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span> </span><span class="token comment">//4K</span></span>

<span class="token keyword">void</span> <span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 加密文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 解密文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4 退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//加密文件</span>
<span class="token keyword">void</span> <span class="token function">FileEnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> srcFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> dstFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入需要加密的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入加密后的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	FILE <span class="token operator">*</span>rFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>wFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> srcBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//明文</span>
	<span class="token keyword">int</span> srcLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//明文长度</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dstBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//密文</span>
	<span class="token keyword">int</span> dstLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//密文长度</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> wLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">//读、二进制方式打开需要加密的文件</span>
	rFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileEnc fopen srcFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//写、二进制方式打开加密后的文件</span>
	wFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileEnc fopen dstFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从源文件中读取数据</span>
	<span class="token comment">//4k: DesEnc_raw()</span>
	<span class="token comment">//&lt;4k: DesEnc()</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//从文件中读取内容</span>
		<span class="token comment">//srcBuf: 存放文件内容的buf</span>
		<span class="token comment">//1：每次读1个字节</span>
		<span class="token comment">//SIZE: 一次读4k块内存， 读取内容的大小： SIZE * 1</span>
		<span class="token comment">//返回值：成功读取内容的块数</span>
		srcLen <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>srcLen <span class="token operator">&lt;</span> SIZE<span class="token punctuation">)</span> <span class="token comment">//如果读取内容&lt;4k，跳出循环</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//=4k数据的加密处理</span>
		<span class="token comment">//把明文srcBuf(长度为srcLen)加密为密文dstBuf(长度为dstLen)</span>
		ret <span class="token operator">=</span> <span class="token function">DesEnc_raw</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileEnc DesEnc_raw err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//把密文dstBuf(长度为dstLen)写到文件wFp中</span>
		wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（等于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//小于4k的处理</span>
	<span class="token comment">//把明文srcBuf(长度为srcLen)加密为密文dstBuf(长度为dstLen)</span>
	ret <span class="token operator">=</span> <span class="token function">DesEnc</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileEnc DesEnc err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//把密文dstBuf(长度为dstLen)写到文件wFp中</span>
	wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（小于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

End<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//解密文件</span>
<span class="token keyword">void</span> <span class="token function">FileDec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> srcFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> dstFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入需要解密的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入解密后的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	FILE <span class="token operator">*</span>rFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>wFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> srcBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//密文</span>
	<span class="token keyword">int</span> srcLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//密文长度</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dstBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//明文</span>
	<span class="token keyword">int</span> dstLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//明文长度</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> wLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">//读、二进制方式打开需要解密的文件</span>
	rFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileDec fopen srcFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//写、二进制方式打开解密后的文件</span>
	wFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileDec fopen dstFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从源文件中读取数据</span>
	<span class="token comment">//4k: DesDec_raw()</span>
	<span class="token comment">//&lt;4k: DesDec()</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//从文件中读取内容</span>
		<span class="token comment">//srcBuf: 存放文件内容的buf</span>
		<span class="token comment">//1：每次读1个字节</span>
		<span class="token comment">//SIZE: 一次读4k内存， 读取内容的大小： SIZE * 1</span>
		<span class="token comment">//返回值：成功读取内容的块数</span>
		srcLen <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>srcLen <span class="token operator">&lt;</span> SIZE<span class="token punctuation">)</span> <span class="token comment">//如果读取内容&lt;4k，跳出循环</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//=4k数据的解密处理</span>
		<span class="token comment">//把明文srcBuf(长度为srcLen)解密为明文dstBuf(长度为dstLen)</span>
		ret <span class="token operator">=</span> <span class="token function">DesDec_raw</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileDec DesDec_raw err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//把明文dstBuf(长度为dstLen)写到文件wFp中</span>
		wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（等于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">//小于4k的处理</span>
	<span class="token comment">//把明文srcBuf(长度为srcLen)解密为明文dstBuf(长度为dstLen)</span>
	ret <span class="token operator">=</span> <span class="token function">DesDec</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileDec DesDec err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//把密文dstBuf(长度为dstLen)写到文件wFp中</span>
	wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（小于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

End<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> cmd<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cmd:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">FileEnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">FileDec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="链表和函数指针"><a href="#链表和函数指针" class="headerlink" title="链表和函数指针"></a>链表和函数指针</h3><ul>
<li>链表是一种常用的数据结构，它通过指针将一些列数据结点，连接成一个数据链。相对于数组，链表具有更好的动态性（非顺序存储）。</li>
<li>数据域用来存储数据，指针域用于建立与下一个结点的联系。</li>
<li>建立链表时无需预先知道数据总量的，可以随机的分配空间，可以高效的在链表中的任意位置实时插入或删除数据。</li>
<li>链表的开销，主要是访问顺序性和组织链的空间损失。</li>
</ul>
<h4 id="链表的相关概念"><a href="#链表的相关概念" class="headerlink" title="链表的相关概念"></a>链表的相关概念</h4><ol>
<li>有关结构体的自身引用</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//结构体嵌套结构体指针(√)</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Teacher</span> <span class="token operator">*</span>teacher<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">teacher_t</span><span class="token punctuation">;</span>


<span class="token comment">//数据类型本质：固定大小内存块的别名 </span>

<span class="token comment">//结构体中套一个结构体(X)</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Student</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">student_t</span><span class="token punctuation">;</span>
<span class="token comment">//在自己类型大小 还没有确定的情况下 引用自己类型的元素 是不正确的</span>
<span class="token comment">//结构体不能嵌套定义 （确定不了数据类型的内存大小，分配不了内存）</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">teacher_t</span> t1<span class="token punctuation">;</span>
    <span class="token class-name">student_t</span> s1<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>data域和指针域</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wps23AF.tmp.jpg" alt="img"></p>
<p><img src="http://qiniu.orangew.cn/img/wps55EB.tmp.jpg" alt="img"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>link<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> item<span class="token punctuation">;</span>     <span class="token comment">//data域</span>
    link next<span class="token punctuation">;</span>              <span class="token comment">//链表域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol>
<li><p>动态链表和静态链表</p>
<ul>
<li><p>静态链表和动态链表是线性表链式存储结构的两种不同的表示方式。</p>
</li>
<li><p>所有结点都是在程序中定义的，不是临时开辟的，也不能用完后释放，这种链表称为“静态链表”。</p>
</li>
<li><p>所谓动态链表，是指在程序执行过程中从无到有地建立起一个链表，即一个一个地开辟结点和输入各结点数据，并建立起前后相链的关系。</p>
</li>
</ul>
</li>
<li><p>带头链表和不带头链表</p>
</li>
<li><p>单向链表、双向链表、循环链表等</p>
</li>
</ol>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol>
<li>建立带有头结点的单向链表<ul>
<li>编写函数SList_Creat，建立带有头结点的单向链表。循环创建结点，结点数据域中的数值从键盘输入，以-1作为输入结束标志。链表的头结点地址由函数值返回。</li>
</ul>
</li>
<li>顺序访问链表中各结点的数据域<ul>
<li>编写函数SList_Print，顺序输出单向链表各项结点数据域中的内容。</li>
</ul>
</li>
<li>在单向链表中插入节点<ul>
<li>编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；若值为x的结点不存在，则插在表尾。</li>
</ul>
</li>
<li>删除单向链表中的结点、<ul>
<li>编写函数SList_NodeDel，删除值为x的结点。\</li>
</ul>
</li>
<li>单向链表的基本操作</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>		<span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>	<span class="token comment">//指针域</span>
<span class="token punctuation">&#125;</span>SLIST<span class="token punctuation">;</span>

<span class="token comment">//创建头节点</span>
SLIST <span class="token operator">*</span><span class="token function">SListCreat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		<span class="token comment">//当前节点</span>
	SLIST <span class="token operator">*</span>pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">//头结点</span>
	SLIST <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		<span class="token comment">//新节点</span>

	<span class="token comment">//头结点，只是作为标志使用，不保存有效数据</span>
	pHead <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//pHead成员变量赋值，数据域任意即可，后面用不上</span>
	pHead<span class="token operator">-></span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	pHead<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//保存当前节点</span>
	<span class="token comment">//指针指向谁，就把谁的地址赋值给指针</span>
	pCur <span class="token operator">=</span> pHead<span class="token punctuation">;</span>

	<span class="token keyword">int</span> data<span class="token punctuation">;</span>

	<span class="token comment">//循环创建结点，结点数据域中的数值从键盘输入，以-1作为输入结束标志</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 

		<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span><span class="token comment">//输入-1，退出循环</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//新节点分配空间</span>
		pNew <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pNew <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span><span class="token comment">//如果没有分配成功，跳出本次循环</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//pNew成员变量赋值</span>
		pNew<span class="token operator">-></span>id <span class="token operator">=</span> data<span class="token punctuation">;</span>
		pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

		<span class="token comment">//当前节点next指向新节点</span>
		pCur<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>

		<span class="token comment">//新节点的next指向NULL</span>
		pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

		<span class="token comment">//当前节点的位置移动到新节点的位置（pCur指向pNew）</span>
		pCur <span class="token operator">=</span> pNew<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	
	<span class="token comment">//链表的头结点地址由函数值返回。</span>
	<span class="token keyword">return</span> pHead<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历节点</span>
<span class="token comment">//顺序输出单向链表各项结点数据域中的内容</span>
<span class="token keyword">int</span> <span class="token function">SListPrint</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//保存头结点的下一个节点</span>
	<span class="token comment">//因为头结点不是有效数据节点，下一个节点才是有效数据的结点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"head -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d -> "</span><span class="token punctuation">,</span> pCur<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//节点往后移动，当前节点指向下一个节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在值为x的结点前，插入值为y的结点；</span>
<span class="token comment">//若值为x的结点不存在，则插在表尾</span>
<span class="token keyword">int</span> <span class="token function">SListNodeInsert</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>
	SLIST <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>         <span class="token comment">//新节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//如果当前节点数据域等于x，跳出循环</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">==</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//程序执行到这，有两种情况</span>
	<span class="token comment">//1. 找到值为x的结点，pCur为当前匹配节点，pPre为上一个节点</span>
	<span class="token comment">//2. 没有找到x的结点，节点移动到结尾，pPre为最后一个节点，pCur为NULL</span>

	<span class="token comment">//在值为x的结点前，插入值为y的结点；</span>
	<span class="token comment">//若值为x的结点不存在，则插在表尾</span>
	
	<span class="token comment">//新节点分配空间</span>
	pNew <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pNew <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//pNew成员变量赋值</span>
	pNew<span class="token operator">-></span>id <span class="token operator">=</span> y<span class="token punctuation">;</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//pPre的next指向pNew</span>
	pPre<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>

	<span class="token comment">//pNew的next指向pCur</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除第一个值为x的结点</span>
<span class="token keyword">int</span> <span class="token function">SListNodeDel</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>


	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">==</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//上一个节点指向当前节点的下一个节点</span>
			pPre<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>

			<span class="token comment">//临时释放节点</span>
			<span class="token function">free</span><span class="token punctuation">(</span>pCur<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pCur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

			<span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

			<span class="token comment">//跳出循环</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有值为%d的结点\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除值为x的所有结点</span>
<span class="token keyword">int</span> <span class="token function">SListNodeDelPro</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>
	SLIST <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>			<span class="token comment">//临时释放节点</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>


	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">==</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//上一个节点指向当前节点的下一个节点</span>
			pPre<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
			pTmp <span class="token operator">=</span> pCur<span class="token punctuation">;</span>		<span class="token comment">//临时释放节点</span>


			<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
			<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
			pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>

			<span class="token comment">//临时释放节点</span>
			<span class="token function">free</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

			<span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

			<span class="token comment">//结束本次循环，没有跳出循环，看是否有重复值为x的结点</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有值为%d的结点\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//链表节点排序</span>
<span class="token keyword">int</span> <span class="token function">SListNodeSort</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
	SLIST tmp<span class="token punctuation">;</span> <span class="token comment">//临时交换变量</span>
	
	<span class="token comment">//选择法排序</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>pPre <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span> pPre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> pPre <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>pCur <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">;</span> pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>pPre<span class="token operator">-></span>id <span class="token operator">></span> pCur<span class="token operator">-></span>id<span class="token punctuation">)</span> <span class="token comment">//升序</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//交换数据域</span>
				tmp <span class="token operator">=</span> <span class="token operator">*</span>pCur<span class="token punctuation">;</span>
				<span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token operator">*</span>pPre<span class="token punctuation">;</span>
				<span class="token operator">*</span>pPre <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

				<span class="token comment">//交换指针域（重要）</span>
				tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
				pCur<span class="token operator">-></span>next <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">;</span>
				pPre<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//假如原来链表是升序的,升序插入新节点</span>
<span class="token comment">//不能插入节点后再排序，是升序插入新节点x</span>
<span class="token keyword">int</span> <span class="token function">SListNodeInsertPro</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//先排序，保证原来链表是升序的</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">SListNodeSort</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//找到合适节点，假如x = 3</span>
		<span class="token comment">//链表为：1 2 4 5</span>
		<span class="token comment">//那么 4 节点为合适节点</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">>=</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//程序执行到这，有2种情况</span>
	<span class="token comment">//1. 找到匹配节点，pCur为当前匹配节点，pPre为上一个节点</span>
	<span class="token comment">//2. 没有找到匹配节点，节点移动到结尾，pPre为最后一个节点，pCur为NULL</span>
	

	<span class="token comment">//新节点分配空间</span>
	SLIST <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pNew <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//pNew成员变量赋值</span>
	pNew<span class="token operator">-></span>id <span class="token operator">=</span> x<span class="token punctuation">;</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//pPre的next指向pNew</span>
	pPre<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>

	<span class="token comment">//pNew的next指向pCur</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//翻转链表的节点（不是排序，是翻转）</span>
<span class="token keyword">int</span> <span class="token function">SListNodeReverse</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pHead<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pHead<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//当前节点，pCur和pPre相差一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//pHead->next->next</span>

	SLIST <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//临时节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//先保存pCur的下一个节点</span>
		pTmp <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>

		<span class="token comment">//原来： pPre->next = pCur</span>
		<span class="token comment">//翻转： pCur->next = pPre</span>
		<span class="token comment">//pCur的next指向pPre</span>
		pCur<span class="token operator">-></span>next <span class="token operator">=</span> pPre<span class="token punctuation">;</span>

		<span class="token comment">//pPre往后移动一个节点，pPre指向pCur</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//pCur往后移动一个节点，pCur指向pTmp</span>
		pCur <span class="token operator">=</span> pTmp<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//确定头结点和尾结点</span>
	<span class="token comment">//程序执行到这，说明pCur为NULL，pPre为最后一个有效节点</span>
	<span class="token comment">//而翻转后，pPre为头结点指向的第一个有效节点</span>

	<span class="token comment">//先确定翻转后的尾结点</span>
	pHead<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//在确定头结点</span>
	pHead<span class="token operator">-></span>next <span class="token operator">=</span> pPre<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//释放所有节点</span>
<span class="token keyword">int</span> <span class="token function">SListDestroy</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">//临时释放节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pHead <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//临时释放节点</span>
		pTmp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>

		<span class="token comment">//头结点指向头结点next节点</span>
		pHead <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>
		
		<span class="token function">free</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	SLIST <span class="token operator">*</span>pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	pHead <span class="token operator">=</span> <span class="token function">SListCreat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建头结点</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n创建头结点后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	
	<span class="token function">SListNodeInsert</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在4前面插入3</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n在4前面插入3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	
	<span class="token function">SListNodeDel</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除第一个值为4的结点</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n删除第一个值为4的结点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">SListNodeSort</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//链表节点排序</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n链表节点排序\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">SListNodeInsertPro</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//升序插入5</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n升序插入5后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token comment">//翻转链表的节点（不是排序，是翻转）</span>
	<span class="token function">SListNodeReverse</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n翻转链表的节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">SListDestroy</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放所有节点</span>
	pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="指针函数和函数指针"><a href="#指针函数和函数指针" class="headerlink" title="指针函数和函数指针"></a>指针函数和函数指针</h4><ol>
<li><p>指针函数（返回指针值的函数）</p>
<ul>
<li>一个函数可以带回一个整型值、字符值、实型值等，也可以带回指针型的数据，即地址。</li>
<li>这种带回指针值的函数，一般定义形式为：类型名 *函数名（参数表列）;</li>
</ul>
</li>
<li><p>函数指针（指向函数的指针）</p>
<ul>
<li>一个函数在编译时被分配一个入口地址，这个地址就称为函数的指针，函数名代表函数的入口地址。</li>
</ul>
</li>
</ol>
<ul>
<li>这一点和数组一样，因此我们可以用一个指针变量来存放这个入口地址，然后通过该指针变量调用函数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span> 
	c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token comment">//这是通常用的方法，我们也可以定义一个函数指针，通过指针来调用这个函数。</span>
	
	<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指向函数指针变量的定义形式</span>
	p <span class="token operator">=</span> max<span class="token punctuation">;</span>	        <span class="token comment">//将函数的入口地址赋给函数指针变量p</span>
	c <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用max函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ol start="3">
<li>回调函数     <ul>
<li>函数指针变量常见的用途之一是把指针作为参数传递到其他函数，指向函数的指针也可以作为参数，以实现函数地址的传递。<ol>
<li>写一个函数A,A里面有一个参数是个函数指针:<ul>
<li><code>int funcA(int a, int (*Pcall)(int b));</code></li>
<li>注意回调函数做形式参数函数名和*号要用括号搞在一起，否则 就会被返回值类型占有.</li>
</ul>
</li>
<li>有个实体函数，那他要指向一个函数B,这个函数的类型应该和A的函数参数类型一样:<ul>
<li><code>int funcB(int c); </code></li>
</ul>
</li>
<li>使用A函数把参数赋值后,A中的形参Pcall函数指针指向了一个函数funB的地址: <ul>
<li><code>funcA(36,funcB);</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in funcB:%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
    
<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Pcall<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> PA <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> PS <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">Pcall</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用回调函数,传参数a</span>
    <span class="token function">Pcall</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PS</span>
    <span class="token function">Pcall</span><span class="token punctuation">(</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PA</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将funcB当做参数传递给funcA</span>
    <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>函数类型的别名</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pCall<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将 int (*)(int b)类型的指针 起别名 pCall</span>

pCall pCallA<span class="token punctuation">;</span>           <span class="token comment">//定义一个函数指针</span>
pCall pCallB<span class="token punctuation">;</span>           <span class="token comment">//定义一个函数指针</span>
     
<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in funcB:%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
    
<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> pCallA<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>               
    <span class="token keyword">int</span> PA <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> PS <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> 
    <span class="token function">PcallA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用回调函数,传参数a</span>
    <span class="token function">PcallA</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PS</span>
    <span class="token function">PcallA</span><span class="token punctuation">(</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PA</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将funcB当做参数传递给funcA</span>
    <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>奇葩的变量笔试题</li>
</ul>
<blockquote>
<p>给定以下类型的变量a的定义式：</p>
<p>a) 一个整型（An integer）</p>
<p>b) 一个指向整型的指针（A pointer to an integer）</p>
<p>c) 一个指向指向整型的指针（A pointer to a pointer to an integer）</p>
<p>d) 一个10个存放整型的数组（An array of 10 integers）</p>
<p>e) 一个10个存放指向整型指针的数组</p>
<p>（An array of 10 pointers to integers）</p>
<p>f) 一个指向存放10个整型数组的指针</p>
<p>（A pointer to an array of 10 integers）</p>
<p>g) 一个指向 需要一个整型参数并且返回值是一个整型函数的指针</p>
<p>（A pointer to a function that takes an integer as an argument and returns an integer）</p>
<p>h) 一个存放10个 指向 需要一个整型参数并且返回值是一个整型函数的指针的数组</p>
<p>（An array of ten pointers to functions that take an integer argument and return an integer）</p>
</blockquote>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><h4 id="预处理-1"><a href="#预处理-1" class="headerlink" title="预处理"></a>预处理</h4><ol>
<li>预处理的基本概念<ul>
<li>C语言对源程序处理的四个步骤：预处理、编译、汇编、链接。</li>
<li>预处理是在程序源代码被编译之前，由预处理器（Preprocessor）对程序源代码进行的处理。这个过程并不对程序的源代码语法进行解析，但它会把源代码分割或处理成为特定的符号为下一步的编译做准备工作。</li>
</ul>
</li>
<li>预编译命令<ul>
<li>Ｃ编译器提供的预处理功能主要有以下四种：<ol>
<li>文件包含 #include</li>
<li>宏定义  #define</li>
<li>条件编译 #if #endif ..</li>
<li>一些特殊作用的预定义宏</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="文件包含处理"><a href="#文件包含处理" class="headerlink" title="文件包含处理"></a>文件包含处理</h4><ol>
<li>文件包含处理<ul>
<li>文件包含处理”是指一个源文件可以将另外一个文件的全部内容包含进来。Ｃ语言提供了#include命令用来实现“文件包含”的操作。</li>
<li><img src="http://qiniu.orangew.cn/img/wps3099.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>#include&lt; &gt; 与 #include “”的区别<ul>
<li>“”表示系统先在file1.c所在的当前目录找file1.h，如果找不到，再按系统指定的目录检索。</li>
<li>&lt; &gt;表示系统直接按系统指定的目录检索。</li>
<li>注意<ul>
<li>#include &lt;&gt;常用于包含库函数的头文件</li>
<li>#include “”常用于包含自定义的头文件</li>
<li>理论上#include可以包含任意格式的文件(.c .h等) ，但我们一般用于头文件的包含。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><ol>
<li>基本概念<ul>
<li>在源程序中，允许一个标识符（宏名）来表示一个语言符号字符串用指定的符号代替指定的信息。</li>
<li>在C语言中，“宏”分为：无参数的宏和有参数的宏。</li>
</ul>
</li>
<li>无参数的宏定义<ul>
<li>#define　宏名　字符串</li>
<li>例: #define    PI    3.141926</li>
<li>在编译预处理时，将程序中在该语句以后出现的所有的PI都用3.1415926代替。</li>
<li>这种方法使用户能以一个简单的名字代替一个长的字符串，在预编译时将宏名替换成字符串的过程称为“宏展开”。宏定义，只在宏定义的文件中起作用。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415f</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">float</span> L<span class="token punctuation">,</span>S<span class="token punctuation">,</span>R<span class="token punctuation">,</span>V<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input Radius:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	L<span class="token operator">=</span><span class="token number">2.0f</span><span class="token operator">*</span>PI<span class="token operator">*</span>R<span class="token punctuation">;</span>
	S<span class="token operator">=</span>PI<span class="token operator">*</span>R<span class="token operator">*</span>R<span class="token punctuation">;</span>
	V<span class="token operator">=</span><span class="token number">4.0f</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span>PI<span class="token operator">*</span>R<span class="token operator">*</span>R<span class="token operator">*</span>R<span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"L=%.4f,S=%.4f,V=%.4f\n"</span><span class="token punctuation">,</span>L<span class="token punctuation">,</span>S<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
   	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>说明<ol>
<li>宏名一般用大写，以便于与变量区别</li>
<li>字符串可以是常数、表达式等</li>
<li>宏定义不作语法检查，只有在编译被宏展开后的源程序才会报错</li>
<li>宏定义不是C语言，不在行末加分号</li>
<li>宏名有效范围为从定义到本源文件结束</li>
<li>可以用#undef命令终止宏定义的作用域</li>
<li>在宏定义中，可以引用已定义的宏名</li>
</ol>
</li>
</ul>
<ol start="3">
<li>带参数的宏定义<ol>
<li>格式：#define 宏名(形参表) 字符串</li>
<li>调用：宏名(形参表)</li>
<li>宏展开：进行宏替换</li>
</ol>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQ_1</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQ_2</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  y<span class="token operator">*</span>y</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	num_1 <span class="token operator">=</span> <span class="token function">SQ_1</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//num_1 = (a+1)*(a+1); </span>
	num_2 <span class="token operator">=</span> <span class="token function">SQ_2</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//num_2 = a+1*a+1; </span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num_1 = %d\n"</span><span class="token punctuation">,</span>num_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num_2 = %d\n"</span><span class="token punctuation">,</span>num_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
   	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h4><ol>
<li><p>基本概念</p>
<ul>
<li>一般情况下，源程序中所有的行都参加编译。但有时希望对部分源程序行只在满足一定条件时才编译，即对这部分源程序行指定编译条件。</li>
<li><img src="http://qiniu.orangew.cn/img/wpsB7C8.tmp.jpg" alt="img"></li>
</ul>
</li>
<li><p>条件编译的作用</p>
<ol>
<li><p>防止头文件被重复包含引用</p>
<blockquote>
<p>#ifndef _SOMEFILE_H</p>
<p>#define _SOMEFILE_H</p>
<p> //需要声明的变量、函数</p>
<p>​    //宏定义</p>
<p>​    //结构体</p>
<p>#endif</p>
</blockquote>
</li>
<li><p> 软件裁剪（同样的C源代码，条件选项不同可以编译出不同的可执行程序。）</p>
</li>
</ol>
<blockquote>
<p>#include &lt;stdio.h&gt;</p>
<p>#include &lt;stdlib.h&gt;</p>
<p>#define BIG 1</p>
<p>int main(void)</p>
<p>{</p>
<p>​    char str[20] = “C Language”;</p>
<p>​    char C;</p>
<p>​    int i = 0;</p>
<p>​    while ((C = str[i++]) != ‘\0’)</p>
<p>​    {</p>
<p>#if BIG</p>
<p>​        if (C &gt;= ‘a’ &amp;&amp; C &lt;= ‘z’)</p>
<p>​            C = C - 32;</p>
<p>#else</p>
<p>​        if (C &gt;= ‘A’&amp;&amp; C &lt;= ‘Z’)</p>
<p>​            C = C + 32;</p>
<p>#endif</p>
<p>​        printf(“%c”, C);</p>
<p>​    }</p>
<p>​    system(“pause”);</p>
<p>​    return 0;</p>
<p>}</p>
</blockquote>
</li>
</ol>
<h4 id="一些特殊的预定宏"><a href="#一些特殊的预定宏" class="headerlink" title="一些特殊的预定宏"></a>一些特殊的预定宏</h4><ul>
<li>C编译器，提供了几个特殊形式的预定义宏，在实际编程中可以直接使用，很方便。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//	__FILE__			宏所在文件的源文件名 </span>
<span class="token comment">//	__LINE__			宏所在行的行号</span>
<span class="token comment">//	__DATE__			代码编译的日期</span>
<span class="token comment">//	__TIME__			代码编译的时间</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
   下面定义了一套socket客户端发送报文接受报文的api接口
   请写出这套接口api的调用方法
 */</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_INC_Demo01_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_INC_Demo01_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token comment">//------------------第一套api接口---Begin--------------------------------//</span>
    <span class="token comment">//客户端初始化 获取handle上下</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketInit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>handle <span class="token comment">/*out*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//客户端发报文</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketSend</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle <span class="token comment">/*in*/</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token comment">/*in*/</span><span class="token punctuation">,</span>  <span class="token keyword">int</span> buflen <span class="token comment">/*in*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//客户端收报文</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketRev</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle <span class="token comment">/*in*/</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token comment">/*in*/</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buflen <span class="token comment">/*in out*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//客户端释放资源</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketDestory</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token comment">/*in*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//------------------第一套api接口---End-----------------------------------//</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>windows动态库生成的文件有</li>
</ul>
<blockquote>
<p><code>socketClient.lib</code></p>
<p><code>socketClient.dll</code></p>
</blockquote>
<ul>
<li>windows 动态库是dll文件和lib文件组合。</li>
<li><code>xxx.lib</code>：编译代码时，需要链接此文件</li>
<li><code>xxx.dll</code>：运行程序时，需要链接此文件</li>
<li>当发现windows动态库没有lib文件生成时候，需要在动态库中每个函数头部添加头衔。</li>
<li><code>__declspec(dllexport)</code></li>
</ul>
<h3 id="附录A：Win32环境下动态链接库-DLL-编程原理"><a href="#附录A：Win32环境下动态链接库-DLL-编程原理" class="headerlink" title="附录A：Win32环境下动态链接库(DLL)编程原理"></a>附录A：Win32环境下动态链接库(DLL)编程原理</h3><p>​        比较大的应用程序都由很多模块组成，这些模块分别完成相对独立的功能，它们彼此协作来完成整个软件系统的工作。其中可能存在一些模块的功能较为通用，在构造其它软件系统时仍会被使用。在构造软件系统时，如果将所有模块的源代码都静态编译到整个应用程序EXE文件中，会产生一些问题：一个缺点是增加了应用程序的大小，它会占用更多的磁盘空间，程序运行时也会消耗较大的内存空间，造成系统资源的浪费；另一个缺点是，在编写大的EXE程序时，在每次修改重建时都必须调整编译所有源代码，增加了编译过程的复杂性，也不利于阶段性的单元测试。 </p>
<p>　　Windows系统平台上提供了一种完全不同的较有效的编程和运行环境，你可以将独立的程序模块创建为较小的DLL(Dynamic Linkable Library)文件，并可对它们单独编译和测试。在运行时，只有当EXE程序确实要调用这些DLL模块的情况下，系统才会将它们装载到内存空间中。这种 方式不仅减少了EXE文件的大小和对内存空间的需求，而且使这些DLL模块可以同时被多个应用程序使用。Microsoft Windows自己就将一些主要的系统功能以DLL模块的形式实现。例如IE中的一些基本功能就是由DLL文件实现的，它可以被其它应用程序调用和集成。</p>
<p>　 　一般来说，DLL是一种磁盘文件（通常带有DLL扩展名），它由全局数据、服务函数和资源组成，在运行时被系统加载到进程的虚拟空间中，成为调用进程的 一部分。如果与其它DLL之间没有冲突，该文件通常映射到进程虚拟空间的同一地址上。DLL模块中包含各种导出函数，用于向外界提供服务。Windows 在加载DLL模块时将进程函数调用与DLL文件的导出函数相匹配。</p>
<p>　　在Win32环境中，每个进程都复制了自己的读/写全局变量。如果想要与其它进程共享内存，必须使用内存映射文件或者声明一个共享数据段。DLL模块需要的堆栈内存都是从运行进程的堆栈中分配出来的。</p>
<p>　　DLL现在越来越容易编写。Win32已经大大简化了其编程模式，并有许多来自AppWizard和MFC类库的支持。</p>
<p>　　一、导出和导入函数的匹配</p>
<p>　 　DLL文件中包含一个导出函数表。这些导出函数由它们的符号名和称为标识号的整数与外界联系起来。函数表中还包含了DLL中函数的地址。当应用程序加载 DLL模块时时，它并不知道调用函数的实际地址，但它知道函数的符号名和标识号。动态链接过程在加载的DLL模块时动态建立一个函数调用与函数地址的对应 表。如果重新编译和重建DLL文件，并不需要修改应用程序，除非你改变了导出函数的符号名和参数序列。</p>
<p>　　简单的DLL文件只为应用程序提供导出函数，比较复杂的DLL文件除了提供导出函数以外，还调用其它DLL文件中的函数。这样，一个特殊的DLL可以既有导入函数，又有导入函数。这并不是一个问题，因为动态链接过程可以处理交叉相关的情况。</p>
<p>　　在DLL代码中，必须像下面这样明确声明导出函数：</p>
<p><code>__declspec(dllexport) int MyFunction(int n);</code></p>
<p>　　但也可以在模块定义(DEF)文件中列出导出函数，不过这样做常常引起更多的麻烦。在应用程序方面，要求像下面这样明确声明相应的输入函数：</p>
<p><code>__declspec(dllimport) int MyFuncition(int n);</code></p>
<p>　　仅有导入和导出声明并不能使应用程序内部的函数调用链接到相应的DLL文件上。应用程序的项目必须为链接程序指定所需的输入库（LIB文件）。而且应用程序事实上必须至少包含一个对DLL函数的调用。</p>
<p>　　二、与DLL模块建立链接</p>
<p>　　应用程序导入函数与DLL文件中的导出函数进行链接有两种方式：隐式链接和显式链接。所谓的隐式链接是指在应用程序中不需指明DLL文件的实际存储路径，程序员不需关心DLL文件的实际装载。而显式链接与此相反。</p>
<p>　 　采用隐式链接方式，程序员在建立一个DLL文件时，链接程序会自动生成一个与之对应的LIB导入文件。该文件包含了每一个DLL导出函数的符号名和可选 的标识号，但是并不含有实际的代码。LIB文件作为DLL的替代文件被编译到应用程序项目中。当程序员通过静态链接方式编译生成应用程序时，应用程序中的 调用函数与LIB文件中导出符号相匹配，这些符号或标识号进入到生成的EXE文件中。LIB文件中也包含了对应的DLL文件名（但不是完全的路径名），链接程序将其存储在EXE文件内部。当应用程序运行过程中需要加载DLL文件时，Windows根据这些信息发现并加载DLL，然后通过符号名或标识号实现 对DLL函数的动态链接。</p>
<p>　　显式链接方式对于集成化的开发语言（例如VB）比较适合。有了显式链接，程序员就不必再使用导入文件，而是直接调用Win32 的LoadLibary函数，并指定DLL的路径作为参数。LoadLibary返回HINSTANCE参数，应用程序在调用 GetProcAddress函数时使用这一参数。GetProcAddress函数将符号名或标识号转换为DLL内部的地址。假设有一个导出如下函数的 DLL文件：</p>
<p><code>extern &quot;C&quot; __declspec(dllexport) double SquareRoot(double d);</code></p>
<p>下面是应用程序对该导出函数的显式链接的例子：</p>
<p>下面是应用程序对该导出函数的显式链接的例子：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span>SQRTPROC<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
HINSTANCE hInstance<span class="token punctuation">;</span>
SQRTPROC<span class="token operator">*</span> pFunction<span class="token punctuation">;</span>

<span class="token function">VERIFY</span><span class="token punctuation">(</span>hInstance<span class="token operator">=</span><span class="token operator">::</span><span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">"c:\\winnt\\system32\\mydll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">VERIFY</span><span class="token punctuation">(</span>pFunction<span class="token operator">=</span><span class="token punctuation">(</span>SQRTPROC<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span><span class="token string">"SquareRoot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">double</span> d<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>pFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">81.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用该DLL函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>　 　在隐式链接方式中，所有被应用程序调用的DLL文件都会在应用程序EXE文件加载时被加载在到内存中；但如果采用显式链接方式，程序员可以决定DLL文 件何时加载或不加载。显式链接在运行时决定加载哪个DLL文件。例如，可以将一个带有字符串资源的DLL模块以英语加载，而另一个以西班牙语加载。应用程 序在用户选择了合适的语种后再加载与之对应的DLL文件。</p>
<p>　　三、使用符号名链接与标识号链接</p>
<p>　 　在Win16环境中，符号名链接效率较低，所有那时标识号链接是主要的链接方式。在Win32环境中，符号名链接的效率得到了改善。Microsoft 现在推荐使用符号名链接。但在MFC库中的DLL版本仍然采用的是标识号链接。一个典型的MFC程序可能会链接到数百个MFC DLL函数上。采用标识号链接的应用程序的EXE文件体相对较小，因为它不必包含导入函数的长字符串符号名。</p>
<p>​         四、编写DllMain函数</p>
<p>　　DllMain函数是DLL模块的默认入口点。当Windows加载 DLL模块时调用这一函数。系统首先调用全局对象的构造函数，然后调用全局函数DLLMain。DLLMain函数不仅在将DLL链接加载到进程时被调 用，在DLL模块与进程分离时（以及其它时候）也被调用。下面是一个框架DLLMain函数的例子。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">HINSTANCE g_hInstance<span class="token punctuation">;</span>

<span class="token keyword">extern</span> <span class="token string">"C"</span> 
<span class="token keyword">int</span> APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span>DWORD dwReason<span class="token punctuation">,</span>LPVOID lpReserved<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dwReason<span class="token operator">==</span>DLL_PROCESS_ATTACH<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">TRACE0</span><span class="token punctuation">(</span><span class="token string">"EX22A.DLL Initializing!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在这里进行初始化</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dwReason<span class="token operator">=</span>DLL_PROCESS_DETACH<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">TRACE0</span><span class="token punctuation">(</span><span class="token string">"EX22A.DLL Terminating!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//在这里进行清除工作</span>
    <span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//成功</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>　　如果程序员没有为DLL模块编写一个DLLMain函数，系统会从其它运行库中引入一个不做任何操作的缺省DLLMain函数版本。在单个线程启动和终止时，DLLMain函数也被调用。正如由dwReason参数所表明的那样。</p>
<p>　　五、模块句柄</p>
<p>　 　进程中的每个DLL模块被全局唯一的32字节的HINSTANCE句柄标识。进程自己还有一个HINSTANCE句柄。所有这些模块句柄都只有在特定的 进程内部有效，它们代表了DLL或EXE模块在进程虚拟空间中的起始地址。在Win32中，HINSTANCE和HMODULE的值是相同的，这个两种类 型可以替换使用。进程模块句柄几乎总是等于0x400000，而DLL模块的加载地址的缺省句柄是0x10000000。如果程序同时使用了几个DLL模 块，每一个都会有不同的HINSTANCE值。这是因为在创建DLL文件时指定了不同的基地址，或者是因为加载程序对DLL代码进行了重定位。<br>模块句柄对于加载资源特别重要。Win32 的FindResource函数中带有一个HINSTANCE参数。EXE和DLL都有其自己的资源。如果应用程序需要来自于DLL的资源，就将此参数指定为DLL的模块句柄。如果需要EXE文件中包含的资源，就指定EXE的模块句柄。</p>
<p>　　但是在使用这些句柄之前存在一个问题，你怎样得到它们呢？如果需要得到EXE模块句柄，调用带有Null参数的Win32函数GetModuleHandle；如果需要DLL模块句柄，就调用以DLL文件名为参数的Win32函数GetModuleHandle。</p>
<p>　　六、应用程序怎样找到DLL文件</p>
<p>　　如果应用程序使用LoadLibrary显式链接，那么在这个函数的参数中可以指定DLL文件的完整路径。如果不指定路径，或是进行隐式链接，Windows将遵循下面的搜索顺序来定位DLL：</p>
<p>　　1． 包含EXE文件的目录，<br>　　2． 进程的当前工作目录，<br>　　3． Windows系统目录，<br>　　4． Windows目录，<br>　　5． 列在Path环境变量中的一系列目录。</p>
<p>　 　这里有一个很容易发生错误的陷阱。如果你使用VC＋＋进行项目开发，并且为DLL模块专门创建了一个项目，然后将生成的DLL文件拷贝到系统目录下，从 应用程序中调用DLL模块。到目前为止，一切正常。接下来对DLL模块做了一些修改后重新生成了新的DLL文件，但你忘记将新的DLL文件拷贝到系统目录 下。下一次当你运行应用程序时，它仍加载了老版本的DLL文件，这可要当心！</p>
<p>　　七、调试DLL程序</p>
<p>　　Microsoft 的VC＋＋是开发和测试DLL 的有效工具，只需从DLL项目中运行调试程序即可。当你第一次这样操作时，调试程序会向你询问EXE文件的路径。此后每次在调试程序中运行DLL时，调试 程序会自动加载该EXE文件。然后该EXE文件用上面的搜索序列发现DLL文件，这意味着你必须设置Path环境变量让其包含DLL文件的磁盘路径，或者 也可以将DLL文件拷贝到搜索序列中的目录路径下。</p>
<p>​         八、DLL分配的内存需要用dll提供的API释放</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Your Own Text Editor</title>
    <url>/2022/07/01/C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马教程资料总结</li>
</ul>
<h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><ul>
<li>dynamicArray.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//动态数组结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> pAddr<span class="token punctuation">;</span> <span class="token comment">//维护在堆区真实数组指针</span>

	<span class="token keyword">int</span> m_capacity<span class="token punctuation">;</span> <span class="token comment">//数组容量</span>

	<span class="token keyword">int</span> m_size<span class="token punctuation">;</span> <span class="token comment">//数组大小</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token comment">//初始化数组</span>
<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> <span class="token function">init_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//插入功能</span>
<span class="token keyword">void</span> <span class="token function">insert_dynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//遍历数组</span>
<span class="token keyword">void</span> <span class="token function">foreach_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>myForeach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//删除数组中元素  -- 按照指定位置进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//删除数组中的元素  --- 按照值来进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByValue_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//销毁数组</span>
<span class="token keyword">void</span> <span class="token function">destroy_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>dybamicArray,c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dynamicArray.h"</span></span>


<span class="token comment">//初始化数组</span>
<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> <span class="token function">init_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//判断内存是否申请成功</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>  <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//设置容量</span>
	array<span class="token operator">-></span>m_capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
	<span class="token comment">//设置大小</span>
	array<span class="token operator">-></span>m_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//维护在堆区数组的指针</span>
	array<span class="token operator">-></span>pAddr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>array<span class="token operator">-></span>m_capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//插入功能</span>
<span class="token keyword">void</span> <span class="token function">insert_dynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> array<span class="token operator">-></span>m_size<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//无效的位置  进行尾插</span>
		pos <span class="token operator">=</span> array<span class="token operator">-></span>m_size<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先判断是否已经 满载 ，如果满载了  动态开辟</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token operator">-></span>m_size <span class="token operator">>=</span> array<span class="token operator">-></span>m_capacity<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//1、申请一个更大的内存空间</span>
		<span class="token keyword">int</span> newCapacity <span class="token operator">=</span> array<span class="token operator">-></span>m_capacity <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

		<span class="token comment">//2、创建新空间</span>
		<span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> newSpace <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//3、将原有数据 拷贝到新空间下</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>newSpace<span class="token punctuation">,</span> array<span class="token operator">-></span>pAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>array<span class="token operator">-></span>m_capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//4、释放原有空间</span>
		<span class="token function">free</span><span class="token punctuation">(</span>array<span class="token operator">-></span>pAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//5、更改指针指向</span>
		array<span class="token operator">-></span>pAddr <span class="token operator">=</span> newSpace<span class="token punctuation">;</span>
		<span class="token comment">//6、更新新容量大小</span>
		array<span class="token operator">-></span>m_capacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">//插入新数据元素</span>
	<span class="token comment">//从最后一个位置开始 依次移动数据  后移</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> pos<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//将新元素插入到指定位置</span>
	array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>

	<span class="token comment">//更新大小</span>
	array<span class="token operator">-></span>m_size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//遍历数组</span>
<span class="token keyword">void</span> <span class="token function">foreach_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>myForeach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myForeach <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token operator">-></span>m_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">myForeach</span><span class="token punctuation">(</span>array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除数组中元素  -- 按照指定位置进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> arr<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//无效的位置 直接return</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从pos位置开始  到数组尾  数据进行前移</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		arr<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	arr<span class="token operator">-></span>m_size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除数组中的元素  --- 按照值来进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByValue_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token operator">-></span>m_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">myCompare</span><span class="token punctuation">(</span>arr<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁数组</span>
<span class="token keyword">void</span> <span class="token function">destroy_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token operator">-></span>pAddr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token operator">-></span>pAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
		arr<span class="token operator">-></span>pAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	arr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//链表结点</span>
<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//指针域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//链表结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">LList</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> pHeader<span class="token punctuation">;</span> <span class="token comment">//头节点</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span> <span class="token comment">//链表长度</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkList<span class="token punctuation">;</span>

<span class="token comment">//初始化链表</span>
LinkList <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>myList <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//初始化链表结构体</span>
	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	myList<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> myList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//插入结点</span>
<span class="token keyword">void</span> <span class="token function">insert_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span><span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span>myList<span class="token operator">-></span>m_Size<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//无效位置进行尾插</span>
		pos <span class="token operator">=</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//创建临时节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//通过循环 找到 插入位置的前驱节点</span>

	<span class="token comment">//创建出新节点</span>
	 <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 newNode<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	 newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	
	 <span class="token comment">//将新节点 插入到 链表中</span>
	 newNode<span class="token operator">-></span>next <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	 pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>

	 myList<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//更新链表的长度</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历链表</span>
<span class="token keyword">void</span> <span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>LinkList list <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>myPrint<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//找到第一个有数据的节点</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">myPrint</span><span class="token punctuation">(</span>pCurrent<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//删除结点 -- 按位置 进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span>myList<span class="token operator">-></span>m_Size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//找到删除节点的前驱节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token comment">//缓存中 待删除的节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pDel <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//建立关系</span>
	pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> pDel<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//释放掉待删除的节点</span>
	<span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pDel <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//更新链表长度</span>
	myList<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//删除节点  --- 按值进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByValue_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token comment">//创建两个辅助指针变量</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pPrev <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> pPrev<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//if (pCurrent->data == data) 交给用户进行比对</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">myCompare</span><span class="token punctuation">(</span>pCurrent<span class="token operator">-></span>data<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//更改指针指向</span>
			pPrev<span class="token operator">-></span>next <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>

			<span class="token comment">//释放掉要删除的节点</span>
			<span class="token function">free</span><span class="token punctuation">(</span>pCurrent<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pCurrent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

			myList<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>

			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//将两个辅助指针 后移</span>
		pPrev <span class="token operator">=</span> pCurrent<span class="token punctuation">;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//清空链表</span>
<span class="token keyword">void</span> <span class="token function">clear_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span>myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//先记住待删除节点的后继节点</span>
		<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pNext <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>pCurrent<span class="token punctuation">)</span><span class="token punctuation">;</span>
		pCurrent <span class="token operator">=</span> pNext<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	myList<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回链表长度</span>
<span class="token keyword">int</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁链表</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">clear_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>











<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">myPrintPerson</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名： %s 年龄: %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">myCompare</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> data1<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span> data2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> data1<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p2 <span class="token operator">=</span> data2<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>p1<span class="token operator">-></span>name<span class="token punctuation">,</span> p2<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p1<span class="token operator">-></span>age <span class="token operator">==</span> p2<span class="token operator">-></span>age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化链表</span>
	LinkList list <span class="token operator">=</span> <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//插入数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"亚瑟"</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"王昭君"</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">38</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"宫本"</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//  张飞  关羽 王昭君 赵云 亚瑟  宫本</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//删除赵云</span>
	<span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//删除关羽</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">removeByValue_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> myCompare<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//清空链表</span>
	<span class="token function">clear_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//销毁链表</span>
	<span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单向链表-企业级版本"><a href="#单向链表-企业级版本" class="headerlink" title="单向链表-企业级版本"></a>单向链表-企业级版本</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//只维护指针域</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">LList</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> pHeader<span class="token punctuation">;</span> <span class="token comment">//链表头节点</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span> <span class="token comment">//链表长度</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkList<span class="token punctuation">;</span>
<span class="token comment">//初始化链表</span>
LinkList <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>myList <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	myList<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 

	<span class="token keyword">return</span> myList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//插入链表</span>
<span class="token keyword">void</span> <span class="token function">insert_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> mylist <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span>mylist<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pos <span class="token operator">=</span> mylist<span class="token operator">-></span>m_Size<span class="token punctuation">;</span> <span class="token comment">// 无效位置 进行尾插</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//将用户的数据 前4个字节转为 LinkNode类型</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> myNode <span class="token operator">=</span> data<span class="token punctuation">;</span>

	<span class="token comment">//找到插入数据的前驱节点位置</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>mylist<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//更改指针的指向</span>
	myNode<span class="token operator">-></span>next <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> myNode<span class="token punctuation">;</span>

	<span class="token comment">//更新链表长度</span>
	mylist<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历链表</span>
<span class="token keyword">void</span> <span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>LinkList list <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>myForeach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> node <span class="token operator">=</span> myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//第一个有数据的节点</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">myForeach</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
		node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除链表  按位置删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> myList<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//找到删除位置的前驱节点位置</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//记录待删除的节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pDel <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//更改指针的指向</span>
	pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> pDel<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//free(pDel); //我们链表中是不维护数据域的，写了free反而会出错</span>

	<span class="token comment">//更新链表长度</span>
	myList<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁链表</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>LinkList list <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>






<span class="token comment">//测试</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> node<span class="token punctuation">;</span> <span class="token comment">// 约定好的前四个字节给底层链表使用</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printPerson</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名: %s 年龄: %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化</span>
	LinkList mylist <span class="token operator">=</span> <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//准备出数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ccc ddd bbb aaa  eee</span>

	<span class="token comment">//遍历链表</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> printPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//测试删除链表</span>
	<span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> printPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//struct Person p = &#123; "aaa", 10 &#125;;</span>

	<span class="token comment">//removeByValue_LinkList(mylist, &amp;p , myCompare);</span>

	<span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h3><ul>
<li>seqStack.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>


<span class="token comment">//#define  MAX 1024</span>
<span class="token comment">////栈的结构体</span>
<span class="token comment">//struct SStack</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	void * data[MAX]; //数组</span>
<span class="token comment">//</span>
<span class="token comment">//	//栈的元素个数</span>
<span class="token comment">//	int m_Size;</span>
<span class="token comment">//&#125;;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>seqStack.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token comment">//栈的结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">SStack</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//数组</span>

	<span class="token comment">//栈的元素个数</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//清空数组中的每个元素</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

	stack<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//判断是否已经栈满 ,如果满了 不可以再入栈了</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> MAX<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">//入栈  尾插</span>

	myStack<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//更新栈大小</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//如果是空栈 不执行出栈</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//执行出栈</span>
	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//更新栈的大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token comment">//如果是空栈   返回 NULL</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//返回假 代表不是空栈</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>


<span class="token comment">//#define  MAX 1024</span>
<span class="token comment">////栈的结构体</span>
<span class="token comment">//struct SStack</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	void * data[MAX]; //数组</span>
<span class="token comment">//</span>
<span class="token comment">//	//栈的元素个数</span>
<span class="token comment">//	int m_Size;</span>
<span class="token comment">//&#125;;</span>
<span class="token comment">//</span>
<span class="token comment">//typedef void * seqStack;</span>
<span class="token comment">//</span>
<span class="token comment">////初始化栈</span>
<span class="token comment">//seqStack init_SeqStack()</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	struct SStack * stack = malloc(sizeof(struct SStack));</span>
<span class="token comment">//</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return NULL;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//清空数组中的每个元素</span>
<span class="token comment">//	memset(stack->data, 0, sizeof(void*)*MAX);</span>
<span class="token comment">//</span>
<span class="token comment">//	stack->m_Size = 0;</span>
<span class="token comment">//</span>
<span class="token comment">//	return stack;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">////入栈</span>
<span class="token comment">//void push_SeqStack( seqStack stack, void * data)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	if (data == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//判断是否已经栈满 ,如果满了 不可以再入栈了</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//	if (myStack->m_Size == MAX)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	myStack->data[myStack->m_Size] = data; //入栈  尾插</span>
<span class="token comment">//</span>
<span class="token comment">//	myStack->m_Size++; //更新栈大小</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">////出栈</span>
<span class="token comment">//void pop_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//如果是空栈 不执行出栈</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//	if (myStack->m_Size &lt;= 0)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//执行出栈</span>
<span class="token comment">//	myStack->data[myStack->m_Size - 1] = NULL;</span>
<span class="token comment">//	//更新栈的大小</span>
<span class="token comment">//	myStack->m_Size--;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">////获取栈顶元素</span>
<span class="token comment">//void * top_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return NULL;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//</span>
<span class="token comment">//	//如果是空栈   返回 NULL</span>
<span class="token comment">//	if (myStack->m_Size == 0)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return NULL;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	return myStack->data[myStack->m_Size - 1];</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">////栈的大小</span>
<span class="token comment">//int size_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return -1;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//</span>
<span class="token comment">//	return myStack->m_Size;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">////判断栈是否为空</span>
<span class="token comment">//int isEmpty_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return -1; //真</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//	if (myStack->m_Size &lt;= 0)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return 1; //真</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	return  0; //返回假 代表不是空栈</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">////销毁栈</span>
<span class="token comment">//void destroy_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	free(stack);</span>
<span class="token comment">//	stack = NULL;</span>
<span class="token comment">//&#125;</span>


<span class="token comment">//测试</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token comment">//准备出数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//初始化栈</span>
	seqStack stack <span class="token operator">=</span> <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//入栈</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">//如果栈不为空  进行访问栈顶元素，并且出栈</span>
	<span class="token punctuation">&#123;</span>
	    <span class="token keyword">struct</span> <span class="token class-name">Person</span>  <span class="token operator">*</span> pTop <span class="token operator">=</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//栈顶元素</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈顶元素 姓名： %s  年龄：  %d\n"</span><span class="token punctuation">,</span> pTop<span class="token operator">-></span>name<span class="token punctuation">,</span> pTop<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出栈</span>
		<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//栈的大小</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈的大小为：%d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁栈</span>
	<span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">StackNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//只维护指针域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//链式的栈结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">LStack</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> pHeader<span class="token punctuation">;</span> <span class="token comment">//头节点</span>

	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span> <span class="token comment">//栈的大小</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
LinkStack <span class="token function">init_LinkStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span> myStack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	myStack<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> myStack<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_LinkStack</span><span class="token punctuation">(</span> LinkStack  stack <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//入栈 就是 头插</span>

	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token comment">//拿到用户数据的前四个字节</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> myNode <span class="token operator">=</span> data<span class="token punctuation">;</span>


	<span class="token comment">//插入节点</span>
	myNode<span class="token operator">-></span>next <span class="token operator">=</span> myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> myNode<span class="token punctuation">;</span>

	<span class="token comment">//更新栈的大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_LinkStack</span><span class="token punctuation">(</span> LinkStack stack <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token comment">//如果是空栈   不出栈了</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//保存第一个有数据的节点  栈顶元素</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> pFirst <span class="token operator">=</span> myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

	myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> pFirst<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//更新链表长度  栈大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//将第一个有数据的节点返回就可以了</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回栈大小</span>
<span class="token keyword">int</span> <span class="token function">size_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myStack<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//判断是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token comment">//测试</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> node<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token comment">//准备出数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//初始化栈</span>
	LinkStack stack <span class="token operator">=</span> <span class="token function">init_LinkStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//入栈</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isEmpty_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//如果栈不为空  进行访问栈顶元素，并且出栈</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span>  <span class="token operator">*</span> pTop <span class="token operator">=</span> <span class="token function">top_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//栈顶元素</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈顶元素 姓名： %s  年龄：  %d\n"</span><span class="token punctuation">,</span> pTop<span class="token operator">-></span>name<span class="token punctuation">,</span> pTop<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出栈</span>
		<span class="token function">pop_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//栈的大小</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">size_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈的大小为：%d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁栈</span>
	<span class="token function">destroy_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>

<span class="token comment">/*
从第一个字符开始扫描
当遇见普通字符时忽略，
当遇见左括号时压入栈中
当遇见右括号时从栈中弹出栈顶符号，并进行匹配
匹配成功：继续读入下一个字符
匹配失败：立即停止，并报错
结束：
成功: 所有字符扫描完毕，且栈为空
失败：匹配失败或所有字符扫描完毕但栈非空
*/</span>

<span class="token comment">//判断字符是否是左括号</span>
<span class="token keyword">int</span> <span class="token function">IsLeft</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//判断字符是否是右括号</span>
<span class="token keyword">int</span> <span class="token function">IsRight</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printError</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> errMsg<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误的信息：%s\n"</span><span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//计算打印空格数量</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> pos <span class="token operator">-</span> str<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"5+5*(6)+9/3*1-(1+3("</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> str<span class="token punctuation">;</span>

	<span class="token comment">//初始化栈</span>
	seqStack stack  <span class="token operator">=</span>  <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//如果是左括号  入栈</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsLeft</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//如果是右括号  弹出栈中的栈顶元素</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsRight</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//如果栈的元素个数>0 说明 可以匹配</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//弹出栈顶元素</span>
				<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span> <span class="token comment">//空栈  匹配失败</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printError</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"右括号没有匹配到左括号"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//判断栈是否为空栈</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printError</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"左括号没有匹配到右括号"</span><span class="token punctuation">,</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//弹出栈顶元素</span>
		<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//销毁栈</span>
	<span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="队列-顺序存储"><a href="#队列-顺序存储" class="headerlink" title="队列-顺序存储"></a>队列-顺序存储</h3><ul>
<li>seqQueue.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dynamicArray.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1024</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqQueue<span class="token punctuation">;</span>

<span class="token comment">//初始化队列</span>
seqQueue <span class="token function">init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//入队</span>
<span class="token keyword">void</span> <span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出队</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队头元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">front_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队尾元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">back_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队伍大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>seqQueue.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqQueue.h"</span></span>

<span class="token comment">//初始化队列</span>
seqQueue <span class="token function">init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr <span class="token operator">=</span>  <span class="token function">init_DynamicArray</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//入队</span>
<span class="token keyword">void</span> <span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myQueue<span class="token operator">-></span>m_size <span class="token operator">>=</span> MAX<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//入队 === 尾插</span>
	<span class="token function">insert_dynamicArray</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">,</span> myQueue<span class="token operator">-></span>m_size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//出队</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>myQueue<span class="token operator">-></span>m_size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//返回队头元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">front_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>

	<span class="token keyword">return</span> myQueue<span class="token operator">-></span>pAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//返回队尾元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">back_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myQueue<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>myQueue<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//返回队伍大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myQueue<span class="token operator">-></span>m_size<span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">destroy_DynamicArray</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqQueue.h"</span></span>

<span class="token comment">//测试队列</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化队列</span>
	seqQueue queue <span class="token operator">=</span> <span class="token function">init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//准备数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//入队</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取队头元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pFront <span class="token operator">=</span> <span class="token function">front_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队头元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pFront<span class="token operator">-></span>name<span class="token punctuation">,</span> pFront<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取队尾</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pBack <span class="token operator">=</span> <span class="token function">back_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队尾元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pBack<span class="token operator">-></span>name<span class="token punctuation">,</span> pBack<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出队</span>
		<span class="token function">pop_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队伍大小为： %d\n"</span><span class="token punctuation">,</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁</span>
	<span class="token function">destroy_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="队列-链式存储"><a href="#队列-链式存储" class="headerlink" title="队列-链式存储"></a>队列-链式存储</h3><ul>
<li>linkQueue.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>


<span class="token comment">//链表节点</span>
<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//只维护指针域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//队列结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">LQueue</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//头节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> pHeader<span class="token punctuation">;</span>

	<span class="token comment">//队列大小</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>

	<span class="token comment">//维护尾节点的指针</span>
	<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> pTail<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkQueue<span class="token punctuation">;</span>

<span class="token comment">//初始化队列</span>
LinkQueue <span class="token function">init_LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//入队</span>
<span class="token keyword">void</span> <span class="token function">push_LinkQueue</span><span class="token punctuation">(</span> LinkQueue queue<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出队</span>
<span class="token keyword">void</span> <span class="token function">pop_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队头</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">front_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队尾</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">back_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队伍大小</span>
<span class="token keyword">int</span> <span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>linkQueue.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linkQueue.h"</span></span>


<span class="token comment">//测试队列</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> node<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化队列</span>
	LinkQueue queue <span class="token operator">=</span> <span class="token function">init_LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//准备数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//入队</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取队头元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pFront <span class="token operator">=</span> <span class="token function">front_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队头元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pFront<span class="token operator">-></span>name<span class="token punctuation">,</span> pFront<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取队尾</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pBack <span class="token operator">=</span> <span class="token function">back_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队尾元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pBack<span class="token operator">-></span>name<span class="token punctuation">,</span> pBack<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出队</span>
		<span class="token function">pop_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"::::队伍大小为： %d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁</span>
	<span class="token function">destroy_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linkQueue.h"</span></span>


<span class="token comment">//测试队列</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> node<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化队列</span>
	LinkQueue queue <span class="token operator">=</span> <span class="token function">init_LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//准备数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//入队</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取队头元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pFront <span class="token operator">=</span> <span class="token function">front_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队头元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pFront<span class="token operator">-></span>name<span class="token punctuation">,</span> pFront<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取队尾</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pBack <span class="token operator">=</span> <span class="token function">back_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队尾元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pBack<span class="token operator">-></span>name<span class="token punctuation">,</span> pBack<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出队</span>
		<span class="token function">pop_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"::::队伍大小为： %d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁</span>
	<span class="token function">destroy_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild<span class="token punctuation">;</span> <span class="token comment">//左孩子节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild<span class="token punctuation">;</span> <span class="token comment">//右孩子节点</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//递归遍历函数</span>
<span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先序遍历  先根 再左  再右</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeA <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeD <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeE <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeF <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeG <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'G'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeH <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//建立结点之间的关系</span>

	nodeA<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeB<span class="token punctuation">;</span>
	nodeA<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeF<span class="token punctuation">;</span>

	nodeB<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeC<span class="token punctuation">;</span>

	nodeC<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeD<span class="token punctuation">;</span>
	nodeC<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeE<span class="token punctuation">;</span>

	nodeF<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeG<span class="token punctuation">;</span>
	
	nodeG<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeH<span class="token punctuation">;</span>

	<span class="token comment">//递归遍历</span>
	<span class="token function">recursion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的编程"><a href="#二叉树的编程" class="headerlink" title="二叉树的编程"></a>二叉树的编程</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild<span class="token punctuation">;</span> <span class="token comment">//左孩子节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild<span class="token punctuation">;</span> <span class="token comment">//右孩子节点</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//统计叶子数量</span>
<span class="token keyword">void</span> <span class="token function">calculateLeafNum</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//递归的结束条件</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>lChild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>rChild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token punctuation">(</span><span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">calculateLeafNum</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">calculateLeafNum</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//求出左子树的高度 </span>
	<span class="token keyword">int</span> lHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> rHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//取左子树 和 右子树中最大值 +1 </span>
	<span class="token keyword">int</span> height <span class="token operator">=</span> lHeight <span class="token operator">></span> rHeight <span class="token operator">?</span> lHeight <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> rHeight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>


	<span class="token keyword">return</span> height<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先拷贝 左子树 </span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild <span class="token operator">=</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//再拷贝 右子树</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild <span class="token operator">=</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//创建新节点 </span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	newNode<span class="token operator">-></span>lChild <span class="token operator">=</span> lChild<span class="token punctuation">;</span>
	newNode<span class="token operator">-></span>rChild <span class="token operator">=</span> rChild<span class="token punctuation">;</span>

	newNode<span class="token operator">-></span>ch <span class="token operator">=</span> root<span class="token operator">-></span>ch<span class="token punctuation">;</span>

	<span class="token comment">//返回给用户</span>
	<span class="token keyword">return</span> newNode<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token comment">//遍历树</span>
<span class="token keyword">void</span> <span class="token function">showBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">showBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">showBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//释放树</span>
<span class="token keyword">void</span> <span class="token function">freeTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先释放左子树 </span>
	<span class="token function">freeTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//再释放右子树</span>
	<span class="token function">freeTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 被释放了\n"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//释放根节点</span>
	<span class="token function">free</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeA <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeD <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeE <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeF <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeG <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'G'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeH <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//建立结点之间的关系</span>

	nodeA<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeB<span class="token punctuation">;</span>
	nodeA<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeF<span class="token punctuation">;</span>

	nodeB<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeC<span class="token punctuation">;</span>

	nodeC<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeD<span class="token punctuation">;</span>
	nodeC<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeE<span class="token punctuation">;</span>

	nodeF<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeG<span class="token punctuation">;</span>

	nodeG<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeH<span class="token punctuation">;</span>

	<span class="token comment">//1、求树中的叶子的数量</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">calculateLeafNum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"叶子的数量为:%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//2、求树的高度/深度</span>
	<span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"树的高度为: %d\n"</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//3、拷贝二叉树</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> newTree <span class="token operator">=</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">showBinaryTree</span><span class="token punctuation">(</span>newTree<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//4、释放二叉树</span>
	<span class="token function">freeTree</span><span class="token punctuation">(</span>newTree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的非递归遍历"><a href="#二叉树的非递归遍历" class="headerlink" title="二叉树的非递归遍历"></a>二叉树的非递归遍历</h3><ul>
<li>seqStack.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>


<span class="token comment">//#define  MAX 1024</span>
<span class="token comment">////栈的结构体</span>
<span class="token comment">//struct SStack</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	void * data[MAX]; //数组</span>
<span class="token comment">//</span>
<span class="token comment">//	//栈的元素个数</span>
<span class="token comment">//	int m_Size;</span>
<span class="token comment">//&#125;;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>seqStack.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token comment">//栈的结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">SStack</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//数组</span>

	<span class="token comment">//栈的元素个数</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//清空数组中的每个元素</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

	stack<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//判断是否已经栈满 ,如果满了 不可以再入栈了</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> MAX<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">//入栈  尾插</span>

	myStack<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//更新栈大小</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//如果是空栈 不执行出栈</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//执行出栈</span>
	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//更新栈的大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token comment">//如果是空栈   返回 NULL</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//返回假 代表不是空栈</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>遍历</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>
<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild<span class="token punctuation">;</span> <span class="token comment">//左孩子节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild<span class="token punctuation">;</span> <span class="token comment">//右孩子节点</span>
	<span class="token comment">//标示</span>
	<span class="token keyword">int</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">/*
	1、将根节点 压入栈中
	2、只要 栈size> 0  执行循环
		2.1 拿出栈顶元素
		2.2 如果栈顶元素的标志位 真    直接输出  执行下一次循环
		2.3 如果不是真 该flag的标志位真
		2.4 将  右子节点  和 左子节点  和 根 入栈
		2.5 执行下一次循环
*/</span>

<span class="token keyword">void</span> <span class="token function">nonRecursion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始栈</span>
	seqStack myStack <span class="token operator">=</span> <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">size_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取栈顶元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> topNode <span class="token operator">=</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//弹出栈顶</span>
		<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//如果栈顶元素的标志位 真    直接输出  执行下一次循环</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>topNode<span class="token operator">-></span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> topNode<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//如果不是真 该flag的标志位真</span>
		topNode<span class="token operator">-></span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token comment">//将  右子节点  和 左子节点  和 根 入栈</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>topNode<span class="token operator">-></span>rChild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span> topNode<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> 

		<span class="token keyword">if</span> <span class="token punctuation">(</span>topNode<span class="token operator">-></span>lChild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span> topNode<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span>topNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//栈销毁掉</span>
	<span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	myStack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeA <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeD <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeE <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeF <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeG <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'G'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeH <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//建立结点之间的关系</span>

	nodeA<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeB<span class="token punctuation">;</span>
	nodeA<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeF<span class="token punctuation">;</span>

	nodeB<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeC<span class="token punctuation">;</span>

	nodeC<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeD<span class="token punctuation">;</span>
	nodeC<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeE<span class="token punctuation">;</span>

	nodeF<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeG<span class="token punctuation">;</span>

	nodeG<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeH<span class="token punctuation">;</span>

	<span class="token comment">//执行非递归遍历</span>
	<span class="token function">nonRecursion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//从小到大</span>
<span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//利用temp保存当前 i号位置的数据值</span>
			<span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//数据进行后移</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token comment">//将j+1 的位置数据 赋值为 temp</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

	
	<span class="token comment">//打印数组</span>
	<span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础</title>
    <url>/2022/07/03/C-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>C++基础课程</li>
<li><img src="http://qiniu.orangew.cn/img/%E5%B0%B1%E4%B8%9A%E7%8F%ADC++%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png" alt="就业班C++基础课程大纲"></li>
</ul>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><ul>
<li>应用领域<ul>
<li>如果项目中,既要求效率又要建模和高度抽像,那就选择c++吧。</li>
</ul>
</li>
<li>系统层软件开发<ul>
<li>C++的语言本身的高效</li>
</ul>
</li>
<li>服务器程序开发<ul>
<li>面向对象，具有较强的抽象和建模能力</li>
</ul>
</li>
<li>游戏，网络，分布式，云计算<ul>
<li>效率和建模</li>
</ul>
</li>
<li>科学计算</li>
</ul>
<h2 id="C-对C语言的加强"><a href="#C-对C语言的加强" class="headerlink" title="C++对C语言的加强"></a>C++对C语言的加强</h2><h3 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h3><h4 id="C-命名空间基本常识"><a href="#C-命名空间基本常识" class="headerlink" title="C++命名空间基本常识"></a>C++命名空间基本常识</h4><ul>
<li><p>所谓namespace，是指标识符的各种可见范围。C++标准程序库中的所有标识符都被定义于一个名为std的namespace中。</p>
</li>
<li><p>一 : <iostream>和&lt;iostream.h&gt;格式不一样，前者没有后缀，实际上，在你的编译器include文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。后缀为.h的头文件c++标准已经明确提出不支持了，早些的实现将标准库功能定义在全局空间里，声明在带.h后缀的头文件里，c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h。因此，</p>
<ol>
<li>当使用&lt;iostream.h&gt;时，相当于在c中调用库函数，使用的是全局命名空间，也就是早期的c++实现;</li>
<li>当使用<iostream>的时候，该头文件没有定义全局命名空间，必须使用namespace std;这样才能正确使用cout。</li>
</ol>
</li>
<li><p>二︰由于namespace的概念，使用C++标准程序库的任何标识符时，可以有三种选择:</p>
<ol>
<li><p>直接指定标识符。例如std:ostream而不是ostream。完整语句如</p>
<ul>
<li><code>std:: cout &lt;&lt; std ::hex &lt;&lt; 3.4 &lt;&lt; std::endl;</code></li>
</ul>
</li>
<li><p>使用using关键字</p>
<ul>
<li><code>using std::cout;using std::endl;using std::cin;</code></li>
<li>以上程序可以写成</li>
<li><code>cout&lt;&lt;std::hex&lt;&lt;3.4&lt;&lt;endl;</code></li>
</ul>
</li>
<li><p>最方便的就是使用using namespace std;例如: using namespace std;这样命名空间std内定义的所有标识符都有效（曝光）。就好像它们被声明为全局变量一样。那么以上语句可以如下写: <code>cout &lt;&lt;hex &lt;&lt; 3.4 &lt;&lt; endl;</code>因为标准库非常的庞大，所以程序员在选择的类的名称或函数名时就很有可能和标准库中的某个名字相同。所以为了避免这种情况所造成的名字冲突，就把标准库中的一切都被放在名字空间std中。但这又会带来了一个新问题。无数原有的C++代码都依赖于使用了多年的伪标准库中的功能，他们都是在全局空间下的。所以就有了&lt;iostream.h&gt;和<iostream>等等这样的头文件，一个是为了兼容以前的C++代码，一个是为了支持新的标准。命名空间std封装的是标准程序库的名称，标准程序库为了和以前的头文件区别，一般不加”.h”</p>
</li>
</ol>
</li>
</ul>
<h4 id="C-命名空间定义以及使用方法"><a href="#C-命名空间定义以及使用方法" class="headerlink" title="C++命名空间定义以及使用方法"></a>C++命名空间定义以及使用方法</h4><ul>
<li>在C++中，名称( name )可以是符号常量、变量、宏、函数、结构、枚举、类和对象等等。为了避免，在大规模程序的设计中，以及在程序员使用各种各样的C++库时，这些标识符的命名发生冲突。</li>
<li>标准C++引入了关键字namespace(命名空间/名字空间/名称空间/名域)，可以更好地控制标识符的作用域。</li>
<li>std是c++标准命名空间，c++标准程序库中的所有标识符都被定义在std中，比如标准库中的类iostream、vector等都定义在该命名空间中，使用时要加上using声明(using namespace std)或using指示(如std::string、std:vector<int>).</li>
</ul>
<blockquote>
<p>C中的命名空间<br>在C语言中只有一个全局作用域<br>C语言中所有的全局标识符共享同一个作用域标识符之间可能发生冲突</p>
<p>C++中的命名空间<br>命名空间将全局作用域分成不同的部分<br>不同命名空间中的标识符可以同名而不会发生冲突命名空间可以相互嵌套<br>全局作用域也叫默认命名空间</p>
</blockquote>
<ul>
<li>C++命名空间的定义</li>
<li><code>namespace name&#123;...&#125;</code></li>
<li>C++命名空间的使用<ul>
<li>使用整个命名空间:using namespace name;</li>
<li>使用命名空间中的变量: using name::variable;</li>
<li>使用默认命名空间中的变量: ::variable</li>
<li>默认情况下可以直接使用默认命名空间中的所有标识符</li>
</ul>
</li>
</ul>
<h4 id="C-命名空间编程实践"><a href="#C-命名空间编程实践" class="headerlink" title="C++命名空间编程实践"></a>C++命名空间编程实践</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;stdio.h&gt;
namespace NameSpaceA&#123;
    int a&#x3D;0;
&#125;
namespace NameSpaceB&#123;
    int a&#x3D;1;
    namespace NameSpaceC&#123;
        struct Teacher&#123;
            char name[10];
            int age;
        &#125;;
    &#125;
&#125;
int main()&#123;
    using namespace NameSpaceA;
    using NameSpaceB::NameSpaceC::Teacher;
    printf(&quot;a&#x3D; %d\n&quot;,a);
    printf(&quot;a&#x3D; %d\n&quot;,NameSpaceB::a);
    NameSpaceB::NameSpaceC::Teacher t2;
    Teacher t1&#x3D;&#123;&quot;aaa&quot;,3&#125;;
    printf(&quot;t1.name&#x3D; %s\n&quot;,t1.name);
    printf(&quot;t1.age&#x3D; %d\n&quot;,t1.age);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>当使用<iostream>的时候，该头文件没有定义全局命名空间，必须使用namespace std ;这样才能正确使用cout。若不引入using namespace std ,需要这样做。std::cout</li>
<li>C++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h</li>
<li>C++命名空间的定义:namespace name {…}</li>
<li>using namespace NameSpaceA;</li>
<li>namespace定义可嵌套。</li>
</ol>
<h3 id="实用性增强"><a href="#实用性增强" class="headerlink" title="实用性增强"></a>实用性增强</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;c语言中的变量都必须在作用域开始的位置定义!!
&#x2F;&#x2F;C++中更强调语言的“实用性”，所有的变量都可以在需要使用时再定义。
int main(void)
int i &#x3D; 0;
cout &lt;&lt; &quot;i &#x3D; &quot; &lt;&lt;i &lt;&lt;endl;
int k;
k &#x3D; 4;
cout &lt;&lt; &quot;k &#x3D; &quot; &lt;&lt;k &lt;&lt;endl;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="变量检测增强"><a href="#变量检测增强" class="headerlink" title="变量检测增强"></a>变量检测增强</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
在c语言中，重复定义多个同名的全局变量是合法的在C++中，不允许定义多个同名的全局变量
C语言中多个同名的全局变量最终会被链接到全局数据区的同一个地址空间上
int g_var;
int g_var &#x3D; 1;
C++直接拒绝这种二义性的做法。
*&#x2F;
#include &lt;iostream&gt;
int g_var;
int g_var &#x3D; 1;
int main(int argc, char *argv[])
&#123;
printf( &quot;g_var &#x3D; %d\n&quot;, g_var);
    return 0;
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220703105256.png" alt="20220703105256"></p>
<h3 id="struct-类型增强"><a href="#struct-类型增强" class="headerlink" title="struct 类型增强"></a>struct 类型增强</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
c语言的struct定义了一组变量的集合，c编译器并不认为这是一种新的类型C++中的struct是一个新类型的定义声明
*&#x2F;
#include &lt;iostream&gt;
struct student&#123;
char name[100];
int age;
&#125;;
int main(int argc,char *argv[])&#123;
student s1 &#x3D; &#123;&quot;wang&quot;,1&#125;;
Student s2 &#x3D; &#123;&quot;wang2&quot;,2&#125;;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="C-中所有变量和函数都必须有类型"><a href="#C-中所有变量和函数都必须有类型" class="headerlink" title="C++中所有变量和函数都必须有类型"></a>C++中所有变量和函数都必须有类型</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
&#x2F;*
C++中所有的变量和函数都必须有类型c语言中的默认类型在C++中是不合法的
函数f的返回值是什么类型，参数又是什么类型?函数g可以接受多少个参数?
*&#x2F;
&#x2F;&#x2F;更换成.cpp试试
f(i)
&#123;
	printf( &quot;i &#x3D; %d \n&quot;, i);
&#125;
g()&#123;
return 5;
&#125;
int main(int argc, char *argv[])&#123;
f(10);
printf(&quot;g() &#x3D; %d\n&quot;, g(1，2，3，4，5));
getchar();
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在C语言中<br>int f()﹔表示返回值为int ，接受任意参数的函数</p>
<p>int ((void);表示返回值为int的无参函数</p>
<p>在C++中<br>intf( );和int f(void)具有相同的意义，都表示返回值为int的无参函数</p>
<p>C++更加强调类型，任意的程序元素都必须显示指明类型</p>
</blockquote>
<h3 id="新增bool类型关键字"><a href="#新增bool类型关键字" class="headerlink" title="新增bool类型关键字"></a>新增bool类型关键字</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
C++中的布尔类型
C++在C语言的基本类型系统之上增加了boolC++中的bool可取的值只有true和false理论上bool只占用一个字节，
如果多个bool变量定义在一起，可能会各占一个bit，这取决于编译器的实现
true代表真值，编译器内部用1来表示
false代表非真值，编译器内部用o来表示
bool类型只有true(非e)和false (0)两个值
C++编译器会在赋值时将非o值转换为true，0值转换为false*&#x2F;
#include &lt;iostream&gt;
using namespace std;
int main(int argc,char *argv[])&#123;
int a;
bool b &#x3D; true;
printf( &quot;b &#x3D; %d, sizeof(b) &#x3D; %d \n&quot;, b, sizeof(b));
b &#x3D; 4;
a &#x3D; b;
printf( &quot;a &#x3D; %d, b &#x3D; %d\n&quot;, a,b);
b &#x3D; -4;
a &#x3D; b;
printf( &quot;a &#x3D; %d， b &#x3D; %d \n&quot;, a,b);
a &#x3D; 10;
b &#x3D; a;
printf( &quot;a &#x3D; %d， b &#x3D; %d\n&quot;, a,b);
b &#x3D; 0;
printf( &quot;b &#x3D; %d \n&quot;, b);
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="三目运算符功能增强"><a href="#三目运算符功能增强" class="headerlink" title="三目运算符功能增强"></a>三目运算符功能增强</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">//返回一个最小数并且给最小数赋值成30</span>
<span class="token comment">//三目运算符是一个表达式，表达式不可能做左值( a &lt; b ? a : b ) = 30;</span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1 )C语言返回变量的值</p>
<p>​    C++语言是返回变量本身</p>
<p>​    C语言中的三目运算符返回的是变量值，不能作为左值使用</p>
<p>​    C++中的三目运算符可直接返回变量本身，因此可以出现在程序的任何地<br>方<br>2）注意:三目运算符可能返回的值中如果有一个是常量值，则不能作为左值使用<br>​    ( a&lt; b ? 1 : b )= 30;</p>
<p>3)C语言如何支持类似C++的持性呢?</p>
<p>​    当左值的条件:要有内存空间;</p>
<p>​    C++编译器帮助程序员取了一个地址而已</p>
</blockquote>
<h3 id="const增强"><a href="#const增强" class="headerlink" title="const增强"></a>const增强</h3><h4 id="const基础知识"><a href="#const基础知识" class="headerlink" title="const基础知识"></a>const基础知识</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
int main(void)
&#123;
&#x2F;&#x2F; const 定义常量---&gt; const意味只读
const int a;
int const b;
&#x2F;第一个第二个意思一样代表一个常整形数
const int *c ;
&#x2F;&#x2F;第三个c是一个指向常整形数的指针(所指向的内存数据不能被修改，但是本身可以修改)
int *const d;
&#x2F;第四个d 常指针（指针变量不能被修改，但是它所指向内存空间可以被修改)
const int *const e ;
&#x2F;&#x2F;第五个e一个指向常整形的常指针（指针和它所指向的内存空间，均不能被修改)
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>合理的利用const的好处，<br>1指针做面数参数，可以有效的提高代码可读性，减少bug ;</p>
<p>2清楚的分清参数的输入和输出特性</p>
</blockquote>
<ul>
<li><code>int setTeacher_err( const Teacher *p)</code></li>
<li>Const修改形参的时候，在利用形参不能修改指针所向的内存空间</li>
</ul>
<h4 id="C语言中的“冒牌货”"><a href="#C语言中的“冒牌货”" class="headerlink" title="C语言中的“冒牌货”"></a>C语言中的“冒牌货”</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"a===>%d a===>%p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"a===>%d a===>%p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220703111635.png" alt="20220703111635"></p>
<h4 id="const-和-define的相同"><a href="#const-和-define的相同" class="headerlink" title="const 和#define的相同"></a>const 和#define的相同</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;&#x2F;#define N 10
int main()
&#123;
	const int a &#x3D; 1;
    const int b &#x3D; 2;
	int array[a + b] &#x3D; &#123;0&#125;;
    int i &#x3D; 0;
	for(i &#x3D; 0; i &lt; (a+b); i++)&#123;
	printf( &quot;array[%d] &#x3D; %d\n&quot;, i, array[i]);
&#125;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C++中的const修饰的，是一个真正的常量，而不是c中变量（只读)。在const修饰的常量编译期间，就已经确定下来了</li>
</ul>
<h4 id="const和-define的区别"><a href="#const和-define的区别" class="headerlink" title="const和#define的区别"></a>const和#define的区别</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
void fun1()
&#123;
#define a 10
const int b &#x3D; 20;
&#125;
void fun2()&#123;
printf( &quot;a &#x3D; %d\n&quot;, a);
    &#x2F;&#x2F; printf( &quot;b &#x3D; %d \n&quot;, b);
&#125;
int main()&#123;
	fun1();
    fun2();
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C++中的const常量类似于宏定义</li>
<li><code>const int c = 5; #define c 5</code></li>
<li>C++中的const常量与宏定义不同</li>
<li><strong>const常量是由编译器</strong>处理的，提供类型检查和作用域检查</li>
<li><strong>宏定义由预处理器处理</strong>，单纯的文本替换</li>
</ul>
<blockquote>
<p>C语言中的const变量<br>C语言中const变量是只读变量，有自己的存储空间</p>
<p>C+＋中的const常量<br>    可能分配存储空间,也可能不分配存储空间<br>    当const常量为全局，并且需要在其它文件中使用，会分配存储空间当使用&amp;操    作符，取const常量的地址时，会分配存储空间<br>    当const int &amp;a = 10; const修饰引用时，也会分配存储空间</p>
</blockquote>
<h3 id="真正的枚举"><a href="#真正的枚举" class="headerlink" title="真正的枚举"></a>真正的枚举</h3><ul>
<li>c语言中枚举本质就是整型,枚举变量可以用任意整型赋值。而c++中枚举变量,只能用被枚举出来的元素初始化。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
enum season &#123;SPR, SUM,AUT ,WIN&#125;;
int main()
&#123;
enum season s &#x3D; SPR;
&#x2F;&#x2F;s &#x3D; 0;l&#x2F;error，但是C语言可以通过s &#x3D; SUM;
    cout &lt;&lt; &quot;s&#x3D; &quot; &lt;&lt; s &lt;&lt;endl;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-对C语言的拓展"><a href="#C-对C语言的拓展" class="headerlink" title="C++对C语言的拓展"></a>C++对C语言的拓展</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><ul>
<li>变量名实质上是一段连续存储空间的别名，是一个标号(门牌号)</li>
<li>通过变量来申请并命名内存空间.</li>
<li>通过变量的名字可以使用存储空间.</li>
</ul>
<h4 id="引用的概念"><a href="#引用的概念" class="headerlink" title="引用的概念"></a>引用的概念</h4><ul>
<li>变量名，本身是一段内存的引用，即别名(alias).引用可以看作一个已定义变量的别名。</li>
<li>引用的语法：Type &amp;name =var;</li>
<li>用法如下</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
	int a &#x3D; 10; &#x2F;&#x2F;c编译器分配4个字节内存，a内存空间的别名
	int &amp;b &#x3D; a; &#x2F;&#x2F;b就是a的别名
	a &#x3D; 11; &#x2F;&#x2F;直接赋值
	&#123;
		int *p &#x3D; &amp;a;
		*p &#x3D; 12;
		cout &lt;&lt; a &lt;&lt;endl;
	&#125;
	b &#x3D; 14;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt;a &lt;&lt; &quot;, b &#x3D; &quot; &lt;&lt; b &lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ol>
<li>引用没有定义,是一种关系型声明。声明它和原有某一变量(实体)的关系。故而类型与原类型保持一致,且不分配内存。与被引用的变量有相同的地址。</li>
<li>声明的时候必须初始化,一经声明,不可变更。</li>
<li>可对引用,再次引用。多次引用的结果,是某一变量具有多个别名。</li>
<li>&amp;符号前有数据类型时,是引用。其它皆为取地址。</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(void)&#123;
int a,b;
int &amp;r &#x3D; a;
int &amp;r &#x3D; b; &#x2F;&#x2F;错误,不可更改原有的引用关系
float &amp;rr &#x3D; b;&#x2F;&#x2F;错误,引用类型不匹配 cout&lt;&lt;&amp;a&lt;&lt;&amp;r&lt;&lt;endl;&#x2F;&#x2F;变量与引用具有相&gt;同的地址。
int &amp;ra &#x3D; r;&#x2F;&#x2F;可对引用更次引用,表示a变量有两个别名,分别是r和 ra
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="引用作为函数参数"><a href="#引用作为函数参数" class="headerlink" title="引用作为函数参数"></a>引用作为函数参数</h4><ul>
<li>普通引用在声明时必须用其它的变量进行初始化，引用作为函数参数声明时不进行初始化。 </li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Teacher
&#123;
	char name[ 64];
    int age ;
&#125;;
void printfT(Teacher *pT)&#123;
cout&lt;&lt; pT-&gt;age &lt;&lt;endl;
&#125;
&#x2F;&#x2F;pT是t1的别名,相当于修改了t1
void printfT2(Teacher &amp;pT)&#123;
pT.age &#x3D; 33;
cout&lt;&lt;pT.age&lt;&lt;endl;
&#125;
&#x2F;&#x2F;pT和t1的是两个不同的变量
void printfT3(Teacher pT)&#123;
cout&lt;&lt;pT.age&lt;&lt;endl;
pT.age &#x3D; 45;&#x2F;&#x2F;只会修改pT变量,不会修改t1变量
&#125;
int main(void)&#123;
Teacher t1;
t1.age &#x3D; 35;
printfT(&amp;t1);
printfT2(t1); &#x2F;&#x2F;pT是t1的别名
printf( &quot;t1.age: %d \n&quot;, t1.age); &#x2F;&#x2F;33
printfT3(t1) ;&#x2F;&#x2F; pT是形参,t1 copy一份数据给pT
printf( &quot;t1.age:%d \n&quot;, t1.age); &#x2F;&#x2F;33
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="引用的意义"><a href="#引用的意义" class="headerlink" title="引用的意义"></a>引用的意义</h4><ul>
<li>引用作为其它变量的别名而存在，因此在一些场合可以代替指针</li>
<li>引用相对于指针来说具有更好的可读性和实用性</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//无法实现两数据的交换</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开辟了两个指针空间实现交换</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
void swap( int &amp;a, int &amp;b)&#123;
	int tmp;
	tmp &#x3D; a; 
    	a &#x3D; b;
    	b &#x3D; tmp;
&#125;
int main()&#123;
	int a &#x3D; 3,b &#x3D; 5;
	cout&lt;&lt; &quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    	swap(a,b);
	cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C++中引入引用后,可以用引用解决的问题。避免用指针来解决。</li>
</ul>
<h4 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
int main()
&#123;
int a &#x3D; 10;
int &amp;b &#x3D; a; &#x2F;&#x2F;注意:单独定义的引用时，必须初始化。
b &#x3D; 11;
printf( &quot;a:%d \n&quot;, a) ;
printf(&quot;b:%d \n&quot;, b);
printf( &quot;&amp;a : %p\n&quot;, &amp;a);
printf(&quot;&amp;b: %p\n&quot;,&amp;b);
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>思考一：C++编译器定义引用后，背后做了什么</li>
<li>思考二：普通引用有自己的空间吗？</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
struct Teacher &#123;
int &amp;a;
int &amp;b;
&#125;;
int main()&#123;
printf(&quot;sizeof(Teacher) %d\n&quot;, sizeof( Teacher));
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>引用在C++中的内部实现是一个常指针<ul>
<li><code>Type&amp; name&lt;===&gt;Type* const name</code></li>
</ul>
</li>
<li>C++编译器在编译过程中使用常指针作为引用的内部实现，因此引用所占用的空间大小与指针相同。</li>
<li>从使用的角度，引用会让人误会其只是一个别名，没有自己的存储空间。这是C++为了实用性而做出的细节隐藏。</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func(int &amp;a)&#123;
a &#x3D; 5;
&#125;
void func(int *const a)&#123;
a &#x3D; 5;
&#125;
int main()i
int x &#x3D; 10;func(x);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>间接赋值的3各必要条件<br>1定义两个变量(一个实参一个形参)</p>
<p>2建立关联实参取地址传给形参</p>
<p>3 * p形参去间接的修改实参的值</p>
</blockquote>
<ul>
<li>引用在实现上，只不过是把∶间接赋值成立的三个条件的后两步和二为一.当实参传给形参引用的时候，只不过是c++编译器帮我们程序员手工取了一个实参地址，传给了形参引用（常量指针)。</li>
</ul>
<h4 id="引用作为函数的返回值（引用当左值）"><a href="#引用作为函数的返回值（引用当左值）" class="headerlink" title="引用作为函数的返回值（引用当左值）"></a>引用作为函数的返回值（引用当左值）</h4><blockquote>
<p>当函数返回值为引用时，<br>若返回栈变量:<br>不能成为其它引用的初始值（不能作为左值使用)</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">include &lt;iostream&gt;
using namespace std;
int getA1()
&#123;
	int a;
    a &#x3D; 10;
    return a;
&#125;
int&amp; getA2()&#123;
	int a;
    a &#x3D; 10;
    return a;
&#125;
int main(void)&#123;
int a1 &#x3D; 0;
    int a2 &#x3D; 0;
&#x2F;&#x2F;值拷贝
a1 &#x3D; getA1();
&#x2F;&#x2F;将一个引用赋给一个变量，会有拷贝动作
&#x2F;&#x2F;理解:编译器类似做了如下隐藏操作，a2 &#x3D; *(getA2())
a2 &#x3D; getA2();
&#x2F;&#x2F;将一个引用赋给另一个引用作为初始值，由于是栈的引用，内存非法
int &amp;a3 &#x3D; getA2();
cout &lt;&lt;&quot;a1 &#x3D; &quot; &lt;&lt;a1&lt;&lt;endl;
cout &lt;&lt;&quot;a2 &#x3D; &quot; &lt;&lt;a2&lt;&lt;endl;
cout &lt;&lt;&quot;a3 &#x3D; &quot; &lt;&lt;a3&lt;&lt;endl;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>当函数返回值为引用时，</p>
<p>若返回静态变量或全局变量</p>
<p>可以成为其他引用的初始值（可作为右值使用，也可作为左值使用)</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int getA1()
&#123;
static int a;
a &#x3D; 10;
return a;
&#125;
int&amp; getA2()&#123;
static int a;
a &#x3D; 10;
return a;
&#125;
int main(void)&#123;
int a1 &#x3D; 0;int a2 &#x3D; 0;
&#x2F;&#x2F;值拷贝
a1 &#x3D; getA1();
&#x2F;&#x2F;将一个引用赋给一个变量，会有拷贝动作
&#x2F;&#x2F;理解︰编译器类似做了如下隐藏操作，a2 &#x3D; *(getA2())
a2 &#x3D; getA2();
&#x2F;&#x2F;将一个引用赋给另一个引用作为初始值，由于是静态区域，内存合法
int &amp;a3 &#x3D; getA2();
cout &lt;&lt;&quot;a1 &#x3D; &quot; &lt;&lt;a1&lt;&lt;endl;
    cout &lt;&lt;&quot;a2 &#x3D; &quot; &lt;&lt;a2&lt;&lt;endl;
    cout &lt;&lt;&quot;a3 &#x3D; &quot; &lt;&lt;a3&lt;&lt;endl;
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>引用作为函数返回值，</p>
<p>如果返回值为引用可以当左值，</p>
<p>如果返回值为普通变量不可以当左值。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;函数当左值
&#x2F;&#x2F;返回变量的值
int func1()&#123;
static int a1 &#x3D; 10;
    return a1;
&#125;
&#x2F;&#x2F;返回变量本身，
int&amp; func2()&#123;
static int a2 &#x3D; 10;
    return a2;
&#125;
int main(void)&#123;
&#x2F;&#x2F;函数当右值
int c1 &#x3D; func1();
cout &lt;&lt; &quot;c1 &#x3D; &quot; &lt;&lt; c1 &lt;&lt;endl;
int c2 &#x3D; func2();&#x2F;&#x2F;函数返回值是一个引用,并且当右值
    cout &lt;&lt; &quot;c2 &#x3D; &quot; &lt;&lt; c2 &lt;&lt;endl;
&#x2F;&#x2F;函数当左值
&#x2F;&#x2F;func1() &#x3D; 100;l &#x2F;&#x2F; error
    func2() &#x3D; 100;
&#x2F;&#x2F;函数返回值是一个引用,并且当左值
c2 &#x3D; func2();
cout &lt;&lt; &quot;c2 &#x3D; &quot; &lt;&lt; c2 &lt;&lt;endl;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Teacher
&#123;
char name[64];
    int age ;
&#125;;
&#x2F;&#x2F;在被调用函数获取资源
int getTeacher(Teacher **p)&#123;
	Teacher *tmp &#x3D;NULL;
    if (p &#x3D;&#x3D; NULL)&#123;return -1;&#125;
	tmp &#x3D; (Teacher *)malloc ( sizeof( Teacher) );
    if (tmp &#x3D;&#x3D;NULL)&#123;return -2;&#125;
	tmp-&gt;age &#x3D; 33;
&#x2F;&#x2F;p是实参的地址 *实参的地址去间接的修改实参的值
	*p &#x3D; tmp;
	return 0;
&#125;
&#x2F;&#x2F;指针的引用做函数参数
int getTeacher2(Teacher*&amp;myp)&#123;
&#x2F;&#x2F;给myp赋值相当于给main函数中的pT1赋值
	myp &#x3D; (Teacher * )malloc ( sizeof(Teacher));
    	if (myp &#x3D;&#x3D; NULL)&#123;return -1;&#125;
	myp-&gt;age &#x3D; 36;
	return 0;
&#125;
void FreeTeacher(Teacher *pT1)&#123;
if (pT1 &#x3D;&#x3D; NULL)&#123;
return ;&#125;
free(pT1);
&#125;
int main(void)&#123;
Teacher *pT1 &#x3D; NULL;
&#x2F;&#x2F;1 c语言中的二级指针
    getTeacher(&amp;pT1);
cout&lt;&lt; &quot;age: &quot;&lt;&lt;pT1-&gt;age&lt;&lt;endl;
    FreeTeacher(pT1);
&#x2F;&#x2F;2 c++中的引用(指针的引用)
&#x2F;&#x2F;引用的本质间接赋值后2个条件让c++编译器帮我们程序员做了。
getTeacher2(pT1);
cout&lt;&lt; &quot;age: &quot;&lt;&lt;pT1-&gt;age&lt;&lt;endl;
FreeTeacher(pT1);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const引用"><a href="#const引用" class="headerlink" title="const引用"></a>const引用</h4><ul>
<li>const引用有较多使用。它可以防止对象的值被随意修改。因而具有一些特性。</li>
<li>const 对象的引用必须是const的,将普通引用绑定到const对象是不合法的。这个原因比较简单。既然对象是const的,表示不能被修改,引用当然也不能修改,必须使用const引用。实际上，const int a=1;int &amp;b=a;这种写法是不合法的,编译不过。</li>
<li>const引用可使用相关类型的对象(常量,非同类型的变量或表达式)初始化。这个是const引用与普通引用最大的区别。const int &amp;a=2;是合法的。double x=3.14;const int &amp;b=a;也是合法的。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
&#x2F;&#x2F;普通引用
int a &#x3D; 10;
int &amp;b &#x3D; a;
cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt;endl;
&#x2F;&#x2F;常引用
int x &#x3D; 20;
const int &amp;y &#x3D; x;&#x2F;&#x2F;常引用是限制变量为只读不能通过y去修改x了
&#x2F;&#x2F;y &#x3D; 21;&#x2F;&#x2F; error
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const引用的原理"><a href="#const引用的原理" class="headerlink" title="const引用的原理"></a>const引用的原理</h4><ul>
<li>const 引用的目的是,禁止通过修改引用值来改变被引用的对象。const引用的初始化特性较为微妙,可通过如下代码说明:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double val &#x3D; 3.14;
const int &amp;ref &#x3D; val;
double &amp; ref2 &#x3D; val;
cout&lt;&lt;ref&lt;&lt;&quot; &quot;&lt;&lt;ref2&lt;&lt;endl;
val &#x3D; 4.14;
cout&lt;&lt;ref&lt;&lt;&quot; &quot;&lt;&lt;ref2&lt;&lt;endl;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>上述输出结果为3 3.14和3 4.14。因为ref是const的,在初始化的过程中已经给定值,不允许修改。而被引用的对象是val,是非const的,所以val的修改并未影响ref的值,而ref2的值发生了相应的改变。</li>
<li>那么,为什么非const的引用不能使用相关类型初始化呢?实际上,const引用使用相关类型对象初始化时发生了如下过程:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int temp &#x3D; val;
const int &amp;ref &#x3D; temp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>如果ref 不是const的,那么改变ref值,修改的是temp,而不是val。期望对ref的赋值会修改val的程序员会发现val实际并未修改。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
&#x2F;&#x2F;1&gt;用变量初始化 常引用
    int x1 &#x3D; 30;
const int &amp;y1 &#x3D; x1;&#x2F;&#x2F;用x1变量去初始化 常引用
&#x2F;&#x2F;2&gt;用字面量初始化常量引用
const int a &#x3D; 40;&#x2F;&#x2F;c++编译器把a放在符号表中
&#x2F;&#x2F;int &amp;m &#x3D; 41; &#x2F;&#x2F;error ，普通引用引用一个字面量请问字面量有没有内存地址
const int &amp;m &#x3D; 43;&#x2F;&#x2F;c++编译器会分配内存空间
				&#x2F;&#x2F;int temp &#x3D; 43
				&#x2F;&#x2F;const int &amp;m &#x3D; temp;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Teacher
&#123;
	char name[64];
    int age ;
&#125;;
void printTeacher( const Teacher &amp;myt)&#123;
&#x2F;&#x2F;常引用让实参变量拥有只读属性&#x2F;&#x2F; myt.age &#x3D; 33;
printf(&quot;myt.age: %d \n&quot;, myt.age);
&#125;
int main( void)&#123;
Teacher t1;
t1.age &#x3D; 36;
printTeacher(t1);
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结论:<br>1 ) const int &amp; e 相当于const int * const e</p>
<p>2）普通引用相当于int *const e</p>
<p>3）当使用常量（字面量）对const引用进行初始化时，C++编译器会为常量值分配空间，并将引用名作为这段空间的别名</p>
<p>4）使用字面量对const引用初始化后，将生成一个只读变量</p>
</blockquote>
<h3 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h3><ul>
<li>c语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去,避免了函数调用的开销。但是由于宏函数的处理发生在预处理阶段,缺失了语法检测和有可能带来的语意差错。</li>
</ul>
<h4 id="内联函数基本概念"><a href="#内联函数基本概念" class="headerlink" title="内联函数基本概念"></a>内联函数基本概念</h4><ul>
<li>C++提供了inline关键字，实现了真正的内嵌</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
inline void func( int a)&#123;
a &#x3D; 20;
cout &lt;&lt; a &lt;&lt;endl;
&#125;
int main(void)&#123;
func(10);&#x2F;*
&#x2F;编译器将内联函数的函数体直接展开&#123;
a &#x3D; 20;
cout &lt;&lt; a &lt;&lt;endl;
&#125;
*&#x2F;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>特点<ol>
<li>内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直接忽略内联请求。</li>
<li>C++编译器直接将函数体插入在函数调用的地方。</li>
<li>内联函数<strong>没有普通函数调用时的额外开销</strong>(压栈，跳转，返回)。</li>
<li>内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型等）。</li>
<li><strong>内联函数由编译器处理</strong>，<strong>直接将编译后的函数体插入调用的地方</strong>，<strong>宏代码片段由预处理器处理</strong>，进行简单的文本替换，没有任何编译过程。</li>
<li>C++中内联编译的限制︰<ul>
<li>不能存在任何形式的循环语句</li>
<li>不能存在过多的条件判断语句</li>
<li>函数体不能过于庞大</li>
<li>不能对函数进行取址操作</li>
<li>函数内联声明必须在调用语句之前</li>
</ul>
</li>
<li>编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优势只是省去了函数调用时压栈，跳转和返回的开销。因此，<strong>当函数体的执行开销远大于压栈，跳转和返回所用的开销时，那么内联将无意义</strong>。</li>
</ol>
</li>
</ul>
<h4 id="内联函数VS宏函数"><a href="#内联函数VS宏函数" class="headerlink" title="内联函数VS宏函数"></a>内联函数VS宏函数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string.h&gt;
using namespace std;
#if 0
优点:内嵌代码,辟免压栈与出栈的开销
缺点:代码替换,易使生成代码体积变大,易产生逻辑错误。
#endif
#define SQR(x)((×)*(x))
#if 0
优点:高度抽象,避免重复开发
缺点:压栈与出栈,带来开销#endif
inline int sqr(int x)&#123;
return x*x;
&#125;
int main()&#123;
int i&#x3D;0;
    while(i&lt;5)&#123;
&#x2F;&#x2F;printf( &quot;%d\n&quot; ,SQR( i++));
        printf( &quot;%d \n&quot;,sqr(i++) );
&#125;
return ;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="内联函数总结"><a href="#内联函数总结" class="headerlink" title="内联函数总结"></a>内联函数总结</h4><blockquote>
<p>优点:避免调用时的额外开销(入栈与出栈操作)<br>代价:由于内联面数的函数体在代码段中会出现多个“副本”,因此会增加代码段的空间。</p>
<p>本质:以牺牲代码段空间为代价,提高程序的运行时间的效率。</p>
<p>适用场景:函数体很“小”,且被“频繁”调用。</p>
</blockquote>
<h3 id="默认参数和占位参数"><a href="#默认参数和占位参数" class="headerlink" title="默认参数和占位参数"></a>默认参数和占位参数</h3><ul>
<li>通常情况下,函数在调用时,形参从实参那里取得值。对于多次调用用一函数同一实参时,C++给出了更简单的处理办法。给形参以默认值,这样就不用从实参那里取值了。</li>
</ul>
<h4 id="单个默认参数"><a href="#单个默认参数" class="headerlink" title="单个默认参数"></a>单个默认参数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;1若你填写参数,使用你填写的,不填写默认void myPrint(int x &#x3D; 3)
&#123;
cout&lt;&lt;&quot;x : “&lt;&lt;x&lt;&lt; endl;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多个默认参数"><a href="#多个默认参数" class="headerlink" title="多个默认参数"></a>多个默认参数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;2在默认参数规则，如果默认参数出现，那么右边的都必须有默认参数float volume(float length，float weight &#x3D; 4,float high &#x3D; 5)&#123;
return length*weight*high;
&#125;
int main()i
float v &#x3D; volume( 10);
float v1 &#x3D; volume(10,20);
float v2 &#x3D; volume(10,20,30);
cout&lt;&lt;v&lt;&lt;endl;
cout&lt;&lt;v1&lt;&lt;endl;
cout&lt;&lt;v2&lt;&lt;endl;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="默认参数规则"><a href="#默认参数规则" class="headerlink" title="默认参数规则"></a>默认参数规则</h4><ul>
<li>只有参数列表后面部分的参数才可以提供默认参数值</li>
<li>一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参数都必须使用默认参数值</li>
</ul>
<h4 id="占位参数"><a href="#占位参数" class="headerlink" title="占位参数"></a>占位参数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;*
函数占位参数
占位参数只有参数类型声明，而没有参数名声明一般情况下，在函数体内部无法使用占位参数*&#x2F;
int func( int a, int b, int)&#123;
return a + b;
&#125;
int main()&#123;
func(1，2); &#x2F;&#x2F;error,必须把最后一个占位参数补上。
&#x2F;&#x2F;好悲剧的语法-_-!
printf( &quot;func(1，2，3) &#x3D; %d\n&quot;, func(1，2，3));
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;*
可以将占位参数与默认参数结合起来使用意义
为以后程序的扩展留下线索
兼容C语言程序中可能出现的不规范写法*&#x2F;
&#x2F;&#x2F;C++可以声明占位符参数，占位符参数一般用于程序扩展和对c代码的兼容
int func2(int a, int b, int &#x3D; 0)
&#123;
return a + b;
&#125;
int main()&#123;
&#x2F;&#x2F;如果默认参数和占位参数在一起，都能调用起来func2(1，2);
func2(1，2，3);
return 0;
&#125;
&#x2F;*
结论:如果默认参数和占位参数在一起，都能调用起来*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul>
<li>函数重载(Function Overload)∶用同一个函数名定义不同的函数，当函数名和不同的参数搭配时函数的含义不同。</li>
</ul>
<h4 id="函数重载规则"><a href="#函数重载规则" class="headerlink" title="函数重载规则"></a>函数重载规则</h4><blockquote>
<p>1.函数名相同</p>
<p>2.参数个数不同，参数的类型不同，参数的顺序不同，均可以构成重载</p>
<p>3.返回值类型不同则不可以构成重重</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func(int a); &#x2F;&#x2F; ok
void func(char a); &#x2F;&#x2F;ok
void func( char a,int b); &#x2F;&#x2F; ok
void func(int a, char b); &#x2F;&#x2F;ok
char func(int a); &#x2F;&#x2F;与第一个函数有冲突<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="调用准则"><a href="#调用准则" class="headerlink" title="调用准则"></a>调用准则</h4><blockquote>
<p>1.严格匹配，找到则调用</p>
<p>2.通过隐式转换寻求一个匹配，找到则调用</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
void print( double a)&#123;
cout&lt;&lt;a&lt;&lt;endl;
&#125;
void print(int a)&#123;
cout&lt;&lt;a&lt;&lt;endl;
&#125;
int main()&#123;
print(1); &#x2F;&#x2F;print(int)
print(1.1); &#x2F;&#x2F;print(double)
print(&#39;a&#39;); &#x2F;&#x2F;print(int)
print(1.11f); &#x2F;&#x2F;print( double)
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>编译器调用重载函数的准则:<ol>
<li>将所有同名函数作为候选者</li>
<li>尝试寻找可行的候选函数</li>
<li>精确匹配实参</li>
<li>通过默认参数能够匹配实参</li>
<li>通过默认类型转换匹配实参</li>
<li>匹配失败</li>
<li>最终寻找到的可行候选函数不唯一，则出现二义性，编译失败。</li>
<li>无法匹配所有候选者，函数未定义，编译失败。</li>
</ol>
</li>
</ul>
<h4 id="重载的底层实现"><a href="#重载的底层实现" class="headerlink" title="重载的底层实现"></a>重载的底层实现</h4><ul>
<li>C++利用name mangling(倾轧)技术,来改名函数名,区分参数不同的同名函数。</li>
<li>实现原理:用vcifl d表示 void char int float long double及其引用。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func( char a) ;
&#x2F;&#x2F;func_c(char a)
void func(char a, int b, double c); 
&#x2F;&#x2F;func_cid(char a, int b, double c)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数重载与函数默认参数"><a href="#函数重载与函数默认参数" class="headerlink" title="函数重载与函数默认参数"></a>函数重载与函数默认参数</h4><ul>
<li>一个函数,不能既作重载,又作默认参数的函数。当你少写一个参数时,系统无法确认是重载还是默认参数。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int func(int a, int b, int c &#x3D; 0)&#123;
return a * b * c;
&#125;
int func(int a, int b)&#123;
return a + b;
&#125;
int func(int a)&#123;
return a;
&#125;
int main()&#123;
int c &#x3D; 0;
c &#x3D; func(1，2); &#x2F;&#x2F;error．存在二义性，调用失败，编译不能通过
printf(&quot;c &#x3D; %d\n&quot;， c);
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数重载与函数指针相结合"><a href="#函数重载与函数指针相结合" class="headerlink" title="函数重载与函数指针相结合"></a>函数重载与函数指针相结合</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
函数重载与函数指针
当使用重载函数名对函数指针进行赋值时
根据重载规则挑选与函数指针参数列表一致的候选者严格匹配候选者的函数类型与函数指针的函数类型*&#x2F;
#include &lt;iostream&gt;
using namespace std;
int func(int x)&#x2F;&#x2F;int(int a)
&#123;
return x;
&#125;
int func(int a, int b)&#123;
return a + b;
&#125;
int func( const char* s)&#123;
return strlen(s);
&#125;
typedef int(*PFUNC)(int a); &#x2F;&#x2F;int(*)(int a)
typedef int(*PFUNC2)(int a， int b); &#x2F;&#x2F;int(*)(int a， int b)
int main()
&#123;
int c &#x3D; 0;
PFUNC p &#x3D; func;
c &#x3D; p(1);
printf( &quot;c &#x3D; %d\n&quot;,c);
PFUNC2 p2 &#x3D; func;
c &#x3D; p2(1，2);
printf(&quot;c &#x3D; %d\n&quot;,c);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数指针基本语法"><a href="#函数指针基本语法" class="headerlink" title="函数指针基本语法"></a>函数指针基本语法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;方法一:
&#x2F;&#x2F;声明一个函数类型
typedef void (myTypeFunc)(int a,int b);
&#x2F;&#x2F;定义一个函数指针
myTypeFunc *myfuncp &#x3D; NULL;&#x2F;&#x2F;定义一个函数指针这个指针指向函数的入口地址
&#x2F;&#x2F;方法二:
&#x2F;&#x2F;声明一个函数指针类型
typedef void (*myPTypeFunc)(int a,int b) ;&#x2F;&#x2F;声明了一个指针的数据类型
&#x2F;&#x2F;定义一个函数指针
myPTypeFunc fp &#x3D; NULL;&#x2F;&#x2F;通过函数指针类型定义了一个函数指针，
&#x2F;&#x2F;方法三:
&#x2F;&#x2F;定义一个函数指针变量
void (*myVarPFunc)(int a, int b);
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数重载总结"><a href="#函数重载总结" class="headerlink" title="函数重载总结"></a>函数重载总结</h4><blockquote>
<p>重载函数在本质上是相互独立的不同函数。</p>
<p>函数的函数类型是不同的</p>
<p>函数返回值不能作为函数重载的依据</p>
<p>函数重载是由函数名和参数列表决定的。</p>
</blockquote>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><h4 id="成员变量与成员函数"><a href="#成员变量与成员函数" class="headerlink" title="成员变量与成员函数"></a>成员变量与成员函数</h4><h3 id="封装与访问控制"><a href="#封装与访问控制" class="headerlink" title="封装与访问控制"></a>封装与访问控制</h3><h4 id="从struct说起"><a href="#从struct说起" class="headerlink" title="从struct说起"></a>从struct说起</h4><ul>
<li>当单一变量无法完成描述需求的时候,结构体类型解决了这一问题。可以将多个类型打包成一体,形成新的类型。这是c语言中封装的概念。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Date
&#123;
int year;
int month;
int day;
&#125;;
void init(Date &amp;d)&#123;
cout&lt;&lt; &quot;year,month,day : &quot;&lt;&lt;endl;
cin&gt;&gt;d.year&gt;&gt;d.month&gt;&gt;d.day;
&#125;
void print(Date &amp; d)&#123;
cout&lt;&lt;&quot;year month day&quot; &lt;&lt;endl;
cout&lt;&lt;d.year&lt;&lt;&quot; : &quot;&lt;&lt;d.month&lt;&lt;&quot; : &quot;&lt;&lt;d.day&lt;&lt;endl;
    
bool isLeapYear(Date &amp; d)
&#123;
if((d.year%4&#x3D;&#x3D;0&amp;&amp; d.year%100 !&#x3D; 0)||d.year%400 &#x3D;&#x3D; 0)
	return true;
else
	return false;
&#125;
int main()
Date d;
init(d);
print(d);
if(isLeapYear(d))
cout&lt;&lt;&quot;leap year&quot;&lt;&lt;endl;
else
cout&lt;&lt; &quot;not leap year&quot;&lt;&lt;endl;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>对C语言中结构体的操作，都是通过外部函数来实现的。比如</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void init(Date &amp;d) ;
void print(Date &amp; d);
bool isLeapYear(Date &amp; d);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="封装的访问属性"><a href="#封装的访问属性" class="headerlink" title="封装的访问属性"></a>封装的访问属性</h4><ul>
<li>struct 中所有行为和属性都是public的(默认)。</li>
<li>C++中的class可以指定行为和属性的访问方式。</li>
<li>封装,可以达到,对内开放数据,对外屏蔽数据,对外提供接口。达到了信息隐蔽的功能。</li>
<li>比如我们用struct封装的类,即知其接口,又可以直接访问其内部数据,这样却没有达到信息隐蔽的功效。而class则提供了这样的功能,屏蔽内部数据,对外开放接口。</li>
</ul>
<h4 id="用class去封装带行为的类"><a href="#用class去封装带行为的类" class="headerlink" title="用class去封装带行为的类"></a>用class去封装带行为的类</h4><ul>
<li>class封装的本质,在于将数据和行为,绑定在一起然后能过对象来完成操作。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespaec std;
class Date&#123;
    public:
    void init(Data &amp;d);
    void print(Data &amp;d);
    bool isLeapYear(Date &amp;d);
    private:
    int year;
    int month;
    int day;
&#125;;
void Data::init(Data &amp;d)&#123;
    cout&lt;&lt;&quot;year,month,day:&quot;&lt;&lt;endl;
    cin&gt;&gt;d.year&gt;&gt;d.month&gt;&gt;d.day;
&#125;
void Date::print(Date &amp; d)&#123;
cout&lt;&lt;&quot;year month day&quot;&lt;&lt;endl;
cout&lt;&lt;d.year&lt;&lt;&quot; : &quot;&lt;&lt;d.month&lt;&lt; &quot; : &quot;&lt;&lt;d.day&lt;&lt;endl;
&#125;
bool Date::isLeapYear(Date &amp; d)&#123;
if((d.year%4&#x3D;&#x3D; &amp;&amp; d.year%100 !&#x3D; 0)||d.year%400 &#x3D;&#x3D; 0)
	return true;
else
	return false;
&#125;
int main()&#123;
Date d;
d.init(d);
d.print(d);
if(d.isLeapYear(d))
cout&lt;&lt; &quot;leap year&quot;&lt;&lt;endl;
	else
cout&lt;&lt; &quot;not leap year&quot;&lt;&lt;endl;
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Date类访问自己的成员,可以不需要传引用的方式</li>
<li>封装有2层含义(把属性和方法进行封装对属性和方法进行访问控制)</li>
<li>Public修饰成员变量和成员函数可以在类的内部和类的外部被访问。Private修饰成员变量和成员函数只能在类的内部被访问。</li>
</ul>
<blockquote>
<p>struct和class关键字区别</p>
<p>在用struct定义类时，所有成员的默认属性为public</p>
<p>在用class定义类时，所有成员的默认属性为private</p>
</blockquote>
<h3 id="面向对象编程案例练习"><a href="#面向对象编程案例练习" class="headerlink" title="面向对象编程案例练习"></a>面向对象编程案例练习</h3><h4 id="求圆的周长和面积"><a href="#求圆的周长和面积" class="headerlink" title="求圆的周长和面积"></a>求圆的周长和面积</h4><blockquote>
<p>数据描述:<br>                半径，周长，面积均用实型数表示<br>数据处理:<br>                输入半径r ;</p>
<p>​                计算周长= 2 * Π * r ;</p>
<p>​                计算面积=Π * r^2 ;</p>
<p>​                输出半径，周长，面积;</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;不用结构化
&#x2F;&#x2F;count the girth and area of circle
#include &lt;iostream&gt;
using namespace std;
int main ( void)
&#123;
double r, girth，area ;
const double PI &#x3D; 3.1415 ;
cout &lt;&lt; &quot;Please input radius : \n&quot; ;&#x2F;&#x2F;操作符重载
cin &gt;&gt; r ; &#x2F;&#x2F;输入
girth &#x3D; 2 *PI * r ;
area &#x3D; PI* r * r ;
cout &lt;&lt; &quot;radius &#x3D; &quot; &lt;&lt; r &lt;&lt; endl ;
cout &lt;&lt; &quot;girth &#x3D; &quot; &lt;&lt; girth &lt;&lt; endl ;
cout &lt;&lt; &quot;area &#x3D; &quot; &lt;&lt; area &lt;&lt; endl ;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;用面向对象的方法
#include&lt;iostream&gt;
using namespace std;
class Circle
&#123;
private:
	double radius ; &#x2F;&#x2F;成员变量
public : &#x2F;&#x2F;类的访问控制
	void set_Radius( double r )&#123;
	radius &#x3D; r;&#125;&#x2F;&#x2F;成员函数
	double Get_Radius()&#123;
	return radius;&#125;&#x2F;&#x2F;通过成员函数设置成员变量
    double Get_Girth()&#123;
	return2 *3.14f *radius;&#125;&#x2F;&#x2F;通过成员函数获取成员变量
	double Get_Area()&#123;
	return3.14f *radius *radius;
    &#125;
&#125;;
int main(void)
    &#123;
Circle A，B ; &#x2F;&#x2F;用类定义对象
A.Set_Radius( 6.23 ) ;&#x2F;&#x2F;类的调用
	cout &lt;&lt; &quot;A.Radius &#x3D; &quot; &lt;&lt; A.Get_Radius() &lt;&lt; endl ;
    cout &lt;&lt; &quot;A.Girth &#x3D; &quot; &lt;&lt;A.Get_Girth() &lt;&lt; endl ;
    cout &lt;&lt; &quot;A.Area &#x3D; &quot; &lt;&lt; A.Get_Area() &lt;&lt; endl ;
    B.Set_Radius( 10.5 ) ;
	cout &lt;&lt; &quot;B.radius &#x3D; &quot; &lt;&lt; B.Get_Radius() &lt;&lt; endl ;
    cout &lt;&lt;&quot;B.Girth&#x3D;&quot; &lt;&lt; B.Get_Girth( ) &lt;&lt; endl ;
	cout &lt;&lt;&quot;B.Area &#x3D; &quot; &lt;&lt;B.Get_Area() &lt;&lt; endl ;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="C语言和C-语言的关系"><a href="#C语言和C-语言的关系" class="headerlink" title="C语言和C++语言的关系"></a>C语言和C++语言的关系</h4><ul>
<li><p><img src="E:\Computer\myblog\hexo\source_posts\C-基础\20220703184846-16568453665731.png" alt="20220703184846"></p>
</li>
<li><p>C语言实在实践过程中逐步完善起来的</p>
</li>
</ul>
<blockquote>
<p>没有深思熟虑的设计过程</p>
<p>使用时存在很多“灰色地带”</p>
<p>残留量过多低级语言的特征</p>
<p>直接利用指针进行内存操作</p>
</blockquote>
<ul>
<li>C语言+面向对象方法论===&gt;Objective C/C++</li>
</ul>
<blockquote>
<p>C语言和C++并不是对立的竞争关系<br>C++是C语言的加强，是一种更好的C语言<br>C++是以C语言为基础的，并且完全兼容C语言的特性</p>
</blockquote>
<ul>
<li>学习C++并不会影响原有的C语言知识，相反会根据加深对C的认知;</li>
<li>学习C++可以接触到更多的软件设计方法，并带来更多的机会。</li>
<li>C++是一种更强大的C，通过学习C++能够掌握更多的软件设计方法.</li>
<li>C++是Java/C#/D等现代开发语言的基础，学习C++后能够快速掌握这些语言.</li>
<li>C++是各大知名软件企业挑选人才的标准之一.</li>
</ul>
<h4 id="综合面向对象案例分析"><a href="#综合面向对象案例分析" class="headerlink" title="综合面向对象案例分析"></a>综合面向对象案例分析</h4><blockquote>
<p>面向对象练习1</p>
<p>设计立方体类(cube)，求出立方体的面积和体积</p>
<p>求两个立方体，是否相等（全局面数和成员面数）</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;立方体类
class Cube
&#123;
public:
	void setABC(int a, int b, int c)
	&#123;
		m_a &#x3D; a;
		m_b &#x3D; b;
		m_c &#x3D; c;
	&#125;
	int getArea()
	&#123;
		return (m_a*m_b) * 2 + (m_a*m_c) * 2 + (m_b*m_c) * 2;
	&#125;

	int getVolume()
	&#123;
		return (m_a*m_b*m_c);
	&#125;

	int getA()
	&#123;
		return m_a;
	&#125;

	int getB()
	&#123;
		return m_b;
	&#125;

	int getC()
	&#123;
		return m_c;
	&#125;

	&#x2F;&#x2F;同类之间无私处
	bool judgeCube(Cube &amp;another)
	&#123;
		if (m_a &#x3D;&#x3D; another.m_a &amp;&amp;
			m_b &#x3D;&#x3D; another.getB() &amp;&amp;
			m_c &#x3D;&#x3D; another.getC()) &#123;
			return true;
		&#125;
		else &#123;
			return false;
		&#125;
	&#125;
private:
	int m_a;
	int m_b;
	int m_c;
&#125;;

&#x2F;&#x2F;全局函数
bool judgeCube(Cube &amp;c1, Cube &amp;c2)
&#123;
	if (c1.getA() &#x3D;&#x3D; c2.getA() &amp;&amp;
		c1.getB() &#x3D;&#x3D; c2.getB() &amp;&amp;
		c1.getC() &#x3D;&#x3D; c2.getC()) &#123;
		return true;
	&#125;
	else &#123;
		return false;
	&#125;
&#125;

int main(void)
&#123;
	Cube c1;
	c1.setABC(10, 20, 30);

	Cube c2;
	c2.setABC(10, 20, 30);

	cout &lt;&lt; &quot;c1 的体积是&quot; &lt;&lt; c1.getVolume() &lt;&lt; endl;
	cout &lt;&lt; &quot;c1 的面积是&quot; &lt;&lt; c1.getArea() &lt;&lt; endl;

	if (judgeCube(c1, c2) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;相等&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;不相等&quot; &lt;&lt; endl;
	&#125;
	cout &lt;&lt; &quot; ------ &quot; &lt;&lt; endl;

	if (c1.judgeCube(c2) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;相等&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;不相等&quot; &lt;&lt; endl;
	&#125;


	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>面向对象练习2<br>设计一个圆形类（AdvCircle)，和一个点类（ Point)，</p>
<p>计算点在圆内部还是圆外部:</p>
<p>求点和圆的关系(圆内和圆外)</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;点类
class Point
&#123;
public:
	void setXY(int x, int y)
	&#123;
		m_x &#x3D; x;
		m_y &#x3D; y;
	&#125;

	int getX()
	&#123;
		return m_x;
	&#125;

	int getY()
	&#123;
		return m_y;
	&#125;
private:
	int m_x;
	int m_y;
&#125;;

&#x2F;&#x2F;圆类
class Circle
&#123;
public:
	void setXY(int x, int y)
	&#123;
		x0 &#x3D; x;
		y0 &#x3D; y;
	&#125;

	void setR(int r)
	&#123;
		m_r &#x3D; r;
	&#125;

	&#x2F;&#x2F;提供一个判断点是否在圆内
	&#x2F;&#x2F;true 在内部
	&#x2F;&#x2F;false 在外部
	bool judgePoint(Point &amp;p)
	&#123;
		int dd;

		dd &#x3D; (p.getX() - x0)*(p.getX() - x0) + (p.getY() - y0)*(p.getY() - y0);

		if (dd &gt; m_r*m_r) &#123;
			return false;
		&#125;
		else &#123;
			return true;
		&#125;
	&#125;


private:
	int x0;
	int y0;
	int m_r;
&#125;;

int main(void)
&#123;
	Circle c;
	c.setXY(2, 2);
	c.setR(4);

	Point p;
	p.setXY(8, 8);

	if (c.judgePoint(p) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;圆的内部&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;圆的外部&quot; &lt;&lt; endl;
	&#125;



	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>面向对象练习3<br>对于第二个案例，类的声明和类的实现分开</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Circle.h
#pragma once
#include &quot;Point.h&quot;

class Circle
&#123;
public:
	void setXY(int x, int y);

	void setR(int r);

	&#x2F;&#x2F;提供一个判断点是否在圆内
	&#x2F;&#x2F;true 在内部
	&#x2F;&#x2F;false 在外部
	bool judgePoint(Point &amp;p);

private:
	int x0;
	int y0;
	int m_r;
&#125;;

&#x2F;&#x2F;Circle.cpp
#include &quot;Circle.h&quot;

void Circle::setXY(int x, int y)
&#123;
	x0 &#x3D; x;
	y0 &#x3D; y;
&#125;

void Circle::setR(int r)
&#123;
	m_r &#x3D; r;
&#125;

&#x2F;&#x2F;提供一个判断点是否在圆内
&#x2F;&#x2F;true 在内部
&#x2F;&#x2F;false 在外部
bool Circle::judgePoint(Point &amp;p)
&#123;
	int dd;

	dd &#x3D; (p.getX() - x0)*(p.getX() - x0) + (p.getY() - y0)*(p.getY() - y0);

	if (dd &gt; m_r*m_r) &#123;
		return false;
	&#125;
	else &#123;
		return true;
	&#125;
&#125;

&#x2F;&#x2F;Point.h
#pragma once


class Point
&#123;
public:
	void setXY(int x, int y);

	int getX();

	int getY();
private:
	int m_x;
	int m_y;
&#125;;

&#x2F;&#x2F;Point.cpp
#include &quot;Point.h&quot;


void Point::setXY(int x, int y)
&#123;
	m_x &#x3D; x;
	m_y &#x3D; y;
&#125;

int  Point::getX()
&#123;
	return m_x;
&#125;

int Point::getY()
&#123;
	return m_y;
&#125;

&#x2F;&#x2F;main.cpp
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;Circle.h&quot;
#include &quot;Point.h&quot;

using namespace std;

int main(void)
&#123;
	Circle c;
	c.setR(4);
	c.setXY(2, 2);

	Point p;
	p.setXY(8, 8);

	if (c.judgePoint(p) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;nei&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;wai&quot; &lt;&lt; endl;
	&#125;
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>判断两个圆是否相交</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

&#x2F;&#x2F;点类
class Point
&#123;
public:
	void setXY(int x, int y)
	&#123;
		m_x &#x3D; x;
		m_y &#x3D; y;
	&#125;


	&#x2F;&#x2F;计算两点距离的方法
	double pointDistance(Point &amp;another)
	&#123;
		int d_x &#x3D; m_x - another.m_x;
		int d_y &#x3D; m_y - another.m_y;

		double dis &#x3D; sqrt(d_x*d_x + d_y*d_y);

		return dis;
	&#125;
private:
	int m_x;
	int m_y;
&#125;;

class Circle
&#123;
public:
	void setR(int r)
	&#123;
		m_r &#x3D; r;
	&#125;

	void setXY(int x, int y)
	&#123;
		p0.setXY(x, y);
	&#125;

	&#x2F;&#x2F;判断圆是否跟我相交
	bool isIntersection(Circle &amp;another)
	&#123;
		&#x2F;&#x2F;两个半径之和
		int rr &#x3D; m_r + another.m_r;
		&#x2F;&#x2F;两圆心之间距离
		double dis &#x3D; p0.pointDistance(another.p0);

		if (dis &lt;&#x3D; rr) &#123;
			&#x2F;&#x2F;相交
			return true;
		&#125;
		else &#123;
			return false;
		&#125;
	&#125;
private:
	int m_r;
	Point p0;
&#125;;

int main(void)
&#123;
	Circle c1, c2;

	int x, y, r;

	cout &lt;&lt; &quot;请输入第一个圆的半径&quot; &lt;&lt; endl;
	cin &gt;&gt; r;
	c1.setR(r);
	cout &lt;&lt; &quot;请输入第一个圆的x&quot; &lt;&lt; endl;
	cin &gt;&gt; x;
	cout &lt;&lt; &quot;请输入第一个圆的y&quot; &lt;&lt; endl;
	cin &gt;&gt; y;
	c1.setXY(x, y);


	cout &lt;&lt; &quot;请输入第2个圆的半径&quot; &lt;&lt; endl;
	cin &gt;&gt; r;
	c2.setR(r);
	cout &lt;&lt; &quot;请输入第2个圆的x&quot; &lt;&lt; endl;
	cin &gt;&gt; x;
	cout &lt;&lt; &quot;请输入第2个圆的y&quot; &lt;&lt; endl;
	cin &gt;&gt; y;
	c2.setXY(x, y);

	if (c1.isIntersection(c2) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;相交&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;不想交&quot; &lt;&lt; endl;
	&#125;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="对象的构造和析构"><a href="#对象的构造和析构" class="headerlink" title="对象的构造和析构"></a>对象的构造和析构</h3><h4 id="如果没有构造函数"><a href="#如果没有构造函数" class="headerlink" title="如果没有构造函数"></a>如果没有构造函数</h4><ul>
<li>如果不用构造函数初始化，该怎么办︰<ul>
<li>为每个类都提供一个public的initialize函数;</li>
<li>对象创建后立即调用initialize函数进行初始化。</li>
</ul>
</li>
<li>缺点<ul>
<li>initialize只是一个普通的函数，必须显示的调用</li>
<li>一旦由于失误的原因，对象没有初始化，那么结果将是不确定的没有初始化的对象，其内部成员变量的值是不定的。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
public:
void init(int a, int b)&#123;
	m_a &#x3D; a;
	m_b &#x3D; b;
&#125;
private:
	int m_a;
    int m_b;
&#125;;
int main(void)&#123;
Test t1;
int a &#x3D; 10;int b &#x3D; 20;
t1.init(a, b);
Test tArray[3];
&#x2F;&#x2F;手动调用显示初始化函数
tArray[0].init(0，0);
tArray[1].init(0，0);
tArray[2].init(0，0);
Test t21;
&#x2F;&#x2F;手动调用显示初始化函数
    t21.init(0，0);
Test t22;
&#x2F;&#x2F;手动调用显示初始化函数
    t22.init(0，0);
Test t23;
&#x2F;&#x2F;手动调用显示初始化函数
    t23.init(0，0);
&#x2F;&#x2F;在这种场景之下显示的初始化方案显得很蹩脚
    Test tArray2[3] &#x3D; &#123;t21，t22,t23&#125;;
&#x2F;&#x2F;在这种场景之下,满足不了,编程需要
Test tArray3[1999] &#x3D; &#123;t21,t22,t23&#125;;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>所以C++对类提供了一个给对象的初始化方案，就是构造函数。</li>
</ul>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul>
<li>定义<ul>
<li>C++中的类可以定义与类名相同的特殊成员函数，这种与类名相同的成员函数叫做构造函数.</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class类名&#123;
	类名(形式参数)&#123;
	构造体
	&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
    A(形参)&#123;
        
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>调用<ul>
<li>自动调用∶一般情况下C++编译器会自动调用构造函数.</li>
<li>手动调用∶在一些情况下则需要手工调用构造函数.</li>
</ul>
</li>
</ul>
<h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><ul>
<li>定义<ul>
<li>C++中的类可以定义一个特殊的成员函数清理对象，这个特殊的成员函数叫做析构函数.</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class类名&#123;
~类名()&#123;析构体&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
	~A()&#123;
	
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>规则:<br>1对象销毁时,自动调用。完成销毁的善后工作。</p>
<p>2无返值,与类名同。无参。不可以重载与默认参数</p>
</blockquote>
<ul>
<li>析构函数的作用,并不是删除对象,而在对象销毁前完成的一些清理工作。</li>
</ul>
<h4 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Test&#123;
public:
&#x2F;&#x2F;无参数构造函数
    Test()&#123;
        ;
    &#125;
&#x2F;&#x2F;带参数的构造函数
    Test(int a, int b)&#123;
        ;
    &#125;
&#x2F;&#x2F;赋值构造函数
	Test(const Test &amp;obj)
    &#123;
        ;
    &#125;
	private:
	int a;int b;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无参构造函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
	public:
&#x2F;&#x2F;无参数构造函数
    Test()
    &#123;
		a &#x3D; 0;b &#x3D; 0;
		cout &lt;&lt;&quot;Test()无参构造函数执行&quot;&lt;&lt;endl;
    &#125;
	private:
	int a;int b;
&#125;;
int main(void)&#123;
	Test t;&#x2F;&#x2F;调用无参构造函数
    return 0;
    &#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有参数构造函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
private:
int a;
public:
&#x2F;&#x2F;带参数的构造函数
    Test(int a)
    &#123;
        cout &lt;&lt;&quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt;endl;
	&#125;
	Test( int a, int b)&#123;
		cout &lt;&lt;&quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; &quot;, b &#x3D; &quot; &lt;&lt; b &lt;&lt;endl;
	&#125;
&#125;;
int main()&#123;
Test t1(10);
&#x2F;&#x2F;调用有参构造函数Test( int a)
Test t2(10,20);
&#x2F;&#x2F;调用有参构造函数Test(int a, int b)
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>拷贝构造函数<ul>
<li>由己存在的对象,创建新对象。也就是说新对象,不由构造器来构造,而是由拷贝构造器来完成。拷贝构造器的格式是固定的。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class类名
&#123;
	类名(const类名&amp; another)
	&#123;
		拷贝构造体
	&#125;
&#125;
class A&#123;
    A(const A&amp; another)&#123;
        
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用拷贝构造函数的几种场合</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
	public:
		Test()&#x2F;&#x2F;无参构造函数&#123;
			cout&lt;&lt;&quot;我是无参构造函数，被调用了&quot;&lt;&lt;endl;
		&#125;
		Test(int a)l&#x2F;&#x2F;带参数的构造函数&#123;
			m_a &#x3D; a;
		&#125;
		Test(const Test &amp;another_obj)&#x2F;&#x2F;拷贝构造函数&#123;
		cout&lt;&lt;&quot;我也是构造函数，我是通过另外一个对象，来初始化我自己&quot;&lt;&lt;endl;
		m_a &#x3D; another_obj.m_a;
		&#125;
		~Test()&#123;
		cout&lt;&lt;&quot;我是析构函数，自动被调用了&quot;&lt;&lt;endl;
		&#125;
		void printT()&#123;
		cout &lt;&lt; &quot;m_a &#x3D; &quot; &lt;&lt;m_a &lt;&lt;endl;
		&#125;
	private:
		int m_a;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;拷贝构造函数的第一个应用场景
int main()&#123;
	Test t2&#x3D;t1;&#x2F;&#x2F;用对象t1来初始化对象t2
	t2.printT();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//拷贝构造函数的第二个应用场景</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    Test <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Test <span class="token function">t2</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">printT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;拷贝构造函数的第三个应用场景
#include&lt;iostream&gt;
using namespace std;
class Location&#123;
    public:
    &#x2F;&#x2F;带参数的构造函数
    Location(int xx&#x3D;0,int yy&#x3D;0)&#123;
        X&#x3D;xx;
        Y&#x3D;yy;
        cout&lt;&lt;&quot;Constructor Object.&quot;&lt;&lt;endl;
    &#125;
    &#x2F;&#x2F;copy构造函数 完成对象的初始化
    Location(const Location &amp;obj)&#123;
        X&#x3D;obj.X;
        Y&#x3D;obj.Y;
        cout&lt;&lt;&quot;Copy Constructor.&quot;&lt;&lt;endl;
    &#125;
    ~Location()&#123;
        cout&lt;&lt;X&lt;&lt;&quot;,&quot;&lt;&lt;Y&lt;&lt;&quot;Obejct destroyed.&quot;&lt;&lt;endl;
    &#125;
    int GetX()&#123;
        return X;
    &#125;
    int GetY()&#123;
        return Y;
    &#125;
    
   private:
    	int X;
    	int Y;
&#125;;
void func(Location p)&#x2F;&#x2F;会执行p &#x3D; b 的操作，p会调用copy构造函数进行初始化
&#123;
    cout &lt;&lt;&quot;func begin&quot; &lt;&lt;endl;
	cout&lt;&lt;p.GetX( )&lt;&lt;endl;
	cout &lt;&lt;&quot;func end&quot; &lt;&lt;endl;
&#125;
void test()&#123;
	Location a(1,2); &#x2F;&#x2F;对象a 调用带参数的构造函数进行初始化
    Location b &#x3D; a;&#x2F;&#x2F;对象b 调用copy构造函数进行初始化
    cout &lt;&lt;&quot;----&quot; &lt;&lt;endl;
	func(b);
	&#x2F;&#x2F; b实参取初始化形参p,会调用copy构造函数
&#125;
int main(void)&#123;
	test();
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Location
&#123;
    public:
	&#x2F;&#x2F;带参数的构造函数
	Location( int xx &#x3D; 0 , int yy &#x3D; 0 )&#123;
		X&#x3D; xx ;Y &#x3D; yy ;
		cout &lt;&lt; &quot;Constructor Object.&quot; &lt;&lt;endl;
	&#125;
    &#x2F;&#x2F; copy构造函数完成对象的初始化
	Location( const Location &amp; obj) &#x2F;&#x2F; copy构造函数
    &#123;
		x &#x3D; obj.X;
        Y &#x3D; obj.Y;	
		cout &lt;&lt;&quot;Copy Constructor.&quot; &lt;&lt;endl;
	&#125;
	~Location()&#123;
		cout &lt;&lt; X &lt;&lt; &quot;,&quot; &lt;&lt; Y &lt;&lt; &quot; object destroyed.&quot; &lt;&lt; endl ;
	&#125;
	int Getx () &#123;
		return x;
	&#125;
	int GetY ) &#123;
		return Y;
	&#125;
	private :
	int X;
    int Y;
&#125;;
&#x2F;&#x2F;g函数返回一个元素
&#x2F;&#x2F;结论1 ∶函数的返回值是一个元素（复杂类型的)，返回的是一个新的匿名对象(所以会调用匿名对象类的copy构造函数)
&#x2F;&#x2F;
&#x2F;&#x2F;结论2:有关匿名对象的去和留
&#x2F;&#x2F;如果用匿名对象初始化另外一个同类型的对象，匿名对象转成有名对象
&#x2F;&#x2F;如果用匿名对象赋值给另外一个同类型的对象，匿名对象被析构
&#x2F;&#x2F;
&#x2F;&#x2F;设计编译器的大牛们:
&#x2F;&#x2F;我就给你返回一个新对象(没有名字匿名对象)
Location g()&#123;
	Location temp(1，2);
    return temp;
&#125;
void test1()&#123;
g();
&#125;
void test2()&#123;
&#x2F;&#x2F;用匿名对象初始化m 此时c++编译器直接把匿名对转成m;(扶正）从匿名转成有名字了m
&#x2F;&#x2F;就是将这个匿名对象起了名字m,他们都是同一个对象
Location m &#x3D; g();
printf(&quot;匿名对象,被扶正,不会析构掉\n&quot; );
    cout&lt;&lt;m.GetX()&lt;&lt;endl; 
&#125;
void test3()&#123;
&#x2F;&#x2F;用匿名对象赋值给m2后，匿名对象被析构
    Location m2(1，2);
	m2 &#x3D; g();
	printf(&quot;因为用匿名对象&#x3D;给m2，匿名对象,被析构\n&quot;);
    cout&lt;&lt;m2.GetX( )&lt;&lt;endl;
&#125;
int main(void)&#123;
	test1();
    test2();
    test3();
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>默认构造函数<ul>
<li>默认无参构造函数<ul>
<li>当类中没有定义构造函数时，编译器默认提供一个无参构造函数，并且其函数体为空</li>
</ul>
</li>
<li>默认拷贝构造函数<ul>
<li>当类中没有定义拷贝构造函数时，编译器默认提供一个默认拷贝构造函数，简单的进行成员变量的值复制</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="构造函数规则"><a href="#构造函数规则" class="headerlink" title="构造函数规则"></a>构造函数规则</h4><blockquote>
<p>规则:<br>1系统提供默认的拷贝构造器。一经实现,不复存在。</p>
<p>2系统提供的时等位拷贝,也就是所谓的浅浅的拷贝。</p>
<p>3要实现深拷贝,必须要自定义。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;当类中定义了拷贝构造函数时，c++编译器不会提供无参数构造函数
&#x2F;&#x2F;当类中定义了有参数构造函数是,c++编译器不会提供无参数构造函数
&#x2F;&#x2F;在定义类时，只要你写了构造函数,则必须要用
class Test
&#123;
public:
	Test(const Test&amp; obj) &#x2F;&#x2F;copy构造函数作用:用一个对象初始化另外一个对象
    &#123;
		a &#x3D; obj.a + 100;b &#x3D; obj.b + 100;
	&#125;
#if	0
	Test()
    &#123;
	&#125;
#endif
	void printT()&#123;
	cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot;b: &quot;&lt;&lt;b&lt;&lt; endl;&#125;
	private:
		int a;
    	int b;
&#125;;
int main( void)&#123;
	Test t1; &#x2F;&#x2F;error，没有合适的构造函数
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><ul>
<li>系统提供默认的拷贝构造器,一经定义不再提供。但系统提供的默认拷贝构造器是等位拷贝,也就是通常意义上的浅拷贝。如果类中包含的数据元素全部在栈上,浅拷贝也可以满足需求的。但如果堆上的数据,则会发生多次析构行为。</li>
<li><img src="http://qiniu.orangew.cn/img/20220703213915.png" alt="20220703213915" style="zoom:33%;" /></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Name
&#123;
	public:
		Name ( const char *myp)&#123;
		m_len &#x3D; strlen(myp);
		m_p &#x3D;(char *) malloc(m_len + 1); &#x2F;&#x2F;
   		strcpy(m_p, myp);
	&#125;
&#x2F;&#x2F; Name obj2 &#x3D; obj1;
&#x2F;&#x2F;解决方案:手工的编写拷贝构造函数使用深copy
    	Name( const Name&amp; obj1)
		&#123;
			m_len &#x3D; obj1.m_len;
			m_p &#x3D; (char * )malloc(m_len + 1);
        	strcpy(m_p,obj1.m_p);
		&#125;
		~Name()&#123;
		if (m_p !&#x3D; NULL)&#123;
			free(m_p);
            m_p &#x3D; NULL;
            m_len &#x3D; 0;
		&#125;
	&#125;
    private:
		char *m_p ;
    	int m_len;
&#125;;
&#x2F;&#x2F;对象析构的时候出现coredump
void test()&#123;
	Name obj1( &quot;abcdefg&quot; );
	Name obj2 &#x3D; obj1;&#x2F;&#x2F;C++编译器提供的默认的copy构造函数惇浅拷贝
    Name obj3(&quot;abc&quot; );
&#x2F;&#x2F;obj3 &#x3D; obj2;&#x2F;&#x2F;当执行&#x3D;操作的时候，C++编译器也是使用的默认拷贝构造函数，也是浅拷贝
&#125;
int main(void)&#123;
test();return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="构造函数初始化列表"><a href="#构造函数初始化列表" class="headerlink" title="构造函数初始化列表"></a>构造函数初始化列表</h4><ul>
<li>如果我们有一个类成员，它本身是一个类或者是一个结构，而且这个成员它只有一个带参数的构造函数，没有默认构造函数。这时要对这个类成员进行初始化，就必须调用这个类成员的带参数的构造函数，</li>
<li>如果没有初始化列表，那么他将无法完成第一步，就会报错。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class A &#123;
	public:
	A(int a) &#123;
	m_a &#x3D; a;
&#125;
	private:
	int m_a;
&#125;;
class B &#123;
    public:
	B(int b) &#123;
	m_b &#x3D; b;
&#125;
	private:
	int m_b;
	A obja; &#x2F;&#x2F;当A的对象是B类的一个成员的时候，在初始化B对象的时候，
	&#x2F;&#x2F;无法给B分配空间，因为无法初始化A类对象
&#125;;
int main( void)&#123;
A obja(10);
B objb(20) ; &#x2F;&#x2F; error,
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class ABC&#123;
public:
	ABC( int a, int b, int c)&#123;
		this-&gt;a &#x3D; a;
        this-&gt;b &#x3D; b;
        this-&gt;c &#x3D; c;
		printf( &quot;a: %d ,b: %d , c: %d \n&quot;, a, b, c);
        printf( &quot;ABC construct ..\n&quot; );
&#125;
	~ABC()&#123;
		printf( &quot;a: %d ,b: %d , c: %d \n&quot;, a, b,c);
        printf( &quot;~ABC() ..\n&quot; );
&#125;
	private:
		int a;
    	int b;
    	int c;
&#125;;
class MyD&#123;
public:
	MyD():abc1(1,2,3),abc2(4,5,6),m(100)&#123;
	cout&lt;&lt;&quot;MyD()&quot;&lt;&lt;endl;&#125;
    ~MyD()&#123;
	cout&lt;&lt;&quot;~MyD()&quot;&lt;&lt;endl;
	&#125;
private:
	ABC abc1;
    ABC abc2;
    const int m;
&#125;;
int main()&#123;
	MyD myD;
    return 0;
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当类成员中含有一个const对象时，或者是一个引用时，他们也必须要通过成员初始化列表进行初始化，因为这两种对象要在声明后马上初始化，而在构造函数中，做的是对他们的赋值，这样是不被允许的。</li>
<li>初始化列表中的初始化顺序与声明顺序有关,与前后赋值顺序无关。</li>
</ul>
<h4 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h4><ul>
<li>分析下列代码构造器和析构器的执行顺序</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include	 &lt;iostream&gt;
using namespace	std;

class	ABCD
&#123;
public:
	ABCD(int	a, int	b, int	c)
	&#123;
		_a &#x3D; a;
		_b &#x3D; b;
		_c &#x3D; c;
		printf(&quot;ABCD()	construct,	a: %d,b: %d,c: %d		 \n&quot;, _a, _b, _c);
	&#125;
	~ABCD()
	&#123;
		printf(&quot;~ABCD()	construct,a: %d,b: %d,c: %d		 \n&quot;, _a, _b, _c);
	&#125;
	int	getA()
	&#123;
		return	_a;
	&#125;
private:
	int	_a;
	int	_b;
	int	_c;
&#125;;

class	MyE
&#123;
public:

	MyE() :abcd1(1, 2, 3), abcd2(4, 5, 6), m(100)
	&#123;
		cout &lt;&lt; &quot;MyE()&quot; &lt;&lt; endl;
	&#125;
	~MyE()
	&#123;
		cout &lt;&lt; &quot;~MyE()&quot; &lt;&lt; endl;
	&#125;

	MyE(const	MyE	&amp;	obj) :abcd1(7, 8, 9), abcd2(10, 11, 12), m(100)
	&#123;
		printf(&quot;MyD(const	MyD	&amp;	obj) \n&quot;);
	&#125;
public:
	ABCD	abcd1;	 &#x2F;&#x2F;c++编译器不知道如何构造abc1
	ABCD	abcd2;
	const int	m;
&#125;;

int	doThing(MyE	mye1)&#x2F;&#x2F;mye1.拷贝构造(main::myE)
&#123;
	printf(&quot;doThing()	mye1.abc1.a: %d \n&quot;, mye1.abcd1.getA());
	return 0;
&#125;
int	run()
&#123;
	MyE	myE;
	doThing(myE);
	return 0;
&#125;

int	run2()
&#123;
	printf(&quot;run2	start.. \n&quot;);
	&#x2F;&#x2F;ABCD(400, 500, 600);	 &#x2F;&#x2F;临时对象的⽣命周期		
	ABCD	abcd	&#x3D;	ABCD(100,	200,	300);
	printf(&quot;run2	end\n&quot;);
	return 0;
&#125;

int	main(void)
&#123;
	run2();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>构造函数再调用构造函数，分析以下代码结果</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include	 &lt;iostream&gt;
using namespace	std;

&#x2F;&#x2F;构造中调⽤构造是危险的⾏为
class	MyTest
&#123;
public:
	MyTest(int	a, int	b, int	c)
	&#123;
		_a &#x3D; a;
		_b &#x3D; b;
		_c &#x3D; c;
	&#125;
	MyTest(int	a, int	b)
	&#123;
		_a &#x3D; a;
		_b &#x3D; b;
		MyTest(a, b, 100);&#x2F;&#x2F;创建一个匿名对象	
		&#x2F;&#x2F;
	&#125;
	~MyTest()
	&#123;
		printf(&quot;MyTest~: %d,	 %d,	 %d\n&quot;, _a, _b, _c);
	&#125;
	int	getC()
	&#123;
		return	_c;
	&#125;
	void	setC(int	val)
	&#123;
		_c &#x3D; val;
	&#125;

private:
	int	_a;
	int	_b;
	int	_c;
&#125;;

int	main()
&#123;
	MyTest	t1(1, 2);
	printf(&quot;c: %d\n&quot;, t1.getC());	 &#x2F;&#x2F;请问c的值是？
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220703221844.png" alt="20220703221844"></p>
<h3 id="对象动态建立和释放new和delete"><a href="#对象动态建立和释放new和delete" class="headerlink" title="对象动态建立和释放new和delete"></a>对象动态建立和释放new和delete</h3><ul>
<li>在软件开发过程中，常常需要动态地分配和撤销内存空间，例如对动态链表中结点的插入与删除。在C语言中是利用库函数malloc和free来分配和撤销内存空间的。C++提供了较简便而功能较强的运算符new和delete来取代malloc和free函数。</li>
<li>new和delete是运算符，不是函数，因此执行效率高。</li>
<li>虽然为了与c语言兼容，C++仍保留malloc和free函数，但建议用户不用malloc和free函数，而用new和delete运算符。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">new int;
&#x2F;&#x2F;开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)
new int(100);
&#x2F;&#x2F;开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址
new char[10];
&#x2F;&#x2F;开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址
new int[5][4];
&#x2F;&#x2F;开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址
float *p&#x3D;new float (3.14159);
&#x2F;&#x2F;开辟一个存放单精度数的空间，并指定该实数的初值为&#x2F;&#x2F;3.14159，将返回的该空间的地址赋给指针变量p
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>​    new运算符动态分配堆内存<br>​    使用形式:</p>
<p>​    指针变量=new类型(常量) ;<br>​    指针变量=new类型[表达式];<br>​    作用:从堆分配一块“类型”大小的存储空间,返回首地址</p>
<p>​    其中:“常量”是初始化值，可缺省<br>​    创建数组对象时，不能为对象指定初始值</p>
<p>​    delete运算符释放已分配的内存空间<br>​    使用形式:<br>​    delete 指针变量﹔</p>
<p>​    delete[]指针变量﹔<br>​    其中:“指针变量”必须是一个new返回的指针</p>
</blockquote>
<ul>
<li>用new分配数组空间时不能指定初值。如果由于内存不足等原因而无法正常分配空间，则new会返回一个空指针NULL，用户可以根据该指针的值判断分配空间是否成功。</li>
</ul>
<blockquote>
<p>malloc不会调用类的构造函数,而new会调用类的构造函数</p>
<p>Free不会调用类的析构函数，而delete会调用类的析构函数</p>
</blockquote>
<h3 id="静态成员变量和成员函数"><a href="#静态成员变量和成员函数" class="headerlink" title="静态成员变量和成员函数"></a>静态成员变量和成员函数</h3><ul>
<li>在C++中,静态成员是属于整个类的而不是某个对象,静态成员变量只存储一份供所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实现多个对象之间的数据共享不会破坏隐藏的原则,保证了安全性还可以节省内存。</li>
<li>类的静态成员,属于类,也属于对象,但终归属于类。</li>
</ul>
<h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h4><blockquote>
<p>//声明<br>static数据类型成员变量; //在类的内部<br>//初始化<br>数据类型类名::静态数据成员=初值;//在类的外部<br>//调用<br>类名::静态数据成员类对象.静态数据成员</p>
</blockquote>
<blockquote>
<p>案例：生成一个Box类，要求所在Box的高度height一致</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Box
&#123;
	public:
		Box(int 1, int w) : length( l),width(w) &#123;
		&#125;
	int volume()&#123;
		return length * width * height;
	&#125;
	static int height;
    int length;
	int width;
&#125;;
int Box::height &#x3D; 5;
int main()
&#123;
&#x2F;&#x2F;cout&lt;&lt;sizeof( Box )&lt;&lt;endl;
    &#x2F;&#x2F;Box b(2,3);
&#x2F;&#x2F;cout&lt;&lt;sizeof(b)&lt;&lt;endl;
cout&lt;&lt;Box::height&lt;&lt;endl;
Box b(1,1);
cout&lt;&lt;b.height&lt;&lt;endl;
cout&lt;&lt;b.volume( )&lt;&lt;endl;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1,static成员变量实现了同类对象间信息共享。</p>
<p>2.static成员类外存储,求类大小,并不包含在内。</p>
<p>3.static成员是命名空间属于类的全局变量,存储在data 区。</p>
<p>4,static成员只能类外初始化。</p>
<p>5,可以通过类名访问(无对象生成时亦可),也可以通过对象访问。</p>
</blockquote>
<h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><blockquote>
<p>//声明<br>static函数声明<br>//调用<br>类名::函数调用</p>
<p>类对象.函数调用</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class student
&#123;
public:
Student(int n,int a,float s) :num(n),age(a),score(s)&#123;&#125;
    void total()&#123;
		count++;
		sum +&#x3D; score;
	&#125;
	static float average();
private:
	int num;
    int age;
	float score;
	static float sum;
    static int count;
&#125;;
float Student:: sum &#x3D; 0;
int Student:: count &#x3D; 0;
float Student::average() &#123;
return sum&#x2F; count;
&#125;
int main()
Sudent stu[3]&#x3D; &#123;
	Sudent(1001,14,70),
    Sudent(1002,15,34),
    Sudent(1003,16,90)&#125;;
for(int i&#x3D;0 i&lt;3; i++) &#123;
	stu[i].total();
&#125;
cout&lt;&lt;Student::average()&lt;&lt;endl;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>静态成员函数的意义,不在于信息共享,数据沟通,而在于管理静态数据成员，完成对静态数据成员的封装。</li>
<li>静态成员函数只能访问静态数据成员。原因:非静态成员函数,在调用时this指针被当作参数传进。而静态成员函数属于类,而不属于对象,没有 this指针。</li>
</ul>
<h3 id="编译器对属性和方法的处理机制"><a href="#编译器对属性和方法的处理机制" class="headerlink" title="编译器对属性和方法的处理机制"></a>编译器对属性和方法的处理机制</h3><h4 id="静态成员占多大"><a href="#静态成员占多大" class="headerlink" title="静态成员占多大"></a>静态成员占多大</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class c1
&#123;
	public:
	int i; &#x2F;&#x2F;4
    int j;&#x2F;&#x2F;4
    int k;l&#x2F;4
&#125;; &#x2F;&#x2F;12
class C2&#123;
	public:
		int i;
    	int j;
    	int k;
	static int m;	&#x2F;&#x2F;4
	public:
	int getk() const &#123; return k; &#125;&#x2F;&#x2F; 4
    void setk( int val) &#123;k &#x3D; val; &#125;&#x2F;&#x2F;4
&#125;;
struct s1&#123;
	int i;
    int j;
    int k;; &#x2F;&#x2F;12
struct s2&#123;
	int i;
    int j;
    int k;
	static int m;
&#125;; &#x2F;&#x2F;12?
int main()&#123;
	cout &lt;&lt; &quot;c1: &quot; &lt;&lt; sizeof(C1) &lt;&lt;endl;
    cout &lt;&lt;&quot;c1: &quot; &lt;&lt; sizeof(C2) &lt;&lt;endl;
	cout &lt;&lt;&quot;c1:&quot; &lt;&lt; sizeof(S1) &lt;&lt;endl;
	cout &lt;&lt;&quot;c1: &quot; &lt;&lt; sizeof(S2) &lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="处理机制"><a href="#处理机制" class="headerlink" title="处理机制"></a>处理机制</h4><ul>
<li>C++类对象中的成员变量和成员函数是分开存储的</li>
<li>成员变量︰<ul>
<li>普通成员变量∶存储于对象中，与struct变量有相同的内存布局和字节对齐方式</li>
<li>静态成员变量∶存储于全局数据区中</li>
</ul>
</li>
<li>成员函数:存储于代码段中。</li>
<li>C++编译器对类的成员的内部处理机制类似如下</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
&#125;
using namespace std;
class Test&#123;
    private:
    int ml;
    public:
    Test(int i):ml(i)&#123;&#125;
    int getI()&#123;
        return ml;
    &#125;
    static void Print()&#123;
        printf(&quot;This is class Test.\n&quot;);
    &#125;
&#125;;
int main()&#123;
Test a(10);
a.getI();
Test::Print();
a.Print();
&#125;

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;
    struct Test&#123;
        int ml;
    &#125;;
	void Test_initialize(Test * pThis,int i)&#123;
        pThis-&gt;ml&#x3D;i;
    &#125;
	int Test_getI(Test*pThis)&#123;
        return pThis-&gt;ml;
    &#125;
	void Test_Print()&#123;
        printf(&quot;This is class Test.\n&quot;);
    &#125;
		Test a;
		Test_initialize(&amp;a,10);
		Test_getI(&amp;a);
		Test_Print();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1、C++类对象中的成员变量和成员函数是分开存储的。C语言中的内存四区模型仍然有效!</p>
<p>2、C++中类的普通成员函数都隐式包含一个指向当前对象的this指针。</p>
<p>3、静态成员函数、成员变量属于类</p>
<p>4、静态成员函数与普通成员函数的区别</p>
<p>静态成员函数不包含指向具体对象的指针</p>
<p>普通成员函数包含一个指向具体对象的指针</p>
</blockquote>
<h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h4><ul>
<li>成员函数隐含定义this指针接受调用对象的地址</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void setXY(int a,int b)&#123;x&#x3D;a;y&#x3D;b;&#125;
void setXY(simple * const this,int a,int b)&#123;this-&gt;x&#x3D;a;this-&gt;y&#x3D;b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
	public:
	Test(int a, int b) &#x2F;&#x2F;---&gt; Test(Test *this,int a, int b)
    &#123;
	this-&gt;a &#x3D; a;
    this-&gt; b &#x3D; b;
    &#125;
void printT()&#123;
cout&lt;&lt; &quot;a: &quot; &lt;&lt;a &lt;&lt;endl;
cout&lt;&lt; &quot;b: &quot; &lt;&lt; this-&gt;b &lt;&lt;endl;
&#125;
	protected:
    private:
	int a;
    int b;
&#125;;
int main(void)&#123;
	Test t1(1，2);&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&gt; Test(&amp;t1，1，2);
    t1.printT();&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&gt; printT(&amp;t1)
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>(1)︰若类成员函数的形参和类的属性，名字相同，通过this指针来解决。</p>
<p>(2)︰类的成员函数可通过const修饰。</p>
</blockquote>
<h4 id="全局函数与成员函数"><a href="#全局函数与成员函数" class="headerlink" title="全局函数与成员函数"></a>全局函数与成员函数</h4><ol>
<li>把全局函数转化成成员函数，通过this指针隐藏左操作数<br><code>Test add(Test &amp;t1,Test &amp;t2)===》Test add(Test &amp;t2)</code></li>
<li>把成员函数转换成全局函数，多了一个参数<br><code>void printAB()===》void printAB(Test *pthis)</code></li>
<li>函数返回元素和返回引用</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Test&amp; add(Test &amp;t2)&#x2F;&#x2F;*this &#x2F;&#x2F;函数返回引用
&#123;
	this-&gt;a &#x3D; this-&gt;a + t2.getA();
    this-&gt;b &#x3D; this-&gt;b + t2.getB();
	return *this; &#x2F;&#x2F;*操作让this指针回到元素状态
&#125;
Test add2(Test &amp;t2)&#x2F;&#x2F;*this &#x2F;&#x2F;函数返回元素
&#123;
	&#x2F;&#x2F;t3是局部变量
	Test t3(this-&gt;a+t2.getA(),this-&gt;b+t2.getB()) ;
    return t3;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="强化练习"><a href="#强化练习" class="headerlink" title="强化练习"></a>强化练习</h3><blockquote>
<p>某商店经销一种货物。货物购进和卖出时以箱为单位，各箱的重量不一样，因此，商店需要记录目前库存的总重量。现在用C++模拟商店货物购进和卖出的情况。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;


class Goods
&#123;
public:
	Goods()
	&#123;
		weight &#x3D; 0;
		next &#x3D; NULL;
		cout &lt;&lt; &quot;创建了一个重量为&quot; &lt;&lt; weight &lt;&lt; &quot;的货物&quot; &lt;&lt; endl;
	&#125;

	Goods(int w) &#123;
		&#x2F;&#x2F;需要创建一个w的货物，并且仓库加上这个重量
		weight &#x3D; w;
		next &#x3D; NULL;
		total_weight +&#x3D; w;
		cout &lt;&lt; &quot;创建了一个重量为&quot; &lt;&lt; weight &lt;&lt; &quot;的货物&quot; &lt;&lt; endl;
	&#125;

	~Goods() &#123;
		&#x2F;&#x2F;仓库减少这个货物的重量
		cout &lt;&lt; &quot;删除了一箱重量是&quot; &lt;&lt; weight &lt;&lt; &quot;的货物&quot; &lt;&lt; endl;
		total_weight -&#x3D; weight;
	&#125;


	static int get_total_weight()
	&#123;
		return total_weight;
	&#125;

	Goods *next;
private:
	int weight;&#x2F;&#x2F;重量
	static int total_weight;&#x2F;&#x2F;仓库的总重量
&#125;;

int Goods::total_weight &#x3D; 0;


void buy(Goods * &amp;head, int w)
&#123;
	&#x2F;&#x2F;创建一个货物 重量是w
	Goods *new_goods &#x3D; new Goods(w);

	if (head &#x3D;&#x3D; NULL) &#123;
		head &#x3D; new_goods;
	&#125;
	else &#123;
		new_goods-&gt;next &#x3D; head;
		head &#x3D; new_goods;
	&#125;

&#125;

void sale(Goods * &amp;head)
&#123;
	if (head &#x3D;&#x3D; NULL) &#123;
		cout &lt;&lt; &quot;仓库中已经没有货物了。。&quot; &lt;&lt; endl;
		return;
	&#125;

	Goods *temp &#x3D; head;
	head &#x3D; head-&gt;next;

	delete temp;
	cout &lt;&lt; &quot;saled.&quot; &lt;&lt; endl;
&#125;



int main(void)
&#123;
	int choice &#x3D; 0;
	Goods *head &#x3D; NULL;
	int w;

	do &#123;
		cout &lt;&lt; &quot;1 进货&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;2 出货&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;0 退出&quot; &lt;&lt; endl;

		cin &gt;&gt; choice;
		switch (choice)
		&#123;
		case 1:
			&#x2F;&#x2F;进货
			cout &lt;&lt; &quot;请输出要创建货物的重量&quot; &lt;&lt; endl;
			cin &gt;&gt; w;
			buy(head, w);
			break;
		case 2:
			&#x2F;&#x2F;出货
			sale(head);
			break;
		case 0:
			&#x2F;&#x2F;退出
			return 0;
		default:
			break;
		&#125;

		cout &lt;&lt; &quot;当前仓库的总重量是&quot;&lt;&lt;Goods::get_total_weight() &lt;&lt; endl;

	&#125; while (1);
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>数组类封装<br>目标︰解决实际问题，训练构造函敬、copy构造函数等，</p>
<p>为操作符重载做准备</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;MyArray.h
#pragma once
#include &lt;iostream&gt;

using namespace std;

class MyArray
&#123;
public:
	MyArray();
	MyArray(int len);
	MyArray(const MyArray &amp;another);
	~MyArray();

	void setData(int index, int data);
	int getData(int index);
	int getLen();

	void operator&#x3D;(const MyArray&amp; another);
private:
	int len;
	int *space;
&#125;;

&#x2F;&#x2F;MyArray.c

#include &quot;MyArray.h&quot;

MyArray::MyArray()
&#123;
	cout &lt;&lt; &quot;MyArray()...&quot; &lt;&lt; endl;
	this-&gt;len &#x3D; 0;
	this-&gt;space &#x3D; NULL;
&#125;

MyArray::MyArray(int len)
&#123;
	if (len &lt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; 0;
		return;
	&#125;
	else &#123;
		this-&gt;len &#x3D; len;

		&#x2F;&#x2F;给space开辟空间
		this-&gt;space &#x3D; new int[this-&gt;len];
		cout &lt;&lt; &quot;MyArray::MyArray(int len) ...&quot; &lt;&lt; endl;
	&#125;
&#125;
MyArray::MyArray(const MyArray &amp;another)
&#123;
	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::MyArray(const MyArray &amp;another) ...&quot; &lt;&lt; endl;

	&#125;
&#125;
MyArray::~MyArray()
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		delete[]this-&gt;space;
		this-&gt;space &#x3D; NULL;
		len &#x3D; 0;
		cout &lt;&lt; &quot;MyArray::~MyArray() ...&quot; &lt;&lt; endl;
	&#125;
&#125;

void MyArray::setData(int index, int data)
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		this-&gt;space[index] &#x3D; data;
	&#125;
&#125;
int MyArray::getData(int index)
&#123;
	return this-&gt;space[index];
&#125;
int MyArray::getLen()
&#123;
	return this-&gt;len;
&#125;

void MyArray::operator&#x3D;(const MyArray&amp; another)
&#123;
	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::operator&#x3D;(const MyArray&amp; another) ...&quot; &lt;&lt; endl;

	&#125;
&#125;

&#x2F;&#x2F;main.c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;MyArray.h&quot;

using namespace std;

int main(void)
&#123;

	MyArray array1(10);&#x2F;&#x2F;开辟10元素的数组

	&#x2F;&#x2F;赋值操作
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		array1.setData(i, i + 10);
	&#125;

	cout &lt;&lt; &quot;--------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;array1:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		cout &lt;&lt; array1.getData(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;

	MyArray array2 &#x3D; array1;
	cout &lt;&lt; &quot;array2:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array2.getLen(); i++) &#123;
		cout &lt;&lt; array2.getData(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;
	
	MyArray array3;
	array3 &#x3D; array1;


	cout &lt;&lt; &quot;array3:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array3.getLen(); i++) &#123;
		cout &lt;&lt; array3.getData(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><ul>
<li>采用类的机制后实现了数据的隐藏与封装,类的数据成员一般定义为私有成员,成员函数一般定义为公有的,依此提供类与外界间的通信接口。但是,有时需要定义一些函数这些函数不是类的一部分,但又需要频繁地访问类的数据成员,这时可以将这些函数定义为该函数的友元函数。除了友元函数外,还有友元类,两者统称为友元。友元的作用是提高了程序的运行效率(即减少了类型检查和安全性检查等都需要时间开销),但它破坏了类的封装性和隐藏性,使得非成员函数可以访问类的私有成员。</li>
<li>友元可以是一个函数,该函数被称为友元函数;友元也可以是一个类,该类被称为友元类。</li>
<li>同类对象间无私处</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">MyString::MyString( const MyString &amp; other)&#123;
	int len &#x3D; strlen(other._str);
    this-&gt;_str &#x3D; new char[ len+1];
    strcpy(this-&gt;_str,other._str);
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>异类对象间有友元</li>
</ul>
<h4 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h4><ul>
<li>友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数它不属于任何类,但需要在类的定义中加以声明,声明时只需在友元的名称前加上关键字friend,其格式如下:</li>
<li>friend 类型 函数名(形式参数);</li>
<li>全局函数作友元函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;\
#include&lt;cmath&gt;
using namespace std;
class Point&#123;
	public:
	Point( double xx, double yy)&#123;
	x &#x3D; xx;
    y &#x3D; yy;
    &#125;
	void Getxy();
	friend double Distance(Point &amp;a,Point &amp;b);
	private:
	double x,y;
&#125;;
void Point::Getxy()&#123;
cout &lt;&lt; &quot;(&quot; &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; &quot;)&quot;&lt;&lt; endl;
&#125;
double Distance(Point &amp;a，Point &amp;b)&#123;
	double dx &#x3D; a.x - b.x;
    double dy &#x3D; a.y - b.y;
return sqrt( dx*dx + dy*dy ) ;
&#125;
int main(void)
&#123;
Point p1(3.0，4.0)，p2(6.0，8.0);p1.Getxy();
p2.Getxy();
double d &#x3D; Distance(p1，p2);
cout &lt;&lt; &quot;Distance is &quot; &lt;&lt; d &lt;&lt; endl;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>类成员函数作友元函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cmath&gt;
using namespace std;
class Point;
&#x2F;&#x2F;前向声明,是一种不完全型声明,即只需提供类名(无需提供类实现)即可。仅可用于声明指针和引用。
class ManagerPoint&#123;
	public:
		double Distance(Point &amp;a，Point &amp;b);
&#125;;
class Point&#123;
	public:
		Point( double xx,double yy)&#123;
		x &#x3D; xx;y &#x3D; yy;&#125;
		void Getxy();
	friend double ManagerPgint::Distanse(Point 8a,Point &amp;b);
    private:
		double x,y;
&#125;;
void Point::Getxy()&#123;
cout &lt;&lt; “(”&lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; &quot;)&quot;&lt;&lt; endl;
&#125;
double ManagerPoint::Distance(Point &amp;a，Point &amp;b) &#123;
double dx &#x3D; a.x - b.x;
double dy &#x3D; a.y - b.y;
return sqrt( dx*dx + dy*dy);
&#125;
int main(void)&#123;
Point p1(3.0，4.0),p2(6.0，8.0);
    p1.Getxy();
	p2.Getxy();
	ManagerPoint mp;
	float d &#x3D; mp.Distance(p1,p2);
	cout &lt;&lt; &quot;Distance is &quot; &lt;&lt; d&lt;&lt; endl;
	return 0;
&#125;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="友元对象"><a href="#友元对象" class="headerlink" title="友元对象"></a>友元对象</h4><ul>
<li>友元类的所有成员函数都是另一个类的友元函数,都可以访问另一个类中的隐藏信息(包括私有成员和保护成员)。</li>
<li>当希望一个类可以存取另一个类的私有成员时,可以将该类声明为另一类的友元类。定义友元类的语句格式如下:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">friend class 类名;
其中:friend 和 class是关键字,类名必须是程序中的一个已定义过的类。例如,以下语句说明类B是类A的友元类:
class A
&#123;
	public:
	friend class B;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>经过以上说明后,类B的所有成员函数都是类A的友元函数,能存取类A的私有成员和保护成员</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
	public:
	inline void Test()&#123;
	&#125;
    private:
	int x,y; 
    friend class B;
&#125;
class B&#123;
	public:
	inline void Test()
    	&#123;
		A a;
		printf( &quot;x&#x3D;%d , y&#x3D;%d&quot;.a.x,a.y );
		&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="论友元"><a href="#论友元" class="headerlink" title="论友元"></a>论友元</h4><ul>
<li>声明位置<ul>
<li>友元声明以关键字<code>friend</code>开始,它只能出现在类定义中。因为友元不是授权类的成员,所以它不受其所在类的声明区域<code>public private</code>和<code>protected</code>的影响。通常我们选择把所有友元声明组织在一起并放在类头之后.</li>
</ul>
</li>
<li>友元的利弊<ul>
<li>友元不是类成员,但是它可以访问类中的私有成员。友元的作用在于提高程序的运行效率,但是,它破坏了类的封装性和隐藏性,使得非成员函数可以访问类的私有成员。不过,类的访问权限确实在某些应用场合显得有些呆板,从而容忍了友元这一特别语法现象。</li>
</ul>
</li>
<li>注意事项<ul>
<li>友元关系不能被继承。</li>
<li>友元关系是单向的,不具有交换性。若类B是类A的友元,类A不一定是类B的友元,要看在类中是否有相应的声明。</li>
<li>友元关系不具有传递性。若类B是类A的友元,类C是B的友元,类C不一定是类A的友元,同样要看类中是否有相应的声明。</li>
</ul>
</li>
</ul>
<h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><ul>
<li>所谓重载，就是重新赋予新的含义。函数重载就是对一个已有的函数赋予新的含义，使之实现新功能，因此，一个函数名就可以用来代表不同功能的函数，也就是”一名多用”。</li>
<li>运算符也可以重载。实际上，我们已经在不知不觉之中使用了运算符重载。例如，大家都已习惯于用加法运算符”+”对整数、单精度数和双精度数进行加法运算，如5+8，5.8+3.67等，其实计算机对整数、单精度数和双精度数的加法操作过程是很不相同的，但由于C++已经对运算符”+”进行了重载，所以就能适用于int, float, doUble类型的运算。</li>
<li>又如”&lt;&lt;”是C++的位运算中的位移运算符（左移)，但在输出操作中又是与流对象cout配合使用的流插入运算符，”&gt;&gt;“也是位移运算符(右移），但在输入操作中又是与流对象cin配合使用的流提取运算符。这就是运算符重载<br>(operator overloading)。C++系统对”&lt;&lt;“和”&gt;&gt;“进行了重载，用户在不同的场合下使用它们时，作用是不同的。对”&lt;&lt;“和”&gt;&gt;“的重载处理是放在头文件stream中的。因此，如果要在程序中用”&lt;&lt;”和”&gt;&gt;”作流插入运算符和流提取运算符，必须在本文件模块中包含头文件stream(当然还应当包括”using namespace std”)。现在要讨论的问题是∶用户能否根据自己的需要对C++已提供的运算符进行重载，赋予它们新的含义，使之一名多用.</li>
<li>运算符重载的本质是函数重载。</li>
<li>重载函数的一般格式如下:</li>
</ul>
<blockquote>
<p>函数类型 operator 运算符名称(形参表列){<br>重载实体;<br>}</p>
</blockquote>
<ul>
<li>operator 运算符名称在一起构成了新的函数名。比如</li>
<li><code>const Complex operator+( const Complex &amp;c1,const Complex &amp;c2);</code></li>
<li>我们会说,operator+重载了重载了运算符+。</li>
</ul>
<h4 id="友元重载"><a href="#友元重载" class="headerlink" title="友元重载"></a>友元重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
	public:
	Complex(float x&#x3D;0，float y&#x3D;0) :_x(x),_y(y)&#123;&#125;
	void dis() &#123;
	cout&lt;&lt;&quot; ( &quot;&lt;&lt;_x&lt;&lt;&quot; , &quot;&lt;&lt;_y&lt;&lt; &quot;)&quot;&lt;&lt;endl;
&#125;
friend const Complex operator+(const Complex &amp;c1,const Complex &amp;c2);
    	private:
	float _x;
    float _y;
&#125;;
const Complex operator+(const Complex &amp;c1,const Complex &amp;c2) &#123;
return Complex(c1._x + c2._x,c1._y + c2._y);
&#125;
int main() &#123;
	complex c1(2,3);
    complex c2(3,4);
	c1.dis();
    c2.dis();
	complex c3 &#x3D; c1+c2;
&#x2F;&#x2F; Complex c3 &#x3D; operator+(c1,c2);
    c3.dis();
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="成员重载"><a href="#成员重载" class="headerlink" title="成员重载"></a>成员重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
	public:
	Complex( float x&#x3D;0,float y&#x3D;0):_x(×),_y(y)&#123;&#125;
    void dis() &#123;
	cout&lt;&lt;&quot;(&quot;&lt;&lt;_x&lt;&lt;&quot; ,&quot;&lt;&lt;_y&lt;&lt;&quot;)&quot;&lt;&lt;endl;
	&#125;
	friend const Complex operator+(const Complex &amp;c1,const Complex &amp;c2);
	const complex operator+( const Complex &amp;another);
	private:
	float _x;
    float _y ;
&#125;;
	const Complex operator+(const Complex &amp;c1,const Complex &amp;c2)&#123;
	cout&lt;&lt;&quot;友元函数重载&quot;&lt;&lt;endl;
	return Complex(c1._x +c2._x,c1._y + c2._y);
&#125;
	const Complex Complex::operator+( const Complex &amp; another)&#123;
	cout&lt;&lt;&quot;成员函数重载&quot;&lt;&lt;endl;
	return Complex(this-&gt;_x + another._x,this-&gt;_y + another._y);
&#125;
int main( )&#123;
	complex c1(2,3);
    complex c2(3,4);
    c1.dis();
	c2.dis();
    &#x2F;&#x2F; Complex c3 &#x3D; c1+c2;
	&#x2F;&#x2F; complex c3 &#x3D; operator+(c1,c2);complex c3 &#x3D; c1+c2;
	c3.dis();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h4><ol>
<li><p>C++不允许用户自己定义新的运算符,只能对已有的C++运算符进行重载。</p>
</li>
<li><p>C+＋允许重载的运算符</p>
<blockquote>
<p>new new[] delete delete[] + - * / % ^ &amp; | ~ ! = &lt;  &gt;  += -=  *= /= %=</p>
<p>^= &amp;= |= &lt;&lt; &gt;&gt; &lt;&lt;= &gt;&gt;= == != &lt;= &gt;= &amp;&amp; || ++ – , -&gt;* -&gt; () []</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>不能重载的运算符只有五个。</p>
<blockquote>
<p>? :    .    ::   sizeof   .* </p>
</blockquote>
</li>
</ul>
<ol start="3">
<li>重载不能改变运算符运算对象(即操作数)的个数。<ul>
<li>如,关系运算符“&gt;”和“&lt;”等是双目运算符,重载后仍为双目运算符,需要两个参数。运算符”+“,”-“，”*“,”&amp;“等既可以作为单目运算符,也可以作为双目运算符,可以分别将它们重载为单目运算符或双目运算符。</li>
</ul>
</li>
<li>重载不能改变运算符的优先级别。<ul>
<li>例如”*“和”/“优先级高于”＋“和”-“,不论怎样进行重载,各运算符之间的优先级不会改变。有时在程序中希望改变某运算符的优先级,也只能使用加括号的方法强制改变重载运算符的运算顺序。</li>
</ul>
</li>
<li>重载不能改变运算符的结合性。<ul>
<li>如,复制运算符”=“是右结合性(自右至左),重载后仍为右结合性。</li>
</ul>
</li>
<li>重载运算符的函数不能有默认的参数<ul>
<li>重载运算符的函数不能有默认的参数</li>
</ul>
</li>
<li>重载的运算符必须和用户定义的自定义类型的对象一起使用,其参数至少应有一个是类对象(或类对象的引用)。<ul>
<li>也就是说,参数不能全部是C++的标准类型,以防止用户修改用于标准类型数据成员的运算符的性质,如下面这样是不对的:</li>
<li>代码如下:</li>
<li><code>int operator + (int a,int b)&#123;return(a-b); &#125;</code></li>
<li>原来运算符+的作用是对两个数相加,现在企图通过重载使它的作用改为两个数相减。如果允许这样重载的话,如果有表达式4+3,它的结果是7还是1呢?显然,这是绝对要禁止的。</li>
</ul>
</li>
<li>用于类对象的运算符一般必须重载,但有两个例外,运算符”=“和运算符”&amp;“不必用户重载。<ul>
<li>复制运算符”=“可以用于每一个类对象,可以用它在同类对象之间相互赋值。因为系统已为每一个新声明的类重载了一个赋值运算符,它的作用是逐个复制类中的数据成员地址运算符&amp;也不必重载,它能返回类对象在内存中的起始地址。</li>
</ul>
</li>
<li>应当使重载运算符的功能类似于该运算符作用于标准类型数据时候时所实现的功能。</li>
<li>运算符重载函数可以是类的成员函数,也可以是类的友元函数,还可以是既非类的成员函数也不是友元函数的普通函数</li>
</ol>
<h4 id="双目运算符重载"><a href="#双目运算符重载" class="headerlink" title="双目运算符重载"></a>双目运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
public:
	Complex(float x&#x3D;0,float y&#x3D;0) :_x(x),_y(y)&#123;&#125;
void dis()
&#123;
cout&lt;&lt;&quot;(&quot;&lt;&lt;_x&lt;&lt;&quot;, &quot;&lt;&lt;_y&lt;&lt;&quot; )&quot;&lt;&lt;endl;
&#125;
Complex&amp; operator+&#x3D;( const Complex &amp;c)
&#123;
this-&gt;_x+&#x3D; c._x; this-&gt;_y +&#x3D; c._y ;
    return *this;
&#125;
private:
	float _x;
	float _y;
&#125;;
int main()&#123;
	&#x2F;&#x2F; int a&#x3D;10,b&#x3D;20,c&#x3D;30;
    &#x2F;&#x2F; a+&#x3D;b;
	&#x2F;&#x2F;b+&#x3D;C;
    &#x2F;&#x2F;cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;
    &#x2F;&#x2F;complex a1( 10,0),b1(20,0), c1(30,0);
    &#x2F;&#x2F;此时的+&#x3D;重载函数返回void
    &#x2F;&#x2F; a1 +&#x3D; b1;
    &#x2F;&#x2F; b1 +&#x3D; c1;l &#x2F; a1.dis();&#x2F;&#x2F; b1.dis();&#x2F; c1.dis();
    &#x2F;&#x2F; --------------------
    &#x2F;&#x2F;int a&#x3D;10, b&#x3D;20,c&#x3D;30;
    &#x2F;&#x2F;a+&#x3D;b+&#x3D;c;
    &#x2F;&#x2F;cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt;&quot;b &#x3D; &quot;&lt;b&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt; &quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;
    &#x2F;&#x2F; complex a1(10,0),b1(20,0), c1(30,0);
    &#x2F;&#x2F;此时重载函数+&#x3D;返回的是Complex 
    &#x2F;&#x2F; a1+&#x3D;b1+&#x3D;c1;
    &#x2F;&#x2F; a1.dis();
    &#x2F;&#x2F; b1.dis();
    &#x2F;&#x2F; c1.dis();
    &#x2F;&#x2F; -------------------------------
    int a &#x3D; 10, b &#x3D; 20,c &#x3D; 30;
    (a +&#x3D; b) +&#x3D; c;
    cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;endl;
    cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;
    Complex a1(10,0),b1(20,0), c1(30,0);
    &#x2F;&#x2F;此时重载函数+&#x3D;返回的是Complex &amp;
    &#x2F;&#x2F;一定要注意在连等式中,返回引用和返回对象的区别
    (a1 +&#x3D; b1) +&#x3D; c1;
	a1.dis();
	b1.dis();
    c1.dis();
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="单目运算符重载"><a href="#单目运算符重载" class="headerlink" title="单目运算符重载"></a>单目运算符重载</h4><ul>
<li>不可以被重载的操作符</li>
</ul>
<blockquote>
<p>.    .*   ::   ?:</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;前++
#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
	public:
	Complex(float x&#x3D;0,float y&#x3D;0):_x(x),_y(y)&#123;&#125;
	void dis()
    &#123;
	cout&lt;&lt;&quot;( &quot;&lt;&lt;_x&lt;&lt;&quot;, &quot;&lt;&lt;_y&lt;&lt;&quot;)&quot;&lt;&lt;endl;
    &#125;
	friend Complex &amp; operator++(Complex&amp; c);
    private:
		float _x;
    	float _y;
&#125;;
	Complex &amp; operator++(Complex&amp; c)&#123;
		c._x++;
       	c._y++;
		return c;
&#125;
int main()
&#123;
	int n &#x3D; 10;
	cout&lt;&lt;n&lt;&lt;endl;&#x2F;&#x2F;10
    cout&lt;&lt;++n&lt;&lt;endl;&#x2F;&#x2F;11
	cout&lt;&lt;n&lt;&lt;endl;&#x2F;&#x2F;11
	cout&lt;&lt;++++n&lt;&lt;endl;&#x2F;&#x2F;13
    cout&lt;&lt;n&lt;&lt;endl;
	
	Complex c( 10,10);
    	c.dis();&#x2F;&#x2F;10 10
	Complex c2&#x3D;++c;
	c2.dis( );	&#x2F;&#x2F;11 11
	c.dis();&#x2F;&#x2F;11 11
	c2 &#x3D; ++++c;
	c2.dis();&#x2F;&#x2F;13 13
	c.dis();&#x2F;&#x2F;13 13
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;后++
#include &lt;iostream&gt;
using namespace std;
class Complex&#123;
public:
Complex(float x&#x3D;0,float y&#x3D;0):_x(x),_y(y)&#123;&#125;
void dis()
&#123;
cout&lt;&lt;&quot;( &quot;&lt;&lt;_x&lt;&lt;&quot;, &quot;&lt;&lt;_y&lt;&lt;&quot;) &quot;&lt;&lt;endl;
&#125;
#if 0
const Complex operator++(int)&#123;
	Complex t &#x3D; *this;
    _x++;
    _y++;
return t;
&#125;
#endif
	friend const Complex operator++(Complex &amp;c ,int);
    private:
	float _x;
    float y ;
&#125;;
const Complex operator++(Complex &amp;c,int)
	Complex t(c._x,c._y); 
	c._x++;
	c._y++;
	return t;
&#125;
int main()&#123;
	int n &#x3D; 10;
    cout&lt;&lt;n&lt;&lt;endl;
&#x2F;&#x2F;10
	cout&lt;&lt;n++&lt;&lt;endl;
&#x2F;&#x2F;10
	cout&lt;&lt;n&lt;&lt;endl;
&#x2F;&#x2F;11
&#x2F;&#x2F;cout&lt;&lt;n++++&lt;&lt;endl;&#x2F;&#x2F;13后++表达式不能连用
    cout&lt;&lt;n&lt;&lt;endl; &#x2F;&#x2F;11
	Complex c(10);
	c.dis();
	Complex c2 &#x3D;C++;
    c2.dis();
	c.dis();
&#x2F;&#x2F;c2 &#x3D; C++十+;&#x2F;&#x2F; c2.dis();
    c.dis();
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="输入输出运算符重载"><a href="#输入输出运算符重载" class="headerlink" title="输入输出运算符重载"></a>输入输出运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">istream &amp; operator&gt;&gt;(istream &amp;,自定义类&amp;);
ostream &amp; operator&lt;&lt;(ostream &amp;,自定义类&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>通过友元函数来实现，避免修改C++的标准库</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex &#123;
public:
	Complex(float x&#x3D;0，float y&#x3D;0):_×(×),_y(y)&#123;&#125;
	void dis() &#123;
	cout&lt;&lt; &quot; ( &quot;&lt;&lt;_x&lt;&lt;&quot; , &quot;&lt;&lt;_y&lt;&lt;&quot;) &quot;&lt;&lt;endl;&#125;
	friend ostream &amp; operator&lt;&lt;(ostream &amp;os, const Complex &amp; c);
    friend istream &amp; operator&gt;&gt;(istream &amp;is，Complex &amp;c);
private:
	float _x;
    float _y;&#125;;
ostream &amp; operator&lt;&lt;(ostream &amp;os,const Complex &amp; c)
&#123;
	os&lt;&lt;&quot;( &quot;&lt;&lt;c._x&lt;&lt;&quot;,&quot;&lt;&lt;c._y&lt;&lt;&quot;)&quot;;
    return os;
&#125;
istream &amp; operator&gt;&gt;(istream &amp;is, Complex &amp;c)&#123;
is&gt;&gt;c._x&gt;&gt;c._y;
    return is;
&#125;
int main()&#123;
	Complex c(2,3);
    cout&lt;&lt;c&lt;&lt;endl;cin&gt;&gt;c;
	cout&lt;&lt;c&lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="友元还是成员"><a href="#友元还是成员" class="headerlink" title="友元还是成员"></a>友元还是成员</h4><ul>
<li>假设,我们有类Sender类和Mail类,实现发送邮件的功能。sender&lt;&lt; mail;</li>
<li>sender左操作数,决定了operator&lt;&lt;为Sender的成员函数,而mail决定了operator&lt;&lt;要作Mail类的友员。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Mail;
class Sender&#123;
	public:
	Sender(string s):_addr(s)&#123;&#125;
	Sender&amp; operator&lt;&lt;( const Mail &amp; mail);&#x2F;&#x2F;成员
	private:
	string _addr;
&#125;;
class Maili&#123;
	public:
Mail(string _t,string _c ):_title(_t),_content(_c)&#123;&#125;
    friend Sender&amp; Sender::operator&lt;&lt;(const Mail &amp; mail);
    private:
	string _title;
    string _content;&#125;;
Sender&amp; Sender::operator&lt;&lt; ( const Mail &amp; mail)
cout&lt;&lt; &quot;Address: &quot;&lt;&lt;_addr&lt;&lt;endl;
cout&lt;&lt;&quot;Title : &quot;&lt;&lt;mail._title&lt;&lt;endl;
cout&lt;&lt;&quot;Content: &quot;&lt;&lt;mail._content&lt;&lt;endl;
return *this;
&#125;
int main( )
Sender sender( &quot;danbing_at@gmail.com&quot; );
Mail mail( &quot;note&quot; , &quot;meeting at 3:00 pm&quot; ) ;
Mail mail2( &quot;tour&quot; , &quot;One night in beijing&quot; );
sender&lt;&lt;mail&lt;&lt;mail2;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结论:<br>1,一个操作符的左右操作数不一定是相同类型的对象,这就涉及到将该操作符函数定义为谁的友元,谁的成员问题。<br>2,一个操作符函数,被声明为哪个类的成员,取决于该函数的调用对象(通常是左操作数)。<br>3,一个操作符函数,被声明为哪个类的友员,取决于该函数的参数对象(通常是右操作数)。</p>
</blockquote>
<h4 id="运算符重载提高"><a href="#运算符重载提高" class="headerlink" title="运算符重载提高"></a>运算符重载提高</h4><ol>
<li>赋值运算符重载（operator=)<ul>
<li>用一个己有对象,给另外一个己有对象赋值。两个对象均己创建结束后,发生的赋值行为。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">类名&#123;
	类名&amp; operator&#x3D;(const 类名&amp; 源对象）拷贝体
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
	A&amp; operator&#x3D;( const A&amp; another)&#123;
		&#x2F;&#x2F;函数体
		return *this;
	&#125;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>规则<br>1系统提供默认的赋值运算符重载,一经实现,不复存在。</p>
<p>2系统提供的也是等位拷贝,也就浅拷贝,一个内存泄漏,重析构。</p>
<p>3要实再深深的赋值,必须自定义。</p>
<p>4自定义面临的问题有三个:</p>
<p>​        1,自赋值</p>
<p>​        2,内存泄漏</p>
<p>​        3,重析构。</p>
<p>5返回引用,且不能用const 修饰。其目的是实现连等式。</p>
</blockquote>
<ol start="2">
<li>数组下标运算符（operator[]）</li>
</ol>
<blockquote>
<p>类型 类   : :  operator[] (  类 型  ) ;</p>
</blockquote>
<blockquote>
<p>设×是类×的一个对象，则表达式<br>x [ y ]可被解释为x. operator [] ( y )</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int &amp; operator[](int i)&#123;return v[i];&#125;&#x2F;&#x2F;返回元素的引用 this-&gt;v[i]
a[2]&#x3D;12;&#x2F;&#x2F;返回引用的函数调用作左值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>自定义一个数组类要有&lt;&lt; &gt;&gt;操作符重载</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;MyArray.h
#pragma once
#include &lt;iostream&gt;

using namespace std;

class MyArray
&#123;
public:
	MyArray();
	MyArray(int len);
	MyArray(const MyArray &amp;another);
	~MyArray();

	void setData(int index, int data);
	int getData(int index);
	int getLen() const ;

	MyArray&amp; operator&#x3D;(const MyArray&amp; another);

	int &amp; operator[](int index) const;

	friend ostream &amp;operator&lt;&lt;(ostream &amp;os,const MyArray &amp;array);
	friend istream &amp;operator&gt;&gt;(istream &amp;is, MyArray &amp;array);

	friend bool operator&#x3D;&#x3D;(MyArray &amp;array1, MyArray &amp;array2);
	bool operator!&#x3D;(MyArray &amp;another);
private:
	int len;
	int *space;
&#125;;

&#x2F;&#x2F;MyArray.cpp
#include &quot;MyArray.h&quot;


MyArray::MyArray()
&#123;
	cout &lt;&lt; &quot;MyArray()...&quot; &lt;&lt; endl;
	this-&gt;len &#x3D; 0;
	this-&gt;space &#x3D; NULL;
&#125;

MyArray::MyArray(int len)
&#123;
	if (len &lt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; 0;
		return;
	&#125;
	else &#123;
		this-&gt;len &#x3D; len;

		&#x2F;&#x2F;给space开辟空间
		this-&gt;space &#x3D; new int[this-&gt;len];
		cout &lt;&lt; &quot;MyArray::MyArray(int len) ...&quot; &lt;&lt; endl;
	&#125;
&#125;
MyArray::MyArray(const MyArray &amp;another)
&#123;
	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::MyArray(const MyArray &amp;another) ...&quot; &lt;&lt; endl;

	&#125;
&#125;
MyArray::~MyArray()
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		delete[]this-&gt;space;
		this-&gt;space &#x3D; NULL;
		len &#x3D; 0;
		cout &lt;&lt; &quot;MyArray::~MyArray() ...&quot; &lt;&lt; endl;
	&#125;
&#125;

void MyArray::setData(int index, int data)
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		this-&gt;space[index] &#x3D; data;
	&#125;
&#125;
int MyArray::getData(int index)
&#123;
	return this-&gt;space[index];
&#125;
int MyArray::getLen() const
&#123;
	return this-&gt;len;
&#125;

MyArray&amp;  MyArray::operator&#x3D;(const MyArray&amp; another)
&#123;
	if (this &#x3D;&#x3D; &amp;another) &#123;
		return *this;
	&#125;

	if (this-&gt;space !&#x3D; NULL) &#123;
		delete[]this-&gt;space;
		this-&gt;space &#x3D; NULL; 
		this-&gt;len &#x3D; 0;
	&#125;

	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::operator&#x3D;(const MyArray&amp; another) ...&quot; &lt;&lt; endl;

	&#125;

	return *this;
&#125;

int &amp; MyArray::operator[](int index) const
&#123;
	return this-&gt;space[index];
&#125;


ostream &amp;operator&lt;&lt;(ostream &amp;os,const MyArray &amp;array)
&#123;
	os &lt;&lt; &quot;遍历整个数组 &quot; &lt;&lt; endl;
	&#x2F;&#x2F;array.getLen(); &#x2F;&#x2F;getLen(&amp;array);
	for (int i &#x3D; 0; i &lt; array.getLen(); i++) &#123;
		os &lt;&lt; array[i] &lt;&lt;&quot; &quot;;&#x2F;&#x2F;array.operator[]( i)
	&#125;

	os &lt;&lt; &quot;调用的&lt;&lt;操作符重载&quot; &lt;&lt; endl;

	return os;
&#125;

istream &amp;operator&gt;&gt;(istream &amp;is, MyArray &amp;array)
&#123;
	cout &lt;&lt; &quot;请输入&quot; &lt;&lt; array.getLen() &lt;&lt; &quot;个数&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array.getLen(); i++) &#123;
		cin &gt;&gt; array[i];
	&#125;
	return is;
&#125;


bool operator&#x3D;&#x3D;(MyArray &amp;array1, MyArray &amp;array2)
&#123;
	if (array1.len !&#x3D; array2.len) &#123;
		return false;
	&#125;

	for (int i &#x3D; 0; i &lt; array1.len; i++) &#123;
		if (array1.space[i] !&#x3D; array2.space[i]) &#123;
			return false;
		&#125;
	&#125;

	return true;
&#125;
bool MyArray::operator!&#x3D;(MyArray &amp;another)
&#123;
	return !(*this &#x3D;&#x3D; another);
&#125;

&#x2F;&#x2F;main.cpp
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;MyArray.h&quot;

using namespace std;



int main(void)
&#123;

 MyArray array1(10);&#x2F;&#x2F;开辟10元素的数组

	&#x2F;&#x2F;赋值操作
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		&#x2F;&#x2F;array1.setData(i, i + 10);
		array1[i] &#x3D; i + 10;&#x2F;&#x2F;space[1] &#x3D; 1+10
	&#125;

	cout &lt;&lt; &quot;--------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;array1:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		cout &lt;&lt; array1[i] &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;

	MyArray array2 &#x3D; array1;
	cout &lt;&lt; &quot;array2:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array2.getLen(); i++) &#123;
		cout &lt;&lt; array2[i] &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;
	

	cout &lt;&lt; &quot; ------------&quot; &lt;&lt; endl;
	MyArray array3(5);

	cin &gt;&gt; array3;


	cout &lt;&lt; &quot;array3:&quot; &lt;&lt; endl;
	cout &lt;&lt; array3 &lt;&lt; endl;
	cout &lt;&lt; endl;

	
	if (array3 !&#x3D; array1)  &#123;
		cout &lt;&lt; &quot;不相等&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;相等 &quot; &lt;&lt; endl;
	&#125;

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<ol start="3">
<li>函数调用符号（operator())<ul>
<li>把类对象像函数名一样使用。</li>
<li>仿函数(functor),就是使一个类的使用看上去象一个函数。其实现就是类中实现一个operator(),这个类就有了类似函数的行为,就是一个仿函数类了。</li>
</ul>
</li>
</ol>
<blockquote>
<p>class类名{<br>返值类型 operator()(参数类型)  函数体<br>}</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Sqr
&#123;
	public:
		int operator()(int i)&#123;
			return i*i;
		&#125;
		double operator ()(double d)&#123;
			return d*d;
		&#125;
&#125;;
int main()&#123;
	Sqr sqr;
	int i &#x3D; sqr(4);
	double d &#x3D; sqr(5.5);
	cout&lt;&lt;i&lt;&lt;endl;
	cout&lt;&lt;d&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>不可重载&amp;&amp;和||操作符</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test&#123;
	public:
	Test( int i &#x3D; 0)&#123;
	this-&gt;i &#x3D; i;
	&#125;
	Test operator+ ( const Test&amp; obj)&#123;
		cout&lt;&lt;&quot;执行+号重载函数&quot;&lt;&lt;endl;
        Test ret;
		ret.i &#x3D; i + obj.i;
        return ret;
&#125;
	bool operator&amp;&amp;( const Test&amp; obj)&#123;
		cout&lt;&lt;&quot;执行&amp;&amp;重载函数&quot;&lt;&lt;endl;
        return i &amp;&amp; obj.i;
&#125;
	private:
    int i;
&#125;;
int main()&#123;
	int a1 &#x3D; 0;
    int a2 &#x3D; 1;
	cout&lt;&lt;&quot;注意:&amp;&amp;操作符的结合顺序是从左向右&quot;&lt;&lt;endl;
    if( a1 &amp;&amp; (a1 + a2) )
    &#123;
	cout&lt;&lt;&quot;有一个是假，则不在执行下一个表达式的计算&quot;&lt;&lt;endl;
	&#125;
	Test t1(0);
    Test t2(1);
	if ( t1 &amp;&amp;(t1 + t2) )&#123;
&#x2F;&#x2F;t1 &amp;&amp; t1.operator(t2)
&#x2F;&#x2F; t1.operator&amp;&amp;(t1.operator+(t2))
	cout&lt;&lt;&quot;两个函数都被执行了，而且是先执行了+&quot;&lt;&lt;endl;
&#125;
return 0
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>C+＋如果重载&amp;&amp;或||将无法实现短路规则</p>
</blockquote>
<blockquote>
<p>实现一个字符串类</p>
<p>构造函数要求：</p>
<p>MyString a;</p>
<p>MyString a(“dddd”);</p>
<p>MyString b = a;</p>
<p>常用的操作符</p>
<p>&lt;&lt;    &gt;&gt;   !=    ==   &gt;  &lt;=  []</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;MyString.h
#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
using namespace std;

class MyString
&#123;
public:
	MyString();
	&#x2F;&#x2F;MyString(int len); &#x2F;&#x2F;创建一个长度是len的string对象
	MyString(const char *str);
	MyString(const MyString &amp;another);
	~MyString();

	&#x2F;&#x2F;重载操作符[]
	char &amp;operator[](int index);



	&#x2F;&#x2F;重载操作符&gt;&gt;
	friend istream &amp; operator&gt;&gt;(istream &amp;is, MyString &amp;s);

	&#x2F;&#x2F;重载&#x3D;操作符
	MyString &amp; operator&#x3D;(const MyString &amp;another);

	&#x2F;&#x2F;重载&#x3D;&#x3D;操作符

	&#x2F;&#x2F;重载!&#x3D;操作符


	&#x2F;&#x2F;重载+操作符
	MyString operator+(MyString &amp;another);


	&#x2F;&#x2F;重载操作符&lt;&lt;
	friend ostream &amp; operator&lt;&lt;(ostream &amp;os, MyString&amp;s);

private:
	int len;
	char *str;
&#125;;

&#x2F;&#x2F;MyString.cpp
#include &quot;MyString.h&quot;


MyString::MyString()
&#123;
	this-&gt;len &#x3D; 0;
	this-&gt;str &#x3D;NULL;
&#125;

MyString::MyString(const char *str)
&#123;
	if (str &#x3D;&#x3D; NULL) &#123;
		this-&gt;len &#x3D; 0;
		this-&gt;str &#x3D; new char[0 + 1];
		strcpy(this-&gt;str, &quot;&quot;);
	&#125;
	else &#123;
		int len &#x3D; strlen(str);
		this-&gt;len &#x3D; len;

		this-&gt;str &#x3D; new char[len + 1];
		strcpy(this-&gt;str, str);
	&#125;
&#125;

&#x2F;&#x2F;初始化时候被调用的
MyString::MyString(const MyString &amp;another)
&#123;
	this-&gt;len &#x3D; another.len;
	this-&gt;str &#x3D; new char[this-&gt;len + 1];
	strcpy(this-&gt;str, another.str);
&#125;



MyString::~MyString()
&#123;
	if (this-&gt;str !&#x3D; NULL) &#123;
		cout &lt;&lt; this-&gt;str &lt;&lt; &quot;执行了析构函数&quot; &lt;&lt; endl;
		delete this-&gt;str;
		this-&gt;str &#x3D; NULL; 
		this-&gt;len &#x3D; 0;
	&#125;
&#125;

char &amp; MyString::operator[](int index)
&#123;
	return this-&gt;str[index];
&#125;

MyString &amp;  MyString::operator&#x3D;(const MyString &amp;another)
&#123;
	if (this &#x3D;&#x3D; &amp;another) &#123;
		return *this;
	&#125;

	if (this-&gt;str !&#x3D; NULL) &#123;
		delete[] this-&gt;str;
		this-&gt;str &#x3D; NULL;
		this-&gt;len &#x3D; 0;
	&#125;

	this-&gt;len &#x3D; another.len;
	this-&gt;str &#x3D; new char[this-&gt;len + 1];
	strcpy(this-&gt;str, another.str);

	return *this;
&#125;

ostream &amp; operator&lt;&lt;(ostream &amp;os, MyString&amp;s)
&#123;
	os &lt;&lt; s.str;
	return os;
&#125;

istream &amp; operator&gt;&gt;(istream &amp;is, MyString &amp;s)
&#123;
	&#x2F;&#x2F;1 将s之前的字符串释放掉
	if (s.str !&#x3D; NULL) &#123;
		delete[] s.str;
		s.str &#x3D; NULL;
		s.len &#x3D; 0;
	&#125;

	&#x2F;&#x2F;2 通过cin添加新的字符串
	char temp_str[4096] &#x3D; &#123; 0 &#125;;
	cin &gt;&gt; temp_str;

	int len &#x3D; strlen(temp_str);
	s.str &#x3D; new char[len + 1];
	strcpy(s.str, temp_str);
	s.len &#x3D; len;

	return is;
&#125;

MyString MyString::operator+(MyString &amp;another)
&#123;
	MyString temp;

	int len &#x3D; this-&gt;len + another.len;

	temp.len &#x3D; len;

	temp.str &#x3D; new char[len + 1];
	memset(temp.str, 0, len + 1);
	strcat(temp.str, this-&gt;str);
	strcat(temp.str, another.str);

	return temp;
&#125;
&#x2F;&#x2F;main.c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &quot;MyString.h&quot;

using namespace std;

int main(void)
&#123;
	string s1;
	MyString s1(&quot;abc&quot;);
	MyString s2(&quot;123&quot;);

	&#x2F;&#x2F;cout &lt;&lt; s1 + s2 &lt;&lt; endl;

	cout &lt;&lt; s1 &lt;&lt; endl;
	cout &lt;&lt; s2 &lt;&lt; endl;


#if 0
	MyString s1(&quot;abc&quot;);
	MyString s2(s1);
	MyString s3 &#x3D; &quot;123&quot;;


	cout &lt;&lt; s1 &lt;&lt; endl;
	cout &lt;&lt; s2 &lt;&lt; endl;

	s1[1] &#x3D; &#39;x&#39;;

	cout &lt;&lt; s1 &lt;&lt; endl;

	s1 &#x3D; s3;

	cout &lt;&lt; s1 &lt;&lt; endl;

#endif
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="重载new和delete运算符"><a href="#重载new和delete运算符" class="headerlink" title="重载new和delete运算符"></a>重载new和delete运算符</h4><pre class="line-numbers language-none"><code class="language-none">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class A
&#123;
public:
	A()
	&#123;
		cout &lt;&lt; &quot;A()...&quot; &lt;&lt; endl;
	&#125;
	A(int a) &#123;
		cout &lt;&lt; &quot;A(int)...&quot; &lt;&lt; endl;
		this-&gt;a &#x3D; a;
	&#125;

	&#x2F;&#x2F;重载的new操作符 依然会触发对象的构造函数
	void * operator new(size_t size)
	&#123;
		cout &lt;&lt; &quot;重载了new操作符&quot; &lt;&lt; endl;
		return malloc(size);
	&#125;

	void *operator new[](size_t size)
	&#123;
		cout &lt;&lt; &quot;重载了new[]操作符&quot; &lt;&lt; endl;
		return malloc(size);
	&#125;
	void operator delete(void * p)
	&#123;
		cout &lt;&lt; &quot;重载了delete操作符&quot; &lt;&lt; endl;
		if (p !&#x3D; NULL) &#123;
			free(p);
			p &#x3D; NULL;
		&#125;
	&#125;

	void operator delete[](void *p)
	&#123;
		cout &lt;&lt; &quot;重载了delete[]操作符&quot; &lt;&lt; endl;
		if (p !&#x3D; NULL) &#123;
			free(p);
			p &#x3D; NULL;
		&#125;
	&#125;

	~A() &#123;
		cout &lt;&lt; &quot;~A().... &quot; &lt;&lt; endl;
	&#125;

private:
	int a;
&#125;;

int main(void)
&#123;
	&#x2F;&#x2F;char *array &#x3D; malloc(sizeof(char)* 80);

	&#x2F;&#x2F;int *value_p &#x3D; new int;

	A *array_p &#x3D; new A[10];


	&#x2F;&#x2F;array_p-&gt;operator new[](sizeof(A[10]));
	delete[] array_p;

	A *ap &#x3D; new A(10);

	&#x2F;&#x2F;ap-&gt;operator new(sizeof(A));

	delete ap;
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="解引用与智能指针"><a href="#解引用与智能指针" class="headerlink" title="解引用与智能指针"></a>解引用与智能指针</h4><ul>
<li>常规意义上讲,new或是malloc出来的堆上的空间,都需要手动delete和free的。但在其它高级语言中,只需申请无需释放的功能是存在的。</li>
<li>c++中也提供了这样的机制。我们先来探究一下实现原理。</li>
<li>常规</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void foo()&#123;
A*p &#x3D; new A;
&#x2F;&#x2F;do something
delete p;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>智能指针</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;
class A&#123;
    public:
		A() &#123;
			cout&lt;&lt;&quot;A constructor&quot;&lt;&lt;endl;
			&#125;
		~A() &#123;
			cout&lt;&lt;&quot;A destructor&quot;&lt;&lt;endl;
			&#125;
		void dis() &#123;
			cout &lt;&lt;&quot;class A&#39;s dis() &quot; &lt;&lt;endl;
		&#125;
&#125;;
int main()&#123;
&#x2F;&#x2F;使用智能指针auto_ptr 
    auto_ptr&lt;A&gt; p (new A);
	p-&gt;dis();
	return 0;
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>自定义智能指针</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;memory&gt;


using namespace std;

class A
&#123;
public:
	A(int a)
	&#123;
		cout &lt;&lt; &quot;A()...&quot; &lt;&lt; endl;
		this-&gt;a &#x3D; a;
	&#125;

	void func() &#123;
		cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; this-&gt;a &lt;&lt; endl;
	&#125;

	~A() &#123;
		cout &lt;&lt; &quot;~A()...&quot; &lt;&lt; endl;
	&#125;
private:
	int a;
&#125;;


class MyAutoPtr
&#123;
public:
	MyAutoPtr(A * ptr)
	&#123;
		this-&gt;ptr &#x3D; ptr;&#x2F;&#x2F;ptr &#x3D; new A(10)
	&#125;

	~MyAutoPtr() &#123;
		if (this-&gt;ptr !&#x3D; NULL) &#123;
			cout &lt;&lt; &quot;delte ptr&quot; &lt;&lt; endl;
			delete ptr;
			this-&gt;ptr &#x3D; NULL;
		&#125;
	&#125;

	A* operator-&gt;()
	&#123;
		return this-&gt;ptr;
	&#125;


	A&amp; operator*()
	&#123;
		return *ptr;
	&#125;

private:
	A *ptr;
&#125;;

void test1()
&#123;
#if 0
	A* ap &#x3D; new A(10);

	ap-&gt;func();
	(*ap).func();

	delete ap;
	auto_ptr&lt;int&gt; ptr(new int);
#endif
	auto_ptr&lt;A&gt; ptr(new A(10));

	ptr-&gt;func();
	(*ptr).func();
&#125;


void test2()
&#123;
	MyAutoPtr my_p(new A(10));

	my_p-&gt;func(); &#x2F;&#x2F;my_p.ptr -&gt; func()
	(*my_p).func(); &#x2F;&#x2F;  *ptr.func()
&#125;
int main(void)
&#123;
	
	&#x2F;&#x2F;test1();
	test2();

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>-&gt;和* 重载格式</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">类名&amp; operator*( ) &#123;
函数体
&#125;
类名*operator-&gt;( ) &#123;
函数体
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>作业1：设计TData类</p>
<p>定义一个处理日期的类TDate,它有3个私有数据成员:Month,Day,Year和若干个公有成员函数,并实现如下要求:<br>1构造函数重载<br>2成员函数设置缺省参数<br>3可使用不同的构造函数来创建不同的对象4定义一个友元函数来打印日期</p>
</blockquote>
<blockquote>
<p>作业2：设计一个矩阵类</p>
<p>设计一个3 * 3的矩阵类class Matrix,通过一数组进行初始化。</p>
<p>要求如下:<br>1默认构造(初始化为0),有参构造(数组作实参)</p>
<p>2重载+ / +=</p>
<p>3重载* / *=</p>
<p>4实现输出</p>
</blockquote>
<h2 id="继承派生"><a href="#继承派生" class="headerlink" title="继承派生"></a>继承派生</h2><ul>
<li>在C++中可重用性(software reusability)是通过继承(inheritance)这一机制来实现的。如果没有掌握继承性,就没有掌握类与对象的精华。</li>
</ul>
<h3 id="类和类之间的关系"><a href="#类和类之间的关系" class="headerlink" title="类和类之间的关系"></a>类和类之间的关系</h3><ul>
<li>has-A，uses-A和 is-A</li>
<li>has-A包含关系，用以描述一个类由多个“部件类”构成。实现has-A关系用类成员表示，即一个类中的数据成员是另一种已经定义的类。</li>
<li>uses-A 一个类部分地使用另一个类。通过类之间成员函数的相互联系定义友员或对象参数传递实现。</li>
<li>is-A机制称为“继承”。关系具有传递性,不具有对称性。</li>
</ul>
<h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Student
&#123;
public:
	void dis() &#123;
		cout&lt;&lt;name&lt;&lt;endl;
        cout&lt;&lt;age&lt;&lt;endl;
&#125;
		string name;
    	int age;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>重写</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Student2&#123;
public:
void dis() &#123;
	cout&lt;&lt;name&lt;&lt;endl;
    cout&lt;&lt;age&lt;&lt;endl;
    cout&lt;&lt;sex&lt;&lt;endl;
    cout&lt;&lt;score&lt;&lt;endl;
&#125;
private:
    string name;
    int age;
    char sex;
    float score;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>继承</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Student2 : public Student&#123;
public:
	student2(string n,int a,char s,float f)&#123;
	name &#x3D; n; age &#x3D; a; sex &#x3D; s; score &#x3D; f;
&#125;
	void dis() &#123;
		student: :dis();
        cout&lt;&lt;sex&lt;&lt;endl;
        cout&lt;&lt;score&lt;&lt;endl;
&#125;	
	char sex;
    float score;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>定义</p>
<ul>
<li>类的继承,是新的类从已有类那里得到已有的特性。或从已有类产生新类的过程就是类的派生。原有的类称为基类或父类,产生的新类称为派生类或子类。</li>
<li>派生与继承,是同一种意义两种称谓。isA的关系。</li>
</ul>
</li>
<li><p>派生类的组成</p>
<ul>
<li>派生类中的成员,包含两大部分,一类是从基类继承过来的,一类是自己增加的成员。从基类继承过过来的表现其共性,而新增的成员体现了其个性。</li>
<li><img src="http://qiniu.orangew.cn/img/20220704224131.png" alt="20220704224131"></li>
</ul>
</li>
<li><blockquote>
<p>几点说明:<br>1,全盘接收,除了构造器与析构器。基类有可能会造成派生类的成员冗余,所以说基类是需设计的。<br>2,派生类有了自己的个性,使派生类有了意义。</p>
</blockquote>
</li>
</ul>
<h3 id="继承的方式"><a href="#继承的方式" class="headerlink" title="继承的方式"></a>继承的方式</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote>
<p>class派生类名:[继承方式]基类名{<br>派生类成员声明;<br>};</p>
</blockquote>
<ul>
<li>一个派生类可以同时有多个基类,这种情况称为多重继承,派生类只有一个基类,称为单继承。下面从单继承讲起。</li>
</ul>
<h4 id="protected访问控制"><a href="#protected访问控制" class="headerlink" title="protected访问控制"></a>protected访问控制</h4><ul>
<li>protected 对于外界访问属性来说,等同于私有,但可以派生类中可见。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;class Base
&#123;
	public:
	int pub;
    protected:
    int pro;
    private:
	int pri;
&#125;;
class Drive: public Base &#123;
    public:
	void func() &#123;
		pub &#x3D; 10;
        pro &#x3D; 100;
&#x2F;&#x2F; pri &#x3D; 1000; &#x2F;&#x2F;error
	&#125;
&#125;;
int main(void)&#123;
	Base b;
	b.pub &#x3D; 10;
&#x2F;&#x2F;b.pro &#x3D; 100; &#x2F;&#x2F; error
    &#x2F;&#x2F; b.pri &#x3D; 1000; &#x2F; &#x2F; error
return 0;&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="派生类成员的标识和访问"><a href="#派生类成员的标识和访问" class="headerlink" title="派生类成员的标识和访问"></a>派生类成员的标识和访问</h4><table>
<thead>
<tr>
<th></th>
<th>public</th>
<th>protected</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>公有继承（public）</td>
<td>public</td>
<td>protected</td>
<td>不可见</td>
</tr>
<tr>
<td>保护继承（protected）</td>
<td>protected</td>
<td>protected</td>
<td>不可见</td>
</tr>
<tr>
<td>私有继承（private）</td>
<td>private</td>
<td>private</td>
<td>不可见</td>
</tr>
</tbody></table>
<ul>
<li>public 公有继承<ul>
<li>当类的继承方式为公有继承时,基类的公有和保护成员的访问属性在派生类中不变,而基类的私有成员不可访问。即基类的公有成员和保护成员被继承到派生类中仍作为派生类的公有成员和保护成员。派生类的其他成员可以直接访问它们。无论派生类的成员还是派生类的对象都无法访问基类的私有成员。</li>
</ul>
</li>
<li>private私有继承<ul>
<li>当类的继承方式为私有继承时,基类中的公有成员和保护成员都以私有成员身份出现在派生类中,而基类的私有成员在派生类中不可访问。基类的公有成员和保护成员被继承后作为派生类的私有成员,派生类的其他成员可以直接访问它们,但是在类外部通过派生类的对象无法访问。无论是派生类的成员还是通过派生类的对象,都无法访问从基类继承的私有成员。通过多次私有继承后,对于基类的成员都会成为不可访问。因此私有继承比较少用。</li>
</ul>
</li>
<li>protected保护继承<ul>
<li>保护继承中,基类的公有成员和私有成员都以保护成员的身份出现在派生类中,而基类的私有成员不可访问。派生类的其他成员可以直接访问从基类继承来的公有和保护成员,但是类外部通过派生类的对象无法访问它们,无论派生类的成员还是派生类的对象,都无法访问基类的私有成员。</li>
</ul>
</li>
</ul>
<blockquote>
<p>private成员在子类中依然存在，但是却无法访问到。不论何种方式继承基类，派生类都不能直接使用基类的私有成员。</p>
</blockquote>
<blockquote>
<p>如何恰当的使用ublic，Protected和private为成员声明访问级别?</p>
<p>1、需要被外界访问的成员直接设置为public</p>
<p>2、只能在当前类中访问的成员设置为private</p>
<p>3、只能在当前类和子类中访问的成员设置为protected , protected成员的访问权限介于public和private之间。</p>
</blockquote>
<blockquote>
<p>分析以下代码的访问权限</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class A
&#123;
	private:int a;
    protected :int b;
    public:
	int c;
    	A()&#123;
		a &#x3D; 0;
        b &#x3D; 0;
        c &#x3D; 0;
&#125;
void set(int a, int b, int c)&#123;
	this-&gt;a &#x3D; a;
    	this-&gt;b &#x3D; b;
   	 this-&gt;c &#x3D; c;
&#125;;
class B:public A&#123;
	public:
	void print()&#123;
	cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a;&#x2F;&#x2F;能否访问???
        	cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b;&#x2F;&#x2F;能否访问???
        	cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;endl;&#x2F;&#x2F;能否访问???
	&#125;
&#125;;
class C : protected A&#123;
	public:
	void print()&#123;
	cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a;&#x2F;&#x2F;能否访问???
	cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b;&#x2F;&#x2F;能否访问???
    	cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;endl; &#x2F;&#x2F;能否访问???
	&#125;
&#125;;
class D : private A&#123;
	public:
	void print()
	&#123;
	cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a;&#x2F;&#x2F;能否访问???
        cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;&#x2F;&#x2F;能否访问???
        cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;&#x2F;&#x2F;能否访问???
&#125;
&#125;;
int main(void)&#123;
	A aa;
    B bb;
    C cc;
    D dd;
	aa.c &#x3D; 100;&#x2F;&#x2F;能否访问???
	bb.c &#x3D; 100;&#x2F;&#x2F;能否访问???	
	cc.c &#x3D; 100;&#x2F;&#x2F;能否访问???
	dd.c &#x3D; 100;&#x2F;&#x2F;能否访问???
	aa.set(1，2，3);&#x2F;&#x2F;能否访问???
    bb.set(10，20，30);&#x2F;&#x2F;能否访问???
    cc.set(40，50，60);&#x2F;&#x2F;能否访问???
    dd.set(70,80，90);&#x2F;&#x2F;能否访问???
	bb.print( );&#x2F;&#x2F;能否访问???
	cc.print();&#x2F;&#x2F;能否访问???
	dd.print( );&#x2F;&#x2F;能否访问???
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="继承中的构造和析构"><a href="#继承中的构造和析构" class="headerlink" title="继承中的构造和析构"></a>继承中的构造和析构</h3><h4 id="类型兼容性原则"><a href="#类型兼容性原则" class="headerlink" title="类型兼容性原则"></a>类型兼容性原则</h4><ul>
<li>类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类的对象来替代。通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员。这样，公有派生类实际就具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决。</li>
<li>类型兼容规则中所指的替代包括以下情况∶</li>
</ul>
<blockquote>
<p>子类对象可以当作父类对象使用</p>
<p>子类对象可以直接赋值给父类对象</p>
<p>子类对象可以直接初始化父类对象</p>
<p>父类指针可以直接指向子类对象</p>
<p>父类引用可以直接引用子类对象</p>
</blockquote>
<ul>
<li>在替代之后，派生类对象就可以作为基类的对象使用，但是只能使用从基类继承的成员。</li>
<li>子类就是特殊的父类<code>(base * p = &amp;chil d ;)</code></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Parent
&#123;
	public:
	void printP()
	&#123;
	cout &lt;&lt; &quot;parent. . ..&quot; &lt;&lt; endl;
&#125;;
class Child : public Parent&#123;
	public:
		void printc()&#123;
 		cout &lt;&lt; &quot;child. ..&quot; &lt;&lt; endl;
	&#125;
&#125;;
void print01(Parent *p)&#123;
	p-&gt;printP();
	&#125;
void print02(Parent &amp;p)&#123;
p.printP();
&#125;
int main()&#123;
	child c1;
	c1.printC();
	Parent *p &#x3D; NULL;
	&#x2F;&#x2F;可以用父类指针指向子类对象
	p &#x3D; &amp;c1;
	p-&gt;printP();&#x2F;&#x2F;执行父类的函数
	Childc2;
	Parentp2;
	print01(&amp;p2);
	print01(&amp;c2);&#x2F;&#x2F;父类指针指向子类对象
	print02(p2);
	print02(c2);&#x2F;父类引用指向子类对象
	&#x2F;&#x2F;第二层含义用子类初始化父类对象
	Childc3;
	Parent p3 &#x3D; c3;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h4><ul>
<li>类在C++编译器的内部可以理解为结构体,子类是由父类成员叠加子类新成员得到的.</li>
<li>问题∶如何初始化父类成员?父类与子类的构造函数有什么关系?</li>
</ul>
<blockquote>
<p>在子类对象构造时，需要调用父类构造函数对其继承得来的成员进行初<br>女始化.<br>在子类对象析构时，需要调用父类析构函数对其继承得来的成员进行清<br>理.</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Parent
&#123;
	public:
	Parent(const char* s)&#123;
	this-&gt;s &#x3D; s;
	cout&lt;&lt; &quot;Parent()&quot;&lt;&lt;&quot; &quot;&lt;&lt;s&lt;&lt;endl;
	&#125;
	~Parent( )&#123;
	cout&lt;&lt;&quot;~Parent( )&quot;&lt;&lt;endl;
	&#125;
	private:
	const char *s;
&#125;;
class Child : public Parent&#123;
	public:
	Child(int a) : Parent( &quot;Parameter from Child! &quot;)&#123;
	cout&lt;&lt;&quot;Child( )&quot;&lt;&lt;endl;
	this-&gt;a &#x3D; a;
	&#125;
	Child( int a，const char *s) : Parent(s)&#123;
	cout&lt;&lt; &quot;Child( ) &quot;&lt;&lt;endl;this-&gt;a &#x3D; a;
&#125;
	~Child()&#123;
	cout&lt;&lt; &quot;~Child()&quot;&lt;&lt;endl;
&#125;
	private:int a;
&#125;;
void run()&#123;
&#x2F;&#x2F; Child child(10);
Child child(10，&quot;Parameter form child...&quot;);
&#125;
int main(int argc,char *argv[])&#123;
run( );
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="继承中构造析构调用原则"><a href="#继承中构造析构调用原则" class="headerlink" title="继承中构造析构调用原则"></a>继承中构造析构调用原则</h4><blockquote>
<p>1、子类对象在创建时会首先调用父类的构造函数</p>
<p>2、父类构造函数执行结束后，执行子类的构造函数</p>
<p>3、当父类的构造函数有参数时，需要在子类的初始化列表中显示调用</p>
<p>4、析构函数调用的先后顺序与构造函数相反</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class Parent
&#123;
public:
	Parent()
	&#123;
		cout &lt;&lt; &quot;Parent()..&quot; &lt;&lt; endl;
		a &#x3D; 0;
	&#125;
	Parent(int a) &#123;
		cout &lt;&lt; &quot;Parent(int)...&quot; &lt;&lt; endl;
		this-&gt;a &#x3D; a;
	&#125;
	~Parent()&#123;
		cout &lt;&lt; &quot;~Parent&quot; &lt;&lt; endl;
	&#125;
	int a;
&#125;;

class Child :public Parent
&#123;
public:
	&#x2F;&#x2F;在调用子类的构造函数时候，一定会调用父类的构造函数
	&#x2F;&#x2F; 父类先构造，子类后构造。
	Child(int a, int b) :Parent(a)
	&#123;
		cout &lt;&lt; &quot;Child(int, int)...&quot; &lt;&lt; endl;
		this-&gt;b &#x3D; b;
	&#125;

	void printC() &#123;
		cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;
	&#125;

	~Child()&#123;
		cout &lt;&lt; &quot;~Child()...&quot; &lt;&lt; endl;
	&#125;

	int b;
&#125;;

int main(void)
&#123;
	Child c(10, 20);

	c.printC();
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220705150418.png" alt="20220705150418"></p>
<h4 id="继承和组合并存，构造和析构原则"><a href="#继承和组合并存，构造和析构原则" class="headerlink" title="继承和组合并存，构造和析构原则"></a>继承和组合并存，构造和析构原则</h4><blockquote>
<p>先构造父类，再构造成员变量、最后构造自己</p>
<p>先析构自己，在析构成员变量、最后析构父类</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Object
&#123;
	public:
	Object(const char* s)&#123;
	cout&lt;&lt; &quot;Object()&quot;&lt;&lt;&quot; &quot;&lt;&lt;s&lt;&lt;endl;&#125;
	~Object()&#123;
	cout&lt;&lt; &quot;~object()&quot;&lt;&lt;endl;
	&#125;
&#125;;

class Parent : public Object&#123;
	public:
	Parent( const char* s) : Object(s)&#123;
	cout&lt;&lt;&quot;Parent( )&quot;&lt;&lt;&quot; &quot;&lt;&lt;s&lt;&lt;endl;
&#125;
	~Parent()
	&#123;
	cout&lt;&lt;&quot;~Parent( )&quot;&lt;&lt;endl;
	&#125;
&#125;;
class Child : public Parent&#123;
	public:
	Child() : o2(&quot;o2&quot;)，o1(&quot;o1&quot;)，Parent(&quot;Parameter from Child!&quot;)&#123;
	cout&lt;&lt;&quot;Child()&quot;&lt;&lt;endl;
&#125;
	~Child()&#123;
	cout&lt;&lt;&quot;~Child( ) &quot;&lt;&lt;endl;
&#125;
private:
	object o1;
	object o2;
&#125;;
void run()&#123;
	Child child;
&#125;
int main( int argc, char *argv[])&#123;
	run( );
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="继承中同名成员变量处理方法"><a href="#继承中同名成员变量处理方法" class="headerlink" title="继承中同名成员变量处理方法"></a>继承中同名成员变量处理方法</h4><ol>
<li>当子类成员变量与父类成员变量同名时</li>
<li>子类依然从父类继承同名成员</li>
<li>在子类中通过作用域分辨符::进行同名成员区分(在派生类中使用基类的同名成员，显式地使用类名限定符)</li>
<li>同名成员存储在内存中的不同位置</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;


class Parent
&#123;
public:
	Parent(int a) &#123;
		this-&gt;a &#x3D; a;
	&#125;

	int a;
&#125;;

class Child :public Parent
&#123;
public:
	Child(int p_a, int c_a) :Parent(p_a)
	&#123;
		this-&gt;a &#x3D; c_a;
	&#125;

	void print()
	&#123;
		cout &lt;&lt; Parent::a &lt;&lt; endl;
		cout &lt;&lt; this-&gt;a &lt;&lt; endl;&#x2F;&#x2F;child&#39;s a
	&#125;
	int a;
&#125;;


int main(void)
&#123;
	Child c(10, 100);
	c.print();

	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="派生类中的static关键字"><a href="#派生类中的static关键字" class="headerlink" title="派生类中的static关键字"></a>派生类中的static关键字</h4><ul>
<li>基类定义的静态成员，将被所有派生类共享</li>
<li>根据静态成员自身的访问特性和派生类的继承方式，在类层次体系中具有不同的访问性质（遵守派生类的访问控制)</li>
<li>派生类中访问静态成员，用以下形式显式说明∶类名:: 成员  或通过对象访问  对象名.成员</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class A
&#123;
public:
	static int a;
private:

&#125;;

class B :public A
&#123;
public:
private:
&#125;;

int A::a &#x3D; 100;&#x2F;&#x2F;静态成员变量 初始化

int main(void)
&#123;
	A a1;
	A a2;

	cout &lt;&lt; a1.a &lt;&lt; endl;
	cout &lt;&lt; a2.a &lt;&lt; endl;

	A::a &#x3D; 300;

	cout &lt;&lt; a1.a &lt;&lt; endl;
	cout &lt;&lt; a2.a &lt;&lt; endl;

	B b1;
	B b2;
	A::a &#x3D; 400;

	cout &lt;&lt; &quot;------&quot; &lt;&lt; endl;
	cout &lt;&lt; b1.a &lt;&lt; endl;
	cout &lt;&lt; b2.a &lt;&lt; endl;
	cout &lt;&lt; a1.a &lt;&lt; endl;
	cout &lt;&lt; a2.a &lt;&lt; endl;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>static函数也遵守3个访问原则</li>
<li>static易犯错误（不但要初始化，更重要的显示的告诉编译器分配内存)</li>
</ul>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote>
<p>派生类名::派生类名(参数总表):基类名1(参数表1),基类名(参数名2)….<br>基类名n(参数名n),内嵌子对象1(参数表1),<br>内嵌子对象2(参数表 2)….内嵌子对象n(参数表n)</p>
<p>{派生类新增成员的初始化语句;}</p>
</blockquote>
<ul>
<li>一个类有多个直接基类的继承关系称为多继承</li>
</ul>
<h4 id="沙发床实现"><a href="#沙发床实现" class="headerlink" title="沙发床实现"></a>沙发床实现</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;家具类
class Furniture
&#123;
public:
	int m; &#x2F;&#x2F;材质
&#125;;

&#x2F;&#x2F;将父亲类继承爷爷类  改成虚继承， 防止儿子在多继承我的时候，出现爷爷中的变量会拷贝多份。
class Bed:virtual public Furniture
&#123;
public:
	void sleep() &#123;
		cout &lt;&lt; &quot;在床上睡觉&quot; &lt;&lt; endl;
	&#125;
&#125;;


class Sofa:virtual public Furniture
&#123;
public:
	void sit() &#123;
		cout &lt;&lt; &quot;在沙发上休息&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;沙发床
class SofaBed :public Bed, public Sofa
&#123;
public:
	void SleepAndSit() &#123;
		sleep();
		sit();
	&#125;
&#125;;

int main(void)
&#123;
	Bed b;
	b.sleep();

	Sofa s;
	s.sit();

	cout &lt;&lt; &quot; ------ &quot; &lt;&lt; endl;

	SofaBed sb;
	sb.SleepAndSit();

	sb.m &#x3D; 100;&#x2F;&#x2F;此时只有一个m
	&#x2F;&#x2F;sb.Bed::m &#x3D; 100;
	&#x2F;&#x2F;sb.Sofa::m &#x3D; 200;
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3><ul>
<li>如果一个派生类从多个基类派生，而这些基类又有一个共同的基类，则在对该基类中声明的名字进行访问时，可能产生二义性</li>
</ul>
<h4 id="多继承中二义性问题"><a href="#多继承中二义性问题" class="headerlink" title="多继承中二义性问题"></a>多继承中二义性问题</h4><h4 id="虚继承virtual"><a href="#虚继承virtual" class="headerlink" title="虚继承virtual"></a>虚继承virtual</h4><ul>
<li>如果一个派生类从多个基类派生，而这些基类又有一个共同的基类，则在对该基类中声明的名字进行访问时，可能产生二义性</li>
<li>如果在多条继承路径上有一个公共的基类，那么在继承路径的某处汇合点，这个公共基类就会在派生类的对象中产生多个基类子对象</li>
<li>要使这个公共基类在派生类中只产生一个子对象，必须对这个基类声明为虚继承，使这个基类成为虚基类。</li>
<li>虚继承声明使用关键字virtual</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h3><h4 id="浅析多态的意义"><a href="#浅析多态的意义" class="headerlink" title="浅析多态的意义"></a>浅析多态的意义</h4><ul>
<li>如果有几个上似而不完全相同的对象,有时人们要求在向它们发出同一个消息时，它们的反应各不相同,分别执行不同的操作。这种情况就是多态现象。</li>
<li>例如,甲乙丙3个班都是高二年级,他们有基本相同的属性和行为,在同时听到上课铃声的时候,他们会分别走向3个不同的教室,而不会走向同一个教室。</li>
<li>同样,如果有两支军队,当在战场上听到同种号声,由于事先约定不同,A军队可能实施进攻,而B军队可能准备kalalok。</li>
<li>C++中所谓的多态(polymorphism)是指,由继承而产生的相关的不同的类,其对象对同一消息会作出不同的响应。</li>
<li>多态性是面向对象程序设计的一个重要特征,能增加程序的灵活性。可以减轻系统升级,维护,调试的工作量和复杂度.</li>
</ul>
<h4 id="赋值兼容（多态实现的前提）"><a href="#赋值兼容（多态实现的前提）" class="headerlink" title="赋值兼容（多态实现的前提）"></a>赋值兼容（多态实现的前提）</h4><ul>
<li>赋值兼容规则是指在需要基类对象的任何地方都可以使用公有派生类的对象来替代。</li>
<li>赋值兼容是一种默认行为,不需要任何的显示的转化步骤。赋值兼容规则中所指的替代包括以下的情况:</li>
<li>派生类的对象可以赋值给基类对象。派生类的对象可以初始化基类的引用。</li>
<li>派生类对象的地址可以赋给指向基类的指针。</li>
<li>在替代之后,派生类对象就可以作为基类的对象使用,但只能使用从基类继承的成员。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Parent
&#123;
public:
	Parent(int a)&#123;
	this-&gt;a &#x3D; a;
	cout&lt;&lt;&quot;Parent a&quot;&lt;&lt;a&lt;&lt;endl;
	&#125;
	void print()&#x2F;&#x2F;子类的和父类的函数名字一样
	&#123;
	cout&lt;&lt; &quot;Parent打印a : &quot;&lt;&lt;a&lt;&lt;endl;
&#125;
	private:int a ;
&#125;;
	class Child : public Parent&#123;
	public:
	Child(int b) : Parent( 10)&#123;
	this-&gt;b &#x3D; b;
	cout&lt;&lt;&quot;Child b&quot;&lt;&lt;b&lt;&lt;endl;
&#125;
	void print()&#123;
	cout&lt;&lt;&quot;Child打印b: &quot;&lt;&lt;b&lt;&lt;endl;
&#125;
	private:
	int b;
&#125;;
void howToPrint(Parent *base)&#123;
base-&gt;print();&#x2F;&#x2F;一种调用语句有多种表现形态...
&#125;
void howToPrint2(Parent &amp;base)&#123;
base.print();
&#125;
int main( void)&#123;
	Parent *base &#x3D; NULL;
	Parent p1(20);
	Child c1(30) ;
	base &#x3D; &amp;p1;
	base-&gt;print();&#x2F;&#x2F;执行父类的打印函数
	base &#x3D; &amp;c1;
&#x2F;*
编译器认为最安全的做法是编译到父类的print函数，因为父类和子类肯定都有相同的print函数。
*&#x2F;
	base-&gt;print();&#x2F;&#x2F;执行谁的函数﹖&#x2F;&#x2F;貌似我们希望之星Child的print函数
	Parent &amp;base2 &#x3D; p1;
	base2.print();&#x2F;&#x2F;执行父类的打印函数
	Parent &amp;base3 &#x3D; c1;
	base3.print();&#x2F;&#x2F;执行谁的函数?
	&#x2F;&#x2F;函数调用
	howToPrint(&amp;p1);
	howToPrint(&amp;c1);
	howToPrint2(p1);
	howToPrint2(c1);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220705170753.png" alt="20220705170753"></p>
<h4 id="面向对象新需求"><a href="#面向对象新需求" class="headerlink" title="面向对象新需求"></a>面向对象新需求</h4><ul>
<li>编译器的做法不是我们期望的;</li>
<li>根据实际的对象类型来判断重写函数的调用;</li>
<li>如果父类指针指向的是父类对象则调用父类中定义的函数;</li>
<li>如果父类指针指向的是子类对象则调用子类中定义的重写函数;</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/20220705171438.png" alt="20220705171438"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>C++中通过virtual关键字对多态进行支持</li>
<li>使用virtual声明的函数被重写后即可展现多态特性</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;英雄类
&#x2F;&#x2F;1999
class Hero
&#123;
public:
	virtual int getAd() &#123;
		return 10;
	&#125;
&#125;;

&#x2F;&#x2F;1999
class AdvHero :public Hero
&#123;
public:
	virtual int getAd()
	&#123;
		return 1001;
	&#125;
&#125;;

&#x2F;&#x2F;怪兽类
&#x2F;&#x2F;1999
class Monster
&#123;
public:
	int getAd() &#123;
		return 1000;
	&#125;
&#125;;


&#x2F;&#x2F;战斗方法
&#x2F;&#x2F;1999 &#x2F;&#x2F;写的架构函数，可以调用未来。
void playerFight(Hero *hp, Monster *mp)
&#123;
	&#x2F;&#x2F;多态对于编译器来讲的，也是一个动态联编，也是一个迟邦定。
	if (hp-&gt;getAd() &gt; mp-&gt;getAd()) &#123; &#x2F;&#x2F;hp-&gt;getAd 发生了多态
		cout &lt;&lt; &quot;英雄胜利， 怪兽被打死&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;英雄挂了，怪兽赢了&quot; &lt;&lt; endl;
	&#125;
&#125;

&#x2F;&#x2F;2020年
class BugHero :public Hero
&#123;
public:
	virtual int getAd()
	&#123;
		cout &lt;&lt; &quot;调用了bugHero的方法&quot; &lt;&lt; endl;
		return 66666;
	&#125;
&#125;;

int main(void)
&#123;
	Hero h;

	Monster m;

	playerFight(&amp;h, &amp;m);


	AdvHero advH;

	playerFight(&amp;advH, &amp;m);


	BugHero bH;

	playerFight(&amp;bH, &amp;m);

	int a &#x3D; 10;
	int b &#x3D; 20;

	cout &lt;&lt; a &lt;&lt; endl;

	if (a &gt; 10) &#123; &#x2F;&#x2F;迟邦定
		cout &lt;&lt; &quot;a&gt;10&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;a &lt; 10&quot; &lt;&lt; endl;
	&#125;


	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多态工程的意义"><a href="#多态工程的意义" class="headerlink" title="多态工程的意义"></a>多态工程的意义</h4><ul>
<li>封装<ul>
<li>突破了c语言函数的概念。</li>
</ul>
</li>
<li>继承<ul>
<li>代码复用，复用原来写好的代码。</li>
</ul>
</li>
<li>多态<ul>
<li>多态可以使用未来，80年代写了一个框架，90人写的代码。多态是软件行业追寻的一个目标。</li>
</ul>
</li>
</ul>
<h4 id="多态成立的条件"><a href="#多态成立的条件" class="headerlink" title="多态成立的条件"></a>多态成立的条件</h4><blockquote>
<p>1要有继承<br>2要有虚函数重写<br>3要有父类指针（父类引用）指向子类对象</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;


&#x2F;&#x2F;岳不群
class Yuebuqun
&#123;
public:
	Yuebuqun( string kongfu)
	&#123;
		this-&gt;kongfu &#x3D; kongfu;
	&#125;

	virtual  void fight() &#x2F;&#x2F;标识修饰一个成员方法是一个虚函数。
	&#123;
		cout &lt;&lt; &quot;岳不群&quot; &lt;&lt; &quot;使出了&quot; &lt;&lt; kongfu &lt;&lt; &quot;打人&quot; &lt;&lt; endl;
	&#125;

	void print()
	&#123;

	&#125;

	string kongfu;
&#125;;

&#x2F;&#x2F;林平之 继承了 岳不群
class Linpingzhi :public Yuebuqun
&#123;
public:
	Linpingzhi(string kongfu) :Yuebuqun(kongfu)
	&#123;

	&#125;

	&#x2F;&#x2F;如果说父类中有一个虚函数是fight（ ）， 子类如果去重写这个虚函数。
	void fight()
	&#123;
		cout &lt;&lt; &quot;林平之&quot; &lt;&lt; &quot;使出了&quot; &lt;&lt; kongfu &lt;&lt; &quot;打人&quot; &lt;&lt; endl;
	&#125;

	void print()
	&#123;

	&#125;
&#125;;

class Linghuchong :public Yuebuqun
&#123;
public:
	Linghuchong(string kongfu) :Yuebuqun(kongfu)
	&#123;

	&#125;

	void  fight()
	&#123;
		cout &lt;&lt; &quot;令狐冲 &quot; &lt;&lt; &quot;使用了&quot; &lt;&lt; kongfu &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;在全局提供一个打斗的方法
void fightPeople(Yuebuqun *hero)&#x2F;&#x2F;Yuebuqun *hero &#x3D; xiaopp;  Yuebuqun *hero &#x3D; xiaoyy;
&#123;
	cout &lt;&lt; &quot;调用打人的方法&quot; &lt;&lt; endl;
	hero-&gt;fight();&#x2F;&#x2F;希望传递进来的如果是子类，调用子类的fight
			      &#x2F;&#x2F;如果传递进来的是父类， 调用父类的fight
					&#x2F;&#x2F;这种行为就是 多态行为。
&#125;

&#x2F;&#x2F;多态发生的三个必要条件：
&#x2F;&#x2F;1. 要有继承。
&#x2F;&#x2F;2. 要有虚函数重写。
&#x2F;&#x2F;3. 父类指针或引用 指向 子类对象。

int main(void)
&#123;
	Yuebuqun *xiaoyy &#x3D; new Yuebuqun(&quot;葵花宝典&quot;);

	&#x2F;&#x2F;xiaoyy-&gt;fight();



	Linpingzhi *xiaopp &#x3D; new Linpingzhi(&quot;僻邪剑谱&quot;);
	&#x2F;&#x2F;xiaopp-&gt;fight();

	Linghuchong *xiaoll &#x3D; new Linghuchong(&quot;独孤九剑&quot;);

	 
	fightPeople(xiaoyy);
	fightPeople(xiaopp);
	fightPeople(xiaoll);
	&#x2F;&#x2F;编译器默认做了一个安全的处理。 编译认为 不管传递时子类对象还是父类对象，
	&#x2F;&#x2F;如果统一执行父类d方法 那么是一定可以被成功执行。

	delete xiaoyy;
	delete xiaopp;
	delete xiaoll;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220705172952.png" alt="20220705172952"></p>
<ul>
<li><code>g++ -fexec-charset=GBK test.c++ -o test</code></li>
</ul>
<h4 id="静态联编和动态联编"><a href="#静态联编和动态联编" class="headerlink" title="静态联编和动态联编"></a>静态联编和动态联编</h4><ol>
<li>联编是指一个程序模块、代码之间互相关联的过程。</li>
<li>静态联编( static binding )，是程序的匹配、连接在编译阶段实现，也称为早期匹配。重载函数使用静态联编。</li>
<li>动态联编是指程序联编推迟到运行时进行，所以又称为晚期联编（迟绑定)。switch语句和if语句是动态联编的例子。</li>
</ol>
<blockquote>
<p>1、C++与C相同，是静态编译型语言<br>2、在编译时，编译器自动根据指针的类型判断指向的是一个什么样的对象;所以编译器认为父类指针指向的是父类对象。<br>3、由于程序没有运行，所以不可能知道父类指针指向的具体是父类对象还是子类对象，从程序安全的角度，编译器假设父类指针只指向父类对象，因此编译的结果为调用父类的成员函数。这种特性就是静态联编。<br>4、多态的发生是动态联编，实在程序执行的时候判断具体父类指针应该调用的方法。</p>
</blockquote>
<h3 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h3><ul>
<li>构造函数不能是虚函数。建立一个派生类对象时，必须从类层次的根开始，沿着继承路径逐个调用基类的构造函数。</li>
<li>析构函数可以是虚的。虚析构函数用于指引delete运算符正确析构动态对象。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class A
&#123;
public:
	A() &#123;
		cout &lt;&lt; &quot;A()...&quot; &lt;&lt; endl;
		this-&gt;p &#x3D; new char[64];
		memset(this-&gt;p, 0, 64);
		strcpy(this-&gt;p, &quot;A String..&quot;);
	&#125;

	virtual void print()
	&#123;
		cout &lt;&lt; &quot;A: &quot; &lt;&lt; this-&gt;p &lt;&lt; endl;
	&#125;

	virtual ~A() &#123;
		cout &lt;&lt; &quot;~A()...&quot; &lt;&lt; endl;
		if (this-&gt;p !&#x3D; NULL) &#123;
			delete[]this-&gt;p;
			this-&gt;p &#x3D; NULL;
		&#125;
	&#125;
private:
	char *p;
&#125;;

class B :public A
&#123;
public:
	B() &#x2F;&#x2F;此刻会触发A()
	&#123;
		cout &lt;&lt; &quot;B()...&quot; &lt;&lt; endl;
		this-&gt;p &#x3D; new char[64];
		memset(this-&gt;p, 0, 64);
		strcpy(this-&gt;p, &quot;B String..&quot;);
	&#125;

	virtual void print()
	&#123;
		cout &lt;&lt; &quot;B: &quot; &lt;&lt; this-&gt;p &lt;&lt; endl;
	&#125;

	virtual ~B() &#123;
		cout &lt;&lt; &quot;~B()...&quot; &lt;&lt; endl;
		if (this-&gt;p !&#x3D; NULL) &#123;
			delete[] this-&gt;p;
			this-&gt;p &#x3D; NULL;
		&#125;
	&#125;
private:
	char *p;
&#125;;


void func(A *ap)
&#123;
	ap-&gt;print();&#x2F;&#x2F;在此发生多态

&#125;

void deleteFunc(A *ap)
&#123;
	delete ap; &#x2F;&#x2F;此刻ap-&gt;~B() &#x2F;&#x2F;~B() ---&gt; ~A()
&#125;

void test()
&#123;
	&#x2F;&#x2F;A *ap &#x3D; new A;
	&#x2F;&#x2F;func(ap);
	B *bp &#x3D; new B;
	func(bp);

	deleteFunc(bp);
&#125;

int main(void)
&#123;
	test();
	

	B bObj;

	&#x2F;&#x2F;bObj.~B();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
class A
&#123;
public:
    A()
    &#123;
        p &#x3D; new char[20];
        strcpy(p, &quot;obja&quot;);
        printf(&quot;A( )\n&quot;);
    &#125;
        virtual ~A()
        &#123;
            delete[] p;
            printf(&quot;~A()\n&quot;);
        &#125;

    private:
        char *p;
    &#125;;
    class B : public A 
    &#123;   
        public : B()&#123;
        p &#x3D; new char[20];
        strcpy(p, &quot;objb&quot;);
        printf(&quot;B()\n&quot;);
        &#125;
        ~B()
        &#123;
            delete[] p;
            printf(&quot;~B( )\n&quot;);
        &#125;

    private:
        char *p;
    &#125;;
    class C : public B &#123;
        public : C() &#123;
            p &#x3D; new char[20];
            strcpy(p, &quot;objc&quot;);
            printf(&quot;C()\n&quot;);
        &#125; 
        ~C()&#123;
    delete[] p;
    printf(&quot;~C( )\n&quot;);
&#125;

private:
char *p;
&#125;
;
&#x2F;&#x2F;通过父类指针把所有的子类对象的析构函数都执行一遍&#x2F;&#x2F;通过父类指针释放所有的子类资源
void howtodelete(A *base)&#123;
    delete base;
&#125;
int main()&#123;
   C *myC &#x3D; new C;
&#x2F;&#x2F; delete myC;&#x2F;&#x2F;直接通过子类对象释放资源不需要写virtualhowtodelete(myC);&#x2F;&#x2F;通过父类的指针调用释放子类的资源
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="重载、重写、重定义"><a href="#重载、重写、重定义" class="headerlink" title="重载、重写、重定义"></a>重载、重写、重定义</h3><blockquote>
<p>重载（添加） :<br>a    相同的范围（在同一个类中)</p>
<p>b     函数名字相同</p>
<p>c      参数不同</p>
<p>d     virtual关键字可有可无</p>
</blockquote>
<blockquote>
<p>重写（覆盖)是指派生类函数覆盖基类函数，特征是:<br>a不同的范围，分别位于基类和派生类中</p>
<p>b函数的名字相同</p>
<p>c参数相同</p>
<p>d基类函数必须有virtual关键字</p>
</blockquote>
<blockquote>
<p>重定义(隐藏）是指派生类的函数屏蔽了与其同名的基类函数，</p>
<p>规则如下:</p>
<p>a 如果派生类的函数和基类的函数同名，但是参数不同，此时，不管有无virtual ，基类的函数被隐藏。</p>
<p>b 如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字，此时，基类的函数被隐藏。</p>
</blockquote>
<h3 id="多态的实现原理"><a href="#多态的实现原理" class="headerlink" title="多态的实现原理"></a>多态的实现原理</h3><h4 id="虚函数表和vptr指针"><a href="#虚函数表和vptr指针" class="headerlink" title="虚函数表和vptr指针"></a>虚函数表和vptr指针</h4><ul>
<li>当类中声明虚函数时，编译器会在类中生成一个虚函数表;</li>
<li>虚函数表是一个存储类成员函数指针的数据结构;</li>
<li>虚函数表是由编译器自动生成与维护的;</li>
<li>virtual成员函数会被编译器放入虚函数表中;</li>
<li>存在虚函数时，每个对象中都有一个指向虚函数表的指针(vptr指针)。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class Parent
&#123;
public:
	Parent(int a) &#123;
		this-&gt;a &#x3D; a;
	&#125;

	virtual void func(int a)
	&#123;
		cout &lt;&lt; &quot;Parent::func(int)...&quot; &lt;&lt; endl;
	&#125;

	virtual void func(int a, int b, int c)
	&#123;
		cout &lt;&lt; &quot;Parent::func(int ,int ,int )....&quot; &lt;&lt; endl;
	&#125;
private:
	int a;
&#125;;

class Child :public Parent
&#123;
public:
	Child(int a, int b) :Parent(a)
	&#123;
		this-&gt;b &#x3D; b;
	&#125;
	virtual void func(int a) 
	&#123;
		cout &lt;&lt; &quot;Child: func(int)...&quot; &lt;&lt; endl;
	&#125;

	void func(int a, int b) &#123;
		cout &lt;&lt; &quot;Child :func(int ,int )...&quot; &lt;&lt; endl;
	&#125;

	virtual void func(int a, int b, int c)
	&#123;
		cout &lt;&lt; &quot;Child ::func(int ,int ,int )...&quot; &lt;&lt; endl;
	&#125;
private:
	int b;
&#125;;

void myFunc(Parent *pp)
&#123;
	pp-&gt;func(10);
&#125;

int main(void)
&#123;
	&#x2F;&#x2F;Parent *pp &#x3D; new Parent(10);
	&#x2F;&#x2F;Parent *cp &#x3D; new Child(100, 200);


	Parent *pp &#x3D; new Child(100, 200);

	pp-&gt;func(10);&#x2F;&#x2F;Parent ？ Child
					&#x2F;&#x2F;如果调用一个普通函数，编译器根本就不会查找虚函数表。
					&#x2F;&#x2F;只有你调用的函数，是虚函数的时候，才会去查找虚函数表

	pp-&gt;func(10, 20, 30);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="E:\Computer\myblog\hexo\source_posts\C-基础\20220705191201.png" alt="20220705191201"></p>
<blockquote>
<p>说明:<br>1.通过虚函数表指针VPTR调用重写函数是在程序运行时进行的，因此需要通过寻址操作才能确定真正应该调用的函数。而普通成员函数是在编译时就确定了调用的函数。在效率上，虚函数的效率要低很多。<br>2.出于效率考虑，没有必要将所有成员函数都声明为虚函数.<br>3.C++编译器，执行run函数，不需要区分是子类对象还是父类对象,而是直接通过p的vPTR指针所指向的对象函数执行郎可。</p>
</blockquote>
<h4 id="证明vptr指针的存在"><a href="#证明vptr指针的存在" class="headerlink" title="证明vptr指针的存在"></a>证明vptr指针的存在</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class Parent
&#123;
public:
	virtual void func()
	&#123;
		cout &lt;&lt; &quot;Parent::func()..&quot; &lt;&lt; endl;
	&#125;
	virtual void func(int a)
	&#123;
		cout &lt;&lt; &quot;Parent::func()..&quot; &lt;&lt; endl;
	&#125;
private:
	int a;
&#125;;


class Parent2
&#123;
public:
	void func()
	&#123;
		cout &lt;&lt; &quot;Parent2::func()..&quot; &lt;&lt; endl;
	&#125;
private:
	int a;
&#125;;
int main(void)
&#123;
	Parent p1;
	Parent2 p2;


	cout &lt;&lt; &quot;sizeof(p1) &quot; &lt;&lt; sizeof(p1) &lt;&lt; endl;&#x2F;&#x2F;多出来的4个字节就是vptr指针所占用的空间。
	cout &lt;&lt; &quot;sizeof(p2) &quot; &lt;&lt; sizeof(p2) &lt;&lt; endl;

	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="构造函数中能否调用虚函数，实现多态？"><a href="#构造函数中能否调用虚函数，实现多态？" class="headerlink" title="构造函数中能否调用虚函数，实现多态？"></a>构造函数中能否调用虚函数，实现多态？</h4><ul>
<li>对象在创建的时,由编译器对VPTR指针进行初始化</li>
<li>只有当对象的构造完全结束后VPTR的指向才最终确定</li>
<li>父类对象的VPTR指向父类虚函数表</li>
<li>子类对象的VPTR指向子类虚函数表</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class Parent
&#123;
public:
	Parent(int a)
	&#123;
		cout &lt;&lt; &quot;Parent(int ..)&quot; &lt;&lt; endl;
		this-&gt;a &#x3D; a;

		&#x2F;&#x2F;print();&#x2F;&#x2F;是调用父类的print（） 还是 子类的print（）？
				&#x2F;&#x2F;通过结果 此时调用的父类的print 并不是子类的print
	&#125;

	virtual void print()
	&#123;
		cout &lt;&lt; &quot;Parent::print()...a &#x3D; &quot;&lt;&lt;a &lt;&lt; endl;
	&#125;
private:
	int a;
&#125;;

class Child :public Parent
&#123;
public:
	Child(int a, int b) :Parent(a) &#x2F;&#x2F;在调用父类的构造器的时候，会将vptr指针当做父类来处理。
									&#x2F;&#x2F;此时会临时指向父类的虚函数表


	&#123;
		&#x2F;&#x2F;将子类对象的空间有编程子类对象处理，vptr指针就从指向父类的表 变成 指向子类的表

		cout &lt;&lt; &quot;Child (int ,int )&quot; &lt;&lt; endl;
		this-&gt;b &#x3D; b;
		print();&#x2F;&#x2F;此时vptr指针已经回到了 子类的表， 调用的是子类的print函数。

	&#125;

	virtual void print() &#123;
		cout &lt;&lt; &quot;Child ::Print()..b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;
	&#125;
private:
	int b;
&#125;;

int main(void)
&#123;
	Parent *pp &#x3D; new Child(10, 20);
	&#x2F;&#x2F;pp-&gt;print();&#x2F;&#x2F;发生多态

	delete pp;
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="父类指针和子类指针的步长"><a href="#父类指针和子类指针的步长" class="headerlink" title="父类指针和子类指针的步长"></a>父类指针和子类指针的步长</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;

using namespace std;


class Parent
&#123;
public:
	Parent(int a)
	&#123;
		this-&gt;a &#x3D; a;
	&#125;
	virtual void print()
	&#123;
		cout &lt;&lt; &quot;Parent::print a&#x3D;  &quot; &lt;&lt; a &lt;&lt; endl;
	&#125;

	int a;
&#125;;

class Child :public Parent
&#123;
public:
	Child(int a) :Parent(a)
	&#123;

	&#125;

	virtual void print()
	&#123;
		cout &lt;&lt; &quot;Child::print a&#x3D;  &quot; &lt;&lt; a &lt;&lt; endl;
	&#125;

	int b;
&#125;;


int main(void)
&#123;

	Child array[] &#x3D; &#123; Child(0), Child(1), Child(2) &#125;;
	
	Parent *pp &#x3D; &amp;array[0];
	Child *cp &#x3D; &amp;array[0];

	pp++;

	pp-&gt;print();
	cp-&gt;print();

#if 0
	pp++;&#x2F;&#x2F;pp +sizeof(Parent)
	cp++;&#x2F;&#x2F;cp +sizeof(Child)

	pp-&gt;print();
	cp-&gt;print();
#endif
	cout &lt;&lt; &quot;-----&quot; &lt;&lt; endl;

	int i &#x3D; 0;
	for (cp&#x3D; &amp;array[0], i &#x3D; 0; i &lt; 3; i++, cp++) &#123;
		cp-&gt;print();
	&#125;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="有关多态的理解"><a href="#有关多态的理解" class="headerlink" title="有关多态的理解"></a>有关多态的理解</h3><ul>
<li>多态的实现效果<ul>
<li>多态:同样的调用语句有多种不同的表现形态;</li>
</ul>
</li>
<li>多态实现的三个条件<ul>
<li>有继承、有virtual重写、有父类指针（引用)指向子类对象。</li>
</ul>
</li>
<li>多态的C++实现<ul>
<li>virtual关键字，告诉编译器这个函数要支持多态;不是根据指针类型判断如何调用;而是要根据指针所指向的实际对象类型来判断如何调用</li>
</ul>
</li>
<li>多态的理论基础<ul>
<li>动态联编PK静态联编。根据实际的对象类型来判断重写函数的调用。</li>
</ul>
</li>
<li>多态的重要意义<ul>
<li>设计模式的基础是框架的基石。</li>
</ul>
</li>
<li>多态原理探究<ul>
<li>虚函数表和vptr指针。</li>
</ul>
</li>
</ul>
<h3 id="虚函数和抽象类"><a href="#虚函数和抽象类" class="headerlink" title="虚函数和抽象类"></a>虚函数和抽象类</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>纯虚函数是一个在基类中说明的虚函数，在基类中没有定义，要求任何派生类都定义自己的版本</li>
<li>纯虚函数为个派生类提供一个公共界面(接口的封装和设计、软件的模块功能划分)</li>
</ul>
<h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;面向抽象类编程（面向一套预先定义好的接口编程）
&#x2F;&#x2F;图形类
&#x2F;&#x2F;如果说一个类 拥有一个纯虚函数 
&#x2F;&#x2F;就称这个类是一个抽象类。
&#x2F;&#x2F;不管这个类中有没有成员属性，只要这个类有纯虚函数，就是一个抽象类， 抽象类就是不能够实例化的。
class Shape
&#123;
public:
	&#x2F;&#x2F;阅读一个统一的界面（接口），让子类使用，让子类必须去实现
	&#x2F;&#x2F;求图形面积的方法
	&#x2F;&#x2F;表示图形类声明一个方法getArea（），它是一个纯虚函数，没有函数的实现。
	virtual double getArea() &#x3D; 0;
&#125;;

&#x2F;&#x2F;三角形
class Tri :public Shape
&#123;
public:
	Tri(int a, int h)
	&#123;
		this-&gt;a &#x3D; a;
		this-&gt;h &#x3D; h;
	&#125;
	virtual double getArea() &#123;
		cout &lt;&lt; &quot;三角形求面价&quot; &lt;&lt; endl;
		return 0.5*a*h;
	&#125;

private:
	int a;
	int h;
&#125;;

&#x2F;&#x2F;正方形：
&#x2F;&#x2F;如果说一个普通类，继承拥有纯虚函数的类，如果说不重写纯虚函数，依然是一个抽象类。
&#x2F;&#x2F;依然不能被实例化， 如果想实例化， 必须要重写这个父类中所有纯虚函数
class Rect : public Shape
&#123;
public:
	Rect(int a) &#123;
		this-&gt;a &#x3D; a;
	&#125;
	virtual double getArea() &#123;
		cout &lt;&lt; &quot;正方形求面积&quot; &lt;&lt; endl;
		return a*a;
	&#125;
private:
	int a;&#x2F;&#x2F;正方形边长
&#125;;

class Circle :public Shape
&#123;
public:
	Circle(int r)
	&#123;
		this-&gt;r &#x3D; r;
	&#125;

	virtual double getArea()
	&#123;
		cout &lt;&lt; &quot;圆形求面积&quot; &lt;&lt; endl;

		return 3.14*r * 4;
	&#125;


private:
	int  r;
&#125;;


&#x2F;&#x2F;面向抽象类写一个架构函数
void printArea(Shape *sp)
&#123;
	sp-&gt;getArea();
&#125;

&#x2F;&#x2F;业务层  面向的抽象类编程
int main(void)
&#123;
	&#x2F;&#x2F;main 中所有使用的变量类型 都是 抽象类Shape的类型。
	Shape *sp1 &#x3D; new Rect(10);
	&#x2F;&#x2F;sp1-&gt;getArea();

	Shape *sp2 &#x3D; new Circle(20);
	&#x2F;&#x2F;sp2-&gt;getArea();

	Shape *sp3 &#x3D; new Tri(10, 20);
	&#x2F;&#x2F;sp3-&gt;getArea();


	printArea(sp1);
	printArea(sp2);
	printArea(sp3);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="抽象类在多继承中的应用"><a href="#抽象类在多继承中的应用" class="headerlink" title="抽象类在多继承中的应用"></a>抽象类在多继承中的应用</h4><ul>
<li>绝大多数面向对象语言都不支持多继承,绝大多数面向对象语言都支持接口的概念</li>
<li>C++中没有接口的概念,C++中可以使用纯虚函数实现接口</li>
<li>接口类中只有函数原型定义，没有任何数据的定义.</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;*
C++中没有接口的概念
C++中可以使用纯虚函数实现接口
接口类中只有函数原型定义，没有任何数据的定义。*&#x2F;
class Interface1 &#123;
public:
  virtual void print() &#x3D; 0;
  virtual int add(int a, int b) &#x3D; 0;
&#125;;
class Interface2 &#123;
public:
  virtual void print() &#x3D; 0;
  virtual int add(int a, int b) &#x3D; 0;
  virtual int sub(int a, int b) &#x3D; 0;
&#125;;
class parent &#123;
public:
  int a;
&#125;;
class Child : public parent,public Interface1,public Interface2 &#123;
public:
  void print() &#123; cout &lt;&lt; &quot;Child : :print&quot; &lt;&lt; endl; &#125;;
  int add(int a, int b) &#123; return a + b; &#125;
  int sub(int a, int b) &#123; return a - b; &#125;
&#125;;
int main() &#123;
  Child c;
  c.print();
  cout &lt;&lt; c.add(3,5) &lt;&lt; endl;
  cout &lt;&lt; c.sub(4,6) &lt;&lt; endl;
  Interface1 *i1 &#x3D; &amp;c;
  Interface2 *i2 &#x3D; &amp;c;
  cout &lt;&lt; i1-&gt;add(7,8) &lt;&lt; endl;
  cout &lt;&lt; i2-&gt;add(7,8) &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="面向抽象类编程案例"><a href="#面向抽象类编程案例" class="headerlink" title="面向抽象类编程案例"></a>面向抽象类编程案例</h3><ul>
<li>动物园</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;animal.h
#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
using namespace std;

class Animal
&#123;
public:
	&#x2F;&#x2F;纯虚函数，让子类继承并且实现
	virtual void voice() &#x3D; 0;
	Animal();
	virtual ~Animal();
&#125;;


&#x2F;&#x2F;架构函数
&#x2F;&#x2F;让动物叫
void letAnimalCry(Animal *animal);

&#x2F;&#x2F;animal.cpp
#include &quot;Animal.h&quot;

Animal::Animal()
&#123;
	cout &lt;&lt; &quot;animal()..&quot; &lt;&lt; endl;
&#125;
Animal::~Animal()
&#123;
	cout &lt;&lt; &quot;~Animal()...&quot; &lt;&lt; endl;
&#125;

void letAnimalCry(Animal *animal)
&#123;
	animal-&gt;voice();

	if (animal !&#x3D; NULL) &#123;
		delete animal;
	&#125;
&#125;

&#x2F;&#x2F;dog.h
#pragma once
#include &quot;Animal.h&quot;
class Dog : public Animal
&#123;
public:
	Dog();
	~Dog();

	virtual void voice();
&#125;;

&#x2F;&#x2F;dog.cpp
#include &quot;Dog.h&quot;


Dog::Dog()
&#123;
	cout &lt;&lt; &quot;Dog()..&quot; &lt;&lt; endl;
&#125;


Dog::~Dog()
&#123;
	cout &lt;&lt; &quot;~Dog()..&quot; &lt;&lt; endl;
&#125;

void Dog::voice()
&#123;
	cout &lt;&lt; &quot;狗开始哭了， 555&quot; &lt;&lt; endl;
&#125;
&#x2F;&#x2F;cat.h
#pragma once
#include &quot;Animal.h&quot;


class Cat : public Animal
&#123;
public:
	Cat();
	~Cat();

	virtual void voice();
&#125;;

&#x2F;&#x2F;cat.cpp

#include &quot;Cat.h&quot;


Cat::Cat()
&#123;
	cout &lt;&lt; &quot;cat()..&quot; &lt;&lt; endl;

&#125;


Cat::~Cat()
&#123;
	cout &lt;&lt; &quot;~cat()..&quot; &lt;&lt; endl;

&#125;

void Cat::voice()
&#123;
	cout &lt;&lt; &quot;小猫开始哭了，66666&quot; &lt;&lt; endl;
&#125;
&#x2F;&#x2F;main.cpp
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;Animal.h&quot;
#include &quot;Dog.h&quot;
#include &quot;Cat.h&quot;


using namespace std;

int main(void)
&#123;
	letAnimalCry(new Dog);

	letAnimalCry(new Cat);

#if 0
	Animal *dog &#x3D; new Dog;
	letAnimalCry(dog);
	delete Dog;
#endif

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>案例2 员工待遇</p>
<p>编写一个C++程序,计算程序员( pro grammer )工资<br>1要求筋计算出初级程序员( junior_ _programmer )中级程序员（mid_programmer )高级程序员( adv_pro grammer)的工资<br>2要求利用抽象类统一界面,方便程序的扩展，比如:新增，计算架构师(architect )的工资</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

class Programmer
&#123;
public:
	Programmer(double salary)
	&#123;
		this-&gt;salary &#x3D; salary;
	&#125;
	virtual void printMoney() &#x3D; 0;
	virtual ~Programmer() &#123;

	&#125;

protected:
	double salary;
&#125;;


class Junior_programmer :public Programmer
&#123;
public:
	Junior_programmer(double salary) :Programmer(salary) &#123;

	&#125;
	virtual void printMoney()&#123;
		cout &lt;&lt; &quot;初级程序员的工资是&quot; &lt;&lt; this-&gt;salary &lt;&lt; endl;
	&#125;
&#125;;

class Mid_programmer :public Programmer
&#123;
public:
	Mid_programmer(double salary) :Programmer(salary) &#123;

	&#125;
	virtual void printMoney()&#123;
		cout &lt;&lt; &quot;中级程序员的工资是&quot; &lt;&lt; this-&gt;salary &lt;&lt; endl;
	&#125;
&#125;;

class Adv_programmer :public Programmer
&#123;
public:
	Adv_programmer(double salary) :Programmer(salary) &#123;

	&#125;
	virtual void printMoney()&#123;
		cout &lt;&lt; &quot;高级程序员的工资是&quot; &lt;&lt; this-&gt;salary &lt;&lt; endl;
	&#125;
&#125;;





int main(void)
&#123;

	Programmer * pro1 &#x3D; new Junior_programmer(12000);

	pro1-&gt;printMoney();

	delete pro1;


	Programmer * pro2 &#x3D; new Mid_programmer(15000);
	pro2-&gt;printMoney();
	delete pro2;

	Programmer *pro3 &#x3D; new Adv_programmer(30000);
	pro3-&gt;printMoney();
	delete pro3;


	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>案例3 电脑组装案例，面向抽象层编程</p>
<p>组装电脑有3个抽象类，抽象的cpu，抽象的显卡，抽象的内存。现在要求组装两台电脑，一台是Intel的CPU，Intel的显卡和Intel的内存。另一台是Intel的CPU、Nvidia的显卡和Kingston的内存条。针对抽象层编程练习完成此题。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;--------  抽象层---------
&#x2F;&#x2F;抽象CPU类
class CPU
&#123;
public:
	CPU();
	virtual void caculate() &#x3D; 0;
&#125;;

&#x2F;&#x2F;抽象的card类
class Card
&#123;
public:
	virtual void display() &#x3D; 0;
&#125;;

&#x2F;&#x2F;抽象的内存类
class Memory
&#123;
public:
	virtual void storage() &#x3D; 0;
&#125;;

&#x2F;&#x2F;架构类
class Computer
&#123;
public:
	Computer(CPU *cpu, Card *card, Memory *mem)
	&#123;
		this-&gt;cpu &#x3D; cpu;
		this-&gt;card &#x3D; card;
		this-&gt;mem &#x3D; mem;
	&#125;

	void work()
	&#123;
		this-&gt;cpu-&gt;caculate();
		this-&gt;card-&gt;display();
		this-&gt;mem-&gt;storage();
	&#125;

	~Computer() &#123;
		if (this-&gt;cpu !&#x3D; NULL) &#123;
			delete this-&gt;cpu;
		&#125;
		if (this-&gt;card !&#x3D; NULL) &#123;
			delete this-&gt;card;
		&#125;
		if (this-&gt;mem !&#x3D; NULL) &#123;
			delete this-&gt;mem;
		&#125;
	&#125;
private:
	CPU* cpu;
	Card*card;
	Memory *mem;
&#125;;
&#x2F;&#x2F; --------------------------

&#x2F;&#x2F;-----------实现层----------
&#x2F;&#x2F;具体的IntelCPU
class IntelCPU :public CPU
&#123;
public:
	virtual void caculate() &#123;
		cout &lt;&lt; &quot;Intel CPU开始计算了&quot; &lt;&lt; endl;
	&#125;
&#125;;

class IntelCard :public Card
&#123;
public:
	virtual void display() &#123;
		cout &lt;&lt; &quot;Intel Card开始显示了&quot; &lt;&lt; endl;

	&#125;
&#125;;

class IntelMem :public Memory &#123;
public:
	virtual void storage() &#123;
		cout &lt;&lt; &quot;Intel mem开始存储了&quot; &lt;&lt; endl;

	&#125;
&#125;;

class NvidiaCard :public Card
&#123;
public:
	virtual void display() &#123;
		cout &lt;&lt; &quot;Nvidia 显卡开始显示了&quot; &lt;&lt; endl;
	&#125;
&#125;;

class KingstonMem :public Memory &#123;
public:
	virtual void storage() &#123;
		cout &lt;&lt; &quot;KingstonMem 开始存储了&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;--------------------------



&#x2F;&#x2F;--------业务层-------------------
int main(void)
&#123;
	&#x2F;&#x2F;1 组装第一台intel系列的电脑
#if 0
	CPU *intelCpu &#x3D; new IntelCPU;
	Card *intelCard &#x3D; new IntelCard;
	Memory *intelMem &#x3D; new IntelMem;

	Computer *com1 &#x3D; new Computer(intelCpu, intelCard, intelMem);

	com1-&gt;work();

	Card *nCard &#x3D; new NvidiaCard;
	Memory* kMem &#x3D; new KingstonMem;

	Computer *com2 &#x3D; new Computer(intelCpu, nCard, kMem);

	com2-&gt;work();

	delete intelCpu;
#endif
	Computer *com1 &#x3D; new Computer(new IntelCPU, new IntelCard, new IntelMem);
	com1-&gt;work();
	delete com1;


	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>案例四： 几何图形多态联系</p>
<p>​    设计一个基类Shape包含成员函数Show()，将Show()声明为纯虚函数。Shape类公有派生矩形类Square (正方形)和圆类Circle (圆形），<br>​    问题1∶分别定义Show()实现其主要集合元素的显示。使用抽象类Shape类型的指针，当它指向某个派生类的对象时，就可以通过访问该对象的虚函数成员Show()。<br>​    问题2∶用ShowArea()分别显示各种图形的面积.最后还要显示所有图形的各个面积。要求积累指针数组，数组的每个元素指向一个派生类对象。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;


&#x2F;&#x2F;抽象的图形类
class Shape
&#123;
public:
	&#x2F;&#x2F;打印出图形的基本的属性
	virtual void show() &#x3D; 0;
	&#x2F;&#x2F;得到图形的面积
	virtual double getArea() &#x3D; 0;

	virtual ~Shape() &#123;

	&#125;
&#125;;

&#x2F;&#x2F;圆类
class Circle :public Shape
&#123;
public:
	Circle(double r) &#123;
		this-&gt;r &#x3D; r;
	&#125;

	&#x2F;&#x2F;打印出图形的基本你属性
	virtual void show()  &#123;
		cout &lt;&lt; &quot;圆的半径是 &quot; &lt;&lt; r &lt;&lt; endl;
	&#125;
	&#x2F;&#x2F;得到图形的面积
	virtual double getArea()  &#123;
		cout &lt;&lt; &quot;获取圆的面积&quot; &lt;&lt; endl;
		return this-&gt;r*this-&gt;r *3.14;
	&#125;
	~Circle() &#123;
		cout &lt;&lt; &quot;圆的析构函数。。&quot; &lt;&lt; endl;
	&#125;
private:
	double r;
&#125;;

class Square :public Shape
&#123;
public:
	Square(double a) &#123;
		this-&gt;a &#x3D; a;
	&#125;

	&#x2F;&#x2F;打印出图形的基本你属性
	virtual void show() &#123;
		cout &lt;&lt; &quot;正方形的边长是&quot; &lt;&lt; this-&gt;a &lt;&lt; endl;
	&#125;
	&#x2F;&#x2F;得到图形的面积
	virtual double getArea() &#123;
		cout &lt;&lt; &quot;得到正方形的面积&quot; &lt;&lt; endl;
		return a*a;
	&#125;


	~Square() &#123;
		cout &lt;&lt; &quot;正方形的析构函数&quot; &lt;&lt; endl;
	&#125;
private:
	double a;
&#125;;



int main(void)
&#123;
	Shape *array[2] &#x3D; &#123; 0 &#125;;

	for (int i &#x3D; 0; i &lt; 2; i++) &#123;
		&#x2F;&#x2F;生成一个圆
		if (i &#x3D;&#x3D; 0) &#123;
			double r;
			cout &lt;&lt; &quot;请输入圆的半径&quot; &lt;&lt; endl;
			cin &gt;&gt; r;
			array[i] &#x3D; new Circle(r);
		&#125;
		&#x2F;&#x2F;生成一个正方形
		else &#123;
			double a;
			cout &lt;&lt; &quot;请输入正方形的边长&quot; &lt;&lt; endl;
			cin &gt;&gt; a;
			array[i] &#x3D; new Square(a);
		&#125;
	&#125;


	&#x2F;&#x2F;遍历这个array数组
	for (int i &#x3D; 0; i &lt; 2; i++) &#123;
		array[i]-&gt;show();
		cout &lt;&lt; array[i]-&gt;getArea() &lt;&lt; endl;

		delete array[i];
	&#125;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<blockquote>
<p>案例5 企业员工信息管理系统</p>
<p>一个小型公司的人员信息管理系统<br>某小型公司,主要有四类人员:经理、技术人员、销售经理和推销员。现在,需要存储这些人员的姓名、编号、级别、当月薪水.计算月薪总额并显示全部信息。<br>人员编号基数为1000,每输入一个人员信息编号顺序加1。<br>程序要有对所有人员提升级别的功能。本例中为简单起见,所有人员的初始级别均为1级。然后进行升级,经理升为4级,技术人员和销售经理升为3级,推销员仍为1级。<br>月薪计算办法是:经理拿固定月薪8000元;技术人员按每小时100元领取月薪;推销员的月薪按该推销员当月销售额的4%提成;销售经理既拿固定月薪也领取销售提成,固定月薪为5000元,销售提成为所管辖部门当月销售总额的5%</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Employee.h
#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;


&#x2F;&#x2F;抽象的员工 
class Employee
&#123;
public:
	Employee();
	virtual ~Employee();

	&#x2F;&#x2F;提供一个现实的初始化员工的函数
	virtual void init() &#x3D; 0;

	&#x2F;&#x2F;提供员工薪资的计算方法
	virtual void getPay() &#x3D; 0;
	&#x2F;&#x2F;显示员工的信息
	void displayStatus();
	&#x2F;&#x2F;提供修改员工级别的方法
	virtual void upLevel(int level) &#x3D; 0;

protected:
	string name;&#x2F;&#x2F;姓名
	int id;&#x2F;&#x2F;编号
	double salary;&#x2F;&#x2F;薪资
	int level;&#x2F;&#x2F;级别

	&#x2F;&#x2F;员工的编号基础值
	static int startNum;
&#125;;

&#x2F;&#x2F;Employee.cpp
#include &quot;Employee.h&quot;

int Employee::startNum &#x3D; 1000;


Employee::Employee()
&#123;
	cout &lt;&lt; &quot;Employee()...&quot; &lt;&lt; endl;
	id &#x3D; startNum++;
	level &#x3D; 1;
	salary &#x3D; 0.0;
&#125;


Employee::~Employee()
&#123;
	cout &lt;&lt; &quot;~Employee()..&quot; &lt;&lt; endl;
&#125;


void Employee::displayStatus()
&#123;
	cout &lt;&lt; &quot;员工姓名&quot; &lt;&lt; this-&gt;name &lt;&lt; endl;
	cout &lt;&lt; &quot;员工的级别&quot; &lt;&lt; this-&gt;level &lt;&lt; endl;
	cout &lt;&lt; &quot;员工的月薪 &quot; &lt;&lt; this-&gt;salary &lt;&lt; endl;
	cout &lt;&lt; &quot;员工的ID&quot; &lt;&lt; this-&gt;id &lt;&lt; endl;
&#125;
&#x2F;&#x2F;Manager.h
#pragma once
#include &quot;Employee.h&quot;


class Manager : virtual public Employee
&#123;
public:
	Manager();
	~Manager();

	&#x2F;&#x2F;提供一个现实的初始化员工的函数
	virtual void init();

	virtual void getPay();

	&#x2F;&#x2F;提供修改员工级别的方法
	virtual void upLevel(int level);

protected:
	double fixSalary;&#x2F;&#x2F;经理的固定工资
&#125;;

&#x2F;&#x2F;Manager.cpp
#include &quot;Manager.h&quot;


Manager::Manager()
&#123;
	cout &lt;&lt; &quot;Manager()..&quot; &lt;&lt; endl;

&#125;

void Manager::init()
&#123;
	cout &lt;&lt; &quot;请输入经理的姓名&quot; &lt;&lt; endl;
	cin &gt;&gt; name;
	this-&gt;fixSalary &#x3D; 8000;
&#125;



Manager::~Manager()
&#123;
	cout &lt;&lt; &quot;~Manager()..&quot; &lt;&lt; endl;
&#125;


void Manager::getPay()
&#123;
	&#x2F;&#x2F;计算薪水的方式
	this-&gt;salary &#x3D; this-&gt;fixSalary;
&#125;

&#x2F;&#x2F;提供修改员工级别的方法
void Manager::upLevel(int level) &#123;
	this-&gt;level +&#x3D; level;

	if (this-&gt;level &#x3D;&#x3D; 1) &#123;
		this-&gt;fixSalary &#x3D; 8000;
	&#125;
	else if(this-&gt;level &#x3D;&#x3D; 2)&#123;
		this-&gt;fixSalary &#x3D; 10000;
	&#125;
&#125;

&#x2F;&#x2F;SaleMan.h
#pragma once
#include &quot;Employee.h&quot;
class SalesMan : virtual public Employee
&#123;
public:
	SalesMan();
	~SalesMan();

	&#x2F;&#x2F;提供员工薪资的计算方法
	virtual void getPay();

	virtual void init();

	&#x2F;&#x2F;提供修改员工级别的方法
	virtual void upLevel(int level);

protected:
	&#x2F;&#x2F;当月的销售额
	int saleAmount;
	&#x2F;&#x2F;提成的比率
	double salePercent;
&#125;;

&#x2F;&#x2F;SaleMan.cpp
#include &quot;SalesMan.h&quot;


SalesMan::SalesMan()
&#123;
	cout &lt;&lt; &quot;SaleMan()...&quot; &lt;&lt; endl;

&#125;

 void SalesMan::init()
&#123;
	 cout &lt;&lt; &quot;请输入销售员工的姓名&quot; &lt;&lt; endl;
	 cin &gt;&gt; this-&gt;name;
	 this-&gt;salePercent &#x3D; 0.04;
&#125;

SalesMan::~SalesMan()
&#123;
	cout &lt;&lt; &quot;~SaleMan()..&quot; &lt;&lt; endl;
&#125;


&#x2F;&#x2F;提供员工薪资的计算方法
void SalesMan::getPay()
&#123;
	cout &lt;&lt; &quot;请输入当月的销售额&quot; &lt;&lt; endl;
	cin &gt;&gt; this-&gt;saleAmount;

	&#x2F;&#x2F;计算当月的月薪
	this-&gt;salary &#x3D; this-&gt;saleAmount *this-&gt;salePercent;
&#125;

&#x2F;&#x2F;提供修改员工级别的方法
void SalesMan::upLevel(int level)
&#123;
	this-&gt;level +&#x3D; level;
	if (this-&gt;level &#x3D;&#x3D; 1) &#123;
		this-&gt;salePercent &#x3D; 0.04;
	&#125;
&#125;
&#x2F;&#x2F;SalesManager.h
#pragma once
#include &quot;Manager.h&quot;
#include &quot;SalesMan.h&quot;

class SalesManager :public Manager, public SalesMan
&#123;
public:
	SalesManager();
	~SalesManager();

	virtual void init();

	&#x2F;&#x2F;提供员工薪资的计算方法
	virtual void getPay();

	&#x2F;&#x2F;提供修改员工级别的方法
	virtual void upLevel(int level);
&#125;;

&#x2F;&#x2F;SaleManager.cpp
#include &quot;SalesManager.h&quot;


SalesManager::SalesManager()
&#123;
	cout &lt;&lt; &quot;SalesManager()..&quot; &lt;&lt; endl;

&#125;

void SalesManager::init()
&#123;
	cout &lt;&lt; &quot;请输入销售经理的姓名&quot; &lt;&lt; endl;
	cin &gt;&gt; name;
	fixSalary &#x3D; 5000;
	salePercent &#x3D; 0.05;
&#125;



SalesManager::~SalesManager()
&#123;
	cout &lt;&lt; &quot;~SalesManager()...&quot; &lt;&lt; endl;
&#125;

&#x2F;&#x2F;提供员工薪资的计算方法
void SalesManager::getPay()
&#123;
	cout &lt;&lt; &quot;请输入当月的销售额&quot; &lt;&lt; endl;
	cin &gt;&gt; this-&gt;saleAmount;

	this-&gt;salary &#x3D; this-&gt;saleAmount*this-&gt;salePercent + this-&gt;fixSalary;
&#125;

&#x2F;&#x2F;提供修改员工级别的方法
 void SalesManager::upLevel(int level)
 &#123;
	 this-&gt;level +&#x3D; level;
&#125;

&#x2F;&#x2F;Technician.h
#pragma once
#include &quot;Employee.h&quot;


class Technician : public Employee
&#123;
public:
	Technician();
	~Technician();

	virtual void init();

	&#x2F;&#x2F;提供员工薪资的计算方法
	virtual void getPay();

	&#x2F;&#x2F;升级的方法
	virtual void upLevel(int level);
private:
	&#x2F;&#x2F;一个月工作了多少小时
	int workHour;
	&#x2F;&#x2F;每小时多钱
	double perHourMoney;
&#125;;

&#x2F;&#x2F;Technican.cpp
#include &quot;Technician.h&quot;


Technician::Technician()
&#123;
	cout &lt;&lt; &quot;Technician()..&quot; &lt;&lt; endl;

&#125;

void Technician::init()
&#123;
	cout &lt;&lt; &quot;请输入员工的姓名&quot; &lt;&lt; endl;
	cin &gt;&gt; name;
	perHourMoney &#x3D; 100;&#x2F;&#x2F;默认员工每小时赚100元
&#125;


Technician::~Technician()
&#123;
	cout &lt;&lt; &quot;~Technician()...&quot; &lt;&lt; endl;
&#125;

&#x2F;&#x2F;提供员工薪资的计算方法
void Technician::getPay()
&#123;
	cout &lt;&lt; &quot;请输入该员工 一共工作了多少小时&quot; &lt;&lt; endl;
	cin &gt;&gt; workHour;

	this-&gt;salary &#x3D; this-&gt;perHourMoney * this-&gt;workHour;
&#125;

&#x2F;&#x2F;升级的方法
void Technician::upLevel(int level)
&#123;
	this-&gt;level +&#x3D; level;

&#125;

&#x2F;&#x2F;main.cpp
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;Employee.h&quot;
#include &quot;Technician.h&quot;
#include &quot;Manager.h&quot;
#include &quot;SalesMan.h&quot;
#include &quot;SalesManager.h&quot;

using namespace std;

int main(void)
&#123;

#if 0
	Employee *em1 &#x3D; new Technician;

	em1-&gt;getPay();
	em1-&gt;upLevel(1);
	em1-&gt;displayStatus();

	delete em1;
#endif
#if 0
	Employee *em &#x3D; new Manager;
	em-&gt;upLevel(1);
	em-&gt;getPay();
	em-&gt;displayStatus();
	
	delete em;
#endif 
#if 0
	Employee *em &#x3D; new SalesMan;

	em-&gt;upLevel(0);
	em-&gt;getPay();
	em-&gt;displayStatus();

	delete em;
#endif
#if 0
	Employee *em &#x3D; new SalesManager;
	
	em-&gt;init();
	em-&gt;upLevel(1);
	em-&gt;getPay();
	em-&gt;displayStatus();

	delete em;
#endif
	Employee *person_array[] &#x3D; &#123;new Technician, new Manager, new SalesMan, new SalesManager&#125;;

	for (int i &#x3D; 0; i &lt; sizeof(person_array) &#x2F; sizeof(person_array[0]); i++) &#123;
		person_array[i]-&gt;init();
		person_array[i]-&gt;upLevel(0);
		person_array[i]-&gt;getPay();
		person_array[i]-&gt;displayStatus();
	&#125;

	for (int i &#x3D; 0; i &lt; sizeof(person_array) &#x2F; sizeof(person_array[0]); i++) &#123;
		delete person_array[i];
	&#125;



	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220705214630.png" alt="20220705214630"></p>
<h3 id="C语言中的面向接口编程"><a href="#C语言中的面向接口编程" class="headerlink" title="C语言中的面向接口编程"></a>C语言中的面向接口编程</h3><ul>
<li>函数三要素：名称、参数、返回值</li>
<li>如何定义一个数组类和一个数组指针</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;方法一： 直接定义一个数组类型
typedef int(ARRAY_INT_10)[10];


&#x2F;&#x2F;方法二：
typedef int(*ARRAY_INT_10_P)[10];

int main(void)
&#123;
	int array[10]; &#x2F;&#x2F;array 应该是一个指向int类型指针。

	&#x2F;&#x2F;方法一：
	&#x2F;&#x2F;ARRAY_INT_10 *array_10_p &#x3D; &amp;array; &#x2F;&#x2F;*array_10_p &#x3D;&#x3D;&#x3D; array

	&#x2F;&#x2F;方法二：
	ARRAY_INT_10_P array_10_p &#x3D; &amp;array;

	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		(*array_10_p)[i] &#x3D; i + 10;
	&#125;

	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		cout &lt;&lt; array[i] &lt;&lt; endl;
	&#125;

	&#x2F;&#x2F;方法三：
	int(*p)[10] &#x3D; &amp;array;

	cout &lt;&lt; &quot;------&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		cout &lt;&lt; (*p)[i] &lt;&lt; endl;
	&#125;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数类型语法基础"><a href="#函数类型语法基础" class="headerlink" title="函数类型语法基础"></a>函数类型语法基础</h4><ul>
<li>函数指针用于指向一个函数,函数名是函数体的入口地址<ul>
<li>可通过函数类型定义函数指针: FuncType* pointer;</li>
<li>也可以直接定义: type (*pointer)(parameter list);<ul>
<li>pointer为函数指针变量名</li>
<li>type为指向函数的返回值类型</li>
<li>parameter list为指向函数的参数类型列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;
typedef int(FUNC)(int); &#x2F;&#x2F;定义一个函数类型
int test(int i)         &#x2F;&#x2F; 定义一个函数
&#123;
  return i * i;
&#125;
void f() &#x2F;&#x2F; 定义一个函数
&#123;
  printf(&quot;Call f().. . \n&quot;);
&#125;
int main() &#123;
  FUNC *pt &#x3D; test;
  &#x2F;&#x2F; 定义一个指向函数的类型FUNC的指针pt，
  &#x2F;&#x2F;并初始化指向test函数
  printf(&quot;Function pointer call: %d\n&quot;, pt(3)); &#x2F;&#x2F;通过函数指针pt间接调用test
  void (*pf)() &#x3D; &amp;f; &#x2F;&#x2F;直接定义一个函数指针指向f
  pf();
  &#x2F;&#x2F;通过函数指针间接调用
  (*pf)();
  &#x2F;&#x2F; 通过函数指针间接调用等价于上述调用方法
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数指针做函数参数"><a href="#函数指针做函数参数" class="headerlink" title="函数指针做函数参数"></a>函数指针做函数参数</h4><ul>
<li>当函数指针做为函数的参数，传递给一个被调用函数，被调用函数就可以通过这个指针调用外部的函数，这就形成了回调。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;
int add(int a, int b);
int libfun(int (*pDis)(int a, int b));
int main(void) &#123;
  int (*pfun)(int a, int b); &#x2F;&#x2F;定义一个函数指针pfun 指向int ()(int, int)函数类型
  pfun &#x3D; add;
  libfun(pfun);
  return 0;
&#125;
int add(int a, int b) &#123; return a + b; &#125;
int libfun(int (*pDis)(int a, int b)) &#123;
  int a, b;
  a &#x3D; 1;
  b &#x3D; 2;
  add(1, 3);
  &#x2F;&#x2F; 直接调用add函数
  printf(&quot;%d&quot;, pDis(a, b)); &#x2F;&#x2F;通过函数指针做函数参数,间接调用add函数
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数指针的工程意义"><a href="#函数指针的工程意义" class="headerlink" title="函数指针的工程意义"></a>函数指针的工程意义</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

int func(int a, int b)
&#123;
	cout &lt;&lt; &quot; 1999 年写的 func&quot; &lt;&lt; endl;

	return 0;
&#125;

int func2(int a, int b)
&#123;
	cout &lt;&lt; &quot;1999 写的 func2&quot; &lt;&lt; endl;
	return 0;
&#125;

int func3(int a, int b) 
&#123;
	cout &lt;&lt; &quot;1999年 写的 func3 &quot; &lt;&lt; endl;
	return 0;
&#125;

&#x2F;&#x2F;2018想添加一个新的子业务
int new_func4(int a, int b)
&#123;
	cout &lt;&lt; &quot;2018 新写的子业务&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; &quot;, b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;
	return 0;
&#125;

&#x2F;&#x2F;方法一：  函数的返回值， 函数的参数列表（形参的个数，类型，顺序）
&#x2F;&#x2F;定义一个函数类型。

typedef int(FUNC)(int, int);

&#x2F;&#x2F;方法二：   定义一个函数指针
typedef int(*FUNC_P)(int, int);


&#x2F;&#x2F;定义一个统一的接口 将他们全部调用起来。

void my_funtion(int(*fp)(int, int), int a, int b)
&#123;
	cout &lt;&lt; &quot;1999年实现这个架构业务&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;固定业务1&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;固定业务2&quot; &lt;&lt; endl;

	fp(a, b);&#x2F;&#x2F;可变的业务

	cout &lt;&lt; &quot;固定业务3&quot; &lt;&lt; endl;

&#125;

int main(void)
&#123;
#if 0
	&#x2F;&#x2F;方法一：
	FUNC *fp &#x3D; NULL;

	fp &#x3D; func;
	fp(10, 20);

	FUNC_P fp2 &#x3D; NULL;

	fp2 &#x3D; func;

	fp2(100, 200);

	&#x2F;&#x2F;方法三：
	int(*fp3)(int, int)   &#x3D; NULL;
	fp3 &#x3D; func;
	fp3(1000, 3000);
#endif
	my_funtion(func, 10, 20);
	my_funtion(func2, 100, 200);
	my_funtion(func3, 1000, 2000);

	my_funtion(new_func4, 2000, 3000);
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p>回调函数的优点</p>
<ul>
<li>函数的调用和函数的实现有效的分离</li>
<li>类似C++的多态,可扩展</li>
</ul>
</li>
<li><p>现在这几个函数是在同一个文件当中</p>
</li>
<li><p><code>int libfun(int (*pDis)(int a, int b))</code></p>
</li>
<li><p>是一个库中的函数，就只有使用回调了，通过函数指针参数将外部函数地址传入来实现调用。</p>
</li>
<li><p>函数add的代码作了修改，也不必改动库的代码，就可以正常实现调用便于程序的维护和升级。</p>
</li>
<li><p>多态案例：诸葛亮的锦囊妙计</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;
&#x2F;&#x2F;-------------抽象层------------
&#x2F;&#x2F;定义拆开锦囊方法的类型。
typedef void(TIPS)(void);

&#x2F;&#x2F;定义锦囊
struct tip
&#123;
	char from[64]; &#x2F;&#x2F;谁写的
	char to[64];&#x2F;&#x2F;写给谁的。
	&#x2F;&#x2F;锦囊的内容
	TIPS *tp;&#x2F;&#x2F;相当于抽象类的 纯虚函数.
&#125;;

&#x2F;&#x2F;需要一个打开锦囊的架构函数
void open_tips(struct tip *tip_p)
&#123;
	cout &lt;&lt; &quot;打开了锦囊&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;此锦囊是由&quot; &lt;&lt; tip_p-&gt;from &lt;&lt; &quot;写给 &quot; &lt;&lt; tip_p-&gt;to &lt;&lt; &quot;的。&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;内容是&quot; &lt;&lt; endl;
	tip_p-&gt;tp(); &#x2F;&#x2F;此时就发生了多态现象。
&#125;

&#x2F;&#x2F;提供一个创建一个锦囊的方法
struct tip* create_tip(char*from, char *to, TIPS*tp)
&#123;
	struct tip *temp &#x3D; (struct tip*)malloc(sizeof(struct tip));
	if (temp &#x3D;&#x3D; NULL) &#123;
		return NULL;
	&#125;
	strcpy(temp-&gt;from, from);
	strcpy(temp-&gt;to, to);
	&#x2F;&#x2F;给一个回调函数赋值， 一般称 注册回调函数
	temp-&gt;tp &#x3D; tp;

	return temp;
&#125;

&#x2F;&#x2F;提供一个销毁锦囊的方法
void destory_tip(struct tip *tp)
&#123;
	if (tp !&#x3D; NULL) &#123;
		free(tp);
		tp &#x3D; NULL;
	&#125;
&#125;


&#x2F;&#x2F; ------------- 实现层------------
&#x2F;&#x2F;诸葛亮写了3个锦囊
void tip1_func(void)
&#123;
	cout &lt;&lt; &quot;一到东吴就拜会乔国老&quot; &lt;&lt; endl;
&#125;

void tip2_func(void)
&#123;
	cout &lt;&lt; &quot;如果主公乐不思蜀，就谎称曹贼来袭。赶紧回来 &quot; &lt;&lt; endl;
&#125;

void tip3_func(void)
&#123;
	cout &lt;&lt; &quot;如果被孙权追杀，向孙尚香求救&quot; &lt;&lt; endl;
&#125;

void tip4_func(void)
&#123;
	cout &lt;&lt; &quot;如果求救孙尚香都不灵，  你们去死了， 我是蜀国老大了&quot; &lt;&lt; endl;
&#125;


&#x2F;&#x2F;---------------  业务层-----------------
int main(void)
&#123;
	&#x2F;&#x2F;创建出3个锦囊
	struct tip *tip1 &#x3D; create_tip(&quot;孔明&quot;, &quot;赵云&quot;, tip1_func);
	struct tip *tip2 &#x3D; create_tip(&quot;孔明&quot;, &quot;赵云&quot;, tip2_func);
	struct tip *tip3 &#x3D; create_tip(&quot;孔明&quot;, &quot;赵云&quot;, tip3_func);
	struct tip *tip4 &#x3D; create_tip(&quot;庞统&quot;, &quot;赵云&quot;, tip4_func);

	&#x2F;&#x2F;由赵云进行拆锦囊。
	cout &lt;&lt; &quot;刚刚来到东吴， 赵云打开第一个锦囊&quot; &lt;&lt; endl;
	open_tips(tip1);
	cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;刘备乐不思蜀， 赵云打开第二个锦囊&quot; &lt;&lt; endl;
	open_tips(tip2);
	cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;孙权大军追杀，赵云打开第三个锦囊&quot; &lt;&lt; endl;
	open_tips(tip3);
	cout &lt;&lt; &quot;-----------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;赵云发现，实在是杀不动了， 打开了第四个锦囊&quot; &lt;&lt; endl;
	open_tips(tip4);

	destory_tip(tip1);
	destory_tip(tip2);
	destory_tip(tip3);
	destory_tip(tip4);
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><ul>
<li>泛型(Generic Programming)即是指具有在多种数据类型上皆可操作的含意。泛型编程的代表作品STL是一种高效、泛型、可交互操作的软件组件。</li>
<li>泛型编程最初诞生于C++中,目的是为了实现C++的STL(标准模板库)。其语言支持机制就是模板(Templates)。模板的精神其实很简单:参数化类型。换句话说,把一个原本特定于某个类型的算法或类当中的类型信息抽掉,抽出来做成模板参数T。</li>
<li>所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体指定，用一个虚拟的类型来代表。这个通用函数就称为函数模板。</li>
<li><img src="http://qiniu.orangew.cn/img/20220705223315.png" alt="20220705223315"></li>
</ul>
<h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><h4 id="函数重载实现的泛型"><a href="#函数重载实现的泛型" class="headerlink" title="函数重载实现的泛型"></a>函数重载实现的泛型</h4><ul>
<li>写n个函数，交换char类型、int类型变量的值。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
void myswap(int &amp;a,int &amp;b) &#123;
  int t &#x3D; a;
  a &#x3D; b;
  b &#x3D; t;
&#125;
void myswap(char &amp;a, char &amp;b) &#123;
  char t &#x3D; a;
  a &#x3D; b;
  b &#x3D; t;
&#125;
int main(void) &#123;
  int x &#x3D; 1;
  int y &#x3D; 2;
  myswap(x, y);
  cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot;, y:&quot; &lt;&lt; y &lt;&lt; endl;
  char a &#x3D; &#39;c&#39;;
  char b &#x3D; &#39;b&#39;;
  myswap(a, b);
  cout &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot;, b:&quot; &lt;&lt; b &lt;&lt; endl;
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数模板的引入"><a href="#函数模板的引入" class="headerlink" title="函数模板的引入"></a>函数模板的引入</h4><ul>
<li>语法格式</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;
template&lt;class T&gt;
template&lt;typename 类型参数表&gt;
返回类型 函数模板名 (函数参数列表)&#123;
函数模板定义体
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>template是语义是模板的意思,尖括号中先写关键字typename或是class ,后面跟一个类型T,此类即是虚拟的类型。至于为什么用T,用的人多了,也就是T了。</li>
</ul>
<h4 id="函数模板的实例"><a href="#函数模板的实例" class="headerlink" title="函数模板的实例"></a>函数模板的实例</h4><ul>
<li>调用过程是这样的,先将函数模板实再化为函数,然后再发生函数调用。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;typename T&gt; 
void myswap(T &amp;a,T &amp;b) &#123;
  T t &#x3D; a;
  a &#x3D; b;
  b &#x3D; t;
&#125;
int main(void) &#123;
  int x &#x3D; 1;
  int y &#x3D; 2;
  myswap(x, y);
  cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot;, y:&quot; &lt;&lt; y &lt;&lt; endl;
  myswap&lt;int&gt;(x, y);
  cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot;, y: &quot; &lt;&lt; y &lt;&lt; endl;
  char a &#x3D; &#39;a&#39;;
  char b &#x3D; &#39;b&#39;;
  myswap(a, b);
  cout &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot;, b: &quot; &lt;&lt; b &lt;&lt; endl;
  myswap&lt;char&gt;(a, b);
  cout &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot;, b: &quot; &lt;&lt; b &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>函数模板,只适用于i函数的参数个数相同而类型不同,且函数体相同的情况。如果个数不同,则不能用函数模板。</li>
<li>练习写一个之化的排序程序，用femPlateT来通用基本类型</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template&lt;typename T&gt;
void sortArray(T *array , int num) ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="函数模板与函数重载"><a href="#函数模板与函数重载" class="headerlink" title="函数模板与函数重载"></a>函数模板与函数重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;typename T&gt; void myswap(T &amp;a, T &amp;b) &#123;
  T t;
  t &#x3D; a;
  a &#x3D; b;
  b &#x3D; t;
  cout &lt;&lt; &quot;myswap模板函数do&quot; &lt;&lt; endl;
&#125;
void myswap(char &amp;a, int &amp;b) &#123;
  int t;
  t &#x3D; a;
  a &#x3D; b;
  b &#x3D; t;
  cout &lt;&lt; &quot;myswap普通函数do&quot; &lt;&lt; endl;
&#125;
int main() &#123;
  char cData &#x3D; &#39;a&#39;;
  int iData &#x3D; 2;
  &#x2F;&#x2F;编译不通过
  myswap(cData, iData);
  myswap(iData, cData);
  &#x2F;&#x2F; 普通函数会进行隐士的数据类型转换 
   myswap&lt;int&gt;(cData,iData);
  &#x2F;&#x2F; 函数模板不提供隐式的数据类型转换必须是严格的匹配 
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>普通函数会进行隐士的数据类型转换,函数模板不提供隐式的数据类型转换必须是严格的匹配。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int Max(int a, int b) &#123;
  cout &lt;&lt; &quot;int Max(int a, int b)&quot; &lt;&lt; endl;
  return a &gt; b ? a : b;
&#125;
template &lt;typename T&gt; T Max(T a, T b) &#123;
  cout &lt;&lt; &quot;T Max(T a,T b)&quot; &lt;&lt; endl;
  return a &gt; b ? a : b;
&#125;
template &lt;typename T&gt; T Max(T a, T b, T c) &#123;
  cout &lt;&lt; &quot;T Max(T a,T b, T c)&quot; &lt;&lt; endl;
  return Max(Max(a, b), c);
&#125;
int main() &#123;
  int a &#x3D; 1;
  int b &#x3D; 2;
  cout &lt;&lt; Max(a, b) &lt;&lt; endl; &#x2F;&#x2F;当函数模板和普通函数都符合调用时,优先选择普通函数
  cout &lt;&lt; Max&lt;&gt;(a, b) &lt;&lt; endl; &#x2F;&#x2F;若显示使用函数模板,则使用&lt;&gt;类型列表
  cout &lt;&lt; Max(3.0, 4.0) &lt;&lt; endl; &#x2F;&#x2F;如果函数模板产生更好的匹配使用函数模板
  cout &lt;&lt; Max(5.0, 6.0, 7.0) &lt;&lt; endl; &#x2F;&#x2F;重载
  cout &lt;&lt; Max(&#39;a&#39;, 100) &lt;&lt; endl; &#x2F;&#x2F;调用普通函数可以隐式类型转换
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1.当函数模板和普通函数都符合调用时,优先选择普通函数</p>
<p>2.若显示使用函数模板,则使用&lt;&gt;类型列表</p>
<p>3.如果函数模板产生更好的匹配使用函数模板</p>
</blockquote>
<h4 id="编译器对模板机制剖析"><a href="#编译器对模板机制剖析" class="headerlink" title="编译器对模板机制剖析"></a>编译器对模板机制剖析</h4><ul>
<li><p>简析编译器的编译过程</p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/20220705225904.png" alt="20220705225904"></p>
</li>
<li><blockquote>
<p>g++ -E hello.c -o hello.i（预处理)</p>
<p>g++ -S hello.i -o hello.s(编译)</p>
<p>g++ -c hello.s -o hello.o （汇编)</p>
<p>g++ hello.o -o hello（链接)</p>
<p>以上四个步骤，可合成一个步骤<br>g++ hello.c -o hello （直接编译链接成可执行目标文件)</p>
</blockquote>
</li>
<li><p>test.cpp</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;class T&gt; 
void mySwap(T &amp;a,T &amp;b) &#123;
  T c &#x3D; a;
  a &#x3D; b;
  b &#x3D; c;
&#125;
int main(void) &#123;
  int x &#x3D; 10;
  int y &#x3D; 20;
  mySwap&lt;int&gt;(x,y);
  cout &lt;&lt; &quot;x: &quot; &lt;&lt; x &lt;&lt; &quot;, y: &quot; &lt;&lt; y &lt;&lt; endl;
  char a &#x3D; &#39;a &#39;;
  char b &#x3D; &#39;b&#39;;
  mySwap&lt;char&gt;(a,b);
  cout &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot;, b: &quot; &lt;&lt; b &lt;&lt; endl;
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><code>g++ -E test.cpp -o test.s</code></p>
</li>
<li><p>test.s</p>
</li>
</ul>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">	.file	&quot;test.c++&quot;
	.section .rdata,&quot;dr&quot;
__ZStL19piecewise_construct:
	.space 1
.lcomm __ZStL8__ioinit,1,1
	.def	___main;	.scl	2;	.type	32;	.endef
LC0:
	.ascii &quot;x: \0&quot;
LC1:
	.ascii &quot;, y: \0&quot;
LC2:
	.ascii &quot;a: \0&quot;
LC3:
	.ascii &quot;, b: \0&quot;
	.text
	.globl	_main
	.def	_main;	.scl	2;	.type	32;	.endef
_main:
LFB1446:
	.cfi_startproc
	leal	4(%esp), %ecx
	.cfi_def_cfa 1, 0
	andl	$-16, %esp
	pushl	-4(%ecx)
	pushl	%ebp
	.cfi_escape 0x10,0x5,0x2,0x75,0
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	.cfi_escape 0xf,0x3,0x75,0x74,0x6
	.cfi_escape 0x10,0x6,0x2,0x75,0x7c
	.cfi_escape 0x10,0x3,0x2,0x75,0x78
	subl	$44, %esp
	call	___main
	movl	$10, -28(%ebp)
	movl	$20, -32(%ebp)
	leal	-32(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-28(%ebp), %eax
	movl	%eax, (%esp)
	call	__Z6mySwapIiEvRT_S1_
	movl	-32(%ebp), %ebx
	movl	-28(%ebp), %esi
	movl	$LC0, 4(%esp)
	movl	$__ZSt4cout, (%esp)
	call	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	%esi, (%esp)
	movl	%eax, %ecx
	call	__ZNSolsEi
	subl	$4, %esp
	movl	$LC1, 4(%esp)
	movl	%eax, (%esp)
	call	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	%ebx, (%esp)
	movl	%eax, %ecx
	call	__ZNSolsEi
	subl	$4, %esp
	movl	$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)
	movl	%eax, %ecx
	call	__ZNSolsEPFRSoS_E
	subl	$4, %esp
	movb	$32, -33(%ebp)
	movb	$98, -34(%ebp)
	leal	-34(%ebp), %eax
	movl	%eax, 4(%esp)
	leal	-33(%ebp), %eax
	movl	%eax, (%esp)
	call	__Z6mySwapIcEvRT_S1_
	movzbl	-34(%ebp), %eax
	movsbl	%al, %ebx
	movzbl	-33(%ebp), %eax
	movsbl	%al, %esi
	movl	$LC2, 4(%esp)
	movl	$__ZSt4cout, (%esp)
	call	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	%esi, 4(%esp)
	movl	%eax, (%esp)
	call	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c
	movl	$LC3, 4(%esp)
	movl	%eax, (%esp)
	call	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
	movl	%ebx, 4(%esp)
	movl	%eax, (%esp)
	call	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c
	movl	$__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, (%esp)
	movl	%eax, %ecx
	call	__ZNSolsEPFRSoS_E
	subl	$4, %esp
	movl	$0, %eax
	leal	-12(%ebp), %esp
	popl	%ecx
	.cfi_restore 1
	.cfi_def_cfa 1, 0
	popl	%ebx
	.cfi_restore 3
	popl	%esi
	.cfi_restore 6
	popl	%ebp
	.cfi_restore 5
	leal	-4(%ecx), %esp
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1446:
	.section	.text$_Z6mySwapIiEvRT_S1_,&quot;x&quot;
	.linkonce discard
	.globl	__Z6mySwapIiEvRT_S1_
	.def	__Z6mySwapIiEvRT_S1_;	.scl	2;	.type	32;	.endef
__Z6mySwapIiEvRT_S1_:
LFB1654:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$16, %esp
	movl	8(%ebp), %eax
	movl	(%eax), %eax
	movl	%eax, -4(%ebp)
	movl	12(%ebp), %eax
	movl	(%eax), %edx
	movl	8(%ebp), %eax
	movl	%edx, (%eax)
	movl	12(%ebp), %eax
	movl	-4(%ebp), %edx
	movl	%edx, (%eax)
	nop
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1654:
	.section	.text$_Z6mySwapIcEvRT_S1_,&quot;x&quot;
	.linkonce discard
	.globl	__Z6mySwapIcEvRT_S1_
	.def	__Z6mySwapIcEvRT_S1_;	.scl	2;	.type	32;	.endef
__Z6mySwapIcEvRT_S1_:
LFB1658:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$16, %esp
	movl	8(%ebp), %eax
	movzbl	(%eax), %eax
	movb	%al, -1(%ebp)
	movl	12(%ebp), %eax
	movzbl	(%eax), %edx
	movl	8(%ebp), %eax
	movb	%dl, (%eax)
	movl	12(%ebp), %eax
	movzbl	-1(%ebp), %edx
	movb	%dl, (%eax)
	nop
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1658:
	.text
	.def	___tcf_0;	.scl	3;	.type	32;	.endef
___tcf_0:
LFB1882:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$8, %esp
	movl	$__ZStL8__ioinit, %ecx
	call	__ZNSt8ios_base4InitD1Ev
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1882:
	.def	__Z41__static_initialization_and_destruction_0ii;	.scl	3;	.type	32;	.endef
__Z41__static_initialization_and_destruction_0ii:
LFB1881:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$24, %esp
	cmpl	$1, 8(%ebp)
	jne	L8
	cmpl	$65535, 12(%ebp)
	jne	L8
	movl	$__ZStL8__ioinit, %ecx
	call	__ZNSt8ios_base4InitC1Ev
	movl	$___tcf_0, (%esp)
	call	_atexit
L8:
	nop
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1881:
	.def	__GLOBAL__sub_I_main;	.scl	3;	.type	32;	.endef
__GLOBAL__sub_I_main:
LFB1883:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$24, %esp
	movl	$65535, 4(%esp)
	movl	$1, (%esp)
	call	__Z41__static_initialization_and_destruction_0ii
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1883:
	.section	.ctors,&quot;w&quot;
	.align 4
	.long	__GLOBAL__sub_I_main
	.ident	&quot;GCC: (MinGW.org GCC-6.3.0-1) 6.3.0&quot;
	.def	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc;	.scl	2;	.type	32;	.endef
	.def	__ZNSolsEi;	.scl	2;	.type	32;	.endef
	.def	__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_;	.scl	2;	.type	32;	.endef
	.def	__ZNSolsEPFRSoS_E;	.scl	2;	.type	32;	.endef
	.def	__ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c;	.scl	2;	.type	32;	.endef
	.def	__ZNSt8ios_base4InitD1Ev;	.scl	2;	.type	32;	.endef
	.def	__ZNSt8ios_base4InitC1Ev;	.scl	2;	.type	32;	.endef
	.def	_atexit;	.scl	2;	.type	32;	.endef
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1.编译器并不是把函数模板处理成能够处理任意类的函数</p>
<p>2.编译器从函数模板通过具体类型产生不同的函数</p>
<p>3.编译器会对函数模板进行两次编译,在声明的地方对模板代码本身进行编译;</p>
<p>在调用的地方对参数替换后的代码进行编译。</p>
</blockquote>
<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="类模板定义"><a href="#类模板定义" class="headerlink" title="类模板定义"></a>类模板定义</h4><ul>
<li><p>类模板与函数模板的定义和使用类似，我们已经进行了介绍。有时，有两个或多个类，其功能是相同的，仅仅是数据类型不同，所以将类中的类型进行泛化。</p>
</li>
<li><blockquote>
<p>template<typename T>class A<br>{<br>}</p>
</blockquote>
</li>
</ul>
<h4 id="简单的模板类"><a href="#简单的模板类" class="headerlink" title="简单的模板类"></a>简单的模板类</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;typename T&gt;
&#x2F;&#x2F;定义类模板要在类的头部之前加入template&lt;typename T&gt;或者template &lt;class T&gt;
class A &#123;
public:
  A(T t) &#123; this-&gt;t &#x3D; t; &#125;
  T &amp;getT() &#123; return t; &#125;

public:
  T t;
&#125;;
int main(void) &#123;
  &#x2F;&#x2F;在定义一个对象的时候，要明确此类所泛化的具体类型
  A&lt;int&gt; a(100);
  cout &lt;&lt; a.getT() &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="模板类的诞生"><a href="#模板类的诞生" class="headerlink" title="模板类的诞生"></a>模板类的诞生</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;class T&gt;
class A
&#123;
public:
  A(T a) &#123; this-&gt;a &#x3D; a; &#125;

protected:
  T a;
&#125;;
&#x2F;&#x2F;模板类派生普通类
&#x2F;&#x2F;结论:子类从模板类继承的时候,需要让编译器知道父类的数据类型具体是什么(数据类型的本质:固定大小内存块的别名)A&lt;int&gt;
class B : public A&lt;int&gt;
&#123;
public:
  B(int a, int b) : A&lt;int&gt;(a) &#123; this-&gt;b &#x3D; b; &#125;
  void printB() &#123; cout &lt;&lt; &quot;b:&quot; &lt;&lt; b &lt;&lt; endl; &#125;

private:
  int b;
&#125;;
&#x2F;&#x2F;模板类派生模板类
template &lt;class T&gt;
class C : public A&lt;T&gt;
&#123;
public:
  C(T a, T c) : A&lt;T&gt;(a) &#123; this-&gt;c &#x3D; c; &#125;
  void printc() &#123; cout &lt;&lt; &quot;C : &quot; &lt;&lt; c &lt;&lt; endl; &#125;

private:
  T c;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="模板类的实现"><a href="#模板类的实现" class="headerlink" title="模板类的实现"></a>模板类的实现</h3><h4 id="函数体写在类中"><a href="#函数体写在类中" class="headerlink" title="函数体写在类中"></a>函数体写在类中</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;class T&gt;
class Complex
&#123;
  friend ostream &amp;operator&lt;&lt;(ostream &amp;os, Complex &amp;c)
  &#123;
    os &lt;&lt; &quot;(&quot; &lt;&lt; c.a &lt;&lt; &quot; + &quot; &lt;&lt; c.b &lt;&lt; &quot;i&quot;
       &lt;&lt; &quot;)&quot;;
    return os;
  &#125;

public:
  Complex()
  &#123;
  &#125;
  complex(T a, T b)
  &#123;
    this-&gt;a &#x3D; a;
    this-&gt;b &#x3D; b;
  &#125;
  void printComplex()
  &#123;
    cout
        &lt;&lt; &quot;( &quot; &lt;&lt; a &lt;&lt; &quot; + &quot; &lt;&lt; b &lt;&lt; &quot;i&quot;
        &lt;&lt; &quot; )&quot; &lt;&lt; endl;
  &#125;
  Complex operator+(Complex &amp;another)
  &#123;
    Complex temp(a + another.a, b + another.b);
    return temp;
  &#125;

private:
  T a;
  T b;
&#125;;
int main(void)
&#123;
  Complex&lt;int&gt; a(10, 20); &#x2F;&#x2F;让模板类具体化是为了告诉编译具体的大小，分配内存
  Complex&lt;int&gt; b(3, 4);
  a.printComplex();
  Complex&lt;int&gt; c;
  c &#x3D; a + b; &#x2F;&#x2F; complex c.operator+(Complex &amp; another)
  c.printComplex();
  cout &lt;&lt; c &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数体写在类外（在一个CPP中）"><a href="#函数体写在类外（在一个CPP中）" class="headerlink" title="函数体写在类外（在一个CPP中）"></a>函数体写在类外（在一个CPP中）</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;class T&gt;
class Complex;

template &lt;class T&gt;
Complex&lt;T&gt; mySub(Complex&lt;T&gt; &amp;one, Complex&lt;T&gt; &amp;another);

template &lt;class T&gt;
class Complex
&#123;
public:
  friend ostream &amp; operator&lt;&lt; &lt;T&gt;(ostream &amp;os, Complex&lt;T&gt; &amp;c);
  &#x2F;&#x2F;在模板类中如果有友元重载操作符&lt;&lt;或者&gt;&gt;需要在operator&lt;&lt;和参数列表之间
  &#x2F;&#x2F;加入&lt;T&gt;
  &#x2F;&#x2F;滥用友元函数，本来可以当成员函数, 却要用友元函数
  &#x2F;&#x2F;如果说是非&lt;&lt;&gt;&gt;在模板类中当友元函数
  &#x2F;&#x2F;在这个模板类之前声明这个函数
  friend Complex&lt;T&gt; mySub&lt;T&gt;(Complex&lt;T&gt; &amp;one, Complex&lt;T&gt; &amp;another);
  &#x2F;&#x2F;最终的结论，模板类不要轻易写友元函数，要写的就写&lt;&lt;和&gt;&gt;。
  Complex();
  Complex(T a, T b);
  Complex operator+(Complex &amp;another);
  Complex operator-(Complex &amp;another);
  void printComplex();

private:
  T a;
  T b;
&#125;;
template &lt;class T&gt;
Complex&lt;T&gt;::Complex()
&#123;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt;::Complex(T a, T b)
&#123;
  this-&gt;a &#x3D; a;
  this-&gt;b &#x3D; b;
&#125;
template &lt;class T&gt;
void Complex&lt;T&gt;::printComplex()
&#123;
  cout
      &lt;&lt; &quot;( &quot;
      &lt;&lt; a
      &lt;&lt; &quot; + &quot;
      &lt;&lt; b
      &lt;&lt; &quot;i&quot;
      &lt;&lt; &quot;)&quot;
      &lt;&lt; endl;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt; Complex&lt;T&gt;::operator+(Complex&lt;T&gt; &amp;another)
&#123;
  Complex temp(a + another.a, b + another.b);
  return temp;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt; Complex&lt;T&gt;::operator-(Complex&lt;T&gt; &amp;another)
&#123;
  Complex temp(this-&gt;a - another.a, this-&gt;b &#x3D; another.b);
  return temp;
&#125;
&#x2F;&#x2F; 友元函数 template &lt;class T&gt;
ostream &amp;operator&lt;&lt;(ostream &amp;os, Complex&lt;T&gt; &amp;c)
&#123;
  os &lt;&lt; &quot;( &quot; &lt;&lt; c.a &lt;&lt; &quot; + &quot; &lt;&lt; c.b &lt;&lt; &quot;i&quot;
     &lt;&lt; &quot;)&quot;;
  return os;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt; mySub(Complex&lt;T&gt; &amp;one,Complex&lt;T&gt; &amp;another)
&#123;
  Complex&lt;T&gt; temp(one.a - another.a,one.b - another.b);
  return temp;
&#125;
int main(void)
&#123;
  Complex&lt;int&gt; a(10,20); &#x2F;&#x2F;让模板类具体化是为了告诉编译具体的大小，分配内存
  Complex&lt;int&gt; b(3，4);
  a.printComplex();
  Complex&lt;int&gt; c;
  c &#x3D; a + b;
  c.printComplex();
  cout &lt;&lt; c &lt;&lt; endl;
  c &#x3D; mySub(a, b);
  cout &lt;&lt; c &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>模板类不要轻易使用友元函数</li>
</ul>
<h4 id="函数体写在类外-在-h和-cpp中"><a href="#函数体写在类外-在-h和-cpp中" class="headerlink" title="函数体写在类外(在.h和.cpp中)"></a>函数体写在类外(在.h和.cpp中)</h4><ul>
<li>complex.h</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#pragma once
#include &lt;iostream&gt;
using namespace std;
template &lt;class T&gt;
class Complex;

template &lt;class T&gt;
Complex&lt;T&gt; mySub(Complex&lt;T&gt; &amp;one, Complex&lt;T&gt; &amp;another);

template &lt;class T&gt;
ostream &amp; operator&lt;&lt;(ostream &amp;os,Complex&lt;T&gt; &amp;c)

template &lt;class T&gt;
class Complex
&#123;

  friend ostream &amp;operator&lt;&lt; &lt;T&gt;(ostream &amp;os, Complex&lt;T&gt; &amp;c);
  &#x2F;&#x2F;在模板类中如果有友元重载操作符&lt;&lt;或者&gt;&gt;需要在operator&lt;&lt;和参数列表之间
  &#x2F;&#x2F;加入&lt;T&gt;
  &#x2F;&#x2F;滥用友元函数，本来可以当成员函数, 却要用友元函数
  &#x2F;&#x2F;如果说是非&lt;&lt;&gt;&gt;在模板类中当友元函数
  &#x2F;&#x2F;在这个模板类之前声明这个函数
  friend Complex&lt;T&gt; mySub&lt;T&gt;(Complex&lt;T&gt; &amp;one, Complex&lt;T&gt; &amp;another);
  &#x2F;&#x2F;最终的结论，模板类不要轻易写友元函数，要写的就写&lt;&lt;和&gt;&gt;。
   public:
  Complex();
  Complex(T a, T b);
  Complex operator+(Complex &amp;another);
  Complex operator-(Complex &amp;another);
  void printComplex();

private:
  T a;
  T b;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>complex.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;Complex.h&quot;
template &lt;class T&gt;
Complex&lt;T&gt;::Complex()
&#123;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt;::Complex(T a, T b)
&#123;
  this-&gt;a &#x3D; a;
  this-&gt;b &#x3D; b;
&#125;
template &lt;class T&gt;
void Complex&lt;T&gt;::printComplex()
&#123;
  cout
      &lt;&lt; &quot;( &quot;
      &lt;&lt; a
      &lt;&lt; &quot; + &quot;
      &lt;&lt; b
      &lt;&lt; &quot;i&quot;
      &lt;&lt; &quot;)&quot;
      &lt;&lt; endl;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt; Complex&lt;T&gt;::operator+(Complex&lt;T&gt; &amp;another)
&#123;
  Complex temp(a + another.a, b + another.b);
  return temp;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt; Complex&lt;T&gt;::operator-(Complex&lt;T&gt; &amp;another)
&#123;
  Complex temp(this-&gt;a - another.a, this-&gt;b &#x3D; another.b);
  return temp;
&#125;
&#x2F;&#x2F; 友元函数 template &lt;class T&gt;
ostream &amp;operator&lt;&lt;(ostream &amp;os, Complex&lt;T&gt; &amp;c)
&#123;
  os &lt;&lt; &quot;( &quot; &lt;&lt; c.a &lt;&lt; &quot; + &quot; &lt;&lt; c.b &lt;&lt; &quot;i&quot;
     &lt;&lt; &quot;)&quot;;
  return os;
&#125;
template &lt;class T&gt;
Complex&lt;T&gt; mySub(Complex&lt;T&gt; &amp;one, Complex&lt;T&gt; &amp;another)
&#123;
  Complex&lt;T&gt; temp(one.a - another.a, one.b - another.b);
  return temp;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>main.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&quot;Complex.h&quot;
#include&quot;Complex.cpp&quot;
using namespace std;
int main(void)
&#123;
  Complex&lt;int&gt; a(10, 20); &#x2F;&#x2F;让模板类具体化是为了告诉编译具体的大小，分配内存
  Complex&lt;int&gt; b(3，4);
  a.printComplex();
  Complex&lt;int&gt; c;
  c &#x3D; a + b;
  c.printComplex();
  cout &lt;&lt; c &lt;&lt; endl;
  c &#x3D; mySub(a, b);
  cout &lt;&lt; c &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>由于二次编译，模板类在.h在第一次编译之后，并没有最终确定类的具体实现，只是编译器的词法校验和分析。在第二次确定类的具体实现后，是在.cpp文件生成的最后的具体类，所以main函数需要引入.cpp文件。</li>
<li>综上:引入cpp文件一说也是曲线救国之计，所以实现模板方法建议在同一个文件.h中完成</li>
</ul>
<h4 id="类模板中的static"><a href="#类模板中的static" class="headerlink" title="类模板中的static"></a>类模板中的static</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
template &lt;class T&gt;
class A
&#123;
public:
  static T s_value;
&#125;;
&#x2F;&#x2F;静态变量需要在类的外部初始化
template &lt;class T&gt;
T A&lt;T&gt;::s_value &#x3D; 0;
&#x2F;*
当编译器看见 A&lt;int&gt;被调用，将执行二次编译，生成如下的类A
class A
&#123;
public:
static int s_value;
&#125;;
int A: :s_value &#x3D; 0;*&#x2F;
int main(void)
&#123;
  A&lt;int&gt; a1, a2, a3;  &#x2F;&#x2F; class A&lt;int&gt;家族的对象
  A&lt;char&gt; b1, b2, b3; &#x2F;&#x2F; class A &lt;char&gt;家族的对象
  a1.s_value &#x3D; 10;
  b1.s_value &#x3D; &#39;a &#39;;
  cout &lt;&lt; a1.s_value &lt;&lt; endl;
  cout &lt;&lt; b1.s_value &lt;&lt; endl;
  &#x2F;&#x2F;打印出a1.s_value &#x3D; 10，b1.s_value &#x3D; &#39;a’说明两个s_value在两个类中是不同的
  a1.s_value++;
  cout &lt;&lt; a2.s_value &lt;&lt; endl; &#x2F;&#x2F; 11
  cout &lt;&lt; a3.s_value &lt;&lt; endl; &#x2F;&#x2F; 11
  b1.s_value++;
  cout &lt;&lt; b2.s_value &lt;&lt; endl; &#x2F;&#x2F;&#39; b&#39;
  cout &lt;&lt; b3.s_value &lt;&lt; endl; &#x2F;&#x2F;&#39; b&#39;
  &#x2F;&#x2F;通过以上结果，说明a1，a2，a3是属于A&lt;int&gt;家族的他们共享Aint&gt; ::s_value;
  &#x2F;&#x2F; b1,b2，b3 是属于A&lt;char&gt;家族的他们共享A&lt;char&gt; ::s_value;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>练习 实现一个模板数组类</li>
</ul>
<blockquote>
<p>请设计一个数组模板类(MyVector) ，完成对int、char、Teacher类型元素的管理。<br>需要实现构造函数拷贝构造函数 &lt;&lt; [ ] 重载=操作符。</p>
</blockquote>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="类型转换的名称和语法"><a href="#类型转换的名称和语法" class="headerlink" title="类型转换的名称和语法"></a>类型转换的名称和语法</h3><ul>
<li>类型转换有c风格的,当然还有c++风格的。c风格的转换的格式很简单(TYPE)EXPRESSION,但是c风格的类型转换有不少的缺点,有的时候用c风格的转换是不合适的,因为它可以在任意类型之间转换,比如你可以把一个指向const对象的指针转换成指向非const对象的指针,把一个指向基类对象的指针转换成指向一个派生类对象的指针,这两种转换之间的差别是巨大的,但是传统的c语言风格的类型转换没有区分这些。还有一个缺点就是,c风格的转换不容易查找,他由一个括号加上一个标识符组成,而这样的东西在c++程序里一大堆。所以c++为了克服这些缺点,引进了4新的类型转换操作符。</li>
<li>C风格的强制类型转换（Type Cast）</li>
<li><code>TYPE b = (TYPE)a</code></li>
<li>C++提供了四种类型转换，分别处理不同的场合应用</li>
</ul>
<blockquote>
<p>static_cast    静态类型转换。<br>reinterpreter_cast    重新解释类型转换。<br>dynamic_cast    子类和父类之间的多态类型转换。<br>const_cast    去掉const属性转换。</p>
</blockquote>
<h3 id="转换方式"><a href="#转换方式" class="headerlink" title="转换方式"></a>转换方式</h3><h4 id="static-cast-静态类型转换"><a href="#static-cast-静态类型转换" class="headerlink" title="static_cast 静态类型转换"></a>static_cast 静态类型转换</h4><p><code>static_cast&lt;目标类型&gt;(标识符)</code></p>
<ul>
<li>所谓的静态,即在编译期内即可决定其类型的转换,用的也是最多的一种。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
  double dPi &#x3D; 3.1415926;
  int num1 &#x3D; (int)dPi;
  &#x2F;&#x2F; c语言的旧式类型转换
  int num2 &#x3D; dPi;
  &#x2F;&#x2F;隐式类型转换
  &#x2F;&#x2F;静态的类型转换:
  &#x2F;&#x2F;在编译的时进行基本类型的转换能替代c风格的类型转换可以进行一部分检查
  int num3 &#x3D; static_cast&lt;int&gt;(dPi); &#x2F;&#x2F; c++的新式的类型转换运算符
  cout &lt;&lt; &quot;num1:&quot; &lt;&lt; num1 &lt;&lt; &quot; num2:&quot; &lt;&lt; num2 &lt;&lt; &quot; num3:&quot; &lt;&lt; num3 &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="dynamic-cast-子类和父类之间的多态"><a href="#dynamic-cast-子类和父类之间的多态" class="headerlink" title="dynamic_cast 子类和父类之间的多态"></a>dynamic_cast 子类和父类之间的多态</h4><p><code>dynamic_cast&lt;目标类型&gt;(标识符)</code></p>
<ul>
<li>用于多态中父子类之间的强制转化</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Animal
&#123;
public:
  virtual void cry() &#x3D; 0;
&#125;;
class Dog : public Animal
&#123;
public:
  virtual void cry()
  &#123;
    cout &lt;&lt; &quot;旺旺~ &quot; &lt;&lt; endl;
  &#125;
  void doHome()
  &#123;
    cout &lt;&lt; &quot;看家&quot; &lt;&lt; endl;
  &#125;
&#125; class cat : public Animal
&#123;
public:
  virtual voidcry()
  &#123;
    cout &lt;&lt;“&quot;瞄瞄~ &quot; &lt;&lt; endl;
  &#125;
  void doHome()
  &#123;
    cout &lt;&lt; &quot;抓老鼠&quot; &lt;&lt; endl;
  &#125;
  int main(void)
  &#123;
    Animal *base &#x3D; NULL;
    base &#x3D; new Cat();
    base-&gt;cry();                           &#x2F;&#x2F;此时父类指针指向猫&#x2F;&#x2F;用于将父类指针转换成子类，
    Dog *pDog &#x3D; dynamic_cast&lt;Dog *&gt;(base); &#x2F;&#x2F;转换之后讲父类指针转换成子类狗指针
    &#x2F;&#x2F;但是由于父类指针此时指向的对象是猫，&#x2F;&#x2F;所以转换狗是失败的
    if (pDog !&#x3D; NULL)
    &#x2F;&#x2F;如果转换失败则返回 NULL
    &#123;
      pDog-&gt;cry();
      pDog-&gt;doHome();
    &#125;
    cat *pCat &#x3D; dynamic_cast&lt;Cat *&gt;(base); &#x2F;&#x2F;转换之后讲父类指针转换成子类猫指针
    &#x2F;&#x2F;向下转换
    if (pcat !&#x3D; NULL)
    &#123;
      pcat-&gt;cry();
      pcat-&gt;doHome();
      return 0;
    &#125;
  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const-cast-去掉const属性转换"><a href="#const-cast-去掉const属性转换" class="headerlink" title="const_cast 去掉const属性转换"></a>const_cast 去掉const属性转换</h4><p><code>const_cast&lt;目标类型&gt; (标识符)  //目标类型只能是指针或者是引用</code></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct A
&#123;
  int data;
&#125;;
int main()
&#123;
  const A a &#x3D; &#123;200&#125;;
  &#x2F;&#x2F; A a1 &#x3D; const_cast&lt;A&gt;(a);
  &#x2F;&#x2F; a1.data &#x3D; 300;
  A &amp;a2 &#x3D; const_cast&lt;A &amp;&gt;(a);
  a2.data &#x3D; 300;
  cout &lt;&lt; a.data &lt;&lt; &quot; &quot; &lt;&lt; a2.data &lt;&lt; endl; &#x2F;&#x2F; 300 300
  cout &lt;&lt; &amp;a &lt;&lt; &quot; &quot; &lt;&lt; &amp;a2 &lt;&lt; endl;
  A *a3 &#x3D; const_cast&lt;A *&gt;(&amp;a);
  a3-&gt;data &#x3D; 400;
  cout &lt;&lt; a.data &lt;&lt; &quot; &quot; &lt;&lt; a3-&gt;data &lt;&lt; endl; &#x2F;&#x2F; 400 400
  cout &lt;&lt; &amp;a &lt;&lt; &quot; &quot; &lt;&lt; a3 &lt;&lt; endl;
  const int x &#x3D; 3;
   
  x1 &#x3D; 300;
  cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; x1 &lt;&lt; endl; &#x2F;&#x2F; 3 300
  cout&lt;&lt;&amp;x&lt;&lt;&quot; &quot;&lt;&lt;&amp;x1&lt;&lt;endl;
  int *x2 &#x3D; const_cast&lt;int *&gt;(&amp;x);
  *x2 &#x3D; 400;
  cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; *x2 &lt;&lt; endl; &#x2F;&#x2F; 3 400
  cout&lt;&lt;&amp;x&lt;&lt;&quot; &quot;&lt;&lt;x2&lt;&lt;endl;
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220706120736.png" alt="20220706120736"></p>
<h4 id="reinterpret-cast-重新解释类型转换"><a href="#reinterpret-cast-重新解释类型转换" class="headerlink" title="reinterpret_cast 重新解释类型转换"></a>reinterpret_cast 重新解释类型转换</h4><p><code>reinterpret_cast&lt;目标类型&gt;(标识符)</code></p>
<ul>
<li>interpret是解释的意思,reinterpret即为重新解释,此标识符的意思即为数据的二进制形式重新解释,但是不改变其值。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Animal
&#123;
public:
  virtual void cry() &#x3D; 0;
&#125;;
class Dog : public Animal
&#123;
public:
  virtual void cry()
  &#123;
    cout
        &lt;&lt; &quot;旺旺~ &quot; &lt;&lt; endl;
  &#125;
  void doHome()
  &#123;
    cout &lt;&lt; &quot;看家&quot; &lt;&lt; endl;
  &#125;
&#125;;
class Cat : public Animal
&#123;
public:
  virtual void cry()
  &#123;
    cout &lt;&lt; &quot;哺瞄~&quot; &lt;&lt; endl;
  &#125;
  void doHome()
  &#123;
    cout &lt;&lt; &quot;抓老鼠&quot; &lt;&lt; endl;
  &#125;
&#125;;
class Book
&#123;
public:
  void printP()
  &#123;
    cout &lt;&lt; &quot;book&quot; &lt;&lt; endl;
  &#125;
&#125;;
int main(void)
&#123;
  Animal *base &#x3D; NULL;
  &#x2F;&#x2F; 1可以把子类指针赋给父类指针但是反过来是不可以的需要如下转换
  &#x2F;&#x2F;Dog *pdog &#x3D; base;
  Dog *pDog &#x3D; static_cast&lt;Dog *&gt;(base);
  &#x2F;&#x2F; 2把base转换成其他非动物相关的err
  &#x2F;&#x2F; Book *book&#x3D; static_cast&lt;Book *&gt; (base);
  &#x2F;&#x2F; 3 reinterpret_cast可以强制类型转换
  Book *book &#x3D; reinterpret_cast&lt;Book *&gt;(base);
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>建议1:<br>程序员要清除的知道:要转的变量，类型转换前是什么类型，类型转换后是什么类型。转换后有什么后果。<br>建议2:<br>一般情况下，不建议进行类型转换。</p>
</blockquote>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol>
<li>异常是一种程序控制机制，与函数机制独立和互补<ul>
<li>函数是一种以栈结构展开的上下函数衔接的程序控制系统,异常是另一种控制结构,它依附于栈结构,却可以同时设置多个异常类型作为网捕条件,从而以类型匹配在栈机制中跳跃回馈.</li>
</ul>
</li>
<li>异常设计目的:<ul>
<li>栈机制是一种高度节律性控制机制,面向对象编程却要求对象之间有方向、有目的的控制传动,从一开始，异常就是冲着改变程序控制结构，以适应面向对象程序更有效地工作这个主题，而不是仅为了进行错误处理。</li>
</ul>
</li>
<li>异常设计出来之后，却发现在错误处理方面获得了最大的好处。</li>
</ol>
<h3 id="异常处理的基本思想"><a href="#异常处理的基本思想" class="headerlink" title="异常处理的基本思想"></a>异常处理的基本思想</h3><h4 id="传统的错误处理机制"><a href="#传统的错误处理机制" class="headerlink" title="传统的错误处理机制"></a>传统的错误处理机制</h4><ul>
<li>通过函数返回值来处理错误</li>
</ul>
<h4 id="异常的错误处理机制"><a href="#异常的错误处理机制" class="headerlink" title="异常的错误处理机制"></a>异常的错误处理机制</h4><p><img src="http://qiniu.orangew.cn/img/20220706150023.png" alt="20220706150023"></p>
<ol>
<li>C++的异常处理机制使得异常的引发和异常的处理不必在同一个函数中，这样底层的函数可以着重解决具体问题，而不必过多的考虑异常的处理。上层调用者可以再适当的位置设计对不同类型异常的处理。</li>
<li>异常是专门针对抽象编程中的一系列错误处理的，C++中不能借助函数机制，因为栈结构的本质是先进后出，依次访问，无法进行跳跃，但错误处理的特征却是遇到错误信息就想要转到若干级之上进行重新尝试，如图</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/20220706150249.png" alt="20220706150249"></p>
<ol start="3">
<li>异常超脱于函数机制，决定了其对函数的跨越式回跳。</li>
<li>异常跨越函数</li>
</ol>
<h3 id="C-异常处理的实现"><a href="#C-异常处理的实现" class="headerlink" title="C++异常处理的实现"></a>C++异常处理的实现</h3><h4 id="异常的基本语法"><a href="#异常的基本语法" class="headerlink" title="异常的基本语法"></a>异常的基本语法</h4><p><img src="http://qiniu.orangew.cn/img/20220706150604.png" alt="20220706150604"></p>
<ol>
<li>若有异常则通过throw操作创建一个异常对象并抛掷。</li>
<li>将可能抛出异常的程序段嵌在try块之中。控制通过正常的顺序执行到达try语句，然后执行try块内的保护段。</li>
<li>如果在保护段执行期间没有引起异常，那么跟在try块后的catch子句就不执行。程序从try块后跟随的最后一个catch子句后面的语句继续执行下去。</li>
<li>catch子句按其在try块后出现的顺序被检查。匹配的catch子句将捕获并处理异常（或继续抛掷异常)。</li>
<li>如果匹配的处理器未找到，则运行函数terminate将被自动调用，其缺省功能是调用abort终止程序。</li>
<li>处理不了的异常，可以在catch的最后一个分支，使用throw语法，向上扔。</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int divide( int x, int y )&#123;
if (y &#x3D;&#x3D;0)&#123;
throw x;
&#125;
return x&#x2F;y;
&#125;
int main(void)&#123;
try&#123;
cout &lt;&lt; &quot;8&#x2F;2 &#x3D; &quot; &lt;&lt; divide(8,2) &lt;&lt; endl;
cout &lt;&lt; &quot;10&#x2F;0 &#x3D;&quot; &lt;&lt; divide(10,0) &lt;&lt; endl;
&#125;
catch (int e)&#123;
cout &lt;&lt; &quot;e&quot; &lt;&lt; &quot; is divided by zero! &quot; &lt;&lt; endl;
&#125;
catch( ...)&#123;
cout &lt;&lt;&quot;未知异常&quot;&lt;&lt; endl;
&#125;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="栈解旋（unwinding）"><a href="#栈解旋（unwinding）" class="headerlink" title="栈解旋（unwinding）"></a>栈解旋（unwinding）</h4><ul>
<li>异常被抛出后，从进入try块起，到异常被抛掷前，这期间在栈上的构造的所有对象，都会被自动析构。析构的顺序与构造的顺序相反。这一过程称为栈的解旋(unwinding)。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class MyException
&#123;
&#125;;
class Test
&#123;
public:
  Test(int a &#x3D; 0, int b &#x3D; 0)
  &#123;
    this-&gt;a &#x3D; a;
    this-&gt;b &#x3D; b;
    cout &lt;&lt; &quot;Test构造函数执行&quot;
         &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b: &quot; &lt;&lt; b &lt;&lt; endl;
  &#125;
  void printT()
  &#123;
    cout
        &lt;&lt; &quot;a: &quot; &lt;&lt; a &lt;&lt; &quot; b: &quot; &lt;&lt; b &lt;&lt; endl;
  &#125;
  ~Test()
  &#123;
    cout &lt;&lt; &quot;Test析构函数执行&quot;
         &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b: &quot; &lt;&lt; b &lt;&lt; endl;
  &#125;

private:
  int a;
  int b;
&#125;;
void myFunc() throw(MyException)
&#123;
  Test t1;
  Test t2;
  cout &lt;&lt; &quot;定义了两个栈变量,异常抛出后测试栈变量的如何被析构&quot; &lt;&lt; endl;
  throw MyException();
&#125;
int main(void)
&#123;
  &#x2F;&#x2F; 异常被抛出后，从进入try块起，到异常被抛掷前，这期间在栈上的构造的所有对象 &gt;，
  &#x2F;&#x2F;都会被自动析构。析构的顺序与构造的顺序相反。
  &#x2F;&#x2F;这一过程称为栈的解旋(unwinding)
  try
  &#123;
    myFunc();
  &#125;
  catch (MyException &amp;e)
  &#x2F;&#x2F; catch (MyException) &#x2F;&#x2F;这里不能访问异常对象
  &#123;
    cout
        &lt;&lt; &quot;接收到MyException类型异常&quot; &lt;&lt; endl;
  &#125;
  catch (...)
  &#123;
    cout
        &lt;&lt; &quot;未知类型异常&quot; &lt;&lt; endl;
  &#125;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="异常接口声明"><a href="#异常接口声明" class="headerlink" title="异常接口声明"></a>异常接口声明</h4><ol>
<li>为了加强程序的可读性，可以在函数声明中列出可能抛出的所有异常类型，例如︰<br>void func() throw(A, B,C，D);//这个函数func ()）能够且只能抛出类型ABCD及其子类型的异常。</li>
<li>如果在函数声明中没有包含异常接口声明，则次函数可以抛掷任何类型的异常，例如︰<br>void func();</li>
<li>一个不抛掷任何类型异常的函数可以声明为∶<br>void func() throw();</li>
<li>如果一个函数抛出了它的异常接口声明所不允许抛出的异常，unexpected函数会被调用，该函数默认行为调用terminate函数中止程序。</li>
</ol>
<h4 id="异常类型和异常变量的生命周期"><a href="#异常类型和异常变量的生命周期" class="headerlink" title="异常类型和异常变量的生命周期"></a>异常类型和异常变量的生命周期</h4><ol>
<li>throw的异常是有类型的，可以使，数字、字符串、类对象。</li>
<li>throw的异常是有类型的，catch严格按照类型进行匹配。</li>
<li>注意异常对象的内存模型。</li>
</ol>
<ul>
<li>传统的错误模型处理</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;传统的错误处理机制
int my_strcpy(char *to,char *from)
&#123;
  if (from &#x3D;&#x3D; NULL)
  &#123;
    return 1;
  &#125;
  if (to &#x3D;&#x3D; NULL)
  &#123;
    return 2;
  &#125;
  &#x2F;&#x2F; copy是的场景检查if(*from &#x3D;&#x3D; &#39;a &#39;)
  &#123;
    return 3;
    &#x2F;&#x2F; copy时出错
  &#125;
  while (*from !&#x3D; &#39;\0&#39;)
  &#123;
    *to &#x3D; *from;
    to++;
    from++;
  &#125;
  *to &#x3D; &#39;\0&#39;;
  return 0;
&#125;
int main(void)
&#123;
  int ret &#x3D; 0;
  char buf1[] &#x3D; &quot;zbcdefg&quot;;
  char buf2[1024] &#x3D; &#123;0&#125;;
  ret &#x3D; my_strcpy(buf2, buf1);
  if (ret !&#x3D; 0)
  &#123;
    switch (ret)
    &#123;
    case 1:
      printf(&quot;源buf出错! \n&quot;);
      break;
    case 2:
      printf(&quot;目的buf出错! \n&quot;);
      break;
    case 3:
      printf(&quot;copy过程出错! \n&quot;);
      break;
    default:
      printf(&quot;未知错误! \n&quot;);
      break;
    &#125;
  &#125;
  printf(&quot;buf2:%s \n&quot;, buf2);
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>抛出普通类型异常</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; throw int类型异常
void my_strcpy1(char *to, char *from)
&#123;
  if (from &#x3D;&#x3D; NULL)
  &#123;
    throw 1;
  &#125;
  if (to &#x3D;&#x3D; NULL)
  &#123;
    throw 2;
  &#125;
  &#x2F;&#x2F; copy是的场景检查
  if (*from &#x3D;&#x3D; &#39;a&#39;)
  &#123;
    throw 3;
    &#x2F;&#x2F; copy时出错
  &#125;
  while (*from !&#x3D; &#39;\0&#39;)
  &#123;
    *to &#x3D; *from;
    to++;
    from++;
  &#125;
  *to &#x3D; &#39;\0&#39;;
&#125;
&#x2F;&#x2F; throw char * 类型异常
void my_strcpy2(char *to, char *from)
&#123;
  if (from &#x3D;&#x3D; NULL)
  &#123;
    throw &quot;源buf出错 &quot;;
  &#125;
  if (to &#x3D;&#x3D; NULL)
  &#123;
    throw &quot;目的buf出错&quot;;
  &#125;
  &#x2F;&#x2F; copy是的场景检查
  if (*from &#x3D;&#x3D; &#39;a &#39;)
  &#123;
    throw &quot;copy过程出错&quot;;
    &#x2F;&#x2F; copy时出错
  &#125;
  while (*from !&#x3D; &#39;\0&#39;)
  &#123;
    *to &#x3D; *from;
    to++;
    from++;
  &#125;
  *to &#x3D; &#39;\0&#39;;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>抛出自定义类型异常</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class BadSrcType
&#123;
&#125;;
class BadDestType
&#123;
&#125;;
class BadProcessType
&#123;
public:
  BadProcessType()
  &#123;
    cout &lt;&lt; &quot;BadProcessType构造函数do \n&quot;;
  &#125;
  BadProcessType(const BadProcessType &amp;obj)
  &#123;
    cout &lt;&lt; &quot;BadProcessType copy构造函数do \n&quot;;
  &#125;
  ~BadProcessType()
  &#123;
    cout &lt;&lt; &quot;BadProcessType析构函数do \n&quot;;
  &#125;
&#125;;
&#x2F;&#x2F; throw类对象类型异常
void my_strcpy3(char *to, char *from)
&#123;
  if (from &#x3D;&#x3D; NULL)
  &#123;
    throw BadSrcType();
  &#125;
  if (to &#x3D;&#x3D; NULL)
  &#123;
    throw BadDestType();
  &#125;
  &#x2F;&#x2F; copy是的场景检查
  if (*from &#x3D;&#x3D; &#39;a&#39;)
  &#123;
    printf(&quot;开始BadProcessType类型异常\n&quot;);
    throw BadProcessType();
  &#125;
  if (*from &#x3D;&#x3D; &#39;b&#39;)
  &#123;
    throw &amp;(BadProcessType());
  &#125;
  if (*from &#x3D;&#x3D; &#39;c&#39;)
  &#123;
    throw new BadProcessType;
  &#125;
  while (*from !&#x3D; &#39;\0 &#39;)
  &#123;
    *to &#x3D; *from;
    to++;
    from++;
  &#125;
  *to &#x3D; &#39;\0&#39;;
&#125;
int main(void)
&#123;
  int ret &#x3D; 0;
  char buf1[] &#x3D; &quot;cbbcdefg&quot;;
  char buf2[1024] &#x3D; &#123;&#125;;
  try
  &#123;
    &#x2F;&#x2F; my_strcpy1(buf2， buf1);l&#x2F;my_strcpy2( buf2， buf1);
    my_strcpy3(buf2, buf1);
  &#125;
  catch (int e) &#x2F;&#x2F; e可以写也可以不写
  &#123;
    cout &lt;&lt; e &lt;&lt; &quot; int类型异常&quot; &lt;&lt; endl;
  &#125;
  catch (char *e)
  &#123;
    cout &lt;&lt; e &lt;&lt; &quot; char*类型异常&quot; &lt;&lt; endl;
  &#125;
  &#x2F;&#x2F; ---
  catch (BadSrcType e)
  &#123;
    cout &lt;&lt; &quot; BadSrcType类型异常&quot; &lt;&lt; endl;
  &#125;
  catch (BadDestType e)
  &#123;
    cout &lt;&lt; &quot; BadDestType类型异常&quot; &lt;&lt; endl;
  &#125;
  &#x2F;&#x2F;结论1:如果接受异常的时候使用一个异常变量,则copy构造异常变量.
  &#x2F;*
  catch( BadProcessType e)&#123;
  cout &lt;&lt; &quot; BadProcessType类型异常&quot;&lt;&lt;endl;&#125;
  *&#x2F;
  &#x2F;&#x2F;结论2:使用引用的话会使用throw时候的那个对象
  &#x2F;&#x2F; catch( BadProcessType &amp;e)
  &#x2F;&#x2F;&#123;
  &#x2F;&#x2F; cout &lt;&lt;&quot; BadProcessType类型异常&quot;&lt;&lt;endl;&#x2F; &#x2F; &#125;
  &#x2F;&#x2F;结论3:指针可以和引用&#x2F;元素写在一块但是引用&#x2F;元素不能写在一块
  catch (BadProcessType *e)
  &#123;
    cout &lt;&lt; &quot; BadProcessType类型异常&quot; &lt;&lt; endl;
    delete e;
  &#125;
  &#x2F;&#x2F;结论4:类对象时，使用引用比较合适 &#x2F; &#x2F; 一 catch (...)
  &#123;
    cout &lt;&lt; &quot;未知类型异常&quot; &lt;&lt; endl;
  &#125;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="异常的层次结构"><a href="#异常的层次结构" class="headerlink" title="异常的层次结构"></a>异常的层次结构</h4><ul>
<li>设计一个数组类MyArray，重载[]操作，数组初始化时，对数组的个数进行有效检查<ol>
<li>index&lt;O抛出异常eNegative</li>
<li>index =0抛出异常eZero</li>
<li>index&gt;1000抛出异常eTooBig</li>
<li>index&lt;10抛出异常eTooSmall</li>
<li>eSize类是以上类的父类，实现有参数构造、并定义virtual voidprintErr()输出错误。</li>
</ol>
</li>
</ul>
<h3 id="标准程序库异常"><a href="#标准程序库异常" class="headerlink" title="标准程序库异常"></a>标准程序库异常</h3><p><img src="http://qiniu.orangew.cn/img/20220706200150.png" alt="20220706200150"></p>
<ul>
<li><p>每个类所在的头文件在图下方标识出来.</p>
</li>
<li><p>标准异常类的成员∶</p>
<ol>
<li>在上述继承体系中，每个类都有提供了构造函数、复制构造函数、和赋值操作符重载。</li>
<li>logic_error类及其子类、runtime_error类及其子类，它们的构造函数是接受一个string类型的形式参数，用于异常信息的描述﹔</li>
<li>所有的异常类都有一个what()方法，返回const char*类型（C风格字符串）的值，描述异常信息。</li>
</ol>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/20220706200318.png" alt="20220706200318"></p>
</li>
<li><p>案例1</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
#include &lt;stdexcept&gt;
class Teacher
&#123;
public:
  Teacher(int age) &#x2F;&#x2F;构造函数，通过异常机制处理错误
  &#123;
    if (age &gt; 100)
    &#123;
      throw out_of_range(&quot;年龄太大&quot;);
    &#125;
    this-&gt;age &#x3D; age;
  &#125;

protected:
private:
  int age;
&#125;;
int main()
&#123;
  try
  &#123;
    Teacher t1(102);
  &#125;
  catch (out_of_range e)
  &#123;
    cout &lt;&lt; e.what() &lt;&lt; endl;
  &#125;
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>案例2</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;stdexcept&gt;
using namespace std;
class Dog
&#123;
public:
  Dog()
  &#123;
    parr &#x3D; new int[1024 * 1024 * 100]; &#x2F;&#x2F; 4MB
  &#125;

private:
  int *parr;
&#125;;
int main()
&#123;
  Dog *pDog;
  try
  &#123;
    for (int i &#x3D; 1; i &lt; 1024; i++) &#x2F;&#x2F; 40GB!
    &#123;
      pDog &#x3D; new Dog();
      cout &lt;&lt; i &lt;&lt; &quot;: new Dog成功.&quot; &lt;&lt; endl;
    &#125;
  &#125;
  catch (bad_alloc err)
  &#123;
    cout &lt;&lt; &quot;new Dog失败:&quot; &lt;&lt; err.what() &lt;&lt; endl;
  &#125;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><h3 id="I-O流的概念和流类库的结构"><a href="#I-O流的概念和流类库的结构" class="headerlink" title="I/O流的概念和流类库的结构"></a>I/O流的概念和流类库的结构</h3><ul>
<li>程序的输入指的是从输入文件将数据传送给程序，程序的输出指的是从程序将数据传送给输出文件。</li>
<li>C++输入输出包含以下三个方面的内容∶<ul>
<li>对系统指定的标准设备的输入和输出。即从键盘输入数据，输出到显示器屏幕。这种输入输出称为标准的输入输出，简称标准I/O。</li>
<li>以外存磁盘文件为对象进行输入和输出，即从磁盘文件输入数据，数据输出到磁盘文件。以外存文件为对象的输入输出称为文件的输入输出，简称文件l/0。</li>
<li>对内存中指定的空间进行输入和输出。通常指定一个字符数组作为存储空间(实际上可以利用该空间存储任何信息)。这种输入和输出称为字符串输入输出，简称串I/O。</li>
</ul>
</li>
<li>C++的I/o对c的发展–类型安全和可扩展性</li>
<li>在c语言中，用printf和scanf进行输入输出，往往不能保证所输入输出的数据是可靠的安全的。在C++的输入输出中，编译系统对数据类型进行严格的检查，凡是类型不正确的数据都不可能通过编译。因此C++的I/o操作是类型安全(type safe)的。C++的I/o操作是可扩展的，不仅可以用来输入输出标准类型的数据，也可以用于用户自定义类型的数据。</li>
<li>C++通过I/o类库来实现丰富的I/o功能。这样使C++的输人输出明显地优于c语言中的printf和scanf，但是也为之付出了代价，C++的I/o系统变得比较复杂，要掌握许多细节。</li>
<li>C++编译系统提供了用于输入输出的iostream类库。iostream这个单词是由3个部分组成的，即i-o-stream，意为输入输出流。在iostream类库中包含许多用于输入输出的类。常用的见表</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/20220706200943.png" alt="20220706200943"></p>
<ul>
<li><p>ios是抽象基类，由它派生出istream类和ostream类，两个类名中第1个字母i和o分别代表输入(input)和输出(output)。istream类支持输入操作，ostream类支持输出操作，iostream类支持输入输出操作。iostream类是从istream类和ostream类通过多重继承而派生的类。其继承层次见上图表示。</p>
</li>
<li><p>C++对文件的输入输出需要用ifstream和ofstream类，两个类名中第1个字母i和o分别代表输入和输出，第2个字母f代表文件(file)。ifstream支持对文件的输入操作，ofstream支持对文件的输出操作。类ifstream继承了类istream，类ofstream继承了类ostream，类fstream继承了类iostream。见图</p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/20220706201058.png" alt="20220706201058"></p>
</li>
<li><p>I/o类库中还有其他一些类，但是对于一般用户来说，以上这些已能满足需要了。<br>与iostream类库有关的头文件</p>
</li>
<li><p>iostream类库中不同的类的声明被放在不同的头文件中，用户在自己的程序中用#include命令包含了有关的头文件就相当于在本程序中声明了所需要用到的类。可以换—种说法∶头文件是程序与类库的接口，iostream类库的接口分别由不同的头文件来实现。常用的有</p>
</li>
<li><p>iostream包含了对输入输出流进行操作所需的基本信息。</p>
</li>
<li><p>fstream用于用户管理的文件的I/O操作。</p>
</li>
<li><p>strstream用于字符串流I/O。</p>
</li>
<li><p>stdiostream用于混合使用C和C＋+的I/O机制时，例如想将C程序转变为C++程序。</p>
</li>
<li><p>.iomanip在使用格式化I/O时应包含此头文件。</p>
</li>
<li><p>在iostream头文件中定义的流对象</p>
</li>
<li><p>在iostream头文件中定义的类有ios，istream，ostream，iostream,istream _withassign，ostream_withassign，iostream_withassign等。</p>
</li>
<li><p>在iostream头文件中重载运算符<br>“&lt;&lt;”和”&gt;&gt;”本来在C++中是被定义为左位移运算符和右位移运算符的，由于在iostream头文件中对它们进行了重载，使它们能用作标准类型数据的输入和输出运算符。所以，在用它们的程序中必须用#include命令把iostream包含到程序中。<br>#include <iostream></p>
<ul>
<li><code>&gt;&gt;a</code>表示将数据放入a对象中。</li>
<li><code>&gt;&gt;a</code>表示将a对象中存储的数据拿出。</li>
</ul>
</li>
</ul>
<h3 id="标准I-O流"><a href="#标准I-O流" class="headerlink" title="标准I/O流"></a>标准I/O流</h3><ul>
<li>标准I/O对象:cin , cout , cerr , clog</li>
<li>cout流对象</li>
<li>cout是console output的缩写，意为在控制台（终端显示器）的输出。强调几点。<ol>
<li>cout不是C++预定义的关键字，它是ostream流类的对象，在iostream中定义。顾名思义，流是流动的数据，cout流是流向显示器的数据。cout流中的数据是用流插入运算符“&lt;&lt;”顺序加入的。如果有<br>cout&lt;&lt;”I “&lt;&lt;”study C++ “&lt;&lt;”very hard.&lt;&lt; “wang bao ming “;按顺序将字符串”I “, “study C++ “, “very hard.”插人到cout流中，cout就将它们送到显示器，在显示器上输出字符串”I study C++ very hard.”。cout流是容纳数据的载体，它并不是一个运算符。人们关心的是cout流中的内容，也就是向显示器输出什么。</li>
<li>用“cout&lt;&lt;”输出基本类型的数据时，可以不必考虑数据是什么类型，系统会判断数据的类型，并根据其类型选择调用与之匹配的运算符重载函数。这个过程都是自动的，用户不必干预。如果在C语言中用prinf函数输出不同类型的数据，必须分别指定相应的输出格式符，十分麻烦，而且容易出错。C+＋的I/O机制对用户来说，显然是方便而安全的。</li>
<li>cout流在内存中对应开辟了一个缓冲区，用来存放流中的数据，当向cout流插人一个endl时，不论缓冲区是否已满，都立即输出流中所有数据，然后插入一个换行符，并刷新流（清空缓冲区)。注意如果插人一个换行符”\n“(如cout&lt;&lt;a&lt;&lt;”\n” )，则只输出和换行，而不刷新cout流(但并不是所有编译系统都体现出这一区别)。</li>
<li>在iostream中只对”&lt;&lt;”和”&gt;&gt;”运算符用于标准类型数据的输入输出进行了重载，但未对用户声明的类型数据的输入输出进行重载。如果用户声明了新的类型，并希望用”&lt;&lt;”和”&gt;&gt;”运算符对其进行输入输出，按照重运算符重载来<br>做。</li>
</ol>
</li>
<li>cerr流对象<ul>
<li>cerr流对象是标准错误流，cerr流已被指定为与显示器关联。cerr的作用是向标准错误设备(standard error device)输出有关出错信息。cerr与标准输出流cout的作用和用法差不多。但有一点不同:cout流通常是传送到显示器输出，但也可以被重定向输出到磁盘文件，而cerr流中的信息只能在显示器输出。当调试程序时，往往不希望程序运行时的出错信息被送到其他文件，而要求在显示器上及时输出，这时应该用cerr。cerr流中的信息是用户根据需要指定的</li>
</ul>
</li>
<li>clog流对象<ul>
<li>clog流对象也是标准错误流，它是console log的缩写。它的作用和cerr相同，都是在终端显示器上显示出错信息。区别: cerr是不经过缓冲区，直接向显示器上输出有关信息，而clog中的信息存放在缓冲区中，缓冲区满后或遇endl时向显示器输出。</li>
</ul>
</li>
</ul>
<h4 id="标准的输入流"><a href="#标准的输入流" class="headerlink" title="标准的输入流"></a>标准的输入流</h4><ul>
<li>cin.get()//一次只能读取一个字符</li>
<li>cin.get(一个参数)//读一个字符</li>
<li>cin.get(三个参数)//可以读字符串</li>
<li>cin.getline()</li>
<li>cin.ignore()</li>
<li>cin.putback()</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F; 2输入字符串 你 好 遇见空格,停止接受输入
int main()
&#123;
  char YourName[50];
  int myInt;
  long myLong;
  double myDouble;
  float myFloat;
  unsigned int myUnsigned;
  cout &lt;&lt; &quot;请输入一个Int: &quot;;
  cin &gt;&gt; myInt;
  cout &lt;&lt; &quot;请输入一个Long: &quot;;
  cin &gt;&gt; myLong;
  cout &lt;&lt; &quot;请输入一个Double: &quot;;
  cin &gt;&gt; myDouble;
  cout &lt;&lt; &quot;请输入你的姓名:&quot;;
  cin &gt;&gt; YourName;
  cout &lt;&lt; &quot;\n \n你输入的数是︰&quot; &lt;&lt; endl;
  cout &lt;&lt; &quot; Int : \t &quot; &lt;&lt; myInt &lt;&lt; endl;
  cout &lt;&lt; &quot; Long : \t &quot; &lt;&lt; myLong &lt;&lt; endl;
  cout &lt;&lt; &quot; Double : lt &quot; &lt;&lt; myDouble &lt;&lt; endl;
  cout &lt;&lt; &quot;姓名 :\t &quot; &lt;&lt; YourName &lt;&lt; endl;
  cout
      &lt;&lt; endl
      &lt;&lt; endl;
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;输入英文 ok
&#x2F;&#x2F;ctrl z 会产生一个 EOF(-1)
int main()&#123;
    char;
    while((ch&#x3D;cin.get())!&#x3D;EOF)&#123;
        cout&lt;&lt;&quot;字符：&quot;&lt;&lt;ch&lt;&lt;endl;
        cout&lt;&lt;&quot;\n结束.\n&quot;;
    &#125;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;演示:读一个字符链式编程
int main(void)
&#123;
  char a, b, c;
  cin.get(a);
  cin.get(b);
  cin.get(c);
  cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;
  cout &lt;&lt; &quot;开始链式编程&quot; &lt;&lt; endl;
  cin.get(a).get(b).get(c);
  cout &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; endl;
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;演示cin.getline()可以接受空格
int main(void)
&#123;
char buf1[256];
char buf2[256];
cout &lt;&lt; &quot;\n请输入你的字符串不超过256&quot;;
cin.getline(buf1,256,&#39;\n &#39;);
cout &lt;&lt; buf1 &lt;&lt; endl;
&#x2F;&#x2F;
cout &lt;&lt;&quot;注意: cin.getline()和cin &gt;&gt; buf2的区别,能不能带空格&quot; &lt;&lt; endl;
cin &gt;&gt; buf2 ;&#x2F;&#x2F;流提取操作符遇见空格停止提取输入流
cout &lt;&lt; buf2 &lt;&lt; endl;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;缓冲区实验
&#x2F;*
1输入&quot;aa bb cc dd&quot;字符串入缓冲区2通过cin &gt;&gt; buf1;提走了aa
3不需要输入可以再通过cin.getline()把剩余的缓冲区数据提走*&#x2F;
int main()
&#123;
  char buf1[256];
  char buf2[256];
  cout &lt;&lt; &quot;请输入带有空格的字符串,测试缓冲区&quot; &lt;&lt; endl;
  cin &gt;&gt; buf1;
  cout &lt;&lt; &quot;buf1:&quot; &lt;&lt; buf1 &lt;&lt; endl;
  cout &lt;&lt; &quot;请输入数据...&quot; &lt;&lt; endl;
  &#x2F;&#x2F;缓冲区没有数据,就等待;缓冲区如果有数据直接从缓冲区中拿走数据cin.getline( buf2，256);
  cout &lt;&lt; &quot;buf2: &quot; &lt;&lt; buf2 &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;案例:输入的整数和字符串分开处理
int main()
&#123;
  cout &lt;&lt; &quot;Please, enter a number or a word: &quot;;
  char c &#x3D; cin.get();
  if ((c &gt;&#x3D; &#39;0&#39;) &amp;&amp; (c &lt;&#x3D; &#39;9&#39;)) &#x2F;&#x2F;输入的整数和字符串分开处理
  &#123;
    int n; &#x2F;&#x2F;整数不可能中间有空格使用cin &gt;&gt;n
    cin.putback(c);
    cin &gt;&gt; n;
    cout &lt;&lt; &quot;You entered a number: &quot; &lt;&lt; n &lt;&lt; &#39;\n&#39;;
  &#125;
  else
  &#123;
    string str;
    cin.putback(c);
    getline(cin, str); &#x2F;&#x2F;&#x2F;&#x2F;字符串中间可能有空格使用cin.getline();
    cout &lt;&lt; &quot;You entered a word: &quot; &lt;&lt; str &lt;&lt; &#39;\n &#39;;
  &#125;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="标准的输出流"><a href="#标准的输出流" class="headerlink" title="标准的输出流"></a>标准的输出流</h4><ul>
<li>cout.put()</li>
<li>cout.write()</li>
<li>cout.width()</li>
<li>cout.fill()</li>
<li>cout.setf(标记)</li>
</ul>
<ul>
<li>操作符、控制符</li>
<li>flush</li>
<li>endl</li>
<li> oct</li>
<li>dec</li>
<li>hex</li>
<li>setbase</li>
<li>setw</li>
<li>setfill</li>
<li>setprecision</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;
int main(void)
&#123;
  cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;
  cout.put(&#39;h&#39;).put(&#39;e &#39;).put(&#39;l &#39;).put(&#39; \n &#39;);
  cout.write(&quot;hello world&quot;, 4); &#x2F;&#x2F;输出的长度
  char buf[] &#x3D; &quot;hello world&quot;;
  printf(&quot; \n&quot;);
  cout.write(buf, strlen(buf));
  printf(&quot; \n&quot;);
  cout.write(buf, strlen(buf) - 6);
  printf(&quot; \n&quot;);
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;
&#x2F;&#x2F;使用cout.setf()控制符
int main(void)
&#123;
  &#x2F;&#x2F;使用类成员函数
  cout &lt;&lt; &quot;&lt;start&gt;&quot;;

  cout.width(30);
  cout.fill(&#39;*&#39;);
  cout.setf(ios::showbase); &#x2F;&#x2F;#include &lt;iomanip&gt;
  cout.setf(ios::internal); &#x2F;&#x2F;设置
  cout &lt;&lt; hex &lt;&lt; 123 &lt;&lt; &quot;&lt;End&gt; \n&quot;;
  cout &lt;&lt; endl;
  cout &lt;&lt; endl;
  &#x2F;&#x2F;使用操作符、控制符
  cout &lt;&lt; &quot;&lt;Start&gt;&quot;
       &lt;&lt; setw(30)
       &lt;&lt; setfill.(&#39;*&#39;)
       &lt;&lt; setiosflags(ios::showbase) &#x2F;&#x2F;基数
       &lt;&lt; setiosflags(ios::internal)
       &lt;&lt; hex
       &lt;&lt; 123
       &lt;&lt; &quot;&lt;End&gt; \n&quot;
       &lt;&lt; endl;
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="输出格式化"><a href="#输出格式化" class="headerlink" title="输出格式化"></a>输出格式化</h4><ul>
<li><p>在输出数据时，为简便起见，往往不指定输出的格式，由系统根据数据的类型采取默认的格式，但有时希望数据按指定的格式输出，如要求以十六进制或八进制形式输出一个整数，对输出的小数只保留两位小数等。有两种方法可以达到此目的。</p>
<ol>
<li>使用控制符的方法;</li>
<li>使用流对象的有关成员函数。分别叙述如下。</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/20220706212923.png" alt="20220706212923"></p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;
int main()
&#123;
  int a;
  cout &lt;&lt; &quot;input a: &quot;;
  cin &gt;&gt; a;
  cout &lt;&lt; &quot;dec : &quot; &lt;&lt; dec &lt;&lt; a &lt;&lt; endl;           &#x2F;&#x2F;以十进制形式输出整数
  cout &lt;&lt; &quot;hex : &quot; &lt;&lt; hex &lt;&lt; a &lt;&lt; endl;           &#x2F;&#x2F;以十六进制形式输出整数a
  cout &lt;&lt; &quot;oct: &quot; &lt;&lt; setbase(8) &lt;&lt; a &lt;&lt; endl;     &#x2F;&#x2F;以八进制形式输出整数a
  const char *pt &#x3D; &quot;China&quot;;                       &#x2F;&#x2F; pt指向字符串&quot;china&quot;
  cout &lt;&lt; setw(10) &lt;&lt; pt &lt;&lt; endl;                 &#x2F;&#x2F;指定域宽为,输出字符串
  cout &lt;&lt; setfill(&#39;*&#39;) &lt;&lt; setw(10) &lt;&lt; pt &lt;&lt; endl; &#x2F;&#x2F;指定域宽,输出字符串,空白处以&#39;*&#39;填&gt;充
  double pi&#x3D;22.0&#x2F;7.0;&#x2F;&#x2F;计算pi值
  &#x2F;&#x2F;按指数形式输出,8位小数
  cout &lt;&lt; setiosflags(ios::scientific) &lt;&lt; setprecision(8);
  cout &lt;&lt; &quot;pi&#x3D;&quot; &lt;&lt; pi &lt;&lt; endl;                    &#x2F;&#x2F;输出pi值
  cout &lt;&lt; &quot;pi&#x3D;&quot; &lt;&lt; setprecision(4) &lt;&lt; pi &lt;&lt; endl; &#x2F;&#x2F;改为位小数
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double a&#x3D;123.456789012345;&#x2F;&#x2F;对a赋初值 
cout&lt;&lt;a;&#x2F;&#x2F;输出:123.456
cout&lt;&lt;setprecision(9)&lt;&lt;a;&#x2F;&#x2F;输出:123.456789 
cout&lt;&lt;setprecision(6);&#x2F;&#x2F;恢复默认格式(精度为6)
cout&lt;&lt; setiosflags(ios::fixed);&#x2F;&#x2F;输出:123.456789
cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(8)&lt;&lt;a;&#x2F;&#x2F;输出:123.45678901
cout&lt;&lt;setiosflags(ios::scientific)&lt;&lt;a;&#x2F;&#x2F;输出:1.234568e+02 cout&lt;&lt;setiosflags(ios::scientific)&lt;&lt;setprecision(4)&lt;&lt;a;&#x2F;&#x2F;输出:1.2346e02


int b&#x3D;123456;&#x2F;&#x2F;对b赋初值1) 
cout&lt;&lt;b;&#x2F;&#x2F;输出: 123456
cout&lt;&lt;hex&lt;&lt;b;&#x2F;&#x2F;输出:1e240
cout&lt;&lt;setiosflags(ios:: uppercase)&lt;&lt;b;&#x2F;&#x2F;输出:1E2404) 
cout&lt;&lt;setw(10)&lt;&lt;b&lt;&lt;&#39;， &#39;&lt;&lt;b;&#x2F;&#x2F;输出:123456，1234565) 
cout&lt;&lt;setfill(&#39;*&#39;)&lt;&lt;setw(10)&lt;&lt;b;&#x2F;&#x2F;输出:****1234566) 
cout&lt;&lt;setiosflags(ios::showpos)&lt;&lt;b;&#x2F;&#x2F;输出:+123456
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>如果在多个cout语句中使用相同的setw(n)，并使用setiosflags(ios::right)，可以实现各行数据右对齐，如果指定相同的精度，可以实现上下小数点对齐。</li>
<li><img src="http://qiniu.orangew.cn/img/20220706213015.png" alt="20220706213015"></li>
<li><img src="http://qiniu.orangew.cn/img/20220706213034.png" alt="20220706213034"></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;
int main()
&#123;
  int a &#x3D; 21;
  cout.setf(ios::showbase);      &#x2F;&#x2F;显示基数符号(Ox或)
  cout &lt;&lt; &quot;dec : &quot; &lt;&lt; a &lt;&lt; endl; &#x2F;&#x2F;默认以十进制形式输出a
  cout.unsetf(ios::dec);         &#x2F;&#x2F;终止十进制的格式设置
  cout.setf(ios::hex);           &#x2F;&#x2F;设置以十六进制输出的状态
  cout &lt;&lt; &quot;hex: &quot; &lt;&lt; a &lt;&lt; endl;  &#x2F;&#x2F;以十六进制形式输出a
  cout.unsetf(ios::hex);         &#x2F;&#x2F;终止十六进制的格式设置
  cout.setf(ios::oct);           &#x2F;&#x2F;设置以八进制输出的状态
  cout &lt;&lt; &quot;oct: &quot; &lt;&lt; a &lt;&lt; endl;  &#x2F;&#x2F;以八进制形式输出a
  cout.unsetf(ios::oct);
  const char *pt &#x3D; &quot;China&quot;;     &#x2F;&#x2F; pt指向字符串&quot;China&quot;
  cout.width(10);               &#x2F;&#x2F;指定域宽为
  cout &lt;&lt; pt &lt;&lt; endl;           &#x2F;&#x2F;输出字符串
  cout.width(10);               &#x2F;&#x2F;指定域宽为
  cout.fi11(&#39;*&#39;);               &#x2F;&#x2F;指定空白处以&#39;*&#39;填充
  cout &lt;&lt; pt &lt;&lt; endl;           &#x2F;&#x2F;输出字符串
  double pi &#x3D; 22.0 &#x2F; 7.6;       &#x2F;&#x2F;输出pi值
  cout.setf(ios::scientific);   &#x2F;&#x2F;指定用科学记数法输出
  cout &lt;&lt; &quot;pi&#x3D;&quot;;                &#x2F;&#x2F;输出&quot;pi&#x3D;&quot;
  cout.width(14);               &#x2F;&#x2F;指定域宽为
  cout &lt;&lt; pi &lt;&lt; endl;           &#x2F;&#x2F;输出pi值
  cout.unsetf(ios::scientific); &#x2F;&#x2F;终止科学记数法状态
  cout.setf(ios::fixed);        &#x2F;&#x2F;指定用定点形式输出
  cout.width(12);               &#x2F;&#x2F;指定域宽为
  cout.setf(ios::showpos);      &#x2F;&#x2F;正数输出“+”号
  cout.setf(ios::internal);     &#x2F;&#x2F;数符出现在左侧
  cout.precision(6);            &#x2F;&#x2F;保留位小数
  cout &lt;&lt; pi &lt;&lt; endl;           &#x2F;&#x2F;输出pi,注意数符“+”的位置
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>对程序的几点说明</p>
</li>
<li><p>成员函数width(n)和控制符setw(n)只对其后的第一个输出项有效。如∶cout. width(6);<br>cout &lt;&lt;20&lt;&lt;3.14&lt;&lt;endl;<br>输出结果为203.14</p>
</li>
<li><p>在输出第一个输出项20时，域宽为6，因此在20前面有4个空格，在输出3.14时，width (6)已不起作用，此时按系统默认的域宽输出（按数据实际长度输出)。如果要求在输出数据时都按指定的同一域宽n输出，不能只调用一次width(n)，而必须在输出每一项前都调用一次width(n&gt;，上面的程序中就是这样做的。</p>
</li>
<li><p>在表13.5中的输出格式状态分为5组，每一组中同时只能选用一种（例如dec、hex和oct中只能选一，它们是互相排斥的)。在用成员函数setf和控制符setiosflags设置输出格式状态后，如果想改设置为同组的另一状态，应当调用成员函数unsetf (对应于成员函数self )或resetiosflags (对应于控制符setiosflags )，先终止原来设置的状态。然后再设置其他状态，大家可以从本程序中看到这点。程序在开始虽然没有用成员函数self和控制符setiosflags设置用dec输出格式状态，但系统默认指定为dec，因此要改变为hex或oct，也应当先用unsetf 函数终止原来设置。如果删去程序中的第7行和第10行，虽然在第8行和第11行中用成员函数setf设置了hex和oct格式，由于未终止dec格式，因此hex和oct的设置均不起作用，系统依然以十进制形式输出。</p>
</li>
<li><p>同理，程序倒数第8行的unsetf 函数的调用也是不可缺少的。</p>
</li>
<li><p>用setf 函数设置格式状态时，可以包含两个或多个格式标志，由于这些格式标志在ios类中被定义为枚举值，每一个格式标志以一个二进位代表，因此可以用位或运算符“|”组合多个格式标志。如倒数第5、第6行可以用下面一行代替∶</p>
</li>
<li><p>cout.setf(ios:internal | iosshowpos);//包含两个状态标志，用””组合</p>
</li>
<li><p>可以看到:对输出格式的控制，既可以用控制符(如例13.2)，也可以用cout流的有关成员函数(如例13.3)，二者的作用是相同的。控制符是在头文件</p>
</li>
<li><p>iomanip中定义的，因此用控制符时，必须包含iomanip头文件。cout流的成员函数是在头文件iostream中定义的，因此只需包含头文件iostream，不必包含iomanip。许多程序人员感到使用控制符方便简单，可以在一个cout输出语句中连续使用多种控制符。</p>
</li>
</ul>
<h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><h4 id="文件流类和文件流对象"><a href="#文件流类和文件流对象" class="headerlink" title="文件流类和文件流对象"></a>文件流类和文件流对象</h4><ul>
<li>输入输出是以系统指定的标准设备(输入设备为键盘，输出设备为显示器）为对象的。在实际应用中，常以磁盘文件作为对象。即从磁盘文件读取数据，将数据输出到磁盘文件。<br>和文件有关系的输入输出类主要在fstream.h这个头文件中被定义，在这个头文件中主要被定义了三个类，由这三个类控制对文件的各种输入输出操作，他们分别是ifstream、ofstream、fstream，其中fstream类是由iostream类派生而来，他们之间的继承关系见下图所示。</li>
<li><img src="http://qiniu.orangew.cn/img/20220706213719.png" alt="20220706213719"></li>
</ul>
<h4 id="文件的打开与关闭"><a href="#文件的打开与关闭" class="headerlink" title="文件的打开与关闭"></a>文件的打开与关闭</h4><ul>
<li><p>打开文件</p>
<ul>
<li><p>所谓打开(open)文件是一种形象的说法，如同打开房门就可以进入房间活动一样。打开文件是指在文件读写之前做必要的准备工作，包括:</p>
<ul>
<li><p>为文件流对象和指定的磁盘文件建立关联，以便使文件流流向指定的磁盘文件。</p>
</li>
<li><p>指定文件的工作方式，如，该文件是作为输入文件还是输出文件，是ASCII文件还是二进制文件等。<br>以上工作可以通过两种不同的方法实现。</p>
<ol>
<li><p>调用文件流的成员函数open。如</p>
<ul>
<li><p>ofstream outfile;/定义ofstream类(输出文件流类)对象outfile</p>
</li>
<li><p>outfile.open(“f1.dat”,ios::out);//使文件流与f1.dat文件建立关联</p>
</li>
<li><p>第2行是调用输出文件流的成员函数open打开磁盘文件f1.dat，并指定它为输出文件，文件流对象outfile将向磁盘文件f1.dat输出数据。ios:.out是l/O模式的一种，表示以输出方式打开一个文件。或者简单地说，此时f1.dat是一个输出文件，接收从内存输出的数据。</p>
</li>
<li><p>调用成员函数open的一般形式为︰</p>
</li>
<li><p>文件流对象.open(磁盘文件名,输入输出方式);</p>
</li>
<li><p>磁盘文件名可以包括路径，如”c:\new\f1.dat”，如缺省路径，则默认为当前目录下的文件</p>
</li>
</ul>
</li>
<li><p>在定义文件流对象时指定参数</p>
<ul>
<li><p>在声明文件流类时定义了带参数的构造函数，其中包含了打开磁盘文件的功能。因此，可以在定义文件流对象时指定参数，调用文件流类的构造函数来实现打开文件的功能。如</p>
</li>
<li><p>ostream outfile(“f1.dat”,ios:out);一般多用此形式，比较方便。作用与open函数相同。</p>
</li>
<li><p>输入输出方式是在ios类中定义的，它们是枚举常量，有多种选择，见表</p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/20220706214222.png" alt="20220706214222"></p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>几点说明</p>
<ol>
<li>新版本的I/O类库中不提供ios:nocreate和ios:noreplace。</li>
<li>每一个打开的文件都有一个文件指针，该指针的初始位置由I/O方式指定，每次读写都从文件指针的当前位置开始。每读入一个字节，指针就后移一个字节。当文件指针移到最后，就会遇到文件结束EOF(文件结束符也占一个字节，其值为-1)，此时流对象的成员函数eof的值为非0值(一般设为1)，表示文件结束了</li>
<li>可以用“位或”运算符“|”对输入输出方式进行组合，如表13.6中最后3行所示那样。还可以举出下面一些例子∶<ul>
<li>iosin | ios:: noreplace //打开一个输入文件，若文件不存在则返回打开失败的信息</li>
<li>ios:app | ios:nocreate //打开一个输出文件，在文件尾接着写数据，若文件不存在，则返回打开失败的信息</li>
<li>ios:out l ios:noreplace //打开一个新文件作为输出文件，如果文件已存在则返回打开失败的信</li>
<li>ios:in l ios:out I ios:binary l/打开一个二进制文件，可读可写</li>
<li>但不能组合互相排斥的方式，如ios:nocreate l ios:noreplace。</li>
</ul>
</li>
<li>如果打开操作失败，open函数的返回值为O(假)，如果是用调用构造函数的方式打开文件的，则流对象的值为0。可以据此测试打开是否成功。如<ul>
<li>if(outfile.open(“f1.bat”,ios:app)==O)<br>cout &lt;&lt;”open error”;</li>
<li>if( !outfile.open(“f1.bat”,ios:app))cout &lt;&lt;”open error”;</li>
</ul>
</li>
</ol>
</li>
<li><p>关闭文件</p>
<ul>
<li>在对已打开的磁盘文件的读写操作完成后，应关闭该文件。关闭文件用成员函数close。如</li>
<li>outfile.close( );//将输出文件流所关联的磁盘文件关闭</li>
<li>所谓关闭，实际上是解除该磁盘文件与文件流的关联，原来设置的工作方式也失效，这样，就不能再通过文件流对该文件进行输入或输出。此时可以将文件流与其他磁盘文件建立关联，通过文件流对新的文件进行输入或输出。如</li>
<li>outfile.open(“f2.dat”,ios::app| ios::nocreate);</li>
<li>此时文件流outfile与f2.dat建立关联，并指定了f2.dat的工作方式。</li>
</ul>
</li>
</ul>
<h4 id="C-对ASCII文件的读写操作"><a href="#C-对ASCII文件的读写操作" class="headerlink" title="C++对ASCII文件的读写操作"></a>C++对ASCII文件的读写操作</h4><ul>
<li>如果文件的每一个字节中均以ASCIl代码形式存放数据,即一个字节存放一个字符,这个文件就是AScll文件(或称字符文件)。程序可以从ASCII文件中读入若干个字符,也可以向它输出一些字符。</li>
<li>用流插入运算符”&lt;&lt;”和流提取运算符”&gt;&gt;”输入输出标准类型的数据。”&lt;&lt;’和”&gt;&gt;”都巳在iostream中被重载为能用于ostream和istream类对象的标准类型的输入输出。由于ifstream和ofstream分别是ostream和istream类的派生类﹔因此它们从ostream和istream类继承了公用的重载函数，所以在对磁盘文件的操作中，可以通过文件流对象和流插入运算符“&lt;&lt;”及流提取运算符“&gt;&gt;”实现对磁盘文件的读写，如同用cin、cout和&lt;&lt;、&gt;&gt;对标准设备进行读写一样。</li>
<li>用文件流的put、get、geiline等成员函数进行字符的输入输出，︰用C++流成员函数put输出单个字符、C++ get()函数读入一个字符和C++ getline()函数读入一行字符。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;
int main(void)
&#123;
  char *fname &#x3D; &quot;c:&#x2F;aaaa.txt&quot;;
  ofstream fout(fname, ios::app); &#x2F;&#x2F;建一个输出流对象和文件关联;
  if (!fout)
  &#123;
    cout &lt;&lt; &quot;打开文件失败&quot; &lt;&lt; endl;
    return;
  &#125;
  fout &lt;&lt; &quot;hello.. ..111&quot; &lt;&lt; endl;
  fout &lt;&lt; &quot;hello. . ..222&quot; &lt;&lt; endl;
  fout &lt;&lt; &quot;hello.. . .333&quot; &lt;&lt; endl;
  fout.close();
  &#x2F;&#x2F;读文件
  ifstream fin(fname); &#x2F;&#x2F;建立一个输入流对象和文件关联
  char ch;
  while (fin.get(ch))
  &#123;
    cout &lt;&lt; ch;
  &#125;
  fin.close();
  return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="C-对二进制文件的读写操作"><a href="#C-对二进制文件的读写操作" class="headerlink" title="C++对二进制文件的读写操作"></a>C++对二进制文件的读写操作</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std;
class Teacher
&#123;
public:
  Teacher()
  &#123;
    age &#x3D; 33;
    strcpy(name, &quot;&quot;);
  &#125;
  Teacher(int _age, const char *_name)
  &#123;
    age &#x3D; _age;
    strcpy(name, _name);
  &#125;
  void printT()
  &#123;
    cout &lt;&lt; &quot;age: &quot; &lt;&lt; age &lt;&lt; &quot;name : &quot; &lt;&lt; name &lt;&lt; endl;
  &#125;

protected:
private:
  int age;
  char name[32];
&#125;;
int main()
&#123;
  const char *fname &#x3D; &quot;.&#x2F; 11a.dat&quot;;
  ofstream fout(fname, ios::binary); &#x2F;&#x2F; 建一个输出流对象和文件关联;
  if (!fout)
  &#123;
    cout &lt;&lt; &quot;打开文件失败 &quot; &lt;&lt; endl;
    return -1;
  &#125;
  Teacher t1(31, &quot;t31&quot;);
  Teacher t2(32, &quot;t32&quot;);
  fout.write((char *)&amp;t1, sizeof(Teacher));
  fout.write((char *)&amp;t2, sizeof(Teacher));
  fout.close();
  &#x2F;&#x2F;
  ifstream fin(fname);
  &#x2F;&#x2F; 建立一个输入流对象和文件关联
  Teacher tmp;
  fin.read((char *)&amp;tmp, sizeof(Teacher));
  tmp.printT();

  fin.read((char *)&amp;tmp, sizeof(Teacher));
  tmp.printT();
  fin.close();
  return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>UML</title>
    <url>/2022/07/07/UML/</url>
    <content><![CDATA[<h1 id="UML统一建模语言"><a href="#UML统一建模语言" class="headerlink" title="UML统一建模语言"></a><strong>UML统一建模语言</strong></h1><h2 id="1-软件建模概述"><a href="#1-软件建模概述" class="headerlink" title="1.软件建模概述"></a><strong>1.软件建模概述</strong></h2><h3 id="1-1什么是建模"><a href="#1-1什么是建模" class="headerlink" title="1.1什么是建模"></a><strong>1.1什么是建模</strong></h3><ul>
<li><p>任何事情都要先想清楚了才能做，软件开发更是如此！软件开发过程不可能一上来就开始盲目写代码，写代码之前必须搞清楚下面一些基本问题：</p>
</li>
<li><p>要做什么？</p>
</li>
<li><p>做成什么样？</p>
</li>
<li><p>怎么去做？</p>
</li>
</ul>
<h3 id="1-2建模原则"><a href="#1-2建模原则" class="headerlink" title="1.2建模原则"></a><strong>1.2建模原则</strong></h3><ul>
<li><p>选择建立什么样的模型对如何发现和解决问题具有重要的影响。正确的模型有助于提高开发者的洞察力。<img src="http://qiniu.orangew.cn/img/wpsEE3A.tmp.jpg" alt="img"></p>
</li>
<li><p>每个模型可以有多种表达方式. 使用者的身份和使用的原因是评判模型好坏的关键。</p>
</li>
<li><p>最好的模型总是能够切合实际. 模型是现实的简化，必须保证简化过程不会掩盖任何重要的细节。</p>
</li>
</ul>
<h3 id="1-3软件建模的实现过程"><a href="#1-3软件建模的实现过程" class="headerlink" title="1.3软件建模的实现过程"></a><strong>1.3软件建模的实现过程</strong></h3><ul>
<li><p><strong>软件建模的作用</strong>是把源于现实世界的问题转化为计算机可以理解和实现的过程<img src="http://qiniu.orangew.cn/img/wpsEE3B.tmp.jpg" alt="img"> </p>
</li>
<li><p><strong>软件建模的实现过程</strong>是从需求入手, 用模型表达分析设计过程, 最终将模型映射成软件实现.</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE3C.tmp.jpg" alt="img"> </p>
<h2 id="2-UML"><a href="#2-UML" class="headerlink" title="2.UML"></a><strong>2.UML</strong></h2><p>（1）UML(United Modeling Language, 统一建模语言): 是一种基于<strong>面向对象的可视化建模语言.</strong> </p>
<p>（2）<strong>UML 采用了一组形象化的图形(如类图)符号作为建模语言</strong>, 使用这些符号可以形象地描述系统的各个方面</p>
<p>（3）UML 通过建立图形之间的各种关系(如类与类之间的关系)来描述模型.</p>
<h3 id="2-1-UML一共有10种图。"><a href="#2-1-UML一共有10种图。" class="headerlink" title="2.1 UML一共有10种图。"></a><strong>2.1 UML一共有10种图。</strong></h3><h3 id="2-2-UML中的关系"><a href="#2-2-UML中的关系" class="headerlink" title="2.2 UML中的关系"></a><strong>2.2 UML中的关系</strong></h3><ul>
<li><p>UML中的关系主要包括4种：</p>
</li>
<li><p>  <strong>关联关系</strong>(association)</p>
</li>
<li><p>  <strong>依赖关系</strong>(dependency)</p>
</li>
<li><p>  <strong>泛化关系</strong>(generalization)</p>
</li>
<li><p>  <strong>实现关系</strong>(realization)</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>重要性</th>
</tr>
</thead>
<tbody><tr>
<td>类图</td>
<td>★★★★★</td>
</tr>
<tr>
<td>对象图</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>包图</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>组件图</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>部署图</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>用例图</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>时序图</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>协作图</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td>状态图</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>活动图</td>
<td>★★☆☆☆</td>
</tr>
</tbody></table>
<h2 id="3-用例图"><a href="#3-用例图" class="headerlink" title="3.用例图"></a><strong>3.用例图</strong></h2><p>（1）用例图(Use Case Diagram): 也称为用户模型图, 是从软件需求分析到最终实现的第一步, 它是从客户的角度来描述系统功能. </p>
<p>（2）用例图包含 3 个基本组件: </p>
<ul>
<li><p>​    参与者(Actor): 与系统打交道的人或其他系统即使用该系统的人或事物. 在 UML 中参与者用人形图标表示</p>
</li>
<li><p>​    用例(Use Case): 代表系统的某项完整的功能. 在 UML 中使用一个椭圆来表示</p>
</li>
<li><p>​    关系: 定义用例之间的关系 —— 泛化关系, 扩展关系, 包含关系</p>
</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEE3D.tmp.jpg" alt="img"> </p>
<h3 id="3-1用例之间的关系——泛化关系"><a href="#3-1用例之间的关系——泛化关系" class="headerlink" title="3.1用例之间的关系——泛化关系"></a><strong>3.1用例之间的关系——泛化关系</strong></h3><ul>
<li>泛化关系: 表示同一业务目的(父用例)的不同技术实现(各个子用例). 在 UML 中, 用例泛化用一个三角箭头从子用例指向父用例. 以下是某购物网站为用户提供不同的支付方式</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEE4E.tmp.png" alt="img"> </p>
<h3 id="3-2用例之间的关系——包含关系"><a href="#3-2用例之间的关系——包含关系" class="headerlink" title="3.2用例之间的关系——包含关系"></a><strong>3.2用例之间的关系——包含关系</strong></h3><ul>
<li>一个用例可以包含其他用例具有的行为, 并把它包含的用例行为作为自身行为的一部分. 在 UML 中包含关系用虚线箭头加 “&lt;<include>&gt;”, 箭头指向被包含的用例.</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEE4F.tmp.png" alt="img"> </p>
<h3 id="3-3用例之间的关系——扩展关系"><a href="#3-3用例之间的关系——扩展关系" class="headerlink" title="3.3用例之间的关系——扩展关系"></a><strong>3.3用例之间的关系——扩展关系</strong></h3><ul>
<li>如果在完成某个功能的时候偶尔会执行另外一个功能, 则用扩展关系表示.在 UML 中扩展关系用虚线箭头加 “&lt;<extend>&gt;”, 箭头指向被扩展的用例.</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEE50.tmp.png" alt="img"> </p>
<h2 id="4-类图"><a href="#4-类图" class="headerlink" title="4.类图"></a><strong>4.类图</strong></h2><ul>
<li><p>类图是面向对象系统建模中最常用的图. 是定义其他图的基础.</p>
</li>
<li><p>类图主要是用来显示系统中的类, 接口以及它们之间的关系.</p>
</li>
<li><p>类图包含的主要元素有类, 接口和关系. 其中关系有泛化关系,关联关系, 依赖关系和实现关系. 在类图中也可以包含注释和约束.</p>
</li>
</ul>
<h3 id="4-1类的表示法"><a href="#4-1类的表示法" class="headerlink" title="4.1类的表示法"></a><strong>4.1类的表示法</strong></h3><ol>
<li>类是类图的主要组件, 由3部分组成: 类名, 属性和方法. 在 UML 中, 类用矩形来表示, 顶端部分存放类的名称, 中间部分存放类的属性, 属性的类型及值, 底部部分存放类的方法, 方法的参数和返回类型.</li>
</ol>
<p>​    2.在 UML 中可以根据实际情况有选择的隐藏属性部分或方法部分或两者都隐藏</p>
<p>​    3.在 UML 中, 共有类型有 + 表示, 私有类型用 – 表示, 保护类型用 # 表示. UML 的工具开发商可以使用自己定义的符号表示不同的可见性</p>
<p><img src="http://qiniu.orangew.cn/img/wpsEE60.tmp.png" alt="img"> </p>
<h3 id="4-2类之间的关系-泛化关系"><a href="#4-2类之间的关系-泛化关系" class="headerlink" title="4.2类之间的关系-泛化关系"></a><strong>4.2类之间的关系-泛化关系</strong></h3><ol>
<li> 在 UML 中, 泛化关系用来表示类与类, 接口与接口之间的继承关系. 泛化关系有时也称为”is a kind of“关系.</li>
<li>在 UML 中泛化关系用一条实线空心箭头有子类指向父类.</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wpsEE61.tmp.png" alt="img"> </p>
<h3 id="4-3-类之间的关系-实现关系"><a href="#4-3-类之间的关系-实现关系" class="headerlink" title="4.3 类之间的关系-实现关系"></a><strong>4.3</strong> 类之间的关系-实现关系</h3><ul>
<li><p>在 UML 中, 实现关系用来表示类与接口之间的实现关系. </p>
</li>
<li><p>在 UML 中实现关系用一条虚线空心箭头由子类指向父类</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE62.tmp.png" alt="img"> </p>
<h3 id="4-4-类之间的关系-依赖关系"><a href="#4-4-类之间的关系-依赖关系" class="headerlink" title="4.4 类之间的关系-依赖关系"></a><strong>4.4</strong> <strong>类之间的关系-依赖关系</strong></h3><ul>
<li>对于两个相对独立的系统，当一个系统负责构造另一个系统的实例，或者依赖另一个系统的服务时，这两个系统之间体现为依赖关系. 例如生产零件的机器和零件，机器负责构造零件对象; 充电电池和充电器，充电电池通过充电器来充电;自行车Bicycle和打气筒Pump，自行车通过打气筒来充气。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE73.tmp.png" alt="img"> </p>
<h3 id="4-5-类之间的关系-关联关系"><a href="#4-5-类之间的关系-关联关系" class="headerlink" title="4.5 类之间的关系-关联关系"></a><strong>4.5</strong> <strong>类之间的关系-关联关系</strong></h3><ul>
<li>对于两个相对独立的系统，当一个系统的实例与另一个系统的一些特定实例存在固定的对应关系时，这两个系统之间为关联关系。例如客户和订单，每个订单对应特定的客户，每个客户对应一些特定的订单；公司和员工，每个公司对应一些特定的员工，每个员工对应一特定的公司；自行车和主人，每辆自行车属于特定的主人，每个主人有特定的自行车。而充电电池和充电器之间就不存在固定的对应关系，同样自行车和打气筒之间也不存在固定的对应关系。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE74.tmp.png" alt="img"> </p>
<h3 id="4-6-关联关系的名称"><a href="#4-6-关联关系的名称" class="headerlink" title="4.6 关联关系的名称"></a><strong>4.6</strong> <strong>关联关系的名称</strong></h3><ul>
<li>关联关系的名称: 关联关系可以有一个名称, 用于描述该关系的性质. 此关联名称应该是动词短语, 因为它表明源对象正在目标对象上执行动作.</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE75.tmp.png" alt="img"> </p>
<h3 id="4-7-关联关系的角色"><a href="#4-7-关联关系的角色" class="headerlink" title="4.7 关联关系的角色"></a><strong>4.7</strong> <strong>关联关系的角色</strong></h3><ul>
<li>当一个类处于关联的某一端时, 该类就在这个关系中扮演一个特定的角色. 具体来说, 角色就是关联关系中一个类对另一个类所表现的职责. 角色名称是名词或名称短语.</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE76.tmp.png" alt="img"> </p>
<h3 id="4-8-关联关系的多重性"><a href="#4-8-关联关系的多重性" class="headerlink" title="4.8 关联关系的多重性"></a><strong>4.8</strong> <strong>关联关系的多重性</strong></h3><ul>
<li>关联关系的多重性是指有多少对象可以参与该关联, 多重性可以用来表达一个取值范围, 特定值, 无限定的范围.</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE77.tmp.jpg" alt="img"> </p>
<p><img src="http://qiniu.orangew.cn/img/wpsEE88.tmp.png" alt="img"> </p>
<h3 id="4-9-类之间的关系关联-聚合"><a href="#4-9-类之间的关系关联-聚合" class="headerlink" title="4.9 类之间的关系关联-聚合"></a><strong>4.9</strong> <strong>类之间的关系关联-聚合</strong></h3><ol>
<li><p>聚合关系是关联关系的一种，是更强的关联关系。</p>
</li>
<li><p>聚合是整体和部分之间的关系，例如汽车由引擎、轮胎以及其它零件组成。</p>
</li>
<li><p>聚合关系也是通过成员变量来实现的。但是，关联关系所涉及的两个类处在同一个层次上，而聚合关系中，两个类处于不同的层次上，一个代表整体，一个代表部分。</p>
</li>
</ol>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEE89.tmp.png" alt="img"> </p>
<h3 id="4-10-类之间的关系关联—组合"><a href="#4-10-类之间的关系关联—组合" class="headerlink" title="4.10 类之间的关系关联—组合"></a><strong>4.10</strong> <strong>类之间的关系关联—组合</strong></h3><ol>
<li><p>UML类图关系中合成关系是关联关系的一种，是比聚合关系还要强的关系。</p>
</li>
<li><p>代表整体的对象负责代表部分对象的生命周期。</p>
</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wpsEE8A.tmp.png" alt="img"> </p>
<h3 id="4-11类图练习题"><a href="#4-11类图练习题" class="headerlink" title="4.11类图练习题"></a><strong>4.11类图练习题</strong></h3><h4 id="4-11-1-类图练习题一"><a href="#4-11-1-类图练习题一" class="headerlink" title="4.11.1 类图练习题一"></a><strong>4.11.1 类图练习题一</strong></h4><ul>
<li>根据以下网友描述出艺人之间关系的”类：</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsEE9A.tmp.jpg" alt="img"> </p>
<p><img src="http://qiniu.orangew.cn/img/wpsEEAB.tmp.jpg" alt="img"> </p>
<h4 id="4-11-2-类图练习题二"><a href="#4-11-2-类图练习题二" class="headerlink" title="4.11.2 类图练习题二"></a><strong>4.11.2 类图练习题二</strong></h4><ul>
<li>汽车和自行车都是交通工具(vehicle). 一辆自行车(bicycle)只归一个人(person)所有, 但一辆汽车(auto)可归一个人或两个人所有. 一个人可能没有自行车或汽车, 也可能有多辆自行车或汽车. 人分为男人(male)和女人(female). 每个人都有年龄(age)和名字(name). 每辆交通工具都有自己的颜色(color)和商标(brand). 每辆汽车都只有两个前灯(headlight)和一台发动机(motor)。</li>
</ul>
<h2 id="5-对象图"><a href="#5-对象图" class="headerlink" title="5.对象图"></a><strong>5.对象图</strong></h2><ol>
<li><p>对象图是类图的一个实例, 用于显示系统执行时的一个可能的快照. 即在某一个时间上系统可能出现的样子. 对象图用带下划线的对象名称来表示对象.</p>
</li>
<li><p>表现对象的特征</p>
</li>
<li><p>对象图展现了多个对象的特征及对象之间的交互</p>
</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wpsEEAC.tmp.png" alt="img"> </p>
<h2 id="6-时序图"><a href="#6-时序图" class="headerlink" title="6.时序图"></a><strong>6.时序图</strong></h2><ol>
<li><p>时序图用于描述对象之间的传递消息的时间顺序, 即用例中的行为顺序. </p>
</li>
<li><p>当执行一个用例时, 时序图中的每条消息对应了一个类操作或者引起转换的触发事件.</p>
</li>
<li><p>在 UML 中, 时序图表示为一个二维的关系图, 其中, 纵轴是时间轴, 时间延竖线向下延伸. 横轴代表在协作中各个独立的对象. 当对象存在时, 生命线用一条虚线表示, 消息用从一个对象的生命线到另一个对象的生命线的箭头表示. 箭头以时间的顺序在图中上下排列.</p>
</li>
</ol>
<h3 id="6-1-借书时序图"><a href="#6-1-借书时序图" class="headerlink" title="6.1 借书时序图"></a><strong>6.1</strong> <strong>借书时序图</strong></h3><p><img src="http://qiniu.orangew.cn/img/wpsEEAD.tmp.jpg" alt="img"> </p>
<h3 id="6-2-ATM-用户成功登陆的时序图"><a href="#6-2-ATM-用户成功登陆的时序图" class="headerlink" title="6.2 ATM 用户成功登陆的时序图"></a><strong>6.2</strong> <strong>ATM</strong> <strong>用户成功登陆的时序图</strong></h3><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://qiniu.orangew.cn/img/wpsEEBD.tmp.jpg" alt="img"></h2><h3 id="6-3-时序图中的基本概念"><a href="#6-3-时序图中的基本概念" class="headerlink" title="6.3 时序图中的基本概念"></a><strong>6.3</strong> <strong>时序图中的基本概念</strong></h3><p><strong>对象</strong>: 时序图中对象使用矩形表示, 并且对象名称下有下划线. 将对象置于时序图的顶部说明在交互开始时对象就已经存在了. 如果对象的位置不在顶部, 表示对象是在交互的过程中被创建的.</p>
<p><strong>生命线:</strong> 生命线是一条垂直的虚线. 表示时序图中的对象在一段生命周期内的存在. 每个对象底部中心的位置都带有生命线. </p>
<p><strong>消息</strong>: 两个对象之间的单路通信. 从发送方指向接收方. 在时序图中很少使用返回消息. </p>
<p><strong>激活</strong>: 时序图可以描述对象的激活和钝化. 激活表示该对象被占用已完成某个任务. 钝化指对象处于空闲状态, 等待消息. 在 UML 中, 对象的激活时将对象的生命线拓宽为矩形来表示的. 矩形称为计划条或控制期. 对象就是在激活条的顶部被激活的. 对象在完成自己的工作后被钝化.</p>
<p><strong>对象的创建和销毁</strong>: 在时序图中, 对象的默认位置是在图的顶部. 这说明对象在交互开始之前就已经存在了. 如果对象是在交互过程中创建的, 那么就应该将对象放到中间部分. 如果要撤销一个对象, 在其生命线终止点处放置 “ X” 符号.</p>
<p><img src="http://qiniu.orangew.cn/img/wpsEEBE.tmp.jpg" alt="img">  </p>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEECF.tmp.jpg" alt="img"> </p>
<h3 id="6-4时序图练习题"><a href="#6-4时序图练习题" class="headerlink" title="6.4时序图练习题"></a><strong>6.4时序图练习题</strong></h3><ul>
<li>画出三层架构登录的时序图.</li>
</ul>
<h2 id="7-活动图"><a href="#7-活动图" class="headerlink" title="7.活动图"></a><strong>7.活动图</strong></h2><ul>
<li>在 UML 中, 活动图本质上就是流程图. 它用于描述系统的活动, 判定点和分支等.</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\UML\wpsEED0.tmp.jpg" alt="img"> </p>
<h3 id="7-1-活动图中的基本概念"><a href="#7-1-活动图中的基本概念" class="headerlink" title="7.1 活动图中的基本概念"></a><strong>7.1</strong> <strong>活动图中的基本概念</strong></h3><p><strong>动作状态</strong>: 原子的,不可中断的动作,并在此动作完成之后向另一个动作转变. 在 UML 中动作状态用圆角矩形表示,动作状态所表示的动作写在圆角矩形内部.</p>
<p><strong>分支与合并</strong>: 分支在软件系统中很常见. 一般用于表示对象类所具有的条件行为. 用一个布尔型表达式的真假来判定动作的流向. 条件行为用分支和合并表达.在活动图中, 分支用空心小菱形表示. 分支包括一个入转换和两个带条件的出转换, 出转换的条件应该是互斥的, 须保证只有一条出转换能够被触发. 合并包含两个带条件的入转换和一个出转换. </p>
<p><strong>分叉与汇合:</strong> 分叉用来描述并发线程, 每个分叉可以有一个输入转换和两个或多个输出转换. 每个转换都可以是独立的控制流. 汇合代表两个或多个并发控制流同步发生, 当所有的控制流都达到汇合点后, 控制才能继续往下进行. 每个汇合可以有两个或多个输入转换和一个输出转换. 在 UML 中分叉和汇合用一条粗直线表示.</p>
<p><strong>泳道</strong>: 泳道将活动图中的活动划分为若干组, 并将每一组指定给负责这组活动的业务组织. 泳道区分负责活动的对象, 明确地表示哪些活动是由哪些对象进行的. 每个活动指定明确地属于一个泳道. 在活动图中, 泳道用垂直实线绘出, 垂直线分隔的区域即为泳道. </p>
<h3 id="7-2-用户登录活动图"><a href="#7-2-用户登录活动图" class="headerlink" title="7.2 用户登录活动图"></a><strong>7.2</strong> <strong>用户登录活动图</strong></h3><p> <img src="http://qiniu.orangew.cn/img/wpsEEE1.tmp.jpg" alt="img"></p>
<h3 id="7-3活动图练习题"><a href="#7-3活动图练习题" class="headerlink" title="7.3活动图练习题"></a><strong>7.3活动图练习题</strong></h3><ul>
<li>某公司销售人员接到订单后, 将订单传给财务人员和仓库人员. 财务人员开具发票, 并收款. 仓库人员准备货物, 并查看是否货物加急, 若是加急采用 EMS 方式发货, 否则采用普通包裹方式发货. 完成之后由销售人员关闭该订单. 根据上面描述画出该公司销售过程的活动图.</li>
</ul>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到gitub或gitee</title>
    <url>/2022/06/21/hexo_git/</url>
    <content><![CDATA[<h2 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h2><ol>
<li>安装git</li>
<li>安装node.js</li>
<li>安装hexo<ul>
<li><a href="https://hexo.io/zh-cn/docs/">官方文档</a></li>
</ul>
</li>
</ol>
<h2 id="二、本地运行"><a href="#二、本地运行" class="headerlink" title="二、本地运行"></a>二、本地运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//git窗口
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span> //进入blog所在文件夹
hexo init   //初始化
<span class="token function">npm</span> <span class="token function">install</span> //安装依赖
hexo g //构建
hexo s //本地测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h2><ol>
<li><p>github中搜索主题并下载压缩包</p>
</li>
<li><p>在hexo的theme中解压压缩包</p>
</li>
<li><p>修改theme下的配置文件_config.yml</p>
<ul>
<li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">参考</a>非常详细</li>
</ul>
</li>
<li><p>重新本地运行</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><ol>
<li>安装git提交插件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>生成密钥添加到Github并测试Git</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name
<span class="token function">git</span> config user.email
<span class="token function">git</span> config --global user.name <span class="token string">"name"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"email"</span>
<span class="token function">ssh</span> -keygen -t rsa -C <span class="token string">"email"</span>
<span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">ls</span> 
<span class="token function">vim</span> id_rsa.pub
copy
在github的setting的ssh key中粘贴
       
！！！！！！！！！！！！！每次关机后这个文件里面内容会被清除，需要重新手动添加
！！！！！！！！！！！！！否则会报连接拒绝的错误
查询：https://ipaddress.com/website/github.com的ipv4地址
添加 C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System32<span class="token punctuation">\</span>drivers<span class="token punctuation">\</span>etc<span class="token punctuation">\</span>hosts
	<span class="token number">140.82</span>.112.4 github.com
       
<span class="token function">git</span> <span class="token function">bash</span>
<span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改hexo的配置文件_config.yml</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:
   type: <span class="token string">'git'</span>
   repo: git@github.com:01zic/01zic.github.io.git
   branch:main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>部署到github(git bash)</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="五、可能的小问题"><a href="#五、可能的小问题" class="headerlink" title="五、可能的小问题"></a>五、可能的小问题</h2><ol>
<li>git连接失败的解决方案<ol>
<li>换网，校园网不一定好使</li>
<li>查询：<a href="https://ipaddress.com/website/github.com">github的ipv4地址</a><br>添加：C:\Windows\System32\drivers\etc\hosts -&gt; 140.82.112.4 github.com</li>
<li>ssh公钥配置，重新配置</li>
</ol>
</li>
<li>github页面代码块的错乱问题<ul>
<li>代码块前面不要有任何东西 </li>
<li>例如无序列表或者有序列表之类的东西</li>
<li>直接将代码块置顶，前面不留空格</li>
</ul>
</li>
</ol>
<h2 id="六、七牛云图床的配置"><a href="#六、七牛云图床的配置" class="headerlink" title="六、七牛云图床的配置"></a>六、七牛云图床的配置</h2><ol>
<li>七牛云登录后，对象存储里面新建空间，配置加速域名，用备案过的域名的二级域名</li>
<li>到腾讯云DNS解析的地方添加解析记录，qiniu CNAME CNAME记录值（七牛云提供）</li>
<li>AK SK 域名 存储区域</li>
</ol>
<h2 id="七、配置mermaid"><a href="#七、配置mermaid" class="headerlink" title="七、配置mermaid"></a>七、配置mermaid</h2><ul>
<li><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">直接参考github链接</a>（我搞的时候一直有问题）<ol>
<li>安装插件</li>
<li>修改配置文件</li>
<li>js文件修改</li>
</ol>
</li>
<li><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">mermaid-github文档</a></li>
</ul>
<h2 id="八、hexo中添加本地文件下载"><a href="#八、hexo中添加本地文件下载" class="headerlink" title="八、hexo中添加本地文件下载"></a>八、hexo中添加本地文件下载</h2><ul>
<li>调整程序配置文件_config.yml 里的post_asset_folder:这个选项设置为True</li>
<li>在source下创建/download文件夹，先把文件xxx.xls/doc（或者其他）复制到这个文件夹</li>
<li> 最后在xxxx.md中想引入下载链接时，只需要在xxxx.md中按照markdown的格式引入即可：</li>
</ul>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">xx文件 <span class="token url">[<span class="token content">点击下载</span>](<span class="token url">/download/xx.xx</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>还可以在七牛云里面新建文件夹，将需要下载的文件上传，然后获取Url形成超链接即可。</li>
</ul>
<h2 id="九、换NEXT主题"><a href="#九、换NEXT主题" class="headerlink" title="九、换NEXT主题"></a>九、换NEXT主题</h2><ul>
<li>因为mermaid配置太折磨人了</li>
<li><a href="https://github.com/theme-next/awesome-next">next主题的相关插件</a></li>
<li><a href="https://blog.csdn.net/Sky_True/article/details/104435997/">别人的完整配置</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>C项目学习——BuildYourOwnLisp</title>
    <url>/2022/06/22/throughLispLearnC/</url>
    <content><![CDATA[<h2 id="第零章-·-关于"><a href="#第零章-·-关于" class="headerlink" title="第零章 · 关于"></a>第零章 · 关于</h2><ul>
<li><a href="http://buildyourownlisp.com/">阅读地址</a></li>
<li><a href="https://github.com/orangeduck/BuildYourOwnLisp">项目主页</a></li>
</ul>
<h2 id="第一章-·-介绍"><a href="#第一章-·-介绍" class="headerlink" title="第一章 · 介绍"></a>第一章 · 介绍</h2><ul>
<li>没啥</li>
</ul>
<h2 id="第二章-·-安装"><a href="#第二章-·-安装" class="headerlink" title="第二章 · 安装"></a>第二章 · 安装</h2><h3 id="1-代码编辑器"><a href="#1-代码编辑器" class="headerlink" title="1. 代码编辑器"></a>1. 代码编辑器</h3><ul>
<li>windows notepad++</li>
</ul>
<h3 id="2-编译器"><a href="#2-编译器" class="headerlink" title="2. 编译器"></a>2. 编译器</h3><ul>
<li><a href="https://sourceforge.net/projects/mingw/">MinGW</a></li>
<li>配置系统环境<ul>
<li>系统环境新建 MinGW C:\MinGW</li>
<li>Path C:\MinGW\bin</li>
</ul>
</li>
</ul>
<h3 id="3-测试c编译器"><a href="#3-测试c编译器" class="headerlink" title="3. 测试c编译器"></a>3. 测试c编译器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-Hello-World"><a href="#4-Hello-World" class="headerlink" title="4. Hello World"></a>4. Hello World</h3><ul>
<li>新建hello_world.c文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> <span class="token comment">//头文件 标准输入输出库</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出到命令行</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结束main函数并返回值0，0表示程序正常退出，没有发生错误</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-编译"><a href="#5-编译" class="headerlink" title="5. 编译"></a>5. 编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall hello_world.c -o hello_world
hello_world
//产生可执行文件 hello_world 在cmd中执行 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="6-文档"><a href="#6-文档" class="headerlink" title="6. 文档"></a>6. 文档</h3><ul>
<li><a href="https://en.cppreference.com/w/c">C在线文档</a></li>
</ul>
<h2 id="第三章-·-基础"><a href="#第三章-·-基础" class="headerlink" title="第三章 · 基础"></a>第三章 · 基础</h2><h3 id="1-程序"><a href="#1-程序" class="headerlink" title="1. 程序"></a>1. 程序</h3><ul>
<li>程序由函数定义和类型定义组成</li>
<li>所有程序从main函数开始执行</li>
</ul>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><h3 id="3-函数声明"><a href="#3-函数声明" class="headerlink" title="3. 函数声明"></a>3. 函数声明</h3><h3 id="4-结构体声明"><a href="#4-结构体声明" class="headerlink" title="4. 结构体声明"></a>4. 结构体声明</h3><h3 id="5-指针"><a href="#5-指针" class="headerlink" title="5. 指针"></a>5. 指针</h3><ul>
<li>char** ：char 类型的指针的指针 </li>
</ul>
<h3 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6. 字符串"></a>6. 字符串</h3><ul>
<li>char*:字符串</li>
</ul>
<h3 id="7-条件分支"><a href="#7-条件分支" class="headerlink" title="7. 条件分支"></a>7. 条件分支</h3><ul>
<li>if</li>
<li>if…else</li>
<li>||</li>
<li>&amp;&amp;</li>
</ul>
<h3 id="8-循环"><a href="#8-循环" class="headerlink" title="8. 循环"></a>8. 循环</h3><ul>
<li>while</li>
<li>for(;;)</li>
<li>do…while</li>
</ul>
<h2 id="第四章-·-交互"><a href="#第四章-·-交互" class="headerlink" title="第四章 · 交互"></a>第四章 · 交互</h2><h3 id="1-读取-求值-输出"><a href="#1-读取-求值-输出" class="headerlink" title="1. 读取-求值-输出"></a>1. 读取-求值-输出</h3><ul>
<li>REPL<ul>
<li><em>read-evaluate-print loop</em> (读取-求值-输出循环)</li>
</ul>
</li>
</ul>
<h3 id="2-交互提示"><a href="#2-交互提示" class="headerlink" title="2. 交互提示"></a>2. 交互提示</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token comment">/* Declare a buffer for user input of size 2048*/</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">/* Print Version and Exit Information */</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* In a never ending loop */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">/* Output our prompt */</span>
        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"lispy>"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">/* Read a line of user input of maximum size 2048 */</span>
        <span class="token function">fgets</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">/* Echo input back to user */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No you're a %s"</span><span class="token punctuation">,</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h3><pre class="line-numbers language-none"><code class="language-none">gcc -std&#x3D;c99 -Wall prompt.c -o prompt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-运行prompt"><a href="#4-运行prompt" class="headerlink" title="4. 运行prompt"></a>4. 运行prompt</h3><h3 id="5-预处理器"><a href="#5-预处理器" class="headerlink" title="5. 预处理器"></a>5. 预处理器</h3><ul>
<li>在windows、linux和mac上都可以运行</li>
<li>感觉很强</li>
<li>不同的平台下头文件不一样</li>
<li>用一个readline函数内 输入读取到缓存中 缓存中的内容读取到新建的字符串 返回字符串</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">/* If we are compiling on Windows compile these functions */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/* Fake readline function */</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Fake add_history function */</span>
<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">/* Otherwise include the editline headers */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span> <span class="token comment">// 译注：如果是Mac系统，不需要包含history.h头文件。</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">/* 译注
上段#else中的代码可以改得更通用一些：
#else
#ifdef __linux__
#include &lt;editline/readline.h>
#include &lt;editline/history.h>
#endif

#ifdef __MACH__
#include &lt;editline/readline.h>
#endif
#endif
*/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Now in either case readline will be correctly defined */</span>
    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No you're a %s\n"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第五章-·-编程语言"><a href="#第五章-·-编程语言" class="headerlink" title="第五章 · 编程语言"></a>第五章 · 编程语言</h2><h3 id="1-什么是编程语言？"><a href="#1-什么是编程语言？" class="headerlink" title="1.什么是编程语言？"></a>1.什么是编程语言？</h3><ul>
<li>自然语言都是建立在递归和重复的子结构之上的</li>
<li>需要一个语法解析器，判断用户输入是否合法</li>
<li>使用一个叫mpc的库来完成这个工作</li>
</ul>
<h3 id="2-解析器组合子"><a href="#2-解析器组合子" class="headerlink" title="2.解析器组合子"></a>2.解析器组合子</h3><ul>
<li><a href="https://github.com/orangeduck/mpc">mpc</a>是原作者编写的一个解析器组合子(Parser Combinators)库</li>
<li>使用这个库为任何语言编写语法解析器</li>
<li>简化了工作</li>
<li>仅编写高层的抽象语法规则</li>
</ul>
<h3 id="3-编写语法规则"><a href="#3-编写语法规则" class="headerlink" title="3.编写语法规则"></a>3.编写语法规则</h3><ul>
<li>解析器类型 mpc_parser_t*</li>
<li>mpc_or函数产生一个解析器 </li>
<li>mpc_sym将字符串转化为一个语句</li>
<li>mpc_and函数返回的解析器可接受的语句必须是各个语句按照顺序出现</li>
<li>mpcf_strfold和free指定了各个语句的组织及删除方式</li>
<li>mpc_many表示0到多个短语组成的逻辑关系</li>
<li>例子</li>
<li>定义好解析器Adjective None来定义短语Phrase</li>
<li>0到多个Phrase定义Doge语言</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Build a parser 'Adjective' to recognize descriptions */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Adjective <span class="token operator">=</span> <span class="token function">mpc_or</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> 
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"wow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"many"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"so"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"such"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Build a parser 'Noun' to recognize things */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Noun <span class="token operator">=</span> <span class="token function">mpc_or</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"lisp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Phrase <span class="token operator">=</span> <span class="token function">mpc_and</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> mpcf_strfold<span class="token punctuation">,</span> 
    Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Doge <span class="token operator">=</span> <span class="token function">mpc_many</span><span class="token punctuation">(</span>mpcf_strfold<span class="token punctuation">,</span> Phrase<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Do some parsing here... */</span>

  <span class="token function">mpc_delete</span><span class="token punctuation">(</span>Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-更加自然的语法规则"><a href="#4-更加自然的语法规则" class="headerlink" title="4.更加自然的语法规则"></a>4.更加自然的语法规则</h3><ul>
<li><p>使用mpc_new函数定义语法规则的名字</p>
</li>
<li><p>使用mpca_lang函数具体定义这些语法规则</p>
</li>
<li><p><code>mpca_lang</code> 函数的第一个参数是操作标记，在这里我们使用默认选项。第二个参数是 C 语言的一个长字符串。这个字符串中定义了具体的语法。它包含一系列的递归规则。每个规则分为两部分，用冒号 <code>:</code> 隔开，冒号左边是规则的名字，右边是规则的定义，使用 <code>;</code> 表示规则结束。</p>
</li>
<li><table>
<thead>
<tr>
<th>语法表示</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“ab”</td>
<td>字符串ab</td>
</tr>
<tr>
<td>‘a’</td>
<td>字符a</td>
</tr>
<tr>
<td>‘a’ ‘b’</td>
<td>先有一个字符a，后紧跟一个字符b</td>
</tr>
<tr>
<td>‘a’|’b’</td>
<td>有字符a或者b</td>
</tr>
<tr>
<td>‘a’*</td>
<td>要求有0个或多个字符a</td>
</tr>
<tr>
<td>‘a’+</td>
<td>要求有1个或多个字符a</td>
</tr>
<tr>
<td><abba></td>
<td>要求满足名为 <code>abba</code> 定义的语法规则</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Adjective <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"adjective"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Noun      <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"noun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Phrase    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"phrase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Doge      <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"doge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                           \
      adjective : \"wow\" | \"many\"            \
                |  \"so\" | \"such\";           \
      noun      : \"lisp\" | \"language\"       \
                | \"book\" | \"build\" | \"c\"; \
      phrase    : &lt;adjective> &lt;noun>;           \
      doge      : &lt;phrase>*;                    \
    "</span><span class="token punctuation">,</span>
    Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> Phrase<span class="token punctuation">,</span> Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Do some parsing here... */</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> Phrase<span class="token punctuation">,</span> Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="第六章-·-语法分析"><a href="#第六章-·-语法分析" class="headerlink" title="第六章 · 语法分析"></a>第六章 · 语法分析</h2><h3 id="1-波兰表达式（polish-notation）"><a href="#1-波兰表达式（polish-notation）" class="headerlink" title="1. 波兰表达式（polish notation）"></a>1. 波兰表达式（polish notation）</h3><ul>
<li><p>实现一个简单的语法解析器</p>
</li>
<li><p>polish notation 是一种数学标记语言 运算符在操作数的前面</p>
</li>
<li><p>波兰表达式总是以操作符开头，后面跟着操作数或其他的包裹在圆括号中的表达式。</p>
</li>
<li><p>“程序(<code>Program</code>)是由一个操作符(<code>Operator</code>)加上一个或多个表达式(<code>Expression</code>)组成的”，而 “表达式(<code>Expression</code>)可以是一个数字，或者是包裹在圆括号中的一个操作符(<code>Operator</code>)加上一个或多个表达式(<code>Expression</code>)”</p>
</li>
<li><p>完整描述</p>
</li>
<li><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>程序(<code>Program</code>)</td>
<td><em>the start of input</em>, an <code>Operator</code>, one or more <code>Expression</code>, and <em>the end of input</em>.</td>
</tr>
<tr>
<td>表达式(Expression)</td>
<td>either a <code>Number</code> <em>or</em> <code>&#39;(&#39;</code>, an <code>Operator</code>, one or more <code>Expression</code>, and an <code>&#39;)&#39;</code>.</td>
</tr>
<tr>
<td>操作符(Operator)</td>
<td><code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, or <code>&#39;/&#39;</code>.</td>
</tr>
<tr>
<td>数字(<code>Number</code>)</td>
<td>an optional <code>-</code>, and one or more characters between <code>0</code> and <code>9</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-正则表达式（Regular-Expressions）"><a href="#2-正则表达式（Regular-Expressions）" class="headerlink" title="2.正则表达式（Regular Expressions）"></a>2.正则表达式（Regular Expressions）</h3><ul>
<li><table>
<thead>
<tr>
<th>语法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>Any character is required.</td>
</tr>
<tr>
<td>a</td>
<td>The character <code>a</code> is required.</td>
</tr>
<tr>
<td>[abcdef]</td>
<td>Any character in the set <code>abcdef</code> is required.</td>
</tr>
<tr>
<td>[a-f]</td>
<td>Any character in the range <code>a</code> to <code>f</code> is required.</td>
</tr>
<tr>
<td>a?</td>
<td>The character <code>a</code> is optional.</td>
</tr>
<tr>
<td>a*</td>
<td>Zero or more of the character <code>a</code> are required.</td>
</tr>
<tr>
<td>a+</td>
<td>One or more of the character <code>a</code> are required.</td>
</tr>
<tr>
<td>^</td>
<td>The start of input is required.</td>
</tr>
<tr>
<td>$</td>
<td>The end of input is required.</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://learncodethehardway.org/">教程</a></p>
</li>
</ul>
<h3 id="3-安装mpc"><a href="#3-安装mpc" class="headerlink" title="3.安装mpc"></a>3.安装mpc</h3><ul>
<li>从<a href="https://github.com/orangeduck/mpc">mpc项目</a>主页中下载、mpc.h<code>和</code>mpc.c</li>
<li>第四章parsing.c</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing.c mpc.c -o parsing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>C语言中。尖括号用来包含系统头文件如 <code>stdio.h</code>，双引号用来包含其他的头文件如 <code>mpc.h</code></li>
</ul>
<h3 id="4-Polish-Notation-Grammar"><a href="#4-Polish-Notation-Grammar" class="headerlink" title="4.Polish Notation Grammar"></a>4.Polish Notation Grammar</h3><ul>
<li>以下代码放在parsing.c的main函数的开头</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Some Parsers */</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr     <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Define them with the following Language */</span>
<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                     \
    number   : /-?[0-9]+/ ;                             \
    operator : '+' | '-' | '*' | '/' ;                  \
    expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
    lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>将使用的解析器删除，将以下代码放在return的前面</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-解析用户的输入"><a href="#5-解析用户的输入" class="headerlink" title="5.解析用户的输入"></a>5.解析用户的输入</h3><ul>
<li>修改parsing.c中的while循环内容</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Attempt to Parse the user Input */</span>
<span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* On Success Print the AST */</span>
  <span class="token function">mpc_ast_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Otherwise Print the Error */</span>
  <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>调用了 <code>mpc_parse</code> 函数，并将 <code>Lispy</code> 解析器和用户输入 <code>input</code> 作为参数。它将解析的结果保存到 <code>&amp;r</code> 中，如果解析成功，返回值为 <code>1</code>，失败为 <code>0</code>。</li>
<li>解析成功时会产生一个内部结构，并保存到 <code>r</code> 的 <code>output</code> 字段中。我们可以使用 <code>mpc_ast_print</code> 将这个结构打印出来，使用 <code>mpc_ast_delete</code> 将其删除。</li>
<li>解析失败时则会将错误信息保存在 <code>r</code> 的 <code>error</code> 字段中。我们可以使用 <code>mpc_err_print</code> 将这个结构打印出来，使用 <code>mpc_err_delete</code> 将其删除。</li>
<li>重新编译</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing.c mpc.c -o parsing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li>parsing.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Create Some Parsers */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr     <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Define them with the following Language */</span>
  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Attempt to parse the user input */</span>
    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* On success print and delete the AST */</span>
      <span class="token function">mpc_ast_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* Otherwise print and delete the Error */</span>
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Undefine and delete our parsers */</span>
  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><ul>
<li>到这里应该是完成了表达式的解析</li>
</ul>
<h2 id="第七章-·-计算"><a href="#第七章-·-计算" class="headerlink" title="第七章 · 计算"></a>第七章 · 计算</h2><h3 id="1-树型结构"><a href="#1-树型结构" class="headerlink" title="1.树型结构"></a>1.树型结构</h3><ul>
<li>可以读取输入，解析并得到表达式的内部结构</li>
<li>需要对表达式的内部结构进行计算求值</li>
<li>内部结构：抽象语法树(Abstract Syntax Tree，简称 AST)——表示用户输入的表达式结构</li>
<li>操作数和操作符等需要被处理的实际数据都位于叶子节点上</li>
<li>而非叶子节点上则包含了遍历和求值的信息</li>
<li>在 <code>mpc.h</code> 中，可以找到 <code>mpc_ast_t</code> 类型的定义——解析表达式得到的数据结构</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mpc_ast_t</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> tag<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> contents<span class="token punctuation">;</span>
  <span class="token class-name">mpc_state_t</span> state<span class="token punctuation">;</span>
  <span class="token keyword">int</span> children_num<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mpc_ast_t</span><span class="token operator">*</span><span class="token operator">*</span> children<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">mpc_ast_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>tag</code> 字段。在打印这个树形结构时，<code>tag</code> 就是在节点内容之前的信息，它表示了解析这个节点时所用到的所有规则。例如：<code>expr|number|regex</code>。知道创建节点时所匹配到的规则</li>
<li><code>contents</code> 字段，它包含了节点中具体的内容，例如 <code>&#39;*&#39;</code>、<code>&#39;(&#39;</code>、<code>&#39;5&#39;</code>。对于表示分支的非叶子节点，这个字段为空。而对于叶子节点，则包含了操作数或操作符的字符串形式。</li>
<li><code>state</code>。这里面包含了解析器发现这个节点时所处的状态，例如行数和列数等信息。</li>
<li>两个字段 <code>children_num</code> 和 <code>children</code> 帮助我们来遍历抽象语法树。前一个字段告诉我们有多少个孩子节点，后一个字段是包含这些节点的数组。</li>
<li><code>children</code> 字段的类型是 <code>mpc_ast_t**</code>。这是一个二重指针类型,它是孩子节点的列表。</li>
<li><code>children</code> 使用数组的语法，在其后使用 <code>[x]</code> 来获取某个下标的值。比如，可以用 <code>children[0]</code> 来获取第一个孩子节点。</li>
<li><code>mpc_ast_t*</code> 是指向结构体的指针类型，所以获取其字段的语法有些许不同。需要使用 <code>-&gt;</code> 符号</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Load AST from output */</span>
<span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> a <span class="token operator">=</span> r<span class="token punctuation">.</span>output<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tag: %s\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Contents: %s\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of children: %i\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>children_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Get First Child */</span>
<span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> c0 <span class="token operator">=</span> a<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Tag: %s\n"</span><span class="token punctuation">,</span> c0<span class="token operator">-></span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Contents: %s\n"</span><span class="token punctuation">,</span> c0<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Number of children: %i\n"</span><span class="token punctuation">,</span>
  c0<span class="token operator">-></span>children_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h3><ul>
<li>树形结构是自身重复的。树的每个孩子节点都是树，每个孩子节点的孩子节点也是树，以此类推。正如编程语言一样，树形结构也是递归和重复的。显要想编写函数处理所有可能的情况，就必须要保证函数可以处理任意深度。可以使用递归函数的天生优势来轻松地处理这种重复自身的结构。</li>
<li>递归得到所有子节点的值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">number_of_nodes</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>children_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>children_num <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token function">number_of_nodes</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-求值"><a href="#3-求值" class="headerlink" title="3.求值"></a>3.求值</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lispy<span class="token operator">></span> * <span class="token number">10</span> <span class="token punctuation">(</span>+ <span class="token number">1</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token operator">></span>
  regex
  operator<span class="token operator">|</span>char:1:1 <span class="token string">'*'</span>
  <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:3 <span class="token string">'10'</span>
  <span class="token function">expr</span><span class="token operator">|</span><span class="token operator">></span>
    char:1:6 <span class="token string">'('</span>
    operator<span class="token operator">|</span>char:1:7 <span class="token string">'+'</span>
    <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:9 <span class="token string">'1'</span>
    <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:11 <span class="token string">'51'</span>
    char:1:13 <span class="token string">')'</span>
  regex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p>有 <code>number</code> 标签的节点一定是一个数字，并且没有孩子节点。可以直接将其转换为一个数字。这将是递归函数中的基本情况。</p>
</li>
<li><p>如果一个节点有 <code>expr</code> 标签，但没有 <code>number</code> 标签，需要看他的第二个孩子节点是什么操作符(第一个孩子节点永远是 <code>(</code> 字符)。然后我们需要使用这个操作符来对后面的孩子节点进行求值。当然，也不包括最后的 <code>)</code> 节点。</p>
</li>
<li><p>C 语言中 <code>long</code> 类型(长整形)保存计算的结果</p>
</li>
<li><p>为了检测节点的类型，或是获得节点中保存的数值，会用到节点中的 <code>tag</code> 和 <code>contents</code> 字段。这些字段都是字符串类型的，所以需要用到一些辅助性的库函数：</p>
</li>
<li><table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>atoi</td>
<td>Converts a <code>char*</code> to a <code>int</code>.</td>
</tr>
<tr>
<td>strcmp</td>
<td>Takes as input two <code>char*</code> and if they are equal it returns <code>0</code>.</td>
</tr>
<tr>
<td>strstr</td>
<td>Takes as input two <code>char*</code> and returns a pointer to the location of the second in the first, or <code>0</code> if the second is not a sub-string of the first.</td>
</tr>
</tbody></table>
</li>
<li><p>可以使用 <code>strcmp</code> 来检查应该使用什么操作符，并使用 <code>strstr</code> 来检测 <code>tag</code> 中是否含有某个字段。</p>
</li>
<li><p>递归求值函数</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If tagged as number return it directly. */</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* The operator is always second child. */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>

  <span class="token comment">/* We store the third child in `x` */</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Iterate the remaining children and combining. */</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>eval_op函数定义</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Use operator string to see which operation to perform */</span>
<span class="token keyword">long</span> <span class="token function">eval_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-打印"><a href="#4-打印" class="headerlink" title="4.打印"></a>4.打印</h3><ul>
<li>打印求值结果</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>进行基本的数学运算</li>
</ul>
<h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h3><ul>
<li>evaluation.c</li>
<li>重新编译运行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing003.c mpc.c -o parsing003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Use operator string to see which operation to perform */</span>
<span class="token keyword">long</span> <span class="token function">eval_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">long</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If tagged as number return it directly. */</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* The operator is always second child. */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>

  <span class="token comment">/* We store the third child in `x` */</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Iterate the remaining children and combining. */</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

      <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第八章-·-错误处理"><a href="#第八章-·-错误处理" class="headerlink" title="第八章 · 错误处理"></a>第八章 · 错误处理</h2><h3 id="1-异常退出"><a href="#1-异常退出" class="headerlink" title="1 异常退出"></a>1 异常退出</h3><ul>
<li>gdb</li>
</ul>
<h3 id="2-List-Value"><a href="#2-List-Value" class="headerlink" title="2. List Value"></a>2. List Value</h3><ul>
<li>需要能表示这两种结果的数据结构。简单起见，我们使用结构体来表示，并使用 <code>type</code> 字段来告诉我们当前哪个字段是有意义的</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Declare New lval Struct */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3. 枚举"></a>3. 枚举</h3><ul>
<li><code>lval</code> 的 <code>type</code> 和 <code>err</code> 字段的类型都是 <code>int</code></li>
<li>如果 <code>type</code> 为 0，那么此结构体表示一个<em>数字</em>。</li>
<li>如果 <code>type</code> 为 1，那么此结构体表示一个<em>错误</em>。</li>
<li>使用枚举 表明数字的含义</li>
<li>type字段声明枚举值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Enumeration of Possible lval Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_ERR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>error字段声明枚举值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Enumeration of Possible Error Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LERR_DIV_ZERO<span class="token punctuation">,</span> LERR_BAD_OP<span class="token punctuation">,</span> LERR_BAD_NUM <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="4-Lisp-Value函数"><a href="#4-Lisp-Value函数" class="headerlink" title="4.Lisp Value函数"></a>4.Lisp Value函数</h3><ul>
<li>用两个函数创建新的实例</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create a new number type lval */</span>
lval <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Create a new error type lval */</span>
lval <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>err <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>用switch来进行打印</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Print an "lval" */</span>
<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* In the case the type is a number print it */</span>
    <span class="token comment">/* Then 'break' out of the switch. */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* In the case the type is an error */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      <span class="token comment">/* Check what type of error it is and print it */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_DIV_ZERO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_OP<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Operator!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_NUM<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" followed by a newline */</span>
<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-求值"><a href="#5-求值" class="headerlink" title="5.求值"></a>5.求值</h3><ul>
<li>现在知道了 <code>lval</code> 类型的使用方法，需要用它来替换掉之前使用的 <code>long</code> 类型</li>
<li>这不仅仅是简单地将 <code>long</code> 替换为 <code>lval</code>，还需要修改函数使其能正确处理<em>数字</em>或是<em>错误</em>作为输入的情况。</li>
<li>在 <code>eval_op</code> 函数中，如果检测到错误，函数应该立即返回，当且仅当两个操作数都为数字类型时才做计算。另外，对于本章开头的除数为零的错误，也应该返回错误信息</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval <span class="token function">eval_op</span><span class="token punctuation">(</span>lval x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> lval y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If either value is an error return it */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise do maths on the number values */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">+</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">-</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">*</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* If second operand is zero return error */</span>
    <span class="token keyword">return</span> y<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">0</span> 
      <span class="token operator">?</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_DIV_ZERO<span class="token punctuation">)</span> 
      <span class="token operator">:</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">/</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_OP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>eval</code> 函数也需要小小地修整一下，为数字转换部分增加一点错误处理代码</li>
<li>新代码中，选用 <code>strtol</code> 函数进行字符串到数字的转换，因为可以通过检测 <code>errno</code> 变量确定是否转换成功。这无疑比使用 <code>atoi</code> 函数更为明智。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if there is some error in conversion */</span>
    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>  
  lval x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用新定义的打印函数：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">lval result &#x3D; eval(r.output);
lval_println(result);
mpc_ast_delete(r.output);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>尝试运行新程序，确保除数为零时不会崩溃了：）</li>
</ul>
<h3 id="6-参考-1"><a href="#6-参考-1" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li>error_handing.c</li>
<li>重新编译，执行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing004.c mpc.c -o parsing004<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Create Enumeration of Possible Error Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LERR_DIV_ZERO<span class="token punctuation">,</span> LERR_BAD_OP<span class="token punctuation">,</span> LERR_BAD_NUM <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Create Enumeration of Possible lval Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_ERR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Declare New lval Struct */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

<span class="token comment">/* Create a new number type lval */</span>
lval <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Create a new error type lval */</span>
lval <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>err <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" */</span>
<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* In the case the type is a number print it */</span>
    <span class="token comment">/* Then 'break' out of the switch. */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* In the case the type is an error */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      <span class="token comment">/* Check what type of error it is and print it */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_DIV_ZERO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_OP<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Operator!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_NUM<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" followed by a newline */</span>
<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

lval <span class="token function">eval_op</span><span class="token punctuation">(</span>lval x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> lval y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If either value is an error return it */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise do maths on the number values */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">+</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">-</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">*</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* If second operand is zero return error */</span>
    <span class="token keyword">return</span> y<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">0</span> 
      <span class="token operator">?</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_DIV_ZERO<span class="token punctuation">)</span> 
      <span class="token operator">:</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">/</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_OP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if there is some error in conversion */</span>
    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>  
  lval x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-收获"><a href="#7-收获" class="headerlink" title="7.收获"></a>7.收获</h3><ul>
<li>结构体中用num和error这两个int字段表示正确和错误的情况，并用type这个int字段来表示当前哪个字段有意义</li>
<li>用enum枚举来表示type和error这两个字段不同的情况，将数字含义具体化</li>
<li>用switch来判断type或error这两个字段的各种情况进行打印输出</li>
</ul>
<h2 id="第九章-·-S-表达式"><a href="#第九章-·-S-表达式" class="headerlink" title="第九章 · S-表达式"></a>第九章 · S-表达式</h2><h3 id="1-List列表"><a href="#1-List列表" class="headerlink" title="1.List列表"></a>1.List列表</h3><ul>
<li>Lisp 程序代码与数据的形式完全相同，这使得它非常强大，能完成许多其他语言不能完成的事情。为了拥有这个强大的特性，需要将求值过程分为读取并存储输入、对输入进行求值两个过程。</li>
<li>花时间去更改程序内部的工作方式，在软件开发中，这被叫做<strong>重构</strong>。重构可能对于当前的程序运行结果并没有太大的影响，但因为工作方式的优化，在后面的开发中更加省心。</li>
<li>为了存储输入，我们需要创建一个内部列表结构，能够递归地表示数字、操作符号以及其他的列表。在 Lisp 中，这个结构被称为 S-表达式(Symbolic Expression)。我们将扩展 <code>lval</code> 结构来表示它。S-表达式求值也是典型的 Lisp 式过程：首先取列表第一个元素为操作符，然后遍历所有剩下的元素，将它们作为操作数。</li>
</ul>
<h3 id="2-指针（讲解地非常nice）"><a href="#2-指针（讲解地非常nice）" class="headerlink" title="2.指针（讲解地非常nice）"></a>2.指针（讲解地非常nice）</h3><ul>
<li>在 C 语言中，要表示列表，就必须正确的使用指针。</li>
<li>C 语言函数的参数<strong>全部</strong>是通过值传递的。也就是说，传递给函数的实际是实参的拷贝。对于 <code>int</code>、<code>long</code>、<code>char</code>等系统类型以及用户自定义的结构体都是成立的。这种方式适用于绝大多数情况，但也会偶尔出现问题。一种常见的情况是，如果我们有一个巨大结构体需要作为参数传递，则每次调用函数，就会对实参进行一次拷贝，这无疑是对性能和内存的浪费。</li>
<li>另外一个问题是，结构体的大小终究是有限的，无论多大，也只能是个固定的大小。而如果我们想向函数传递一组数据，而且数据的总数还是不固定的，结构体就明显的无能为力了。</li>
<li>为了解决这个问题，C 语言的开发者们想出了一个聪明的办法。他们把内存想象成一个巨大的字节数组，每个字节都可以拥有一个全局的索引值。</li>
<li>在这种情况下，计算机中的所有数据，包括当前运行的程序中的结构体、变量都有相应的索引值与其对应(数据的开始字节的索引作为整个数据的索引)。所以，除了将数据本身拷贝到函数参数，我们还可以只拷贝数据的索引值。在函数内部则可以根据索引值找到需要的数据本身(我们将这个索引值称为<em>地址</em>，存储地址的变量称为<em>指针</em>)。使用指针，函数可以修改指定位置的内存而无需拷贝。</li>
<li>因为计算机内存的大小是固定的，表示一个地址所需要的字节数也是固定的。但是地址指向的内存的字节数是可以变化的。这就意味着，我们可以创建一个大小可变的数据结构，并将其指针传入函数，对其进行读取及修改。</li>
<li>所以，所谓的指针也仅仅是一个数字而已。是内存中的一块数据的开始字节的索引值。指针的类型用来提示程序员和编译器指针指向的是一块什么样的数据，占多少个字节等。</li>
<li>指针类型是在现有类型的后面加一个星号 <code>*</code> 组成</li>
<li>要创建指针，我们就需要获取数据的地址。C 语言提供了取地址符(<code>&amp;</code>)来获取某个数据的地址。</li>
<li>为了获取指针所指向的地址的数据值(称为<em>解引用</em>)，我们需要在指针左边使用 <code>*</code> 操作符。要获取结构体指针的某个字段，需要使用 <code>-&gt;</code> 操作符</li>
</ul>
<h3 id="3-栈-Stack-和堆-Heap"><a href="#3-栈-Stack-和堆-Heap" class="headerlink" title="3.栈(Stack)和堆(Heap)"></a>3.栈(Stack)和堆(Heap)</h3><ol>
<li>栈<ul>
<li>栈是程序赖以生存的地方，所有的临时变量和数据结构都保存于其中，可以读取及编辑。每次调用一个新的函数，就会有一块新的栈区压入，并在其中存放函数内的临时变量、传入的实参的拷贝以及其它的一些信息。当函数运行完毕，这块栈区就会被弹出并回收，供其他函数使用。</li>
</ul>
</li>
<li>堆<ul>
<li>堆占据另一部分内存，主要用来存放长生命周期期的数据。堆中的数据必须手动申请和释放。申请内存使用 <code>malloc</code> 函数。这个函数接受一个数字作为要申请的字节数，返回申请好的内存块的指针。</li>
<li>当使用完毕申请的内存，我们还需要将其释放，只要将 <code>malloc</code> 函数返回的指针传给 <code>free</code> 函数即可。</li>
<li>堆比栈的使用难度要大一些，因为它要求程序员手动调用 <code>free</code> 函数释放内存，而且还要正确调用。如果不释放，程序就有可能不断申请新的内存，而不释放旧的，导致内存越用越多。这也被称为<em>内存泄漏</em>。避免这种情况发生的一个简单有效的办法就是，针对每一个 <code>malloc</code> 函数调用，都有且只有一个 <code>free</code> 函数与之对应。这某种程度上就能保证程序能正确处理堆内存的使用。</li>
</ul>
</li>
</ol>
<h3 id="4-解析表达式"><a href="#4-解析表达式" class="headerlink" title="4.解析表达式"></a>4.解析表达式</h3><ul>
<li>S-表达式的语法非常简单。只是小括号之间包含一组表达式而已。而这些表达式可以是数字、操作符或是其他的 S-表达式。只需修改一下之前写的就可以了。另外，我们还需把 <code>operator</code> 规则重命名为 <code>symbol</code>。为之后添加更多的操作符以及变量、函数等做准备。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                          \
    number : /-?[0-9]+/ ;                    \
    symbol : '+' | '-' | '*' | '/' ;         \
    sexpr  : '(' &lt;expr>* ')' ;               \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> ; \
    lispy  : /^/ &lt;expr>* /$/ ;               \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>退出前要清理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-表达式结构"><a href="#5-表达式结构" class="headerlink" title="5.表达式结构"></a>5.表达式结构</h3><ul>
<li>需要让 <code>lval</code> 能够存储 S-表达式。这意味着我们还要能存储符号(Symbols)和数字。我们向枚举中添加两个新的类型。<code>LVAL_SYM</code> 表示操作符类型，例如 <code>+</code> 等，<code>LVAL_SEXPR</code> 表示 S-表达式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>S-表达式是一个可变长度的列表。</li>
<li>不能创建可变长度的结构体，所以只能使用指针来表示它。为 <code>lval</code> 结构体创建一个 <code>cell</code> 字段，指向一个存放 <code>lval*</code> 列表的区域。所以 <code>cell</code> 的类型就应该是 <code>lval**</code>。指向 <code>lval*</code> 的指针。还需要知道 <code>cell</code> 列表中的元素个数，所以创建了 <code>count</code> 字段。</li>
<li>字符串来表示符号(Symbols)，另外我们还增加了另一个字符串用来存储错误信息。也就是说现在 <code>lval</code> 可以存储更加具体的错误信息了，而不只是一个错误代码，这使得我们的错误报告系统更加灵活好用。我们也可以删除掉之前写的错误枚举了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token comment">/* Error and Symbol types have some string data */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token comment">/* Count and Pointer to a list of "lval*" */</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-构造函数和析构函数"><a href="#6-构造函数和析构函数" class="headerlink" title="6.构造函数和析构函数"></a>6.构造函数和析构函数</h3><ul>
<li>我们可以重写 <code>lval</code> 的构造函数，使其返回 <code>lval</code> 的指针，而不是其本身。这样做会使得对 <code>lval</code> 变量进行跟踪更加简单。为此，我们需要用到 <code>malloc</code> 库函数以及 <code>sizeof</code> 操作符为 <code>lval</code> 结构体在堆上申请足够大的内存区域，然后使用 <code>-&gt;</code> 操作符填充结构体中的相关字段。</li>
<li>当我们构造一个 <code>lval</code> 时，它的某些指针字段可能会包含其他的在堆上申请的内存，所以我们应该小心行事。当某个 <code>lval</code> 完成使命之后，我们不仅需要删除它本身所指向的堆内存，还要删除它的字段所指向的堆内存。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Number lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Error lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Symbol lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A pointer to a new empty Sexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>NULL</code> 是一个指向内存地址 0 的特殊常量。按照惯例，它通常被用来表示空值或无数据。使用 <code>NULL</code> 来表示虽然有一个数据指针，但它目前还没有指向任何内容。</li>
</ul>
<blockquote>
<h4 id="为什么要使用-strlen-s-1？"><a href="#为什么要使用-strlen-s-1？" class="headerlink" title="为什么要使用 strlen(s) + 1？"></a>为什么要使用 <code>strlen(s) + 1</code>？</h4><p>在 C 语言中，字符串是以空字符做为终止标记的。所以，C 语言字符串的最后一个字符一定是 <code>\0</code>。请确保所有的字符串都是按照这个约定来存储的，不然程序就会因为莫名其妙的错误退出。<code>strlen</code> 函数返回的是字符串的实际长度(所以不包括结尾的 <code>\0</code> 终止符)。所以为了保证有足够的空间存储所有字符，我们需要在额外 +1。</p>
</blockquote>
<ul>
<li>一个定制的函数来删除 <code>lval*</code>。这个函数应该调用 <code>free</code> 函数来释放本身所指向的由 <code>malloc</code> 函数所申请的内存。但更重要的是，它应该根据自身的类型，释放所有它的字段指向的内存。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Do nothing special for number type */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* For Err or Sym free the string data */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Free the memory allocated for the "lval" struct itself */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-读取表达式"><a href="#7-读取表达式" class="headerlink" title="7.读取表达式"></a>7.读取表达式</h3><ul>
<li>首先我们会读取整个程序，并构造一个 <code>lval*</code> 来表示它，然后我们对这个 <code>lval*</code> 进行遍历求值来得到程序的运行结果。第一阶段负责把抽象语法树(abstract syntax tree)转换为一个 S-表达式，第二阶段则根据我们已由的 Lisp 规则对 S-表达式进行遍历求值。</li>
<li>第一步：递归的查看语法分析树中的每个节点，并根据节点的 <code>tag</code> 和 <code>contents</code> 字段构造出不同类型的 <code>lval*</code>。</li>
<li>如果给定节点的被标记为 <code>number</code> 或 <code>symbol</code>，则我们可以调用对应的构造函数直接返回一个 <code>lval*</code>。如果给定的节点被标记为 <code>root</code> 或 <code>sexpr</code>，则我们应该构造一个空的 S-表达式类型的 <code>lval*</code>，并逐一将它的子节点加入。</li>
<li>为了更加方便的像一个 S-表达式中添加元素，我们可以创建一个函数 <code>lval_add</code>，这个函数将表达式的子表达式计数加一，然后使用 <code>realloc</code> 函数为 <code>v-&gt;cell</code> 字段重新扩大申请内存，用于存储刚刚加入的子表达式 <code>lval* x</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span>
    <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If Symbol or Number return conversion to that type */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If root (>) or sexpr then create empty list */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Fill this list with any valid expression contained within */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="八、打印表达式"><a href="#八、打印表达式" class="headerlink" title="八、打印表达式"></a>八、打印表达式</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Print Value contained within */</span>
    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Don't print trailing space if last element */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>lval_expr_print</code> 函数内部调用了 <code>lval_print</code> 函数，<code>lval_print</code> 内部又调用了 <code>lval_expr_print</code>。似乎是没有办法解决依赖性的。C 语言提供了<em>前置声明</em>来解决这个问题。前置声明只定义了函数的形式，而没有函数体(译者注：前置声明就是告诉编译器：“我保证有这个函数，你放心调用就是了”)。它允许其他函数调用它，而具体的函数定义则在后面。函数声明只要将函数定义的函数体换成 <code>;</code> 即可。在我们的程序中，应该将 <code>void lval_print(lval* v);</code> 语句放在一个比 <code>lval_expr_print</code> 函数靠前的地方。</p>
</blockquote>
<ul>
<li>在主循环中，将求值部分移除，替换为新写就的读取和打印函数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lispy<span class="token operator">></span> + <span class="token number">2</span> <span class="token number">2</span>
<span class="token punctuation">(</span>+ <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span>
lispy<span class="token operator">></span> + <span class="token number">2</span> <span class="token punctuation">(</span>* <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>* <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>+ <span class="token number">2</span> <span class="token punctuation">(</span>* <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>* <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">))</span>
lispy<span class="token operator">></span> *     <span class="token number">55</span>     <span class="token number">101</span>  <span class="token punctuation">(</span>+ <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>* <span class="token number">55</span> <span class="token number">101</span> <span class="token punctuation">(</span>+ <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">))</span>
lispy<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="9-表达式求值"><a href="#9-表达式求值" class="headerlink" title="9.表达式求值"></a>9.表达式求值</h3><ul>
<li>可以把求值函数想象成某种转换器－－它读取 <code>lval*</code> 作为输入，通过某种方式将其转化为新的 <code>lval*</code> 并输出。</li>
<li>在有些时候，求值函数不对输入做任何修改，原封不动的将其返回；有些时候，它会对输入的做一些改动；而在大多数情况下，它会将输入的 <code>lval*</code> 删除，返回完全不同的东西。如果要返回新的东西，一定要记得将原有的作为输入的 <code>lval*</code> 删除。</li>
<li>对于 S-表达式，我们首先遍历它所有的子节点，如果子节点有任何错误，我们就使用稍后定义的函数 <code>lval_take</code> 将遇到的第一个错误返回。</li>
<li>对于没有子节点的 S-表达式直接将其返回就可以了，这是为了处理空表达式 <code>&#123;&#125;</code> 的情况。另外，我们还需要检查只有一个子节点的表达式，例如 <code>&#123;5&#125;</code>，这种情况我们应该将其包含的表达式返回。</li>
<li>如果以上情况都不成立，那我们就知道这是一个合法的表达式，有个多于一个的子节点。对于此种情况，我们使用稍后定义的函数 <code>lval_pop</code> 将第一个元素从表达式中分离开来，然后检查确保它是一个 <code>symbol</code>。然后根据它的具体类型，将它和参数一起传入 <code>builtin_op</code> 函数计算求值。如果它不是 <code>symbol</code>，我们就将它以及传进来的其它参数删除，然后返回一个错误。</li>
<li>对于其它的非 S-表达式类型，我们就直接将其返回。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">lval* lval_eval_sexpr(lval* v) &#123;

  &#x2F;* Evaluate Children *&#x2F;
  for (int i &#x3D; 0; i &lt; v-&gt;count; i++) &#123;
    v-&gt;cell[i] &#x3D; lval_eval(v-&gt;cell[i]);
  &#125;

  &#x2F;* Error Checking *&#x2F;
  for (int i &#x3D; 0; i &lt; v-&gt;count; i++) &#123;
    if (v-&gt;cell[i]-&gt;type &#x3D;&#x3D; LVAL_ERR) &#123; return lval_take(v, i); &#125;
  &#125;

  &#x2F;* Empty Expression *&#x2F;
  if (v-&gt;count &#x3D;&#x3D; 0) &#123; return v; &#125;

  &#x2F;* Single Expression *&#x2F;
  if (v-&gt;count &#x3D;&#x3D; 1) &#123; return lval_take(v, 0); &#125;

  &#x2F;* Ensure First Element is Symbol *&#x2F;
  lval* f &#x3D; lval_pop(v, 0);
  if (f-&gt;type !&#x3D; LVAL_SYM) &#123;
    lval_del(f); lval_del(v);
    return lval_err(&quot;S-expression Does not start with symbol!&quot;);
  &#125;

  &#x2F;* Call builtin with operator *&#x2F;
  lval* result &#x3D; builtin_op(v, f-&gt;sym);
  lval_del(f);
  return result;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Evaluate Sexpressions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">/* All other lval types remain the same */</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>lval_pop</code> 和 <code>lval_take</code>。这两个都是用于操作 <code>lval</code> 类型的通用型函数</li>
<li><code>lval_pop</code> 函数将所操作的 S-表达式的第 <code>i</code> 个元素取出，并将在其后面的元素向前移动填补空缺，使得这个 S-表达式不再包含这个元素。然后将取出的元素返回。需要注意的是，这个函数并不会将这个 S- 表达式删除。它只是从中取出某个元素，剩下的元素都保持原样。这意味着这两部分最终都需要在某个地方使用 <code>lval_del</code> 函数删除。</li>
<li><code>lval_take</code> 和 <code>lval_pop</code> 函数类似，不过它将取出元素之后剩下的列表删除了。它利用了 <code>lval_pop</code> 函数并做了一点小小的改变，却使得我们的代码可读性更高了一些。所以，不同于 <code>lval_pop</code>，你只需负责使用 <code>lval_del</code> 删除取出的元素即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Find the item at "i" */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/* Shift memory after the item at "i" over the top */</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Decrease the count of items in the list */</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

  <span class="token comment">/* Reallocate the memory used */</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们还需要定义求值函数 <code>builtin_op</code>，它和我们在之前章节定义的 <code>eval_op</code> 函数类似，改成了接受一个 <code>lval*</code> 来代表一系列的参数。该函数应该对参数做更加严格的检查，如果有任何参数不是数字类型的 <code>lval*</code>，都应该返回一个错误。</li>
<li>首先，它确保所有的输入参数的类型都为数字。然后将第一个数字弹出开始计算。如果后面没有其它的子表达式，并且操作符为减号时，它会对第一个数字进行取反操作。这确保了类似于 (- 5) 这种表达式能够正确工作。</li>
<li>如果还有更多的参数，它就不断地从列表中取出，将其和之前的计算结果一起进行相应的数学运算。如果做除法时遇到被除数为零的情况，就将临时变量 x 和 y 以及参数列表删除，并返回一个错误。</li>
<li>如果没有错误，参数列表最终会被删除，并返回一个新的表达式。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Ensure all arguments are numbers */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Pop the first element */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* If no arguments and sub then perform unary negation */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* While there are still elements remaining */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Pop the next element */</span>
    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>求值函数就完成了。我们只需要再次更新一下 main 函数，在其打印表达式之前，先将输入经由求值函数处理即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="10-参考"><a href="#10-参考" class="headerlink" title="10.参考"></a>10.参考</h3><ul>
<li>s_expressions.c</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall s_expressions.c mpc.c -o s_expressions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Add SYM and SEXPR as possible lval types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token comment">/* Error and Symbol types have some string data */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token comment">/* Count and Pointer to a list of "lval*"; */</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

<span class="token comment">/* Construct a pointer to a new Number lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Construct a pointer to a new Error lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Construct a pointer to a new Symbol lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A pointer to a new empty Sexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Do nothing special for number type */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* For Err or Sym free the string data */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Free the memory allocated for the "lval" struct itself */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Find the item at "i" */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/* Shift memory after the item at "i" over the top */</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Decrease the count of items in the list */</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

  <span class="token comment">/* Reallocate the memory used */</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Print Value contained within */</span>
    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Don't print trailing space if last element */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Ensure all arguments are numbers */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Pop the first element */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* If no arguments and sub then perform unary negation */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* While there are still elements remaining */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Pop the next element */</span>
    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Perform operation */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Delete element now finished with */</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Delete input expression and return result */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Evaluate Children */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Error Checking */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Empty Expression */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Single Expression */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Ensure First Element is Symbol */</span>
  lval<span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_SYM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"S-expression Does not start with symbol."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Call builtin with operator */</span>
  lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Evaluate Sexpressions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">/* All other lval types remain the same */</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span>
    <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If Symbol or Number return conversion to that type */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If root (>) or sexpr then create empty list */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Fill this list with any valid expression contained within */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                          \
      number : /-?[0-9]+/ ;                    \
      symbol : '+' | '-' | '*' | '/' ;         \
      sexpr  : '(' &lt;expr>* ')' ;               \
      expr   : &lt;number> | &lt;symbol> | &lt;sexpr> ; \
      lispy  : /^/ &lt;expr>* /$/ ;               \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十章-·-Q表达式"><a href="#第十章-·-Q表达式" class="headerlink" title="第十章 · Q表达式"></a>第十章 · Q表达式</h2><h3 id="1-添加特性"><a href="#1-添加特性" class="headerlink" title="1.添加特性"></a>1.添加特性</h3><ul>
<li><p>这个模式也是给一个编程语言添加新特性的典型方式。它包含一系列的步骤来从无到有的实现某个特性。下表详细地说明了本章所要引入的 Q-表达式的具体实现步骤。</p>
</li>
<li><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Syntax</strong></td>
<td>Add new rule to the language grammar for this feature.</td>
</tr>
<tr>
<td><strong>Representation</strong></td>
<td>Add new data type variation to represent this feature.</td>
</tr>
<tr>
<td><strong>Parsing</strong></td>
<td>Add new functions for reading this feature from the <em>abstract syntax tree</em>.</td>
</tr>
<tr>
<td><strong>Semantics</strong></td>
<td>Add new functions for evaluating and manipulating this feature.</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-Q-表达式"><a href="#2-Q-表达式" class="headerlink" title="2.Q-表达式"></a>2.Q-表达式</h3><ul>
<li>新的 Lisp 值类型，叫做 Q-表达式。</li>
<li>它的英文全称为 <em>quoted expression</em>，跟 S-表达式一样，也是 Lisp 表达式的一种，但它不受标准 Lisp 求值机制的作用。也就是说，当受到函数的作用时，Q-表达式不会被求值，而是保持原样。这个特性让 Q-表达式有着广泛的应用。我们可以用它来存储和管理其他的 Lisp 值类型，例如数字、符号或 S-表达式等。</li>
<li>在添加 Q-表达式之后，我们还需要定义一系列的操作来管理它。类似于数学操作，这些操作定义了 Q-表达式具体的行为。</li>
<li>Q- 表达式的语法和 S-表达式非常相似，唯一的不同是 Q-表达式包裹在大括号 <code>&#123;&#125;</code> 中，而非 S-表达式的小括号 <code>()</code>，Q-表达式的语法规则如下所示。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Qexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                    \
    number : /-?[0-9]+/ ;                              \
    symbol : '+' | '-' | '*' | '/' ;                   \
    sexpr  : '(' &lt;expr>* ')' ;                         \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                         \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ; \
    lispy  : /^/ &lt;expr>* /$/ ;                         \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>同步更新清理函数 <code>mpc_cleanup</code> 来处理我们新添加的规则。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-读取Q-表达式"><a href="#3-读取Q-表达式" class="headerlink" title="3.读取Q-表达式"></a>3.读取Q-表达式</h3><ul>
<li>由于 Q-表达式和 S-表达式的形式基本一致，所以它们内部实现也大致是相同的。我们考虑重用 S-表达式的数据结构来表示 Q-表达式，在此之前需要向枚举中添加一个单独的类型。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>编写构造函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A pointer to a new empty Qexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Q-表达式的打印和删除逻辑也和 S-表达式别无二致，我们只需照葫芦画瓢，在相应的函数中添加对应的逻辑即可，具体如下所示。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Qexpr or Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>经过这些简单的变化之后，我们就可以更新读取函数 <code>lval_read</code>，使其可以正确读取 Q-表达式了。因为 Q-表达式重用了所有 S-表达式的数据类型，所以我们也自然可以重用所有 S-表达式的函数，例如 <code>lval_add</code>。</li>
<li>因此，为了能够读取 Q-表达式，我们只需在抽象语法树中检测并创建空的 S-表达式的地方添加一个新的情况即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>同时在<code>lval_read</code>中添加一下代码识别花括号:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-内建函数"><a href="#4-内建函数" class="headerlink" title="4.内建函数"></a>4.内建函数</h3><ul>
<li>已经可以读取Q-表达式了，但它仍无任何用处。接下来我们将构建一些函数来操纵Q-表达式。</li>
<li>这些操作符将作用于我们的列表类型，所以设计要尽可能简洁。我们可以先定义一些简单的操作符，再以它们为基础来构建更复杂的，这样就可以不用添加额外的C代码。以下操作符将可以满足本书内容的需要：<ul>
<li><code>list</code> 接收一个或者多个参数，返回一个包含所有参数的Q-表达式</li>
<li><code>head</code> 接受一个Q-表达式，返回一个包含其第一个元素的Q-表达式</li>
<li><code>tail</code> 接受一个Q-表达式，返回一个除首元素外的Q-表达式</li>
<li><code>join</code> 接受一个或者多个Q-表达式，返回一个将其连在一起的Q-表达式</li>
<li><code>eval</code> 接受一个Q-表达式，将其看做一个S-表达式，并运行</li>
</ul>
</li>
<li>这些新的操作符也需要加入到<code>symbol</code>中。然后我们可以试着定义这些操作符的行为</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                        \
    number : /-?[0-9]+/ ;                                  \
    symbol : \"list\" | \"head\" | \"tail\"                \
           | \"join\" | \"eval\" | '+' | '-' | '*' | '/' ; \
    sexpr  : '(' &lt;expr>* ')' ;                             \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                             \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ;     \
    lispy  : /^/ &lt;expr>* /$/ ;                             \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-首次尝试"><a href="#5-首次尝试" class="headerlink" title="5.首次尝试"></a>5.首次尝试</h3><ul>
<li>我们的内建函数应该和上章的<code>buildin_op</code>接口一致。也就是说所有的参数都先转换为S-表达式，同时要注意使用后释放内存。函数的返回值将是一个新的<code>lval*</code>。</li>
<li>实现Q-表达式的<code>head</code>和<code>tail</code>的功能并不难。我们可以使用已有的S-表达式函数，比如<code>lval_take</code>和<code>lval_pop</code>。同时我们也要对错误的输入进行异常处理。</li>
<li>我们先从<code>head</code>和<code>tail</code>入手。它们在某些条件下是不能执行的。首先要保证输入的参数只有一个，并且类型为Q-表达式。其次这个输入的Q-表达式不能为空。</li>
<li><code>head</code>函数可以重复执行<code>pop</code>并<code>delete</code>在第二个列表元素（index 1）上，直到列表为空。</li>
<li><code>tail</code>函数更简单。只需要<code>pop</code>并<code>delete</code>第一个列表元素（index 0），剩余元素组成的列表则为我们所需要的。按此思路我们可以将代码实现如下：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Check Error Conditions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_QEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed incorrect types!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise take first argument */</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Delete all elements that are not head and return */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Check Error Conditions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_QEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed incorrect types!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Take first argument */</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Delete first element and return */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-宏"><a href="#6-宏" class="headerlink" title="6.宏"></a>6.宏</h3><ul>
<li><code>head</code>和<code>tail</code>能够实现所需要的功能，但是代码难懂且长。有大段的代码是进行错误处理，使得真正的实现部分不那么明显。要解决这个问题，我们可以使用C语言的宏。</li>
<li>宏是预处理指令。（译注：它用来将一个标识符(宏名)定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。程序编译之前，编译的时候所有的宏名都会被定义的字符串替换，这便是宏替换）。它的功能非常强大（译注：甚至自成一门语言，参看宏编程），我们这里用其来简化代码。</li>
<li>宏的工作原理是定义一些参数，将这些参数复制到特定的格式（译注：宏定义）中。通过修改宏定义或者参数，宏可以生成我们想要的代码。其实我们在前面已经见过宏的定义方式，就是以<code>#define</code>为开头的代码片段。</li>
<li>这里我们定义一个<code>LASSERT</code>宏来帮助处理异常。通常宏名都是全大写，这样能够和C函数名区分开来。我们的宏有三个参数<code>args</code>，<code>cond</code>和<code>err</code>。宏名定义好后，我们可以来定义如何利用这三个参数来生成代码。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LASSERT</span><span class="token expression"><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cond<span class="token punctuation">,</span> err<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="7-Head-amp-Tail"><a href="#7-Head-amp-Tail" class="headerlink" title="7.Head&amp;Tail"></a>7.Head&amp;Tail</h3><ul>
<li>新的<code>head</code>和<code>tail</code>函数定义如下。可以明显的看到在使用宏后，代码更清晰了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="8-List-amp-Eval"><a href="#8-List-amp-Eval" class="headerlink" title="8.List&amp;Eval"></a>8.List&amp;Eval</h3><ul>
<li><code>list</code>函数比较简单。它只需将输入的一个或多个S-表达式转化为一个Q-表达式。</li>
<li><code>eval</code>函数更像是转化。它将一个Q-表达式转化为S-表达式，然后使用<code>lval_eval</code>运行。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="9-Join"><a href="#9-Join" class="headerlink" title="9.Join"></a>9.Join</h3><ul>
<li>它需要多个参数，其结构看起来更像先前定义的<code>builtin_op</code>。首先确保所有的参数都是Q-表达式，然后将它们拼接起来。所以我们需要定义<code>lval_join</code>函数，它将<code>y</code>中元素依次弹出并添加进<code>x</code>中，然后将<code>y</code>删除，返回<code>x</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
      <span class="token string">"Function 'join' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> x<span class="token punctuation">,</span> lval<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* For each cell in 'y' add it to 'x' */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Delete the empty 'y' and return 'x' */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-索引函数"><a href="#10-索引函数" class="headerlink" title="10.索引函数"></a>10.索引函数</h3><ul>
<li>我们所有的内建函数都已定义。现在需要一个函数，根据提供的<code>symbol</code>来调用相应的方法。这里我们可以用<code>strcmp</code>和<code>strstr</code>来实现。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"join"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"+-/*"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Unknown Function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>同时修改早先<code>lval_eval_sexpr</code>函数来调用新的<code>buildin</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Call builtin with operator */</span>
lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>现在我们已经全面支持Q-表达式了。编译并运行最新的代码，试试新定义的操作符吧。现在我们可以将S-表达式加在Q-表达式中。这表明我们可以将代码看做是数据。这是Lisp语言不同于其它语言所特有的。</li>
</ul>
<h3 id="11-参考"><a href="#11-参考" class="headerlink" title="11.参考"></a>11.参考</h3><ul>
<li>q_expressions.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Add QEXPR as possible lval type */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A pointer to a new empty Qexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Qexpr or Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> x<span class="token punctuation">,</span> lval<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LASSERT</span><span class="token expression"><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cond<span class="token punctuation">,</span> err<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed &#123;&#125;."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed &#123;&#125;."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
      <span class="token string">"Function 'join' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"join"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"+-/*"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Unknown Function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_SYM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"S-expression Does not start with symbol."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Call builtin with operator */</span>
  lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Qexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                    \
      number : /-?[0-9]+/ ;                              \
      symbol : \"list\" | \"head\" | \"tail\" | \"eval\" \
             | \"join\" | '+' | '-' | '*' | '/' ;        \
      sexpr  : '(' &lt;expr>* ')' ;                         \
      qexpr  : '&#123;' &lt;expr>* '&#125;' ;                         \
      expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ; \
      lispy  : /^/ &lt;expr>* /$/ ;                         \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十一章-·-变量"><a href="#第十一章-·-变量" class="headerlink" title="第十一章 · 变量"></a>第十一章 · 变量</h2><h3 id="1-不变性"><a href="#1-不变性" class="headerlink" title="1. 不变性"></a>1. 不变性</h3><ul>
<li>变量是一种命名值得方式。它们为一个值指定一个名称，然后在需要得时候获得该值的副本</li>
<li>为了允许命名值，需要创建一个存储程序中所有命名内容的名称和值的结构。我们称之为环境。</li>
<li>当我们开始一个新的交互式提示时，我们希望创建一个新的环境来配合它，在这个环境中，每个新的输入位都会被评估。然后我们可以在编程时存储和调用变量。</li>
</ul>
<blockquote>
<p>当我们为新事物重新命名时会发生什么？这不是易变性吗？在我们的Lisp中，当我们重新分配一个名称时，我们将删除旧的关联并创建一个新的关联。这给人一种错觉，即指定给该名称的对象已经更改，并且是可变的，但事实上，我们已经删除了旧对象，并将其指定为新对象。这与C不同，在C中，我们确实可以更改指针指向的数据或存储在结构中的数据，而无需删除它并创建新的数据。</p>
</blockquote>
<h3 id="2-符号语法"><a href="#2-符号语法" class="headerlink" title="2.符号语法"></a>2.符号语法</h3><ul>
<li>允许各种可能的符号输入。正则表达式</li>
<li>C中的变量的名称是非常严格的</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token operator">+</span>\\<span class="token operator">-</span><span class="token operator">*</span>\\<span class="token operator">/</span>\\\\<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">!</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>反斜杠来转义，两个反斜杠表示单个反斜杠</li>
<li>This rule lets symbols be any of the normal C identifier characters<code>a-zA-Z0-9_</code>the arithmetic operator characters<code>+\\-*\\/</code>the backslash character<code>\\\\</code>the comparison operator characters<code>=&lt;&gt;!</code>or an ampersands<code>&amp;</code>. This will give us all the flexibility we need for defining new and existing symbols.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                     \
    number : /-?[0-9]+/ ;                               \
    symbol : /[a-zA-Z0-9_+\\-*\\/\\\\=&lt;>!&amp;]+/ ;         \
    sexpr  : '(' &lt;expr>* ')' ;                          \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                          \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ;  \
    lispy  : /^/ &lt;expr>* /$/ ;                          \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-函数指针"><a href="#3-函数指针" class="headerlink" title="3.函数指针"></a>3.函数指针</h3><ul>
<li><p>一旦我们引入变量，符号将不再在我们的语言中表示函数，而是代表一个名称，以便我们查看环境并从中获得一些新的值。</p>
</li>
<li><p>因此，我们需要一个新的值来表示语言中的函数，一旦遇到一个内置符号，我们就可以返回该值。要创建这种新类型的值，我们将使用一种称为函数指针的东西。</p>
</li>
<li><p>函数指针是C的一个重要特性，它允许您存储和传递指向函数的指针。编辑这些指针指向的数据是没有意义的。相反，我们使用它们来调用它们指向的函数，就像它是一个普通函数一样。</p>
</li>
<li><p>与普通指针一样，函数指针也有一些与之相关的类型。此类型指定指向的函数的类型，而不是指向的数据的类型。这可以让编译器计算出它是否被正确调用。</p>
</li>
<li><p>In the previous chapter our builtin functions took a <code>lval*</code> as input and returned a <code>lval*</code> as output. In this chapter our builtin functions will take an extra pointer to the environment <code>lenv*</code> as input. We can declare a new function pointer type called <code>lbuiltin</code>, for this type of function, like this.</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> lval<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>lbuiltin<span class="token punctuation">)</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span><span class="token punctuation">,</span> lval<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><strong>Why is that syntax so odd?</strong></p>
<p>In some places the syntax of C can look particularly weird. It can help if we understand exactly why the syntax is like this. Let us de-construct the syntax in the example above part by part.</p>
<p>First the <code>typedef</code>. This can be put before any standard variable declaration. It results in the name of the variable, being declared a new type, matching what would be the inferred type of that variable. This is why in the above declaration what looks like the function name becomes the new type name.</p>
<p>Next all those <code>*</code>. Pointer types in C are actually meant to be written with the star <code>*</code> on the left hand side of the variable name, not the right hand side of the type <code>int *x;</code>. This is because C type syntax works by a kind of inference. Instead of reading <em>“Create a new <code>int</code> pointer <code>x</code>“</em>. It is meant to read <em>“Create a new variable <code>x</code> where to dereference <code>x</code> results in an <code>int</code>.”</em> Therefore <code>x</code> is inferred to be a pointer to an <code>int</code>.</p>
<p>This idea is extended to function pointers. We can read the above declaration as follows. <em>“To get an <code>lval\*</code> we dereference <code>lbuiltin</code> and call it with a <code>lenv\*</code> and a <code>lval\*</code>.”</em> Therefore <code>lbuiltin</code> must be a function pointer that takes an <code>lenv*</code> and a <code>lval*</code> and returns a <code>lval*</code>.</p>
</blockquote>
<h3 id="4-循环类型"><a href="#4-循环类型" class="headerlink" title="4.循环类型"></a>4.循环类型</h3><ul>
<li><code>lbuiltin</code>类型引用<code>lval</code>类型和<code>lenv</code>类型。这意味着应该首先在源文件中声明它们。</li>
<li>但我们想在<code>lval</code>结构中创建一个<code>lbuiltin</code>字段，以便创建函数值。因此，我们的<code>lbuiltin</code>声明必须先于<code>lval</code>声明。这导致了所谓的循环类型依赖，其中两种类型相互依赖。</li>
<li>我们以前在函数相互依赖的情况下遇到过这个问题。解决方案是创建一个转发声明，该声明声明了一个函数，但将函数体留空。</li>
<li>在C中，我们可以对类型执行完全相同的操作。首先，我们声明两个没有主体的结构类型。其次，我们将这些名称键入<code>lval</code>和<code>lenv</code>。然后我们可以定义<code>lbuiltin</code>函数指针类型。最后，我们可以定义<code>lval</code>结构体。现在我们所有的类型问题都解决了，编译器不会再抱怨了</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Forward Declarations */</span>

<span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">lenv</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> lval<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lenv</span> lenv<span class="token punctuation">;</span>

<span class="token comment">/* Lisp Value */</span>

<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span>   LVAL_SYM<span class="token punctuation">,</span>
       LVAL_FUN<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> lval<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>lbuiltin<span class="token punctuation">)</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span><span class="token punctuation">,</span> lval<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>

  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  lbuiltin fun<span class="token punctuation">;</span>

  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  lval<span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-函数类型"><a href="#5-函数类型" class="headerlink" title="5.函数类型"></a>5.函数类型</h3><ul>
<li>添加了一个新的<code>lval</code>类型和枚举<code>LVAL_FUN</code>，要更新所有工作在<code>lvals</code>上的相关函数，以正确处理此更新。在大多数情况下，这只意味着在switch语句中插入新的case。我们可以从为这种类型创建一个新的构造函数开始。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_fun</span><span class="token punctuation">(</span>lbuiltin func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_FUN<span class="token punctuation">;</span>
  v<span class="token operator">-></span>fun <span class="token operator">=</span> func<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>On <strong>deletion</strong> we don’t need to do anything special for function pointers.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>On <strong>printing</strong> we can just print out a nominal string.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;function>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>我们还将添加一个用于复制<code>lval</code>的新函数。当我们把东西放进环境中或从环境中取出东西时，这会很有用。对于数字和函数，我们可以直接复制相关字段。对于字符串，我们需要使用<code>malloc</code>和<code>strcpy</code>进行复制。要复制列表，我们需要分配正确的空间量，然后分别复制每个元素。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> v<span class="token operator">-></span>type<span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Copy Functions and Numbers Directly */</span>
    <span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span> x<span class="token operator">-></span>fun <span class="token operator">=</span> v<span class="token operator">-></span>fun<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> x<span class="token operator">-></span>num <span class="token operator">=</span> v<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy Strings using malloc and strcpy */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      x<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">strcpy</span><span class="token punctuation">(</span>x<span class="token operator">-></span>err<span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>
      x<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">strcpy</span><span class="token punctuation">(</span>x<span class="token operator">-></span>sym<span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy Lists by copying each sub-expression */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
      x<span class="token operator">-></span>count <span class="token operator">=</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span>
      x<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-环境"><a href="#6-环境" class="headerlink" title="6.环境"></a>6.环境</h3><ul>
<li>我们的环境结构必须对名称和值之间的关系列表进行编码。有很多方法可以构建一个可以做这类事情的结构。我们将寻求最简单、可行的方法。这是使用两个长度相等的列表。一个是<code>lval*</code>列表，另一个是<code>char*</code>列表。一个列表中的每个条目在另一个列表中的相同位置都有一个对应的条目。我们已经向前声明了我们的<code>lenv</code>结构，所以我们可以如下定义它。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">lenv</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> syms<span class="token punctuation">;</span>
  lval<span class="token operator">*</span><span class="token operator">*</span> vals<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们需要一些函数来创建和删除此结构。这些都很简单。创建会初始化结构字段，而删除会迭代两个列表中的项目，并删除或释放它们。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lenv<span class="token operator">*</span> <span class="token function">lenv_new</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lenv<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lenv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>vals <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lenv_del</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们可以创建两个函数，要么从环境中获取值，要么将值放入其中。</li>
<li>为了从环境中获得一个值，我们循环环境中的所有项，并检查给定的符号是否与任何存储的字符串匹配。如果找到匹配项，则可以返回存储值的副本。如果没有找到匹配项，我们应该返回一个错误。</li>
<li>将新变量放入环境的函数稍微复杂一些。首先，我们要检查是否已经存在同名的变量。如果是这种情况，我们应该用新值替换它的值。为此，我们在环境中循环所有现有变量并检查它们的名称。如果找到匹配项，我们将删除存储在该位置的值，并将输入值的副本存储在该位置。</li>
<li>如果找不到具有该名称的现有值，我们需要分配更多空间将其放入。为此，我们可以使用<code>realloc</code>，并在新分配的位置存储<code>lval</code>及其名称的副本。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lenv_get</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">,</span> lval<span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Iterate over all items in environment */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if the stored string matches the symbol string */</span>
    <span class="token comment">/* If it does, return a copy of the value */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/* If no symbol found return error */</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"unbound symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lenv_put</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">,</span> lval<span class="token operator">*</span> k<span class="token punctuation">,</span> lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Iterate over all items in environment */</span>
  <span class="token comment">/* This is to see if variable already exists */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* If variable is found delete item at that position */</span>
    <span class="token comment">/* And replace with variable supplied by user */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If no existing entry found allocate space for new entry */</span>
  e<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>vals <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Copy contents of lval and symbol string into new location */</span>
  e<span class="token operator">-></span>vals<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>k<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-变量评估"><a href="#7-变量评估" class="headerlink" title="7.变量评估"></a>7.变量评估</h3><ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>c/c++项目学习</category>
      </categories>
      <tags>
        <tag>c/c++项目学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C基础学习与复习</title>
    <url>/2022/06/23/CNOTE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马C基础教程的资料总结</li>
<li><a href="https://qiniu.orangew.cn/download/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8F%8A100%E4%BE%8B.chm">C语言入门教程及100例.chm</a></li>
</ul>
<blockquote>
<p>上述下载文件打开后空白？</p>
<p>请点击文件的属性</p>
<p>勾选以下图片中的安全选项中的解除锁定</p>
<p>重新打开文件即可</p>
<p><img src="http://qiniu.orangew.cn/img/20220629235122.png" alt="20220629235122"></p>
</blockquote>
<h2 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h2><h3 id="1-C语言概述"><a href="#1-C语言概述" class="headerlink" title="1.C语言概述"></a>1.C语言概述</h3><h4 id="1-不同语言的应用场景"><a href="#1-不同语言的应用场景" class="headerlink" title="1.不同语言的应用场景"></a>1.不同语言的应用场景</h4><pre class="mermaid">graph LR;
不同语言-->嵌入式:C和汇编
不同语言-->Web开发:js,php,asp,jsp
不同语言-->高性能服务:apache,nginx,memcached,redis等等高性能web服务器和数据库都是纯c开发的
不同语言-->分布式应用:java,python的天下
不同语言-->游戏服务器:c,c++,lua脚本
不同语言-->并行计算:java,go,erlang
不同语言-->游戏引擎:c++,脚本
不同语言-->游戏逻辑:脚本
不同语言-->移动开发:java,obj-c,swift
不同语言-->桌面开发:c++,qt+script,c#
不同语言-->操作系统:c
不同语言-->虚拟技术:qemu,kvm,xen都是纯c开发的
不同语言-->数据库:c
不同语言-->编译器:c,c++
不同语言-->大数据:java,python
不同语言-->云存储:java,python</pre>

<h4 id="2-C语言的简洁"><a href="#2-C语言的简洁" class="headerlink" title="2.C语言的简洁"></a>2.C语言的简洁</h4><ul>
<li>32个关键字，9种控制语句，34种运算符</li>
<li><img src="http://qiniu.orangew.cn/img/32%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="32个关键字"></li>
</ul>
<blockquote>
<p>32个关键字:(由系统定义，不能重作其它定义)</p>
<p>auto<br>break<br>case<br>char<br>const<br>continue<br>default<br>do<br>double<br>else<br>enum<br>extern<br>float<br>for<br>goto<br>if<br>int<br>long<br>register<br>return<br>short<br>signed<br>sizeofstatic<br>struct<br>switch<br>typedef<br>unsigned<br>union<br>void<br>volatile<br>while</p>
</blockquote>
<blockquote>
<p>9种控制语句:</p>
<p>if( )<del>else</del></p>
<p>for( )~</p>
<p>while( )~</p>
<p>do~while( )</p>
<p>continue</p>
<p>break</p>
<p>switch</p>
<p>goto</p>
<p>return</p>
</blockquote>
<blockquote>
<p>34种运算符:<br>算术运算符: + - * / % ++ –<br>关系运算符: &lt; &lt;= == &gt; &gt;= !=<br>逻辑运算符: ! &amp;&amp; ||<br>位运算符:  &lt;&lt;  &gt;&gt;  ~ | ^ &amp;<br>赋值运算符: = 及其扩展<br>条件运算符: ?:<br>逗号运算符: ,<br>指针运算符: * &amp;<br>求字节数: sizeof<br>强制类型转换:(类型)<br>分量运算符: . -&gt;<br>下标运算符: [ ]<br>其它:( )</p>
</blockquote>
<h4 id="3-gcc编译C"><a href="#3-gcc编译C" class="headerlink" title="3.gcc编译C"></a>3.<code>gcc</code>编译C</h4><ul>
<li><code>gcc</code>（GNU Compiler Collection，GNU 编译器套件），是由 GNU 开发的编程语言编译器。<code>gcc</code>原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，<code>gcc</code>同样适用于微软的Windows。</li>
<li><code>gcc</code>最初用于编译C语言，随着项目的发展<code>gcc</code>已经成为了能够编译<code>C、C++、Java、Ada、fortran、Object C、Object C++、Go</code>语言的编译器大家族。</li>
<li>编译命令格式</li>
</ul>
<blockquote>
<p><code>gcc</code>  [<code>-option1</code>] … <filename></p>
<p><code>g++</code>  [<code>-option1</code>] … <filename></p>
</blockquote>
<ul>
<li>命令、选项和源文件之间使用空格分隔</li>
<li>一行命令中可以有零个、一个或多个选项</li>
<li>文件名可以包含文件的绝对路径，也可以使用相对路径</li>
<li>如果命令中不包含输出可执行文件的文件名，可执行文件的文件名会自动生成一个默认名，Linux平台为<code>a.out</code>，Windows平台为<code>a.exe</code></li>
<li><code>gcc</code>,<code>g++</code>编译常用选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
<tr>
<td>-E</td>
<td>预处理</td>
</tr>
<tr>
<td>-S</td>
<td>预处理和编译</td>
</tr>
<tr>
<td>-c</td>
<td>预处理、编译和汇编</td>
</tr>
</tbody></table>
<h4 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4.环境配置"></a>4.环境配置</h4><h4 id="5-代码分析"><a href="#5-代码分析" class="headerlink" title="5.代码分析"></a>5.代码分析</h4><ol>
<li>头文件<ul>
<li>#include&lt; &gt; 与 #include “”的区别：<ul>
<li>&lt; &gt; 表示系统直接按系统指定的目录检索</li>
<li>“” 表示系统先在 “” 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</li>
</ul>
</li>
</ul>
</li>
<li>main函数<ul>
<li>一个完整的C语言程序，是由一个、且只能有一个main()函数(又称主函数，必须有)和若干个其他函数结合而成（可选）</li>
<li>main函数是C语言程序的入口，程序是从main函数开始执行。</li>
</ul>
</li>
<li>{} 括号，程序体和代码块<ul>
<li>{}叫代码块，一个代码块内部可以有一条或者多条语句</li>
<li>C语言每句可执行代码都是”<strong>;</strong>“分号结尾</li>
<li>所有的#开头的行，都代表预编译指令，预编译指令行结尾是没有分号的</li>
<li>所有的可执行语句必须是在代码块里面</li>
</ul>
</li>
<li>注释<ul>
<li>//叫行注释，注释的内容编译器是忽略的，注释主要的作用是在代码中加一些说明和解释，这样有利于代码的阅读</li>
<li>/**/叫块注释</li>
<li>块注释是C语言标准的注释方法</li>
<li>行注释是从C++语言借鉴过来的</li>
</ul>
</li>
<li>return语句<ul>
<li>return代表函数执行完毕，返回return代表函数的终止</li>
<li>如果main定义的时候前面是int，那么return后面就需要写一个整数；如果main定义的时候前面是void，那么return后面什么也不需要写</li>
<li>在main函数中return 0代表程序执行成功，return -1代表程序执行失败</li>
<li>int main()和void main()在C语言中是一样的，但C++只接受int main这种定义方式</li>
</ul>
</li>
</ol>
<h4 id="6-system函数"><a href="#6-system函数" class="headerlink" title="6. system函数"></a>6. system函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在已经运行的程序中执行另外一个外部程序
参数：外部可执行程序名字
返回值：
成功：<span class="token number">0</span>
失败：任意数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//system("calc"); //windows平台</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Linux平台, 需要头文件#include &lt;stdlib.h></span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-C语言编译过程"><a href="#7-C语言编译过程" class="headerlink" title="7.C语言编译过程"></a>7.C语言编译过程</h4><ol>
<li>预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</li>
<li>编译：检查语法，将预处理后文件编译生成汇编文件</li>
<li>汇编：将汇编文件生成目标文件(二进制文件)</li>
<li>链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</li>
</ol>
<pre class="mermaid">graph TD;
源代码*.c-->预处理器
头文件*.h-->预处理器
预处理器-->编译器
编译器-->汇编;
汇编-->目标代码*.o
目标代码*.o -->链接器
启动代码-->链接器
库代码-->链接器
链接器-->可执行文件</pre>

<h4 id="8-gcc编译过程"><a href="#8-gcc编译过程" class="headerlink" title="8.gcc编译过程"></a>8.gcc编译过程</h4><ol>
<li>分步编译</li>
</ol>
<blockquote>
<p>预处理：<code>gcc -E hello.c -o hello.i</code></p>
<p>编 译：<code>gcc -S hello.i -o hello.s</code></p>
<p>汇 编：<code>gcc -c hello.s -o hello.o</code></p>
<p>链 接：<code>gcc  hello.o -o hello</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-E</td>
<td>只进行预处理</td>
</tr>
<tr>
<td>-S</td>
<td>只进行预处理和编译</td>
</tr>
<tr>
<td>-c</td>
<td>只进行预处理、编译和汇编</td>
</tr>
<tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>文件后缀</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>.c</td>
<td>源文件</td>
</tr>
<tr>
<td>.i</td>
<td>预处理后的C语言文件</td>
</tr>
<tr>
<td>.s</td>
<td>编译后的汇编文件</td>
</tr>
<tr>
<td>.o</td>
<td>汇编后的目标文件</td>
</tr>
</tbody></table>
<p><img src="http://qiniu.orangew.cn/img/01%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="01编译过程"></p>
<h4 id="9-CPU内部结构和寄存器"><a href="#9-CPU内部结构和寄存器" class="headerlink" title="9.CPU内部结构和寄存器"></a>9.CPU内部结构和寄存器</h4><ol>
<li>64位和32位系统的区别</li>
</ol>
<ul>
<li>寄存器是CPU内部最基本的存储单元</li>
<li>CPU对外是通过总线(地址、控制、数据)来和外部设备交互的，总线的宽度是8位，同时CPU的寄存器也是8位，那么这个CPU就叫8位CPU</li>
<li>如果总线是32位，寄存器也是32位的，那么这个CPU就是32位CPU</li>
<li>有一种CPU内部的寄存器是32位的，但总线是16位，准32为CPU</li>
<li>所有的64位CPU兼容32位的指令，32位要兼容16位的指令，所以在64位的CPU上是可以识别32位的指令</li>
<li>在64位的CPU构架上运行了64位的软件操作系统，那么这个系统是64位</li>
<li>在64位的CPU构架上，运行了32位的软件操作系统，那么这个系统就是32位</li>
<li>64位的软件不能运行在32位的CPU之上</li>
</ul>
<ol start="2">
<li>寄存器名字</li>
</ol>
<table>
<thead>
<tr>
<th>8位</th>
<th>16位</th>
<th>32位</th>
<th>64位</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>AX</td>
<td>EAX</td>
<td>RAX</td>
</tr>
<tr>
<td>B</td>
<td>BX</td>
<td>EBX</td>
<td>RBX</td>
</tr>
<tr>
<td>C</td>
<td>CX</td>
<td>ECX</td>
<td>RCX</td>
</tr>
<tr>
<td>D</td>
<td>DX</td>
<td>EDX</td>
<td>RDX</td>
</tr>
</tbody></table>
<ol start="3">
<li>寄存器、缓存、内存三者之间的关系<ul>
<li>按与CPU远近来分，离得最近的是寄存器，然后缓存(CPU缓存)，最后内存。</li>
<li>CPU计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU&lt;—&gt;寄存器&lt;—&gt;内存，这就是它们之间的信息交换。</li>
<li>那为什么有缓存呢？因为如果经常操作内存中的同一址地的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。</li>
<li>因为从缓存提取的速度远高于内存。当然缓存的价格肯定远远高于内存，不然的话，机器里就没有内存的存在。</li>
<li>由此可以看出，从远近来看：CPU〈—〉寄存器〈—&gt; 缓存 &lt;—&gt; 内存。</li>
</ul>
</li>
</ol>
<h4 id="10-汇编语言"><a href="#10-汇编语言" class="headerlink" title="10.汇编语言"></a>10.汇编语言</h4><ol>
<li>vs中c语言嵌套汇编语言</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义整型变量a, b, c</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	__asm
	<span class="token punctuation">&#123;</span>
		mov a<span class="token punctuation">,</span> <span class="token number">3</span>	<span class="token comment">//3的值放在a对应内存的位置</span>
		mov b<span class="token punctuation">,</span> <span class="token number">4</span>	<span class="token comment">//4的值放在b对应内存的位置</span>
		mov eax<span class="token punctuation">,</span> a	<span class="token comment">//把a内存的值放在eax寄存器</span>
		add eax<span class="token punctuation">,</span> b	<span class="token comment">//eax和b相加，结果放在eax</span>
		mov c<span class="token punctuation">,</span> eax	<span class="token comment">//eax的值放在c中</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把c的值输出</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成功完成</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>反汇编</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义整型变量a, b, c</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把c的值输出</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成功完成</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>设置断点</li>
<li>右键反汇编</li>
<li>根据汇编代码分析程序</li>
</ul>
<h4 id="11-IDE"><a href="#11-IDE" class="headerlink" title="11.IDE"></a>11.IDE</h4><ol>
<li>Qt Creator</li>
<li>Visual Studio<ol>
<li>vs2013不建议使用C的传统函数库scanf,strcpy,sprintf，使用这些函数，会提示C4996错误</li>
</ol>
</li>
</ol>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><h4 id="1-常量与变量"><a href="#1-常量与变量" class="headerlink" title="1.常量与变量"></a>1.常量与变量</h4><ol>
<li>关键字（32个）<ul>
<li>数据类型关键字（12个）<br>char, short,int,long, float, double,unsigned,signed,struct, union, enum, void</li>
<li>控制语句关键字（12个)<br>if,else, switch, case, default<br>for , do, while, break, continue, goto, return</li>
<li>存储类关键字(5个)<br>auto，extern,register，static，const</li>
<li>其他关键字（3个)<br>sizeof，typedef，volatile</li>
</ul>
</li>
<li>数据类型</li>
</ol>
<pre class="mermaid">graph LR;
数据类型-->基本类型
数据类型-->构造类型
数据类型-->指针类型:char*,int*,int**等
基本类型-->整型:int,short,long
基本类型-->字符型:char
基本类型-->浮点型
浮点型-->单精度浮点型:float
浮点型-->双精度浮点型:double
构造类型-->数组类型
构造类型-->结构类型:struct
构造类型-->联合类型:union
构造类型-->枚举类型:enum</pre>

<p>3.常量</p>
<ul>
<li><p>在程序运行过程中，其值不能被改变的量</p>
</li>
<li><p> 常量一般出现在表达式或赋值语句中</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>整型常量</th>
<th>100，200，-100，0</th>
</tr>
</thead>
<tbody><tr>
<td>实型常量</td>
<td>3.14 ， 0.125，-3.123</td>
</tr>
<tr>
<td>字符型常量</td>
<td>‘a’,‘b’,‘1’,‘\n’</td>
</tr>
<tr>
<td>字符串常量</td>
<td>“a”,“ab”，“12356”</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="4">
<li>变量<ul>
<li>在程序运行过程中，其值可以改变</li>
<li>变量在使用前必须先定义，定义变量前必须有相应的数据类型</li>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
<li>变量在编译时为其分配相应的内存空间</li>
<li>可以通过其名字和地址访问相应内存</li>
<li>变量名，变量值，存储单元</li>
</ul>
</li>
<li>声明和定义的区别<ul>
<li>声明变量不需要建立存储空间，如：extern int a;</li>
<li>定义变量需要建立存储空间，如：int b;</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//extern 关键字只做声明，不能做任何定义</span>
	<span class="token comment">//声明一个变量a，a在这里没有建立存储空间</span>
	<span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">//err, 没有空间，就不可以赋值</span>

	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">//定义一个变量b，b的类型为int，b赋值为10</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义：</p>
<ul>
<li><p>int b 它既是声明，同时又是定义</p>
</li>
<li><p>对于 extern b来讲它只是声明不是定义</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">10</span> </span><span class="token comment">//声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>	<span class="token comment">//定义了一个变量，其类型为int，名字叫a</span>

	<span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//定义一个const常量，名为叫b，值为10</span>
	<span class="token comment">//b = 11; //err,常量的值不能改变</span>

	<span class="token comment">//MAX = 100;	//err,常量的值不能改变</span>

	a <span class="token operator">=</span> MAX<span class="token punctuation">;</span><span class="token comment">//将abc的值设置为MAX的值</span>
	a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印变量a的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-整型：int"><a href="#2-整型：int" class="headerlink" title="2.整型：int"></a>2.整型：int</h4><ol>
<li><p>定义和输出</p>
<ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>输出一个有符号的10进制int类型</td>
</tr>
<tr>
<td>%o(字母o)</td>
<td>输出8进制的int类型</td>
</tr>
<tr>
<td>%x</td>
<td>输出16进制的int类型，字母以小写输出</td>
</tr>
<tr>
<td>%X</td>
<td>输出16进制的int类型，字母以大写输出</td>
</tr>
<tr>
<td>%u</td>
<td>输出一个10进制的无符号数</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量a，以10进制方式赋值为123</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0567</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量b，以8进制方式赋值为0567</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xabc</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量c，以16进制方式赋值为0xabc</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"8进制：b = %o\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10进制：b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"16进制：c = %x\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"16进制：c = %X\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10进制：c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span> <span class="token comment">//定义无符号int变量d，以16进制方式赋值</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"有符号方式打印：d = %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无符号方式打印：d = %u\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>输入</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//不要加“\n”</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印a的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>short、int、long、long long</li>
</ol>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
</tr>
</tbody></table>
<ul>
<li>需要注意的是，整型数据在内存中占的字节数与所选择的操作系统有关。虽然 C 语言标准中没有明确规定整型数据的长度，但 long 类型整数的长度不能短于 int 类型， short 类型整数的长度不能长于 int 类型。</li>
<li>当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>整型常量</strong></th>
<th><strong>所需类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>代表int类型</td>
</tr>
<tr>
<td>10l, 10L</td>
<td>代表long类型</td>
</tr>
<tr>
<td>10ll, 10LL</td>
<td>代表long long类型</td>
</tr>
<tr>
<td>10u, 10U</td>
<td>代表unsigned int类型</td>
</tr>
<tr>
<td>10ul, 10UL</td>
<td>代表unsigned long类型</td>
</tr>
<tr>
<td>10ull, 10ULL</td>
<td>代表unsigned long long类型</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th align="left"><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%hd</td>
<td align="left">输出short类型</td>
</tr>
<tr>
<td>%d</td>
<td align="left">输出int类型</td>
</tr>
<tr>
<td>%ld</td>
<td align="left">输出long类型</td>
</tr>
<tr>
<td>%lld</td>
<td align="left">输出long long类型</td>
</tr>
<tr>
<td>%hu</td>
<td align="left">输出unsigned short类型</td>
</tr>
<tr>
<td>%u</td>
<td align="left">输出unsigned int类型</td>
</tr>
<tr>
<td>%lu</td>
<td align="left">输出unsigned long类型</td>
</tr>
<tr>
<td>%llu</td>
<td align="left">输出unsigned long long类型</td>
</tr>
</tbody></table>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">10l</span><span class="token punctuation">;</span> <span class="token comment">//或者10L</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">10ll</span><span class="token punctuation">;</span> <span class="token comment">//或者10LL</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short a = %hd\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long c = %ld\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long d = %lld\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> a2 <span class="token operator">=</span> <span class="token number">20u</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token number">20u</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> c2<span class="token operator">=</span> <span class="token number">20ul</span><span class="token punctuation">;</span> 
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d2 <span class="token operator">=</span> <span class="token number">20ull</span><span class="token punctuation">;</span> 

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned short a = %hu\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned int b = %u\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long c = %lu\n"</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long long d = %llu\n"</span><span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.有符号数和无符号数的区别</p>
<ul>
<li>有符号数是最高位为符号位，0代表正数，1代表负数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">signed</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1089474374</span><span class="token punctuation">;</span> <span class="token comment">//定义有符号整型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为 BF0FF0BA</span>

	<span class="token comment">//B       F      0        F       F     0        B	      A</span>
	<span class="token comment">//1011 1111 0000 1111 1111 0000 1011 1010</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> 符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3236958022</span><span class="token punctuation">;</span> <span class="token comment">//定义无符号整型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为 C0F00F46</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有符号和无符号整型的取值范围</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>取值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>2字节</td>
<td>-32768 到 32767 (-215 ~ 215-1)</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-2147483648 到 2147483647 (-231 ~ 231-1)</td>
</tr>
<tr>
<td>long</td>
<td>4字节</td>
<td>-2147483648 到 2147483647 (-231 ~ 231-1)</td>
</tr>
<tr>
<td>unsigned short</td>
<td>2字节</td>
<td>0 到 65535 (0 ~ 216-1)</td>
</tr>
<tr>
<td>unsigned int</td>
<td>4字节</td>
<td>0 到 4294967295 (0 ~ 232-1)</td>
</tr>
<tr>
<td>unsigned long</td>
<td>4字节</td>
<td>0 到 4294967295 (0 ~ 232-1)</td>
</tr>
</tbody></table>
<h4 id="3-sizeof关键字"><a href="#3-sizeof关键字" class="headerlink" title="3.sizeof关键字"></a>3.sizeof关键字</h4><ul>
<li>sizeof不是函数，所以不需要包含任何头文件，它的功能是计算一个数据类型的大小，单位为字节</li>
<li>sizeof的返回值为size_t</li>
<li>size_t类型在32位操作系统下是unsigned int，是一个无符号的整数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sizeof得到指定值占用内存的大小，单位：字节</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">size_t</span> c <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %u\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用无符号数的方式输出c的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-字符型char"><a href="#4-字符型char" class="headerlink" title="4.字符型char"></a>4.字符型char</h4><ol>
<li>字符变量的定义和输出<ul>
<li>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中。char的本质就是一个1字节大小的整型。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(ch) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch[%%c] = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印字符</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch[%%d] = %d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印‘a’ ASCII的值</span>

	<span class="token keyword">char</span> A <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//97</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %d\n"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//65</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写a转大写A</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大写A转小写a</span>

	ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"空字符：%d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空字符ASCII的值为32</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写a转大写A</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大写A转小写a</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.字符变量的输入</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//不要加“\n”</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印ch的字符</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>ASCII对照表</li>
</ol>
<table>
<thead>
<tr>
<th><strong>十进制代码</strong></th>
<th><strong>十六进制代码</strong></th>
<th><strong>MCS 字符或缩写</strong></th>
<th><strong>DEC 多国字符名</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>ASCII 控制字符</strong> <strong>1</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>NUL</td>
<td>空字符</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>SOH</td>
<td>标题起始 (Ctrl/A)</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>STX</td>
<td>文本起始 (Ctrl/B)</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>ETX</td>
<td>文本结束 (Ctrl/C)</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>EOT</td>
<td>传输结束 (Ctrl/D)</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>ENQ</td>
<td>询问 (Ctrl/E)</td>
</tr>
<tr>
<td>6</td>
<td>6</td>
<td>ACK</td>
<td>认可 (Ctrl/F)</td>
</tr>
<tr>
<td>7</td>
<td>7</td>
<td>BEL</td>
<td>铃 (Ctrl/G)</td>
</tr>
<tr>
<td>8</td>
<td>8</td>
<td>BS</td>
<td>退格 (Ctrl/H)</td>
</tr>
<tr>
<td>9</td>
<td>9</td>
<td>HT</td>
<td>水平制表栏 (Ctrl/I)</td>
</tr>
<tr>
<td>10</td>
<td>0A</td>
<td>LF</td>
<td>换行 (Ctrl/J)</td>
</tr>
<tr>
<td>11</td>
<td>0B</td>
<td>VT</td>
<td>垂直制表栏 (Ctrl/K)</td>
</tr>
<tr>
<td>12</td>
<td>0C</td>
<td>FF</td>
<td>换页 (Ctrl/L)</td>
</tr>
<tr>
<td>13</td>
<td>0D</td>
<td>CR</td>
<td>回车 (Ctrl/M)</td>
</tr>
<tr>
<td>14</td>
<td>0E</td>
<td>SO</td>
<td>移出 (Ctrl/N)</td>
</tr>
<tr>
<td>15</td>
<td>0F</td>
<td>SI</td>
<td>移入 (Ctrl/O)</td>
</tr>
<tr>
<td>16</td>
<td>10</td>
<td>DLE</td>
<td>数据链接丢失 (Ctrl/P)</td>
</tr>
<tr>
<td>17</td>
<td>11</td>
<td>DC1</td>
<td>设备控制 1 (Ctrl/Q)</td>
</tr>
<tr>
<td>18</td>
<td>12</td>
<td>DC2</td>
<td>设备控制 2 (Ctrl/R)</td>
</tr>
<tr>
<td>19</td>
<td>13</td>
<td>DC3</td>
<td>设备控制 3 (Ctrl/S)</td>
</tr>
<tr>
<td>20</td>
<td>14</td>
<td>DC4</td>
<td>设备控制 4 (Ctrl/T)</td>
</tr>
<tr>
<td>21</td>
<td>15</td>
<td>NAK</td>
<td>否定接受 (Ctrl/U)</td>
</tr>
<tr>
<td>22</td>
<td>16</td>
<td>SYN</td>
<td>同步闲置符 (Ctrl/V)</td>
</tr>
<tr>
<td>23</td>
<td>17</td>
<td>ETB</td>
<td>传输块结束 (Ctrl/W)</td>
</tr>
<tr>
<td>24</td>
<td>18</td>
<td>CAN</td>
<td>取消 (Ctrl/X)</td>
</tr>
<tr>
<td>25</td>
<td>19</td>
<td>EM</td>
<td>媒体结束 (Ctrl/Y)</td>
</tr>
<tr>
<td>26</td>
<td>1A</td>
<td>SUB</td>
<td>替换 (Ctrl/Z)</td>
</tr>
<tr>
<td>27</td>
<td>1B</td>
<td>ESC</td>
<td>换码符</td>
</tr>
<tr>
<td>28</td>
<td>1C</td>
<td>FS</td>
<td>文件分隔符</td>
</tr>
<tr>
<td>29</td>
<td>1D</td>
<td>GS</td>
<td>组分隔符</td>
</tr>
<tr>
<td>30</td>
<td>1E</td>
<td>RS</td>
<td>记录分隔符</td>
</tr>
<tr>
<td>31</td>
<td>1F</td>
<td>US</td>
<td>单位分隔符</td>
</tr>
<tr>
<td><strong>ASCII 特殊和数字字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>20</td>
<td>SP</td>
<td>空格</td>
</tr>
<tr>
<td>33</td>
<td>21</td>
<td>!</td>
<td>感叹号</td>
</tr>
<tr>
<td>34</td>
<td>22</td>
<td>“</td>
<td>引号 (双引号)</td>
</tr>
<tr>
<td>35</td>
<td>23</td>
<td>#</td>
<td>数字符号</td>
</tr>
<tr>
<td>36</td>
<td>24</td>
<td>$</td>
<td>美元符</td>
</tr>
<tr>
<td>37</td>
<td>25</td>
<td>%</td>
<td>百分号</td>
</tr>
<tr>
<td>38</td>
<td>26</td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>39</td>
<td>27</td>
<td>‘</td>
<td>省略号 (单引号)</td>
</tr>
<tr>
<td>40</td>
<td>28</td>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>41</td>
<td>29</td>
<td>)</td>
<td>右圆括号</td>
</tr>
<tr>
<td>42</td>
<td>2A</td>
<td>*</td>
<td>星号</td>
</tr>
<tr>
<td>43</td>
<td>2B</td>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>44</td>
<td>2C</td>
<td>,</td>
<td>逗号</td>
</tr>
<tr>
<td>45</td>
<td>2D</td>
<td>–</td>
<td>连字号或减号</td>
</tr>
<tr>
<td>46</td>
<td>2E</td>
<td>.</td>
<td>句点或小数点</td>
</tr>
<tr>
<td>47</td>
<td>2F</td>
<td>/</td>
<td>斜杠</td>
</tr>
<tr>
<td>48</td>
<td>30</td>
<td>0</td>
<td>零</td>
</tr>
<tr>
<td>49</td>
<td>31</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td>32</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>51</td>
<td>33</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>52</td>
<td>34</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>53</td>
<td>35</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>54</td>
<td>36</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>55</td>
<td>37</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>56</td>
<td>38</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>57</td>
<td>39</td>
<td>9</td>
<td>9</td>
</tr>
<tr>
<td>58</td>
<td>3A</td>
<td>:</td>
<td>冒号</td>
</tr>
<tr>
<td>59</td>
<td>3B</td>
<td>;</td>
<td>分号</td>
</tr>
<tr>
<td>60</td>
<td>3C</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>61</td>
<td>3D</td>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>62</td>
<td>3E</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>63</td>
<td>3F</td>
<td>?</td>
<td>问号</td>
</tr>
<tr>
<td><strong>ASCII 字母字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>40</td>
<td>@</td>
<td>商业 at 符号</td>
</tr>
<tr>
<td>65</td>
<td>41</td>
<td>A</td>
<td>大写字母 A</td>
</tr>
<tr>
<td>66</td>
<td>42</td>
<td>B</td>
<td>大写字母 B</td>
</tr>
<tr>
<td>67</td>
<td>43</td>
<td>C</td>
<td>大写字母 C</td>
</tr>
<tr>
<td>68</td>
<td>44</td>
<td>D</td>
<td>大写字母 D</td>
</tr>
<tr>
<td>69</td>
<td>45</td>
<td>E</td>
<td>大写字母 E</td>
</tr>
<tr>
<td>70</td>
<td>46</td>
<td>F</td>
<td>大写字母 F</td>
</tr>
<tr>
<td>71</td>
<td>47</td>
<td>G</td>
<td>大写字母 G</td>
</tr>
<tr>
<td>72</td>
<td>48</td>
<td>H</td>
<td>大写字母 H</td>
</tr>
<tr>
<td>73</td>
<td>49</td>
<td>I</td>
<td>大写字母 I</td>
</tr>
<tr>
<td>74</td>
<td>4A</td>
<td>J</td>
<td>大写字母 J</td>
</tr>
<tr>
<td>75</td>
<td>4B</td>
<td>K</td>
<td>大写字母 K</td>
</tr>
<tr>
<td>76</td>
<td>4C</td>
<td>L</td>
<td>大写字母 L</td>
</tr>
<tr>
<td>77</td>
<td>4D</td>
<td>M</td>
<td>大写字母 M</td>
</tr>
<tr>
<td>78</td>
<td>4E</td>
<td>N</td>
<td>大写字母 N</td>
</tr>
<tr>
<td>79</td>
<td>4F</td>
<td>O</td>
<td>大写字母 O</td>
</tr>
<tr>
<td>80</td>
<td>50</td>
<td>P</td>
<td>大写字母 P</td>
</tr>
<tr>
<td>81</td>
<td>51</td>
<td>Q</td>
<td>大写字母 Q</td>
</tr>
<tr>
<td>82</td>
<td>52</td>
<td>R</td>
<td>大写字母 R</td>
</tr>
<tr>
<td>83</td>
<td>53</td>
<td>S</td>
<td>大写字母 S</td>
</tr>
<tr>
<td>84</td>
<td>54</td>
<td>T</td>
<td>大写字母 T</td>
</tr>
<tr>
<td>85</td>
<td>55</td>
<td>U</td>
<td>大写字母 U</td>
</tr>
<tr>
<td>86</td>
<td>56</td>
<td>V</td>
<td>大写字母 V</td>
</tr>
<tr>
<td>87</td>
<td>57</td>
<td>W</td>
<td>大写字母 W</td>
</tr>
<tr>
<td>88</td>
<td>58</td>
<td>X</td>
<td>大写字母 X</td>
</tr>
<tr>
<td>89</td>
<td>59</td>
<td>Y</td>
<td>大写字母 Y</td>
</tr>
<tr>
<td>90</td>
<td>5A</td>
<td>Z</td>
<td>大写字母 Z</td>
</tr>
<tr>
<td>91</td>
<td>5B</td>
<td>[</td>
<td>左中括号</td>
</tr>
<tr>
<td>92</td>
<td>5C</td>
<td>\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>93</td>
<td>5D</td>
<td>]</td>
<td>右中括号</td>
</tr>
<tr>
<td>94</td>
<td>5E</td>
<td>^</td>
<td>音调符号</td>
</tr>
<tr>
<td>95</td>
<td>5F</td>
<td>_</td>
<td>下划线</td>
</tr>
<tr>
<td>96</td>
<td>60</td>
<td>`</td>
<td>重音符</td>
</tr>
<tr>
<td>97</td>
<td>61</td>
<td>a</td>
<td>小写字母 a</td>
</tr>
<tr>
<td>98</td>
<td>62</td>
<td>b</td>
<td>小写字母 b</td>
</tr>
<tr>
<td>99</td>
<td>63</td>
<td>c</td>
<td>小写字母 c</td>
</tr>
<tr>
<td>100</td>
<td>64</td>
<td>d</td>
<td>小写字母 d</td>
</tr>
<tr>
<td>101</td>
<td>65</td>
<td>e</td>
<td>小写字母 e</td>
</tr>
<tr>
<td>102</td>
<td>66</td>
<td>f</td>
<td>小写字母 f</td>
</tr>
<tr>
<td>103</td>
<td>67</td>
<td>g</td>
<td>小写字母 g</td>
</tr>
<tr>
<td>104</td>
<td>68</td>
<td>h</td>
<td>小写字母 h</td>
</tr>
<tr>
<td>105</td>
<td>69</td>
<td>i</td>
<td>小写字母 i</td>
</tr>
<tr>
<td>106</td>
<td>6A</td>
<td>j</td>
<td>小写字母 j</td>
</tr>
<tr>
<td>107</td>
<td>6B</td>
<td>k</td>
<td>小写字母 k</td>
</tr>
<tr>
<td>108</td>
<td>6C</td>
<td>l</td>
<td>小写字母 l</td>
</tr>
<tr>
<td>109</td>
<td>6D</td>
<td>m</td>
<td>小写字母 m</td>
</tr>
<tr>
<td>110</td>
<td>6E</td>
<td>n</td>
<td>小写字母 n</td>
</tr>
<tr>
<td>111</td>
<td>6F</td>
<td>o</td>
<td>小写字母 o</td>
</tr>
<tr>
<td>112</td>
<td>70</td>
<td>p</td>
<td>小写字母 p</td>
</tr>
<tr>
<td>113</td>
<td>71</td>
<td>q</td>
<td>小写字母 q</td>
</tr>
<tr>
<td>114</td>
<td>72</td>
<td>r</td>
<td>小写字母 r</td>
</tr>
<tr>
<td>115</td>
<td>73</td>
<td>s</td>
<td>小写字母 s</td>
</tr>
<tr>
<td>116</td>
<td>74</td>
<td>t</td>
<td>小写字母 t</td>
</tr>
<tr>
<td>117</td>
<td>75</td>
<td>u</td>
<td>小写字母 u</td>
</tr>
<tr>
<td>118</td>
<td>76</td>
<td>v</td>
<td>小写字母 v</td>
</tr>
<tr>
<td>119</td>
<td>77</td>
<td>w</td>
<td>小写字母 w</td>
</tr>
<tr>
<td>120</td>
<td>78</td>
<td>x</td>
<td>小写字母 x</td>
</tr>
<tr>
<td>121</td>
<td>79</td>
<td>y</td>
<td>小写字母 y</td>
</tr>
<tr>
<td>122</td>
<td>7A</td>
<td>z</td>
<td>小写字母 z</td>
</tr>
<tr>
<td>123</td>
<td>7B</td>
<td>{</td>
<td>左大括号</td>
</tr>
<tr>
<td>124</td>
<td>7C</td>
<td>|</td>
<td>垂直线</td>
</tr>
<tr>
<td>125</td>
<td>7D</td>
<td>}</td>
<td>右大括号 (ALTMODE)</td>
</tr>
<tr>
<td>126</td>
<td>7E</td>
<td>~</td>
<td>代字号 (ALTMODE)</td>
</tr>
<tr>
<td>127</td>
<td>7F</td>
<td>DEL</td>
<td>擦掉 (DELETE)</td>
</tr>
<tr>
<td><strong>控制字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>128</td>
<td>80</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>129</td>
<td>81</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>130</td>
<td>82</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>131</td>
<td>83</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>132</td>
<td>84</td>
<td>IND</td>
<td>索引</td>
</tr>
<tr>
<td>133</td>
<td>85</td>
<td>NEL</td>
<td>下一行</td>
</tr>
<tr>
<td>134</td>
<td>86</td>
<td>SSA</td>
<td>被选区域起始</td>
</tr>
<tr>
<td>135</td>
<td>87</td>
<td>ESA</td>
<td>被选区域结束</td>
</tr>
<tr>
<td>136</td>
<td>88</td>
<td>HTS</td>
<td>水平制表符集</td>
</tr>
<tr>
<td>137</td>
<td>89</td>
<td>HTJ</td>
<td>对齐的水平制表符集</td>
</tr>
<tr>
<td>138</td>
<td>8A</td>
<td>VTS</td>
<td>垂直制表符集</td>
</tr>
<tr>
<td>139</td>
<td>8B</td>
<td>PLD</td>
<td>部分行向下</td>
</tr>
<tr>
<td>140</td>
<td>8C</td>
<td>PLU</td>
<td>部分行向上</td>
</tr>
<tr>
<td>141</td>
<td>8D</td>
<td>RI</td>
<td>反向索引</td>
</tr>
<tr>
<td>142</td>
<td>8E</td>
<td>SS2</td>
<td>单移 2</td>
</tr>
<tr>
<td>143</td>
<td>8F</td>
<td>SS3</td>
<td>单移 3</td>
</tr>
<tr>
<td>144</td>
<td>90</td>
<td>DCS</td>
<td>设备控制字符串</td>
</tr>
<tr>
<td>145</td>
<td>91</td>
<td>PU1</td>
<td>专用 1</td>
</tr>
<tr>
<td>146</td>
<td>92</td>
<td>PU2</td>
<td>专用 2</td>
</tr>
<tr>
<td>147</td>
<td>93</td>
<td>STS</td>
<td>设置传输状态</td>
</tr>
<tr>
<td>148</td>
<td>94</td>
<td>CCH</td>
<td>取消字符</td>
</tr>
<tr>
<td>149</td>
<td>95</td>
<td>MW</td>
<td>消息等待</td>
</tr>
<tr>
<td>150</td>
<td>96</td>
<td>SPA</td>
<td>保护区起始</td>
</tr>
<tr>
<td>151</td>
<td>97</td>
<td>EPA</td>
<td>保护区结束</td>
</tr>
<tr>
<td>152</td>
<td>98</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>153</td>
<td>99</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>154</td>
<td>9A</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>155</td>
<td>9B</td>
<td>CSI</td>
<td>控制序列引导符</td>
</tr>
<tr>
<td>156</td>
<td>9C</td>
<td>ST</td>
<td>字符串终止符</td>
</tr>
<tr>
<td>157</td>
<td>9D</td>
<td>OSC</td>
<td>操作系统命令</td>
</tr>
<tr>
<td>158</td>
<td>9E</td>
<td>PM</td>
<td>秘密消息</td>
</tr>
<tr>
<td>159</td>
<td>9F</td>
<td>APC</td>
<td>应用程序</td>
</tr>
<tr>
<td><strong>其他字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>160</td>
<td>A0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>161</td>
<td>A1</td>
<td>¡</td>
<td>反向感叹号</td>
</tr>
<tr>
<td>162</td>
<td>A2</td>
<td>¢</td>
<td>分币符</td>
</tr>
<tr>
<td>163</td>
<td>A3</td>
<td>£</td>
<td>英磅符</td>
</tr>
<tr>
<td>164</td>
<td>A4</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>165</td>
<td>A5</td>
<td>¥</td>
<td>人民币符</td>
</tr>
<tr>
<td>166</td>
<td>A6</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>167</td>
<td>A7</td>
<td>§</td>
<td>章节符</td>
</tr>
<tr>
<td>168</td>
<td>A8</td>
<td>¤</td>
<td>通用货币符号 2</td>
</tr>
<tr>
<td>169</td>
<td>A9</td>
<td>©</td>
<td>版权符号</td>
</tr>
<tr>
<td>170</td>
<td>AA</td>
<td>ª</td>
<td>阴性顺序指示符</td>
</tr>
<tr>
<td>171</td>
<td>AB</td>
<td>«</td>
<td>左角引号</td>
</tr>
<tr>
<td>172</td>
<td>AC</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>173</td>
<td>AD</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>174</td>
<td>AE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>175</td>
<td>AF</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>176</td>
<td>B0</td>
<td>°</td>
<td>温度符</td>
</tr>
<tr>
<td>177</td>
<td>B1</td>
<td>±</td>
<td>加/减号</td>
</tr>
<tr>
<td>178</td>
<td>B2</td>
<td>²</td>
<td>上标 2</td>
</tr>
<tr>
<td>179</td>
<td>B3</td>
<td>³</td>
<td>上标 3</td>
</tr>
<tr>
<td>180</td>
<td>B4</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>181</td>
<td>B5</td>
<td>µ</td>
<td>微符</td>
</tr>
<tr>
<td>182</td>
<td>B6</td>
<td>¶</td>
<td>段落符，pilcrow</td>
</tr>
<tr>
<td>183</td>
<td>B7</td>
<td>·</td>
<td>中点</td>
</tr>
<tr>
<td>184</td>
<td>B8</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>185</td>
<td>B9</td>
<td>¹</td>
<td>上标 1</td>
</tr>
<tr>
<td>186</td>
<td>BA</td>
<td>º</td>
<td>阳性顺序指示符</td>
</tr>
<tr>
<td>187</td>
<td>BB</td>
<td>»</td>
<td>右角引号</td>
</tr>
<tr>
<td>188</td>
<td>BC</td>
<td>¼</td>
<td>分数四分之一</td>
</tr>
<tr>
<td>189</td>
<td>BD</td>
<td>½</td>
<td>分数二分之一</td>
</tr>
<tr>
<td>190</td>
<td>BE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>191</td>
<td>BF</td>
<td>¿</td>
<td>反向问号</td>
</tr>
<tr>
<td>192</td>
<td>C0</td>
<td>À</td>
<td>带重音符的大写字母 A</td>
</tr>
<tr>
<td>193</td>
<td>C1</td>
<td>Á</td>
<td>带尖锐重音的大写字母 A</td>
</tr>
<tr>
<td>194</td>
<td>C2</td>
<td>Â</td>
<td>带音调符号的大写字母 A</td>
</tr>
<tr>
<td>195</td>
<td>C3</td>
<td>Ã</td>
<td>带代字号的大写字母 A</td>
</tr>
<tr>
<td>196</td>
<td>C4</td>
<td>Ä</td>
<td>带元音变音 (分音符号) 的大写字母 A</td>
</tr>
<tr>
<td>197</td>
<td>C5</td>
<td>Å</td>
<td>带铃声的大写字母 A</td>
</tr>
<tr>
<td>198</td>
<td>C6</td>
<td>Æ</td>
<td>大写字母 AE 双重元音</td>
</tr>
<tr>
<td>199</td>
<td>C7</td>
<td>Ç</td>
<td>带变音符号的大写字母 C</td>
</tr>
<tr>
<td>200</td>
<td>C8</td>
<td>È</td>
<td>带重音符的大写字母 E</td>
</tr>
<tr>
<td>201</td>
<td>C9</td>
<td>É</td>
<td>带尖锐重音的大写字母 E</td>
</tr>
<tr>
<td>202</td>
<td>CA</td>
<td>Ê</td>
<td>带音调符号的大写字母 E</td>
</tr>
<tr>
<td>203</td>
<td>CB</td>
<td>Ë</td>
<td>带元音变音 (分音符号) 的大写字母 E</td>
</tr>
<tr>
<td>204</td>
<td>CC</td>
<td>Ì</td>
<td>带重音符的大写字母 I</td>
</tr>
<tr>
<td>205</td>
<td>CD</td>
<td>Í</td>
<td>带尖锐重音的大写字母 I</td>
</tr>
<tr>
<td>206</td>
<td>CE</td>
<td>Î</td>
<td>带音调符号的大写字母 I</td>
</tr>
<tr>
<td>207</td>
<td>CF</td>
<td>Ï</td>
<td>带元音变音 (分音符号) 的大写字母 I</td>
</tr>
<tr>
<td>208</td>
<td>D0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>209</td>
<td>D1</td>
<td>Ñ</td>
<td>带代字号的大写字母 N</td>
</tr>
<tr>
<td>210</td>
<td>D2</td>
<td>Ò</td>
<td>带重音符的大写字母 O</td>
</tr>
<tr>
<td>211</td>
<td>D3</td>
<td>Ó</td>
<td>带尖锐重音的大写字母 O</td>
</tr>
<tr>
<td>212</td>
<td>D4</td>
<td>Ô</td>
<td>带音调符号的大写字母 O</td>
</tr>
<tr>
<td>213</td>
<td>D5</td>
<td>Õ</td>
<td>带代字号的大写字母 O</td>
</tr>
<tr>
<td>214</td>
<td>D6</td>
<td>Ö</td>
<td>带元音变音 (分音符号) 的大写字母 O</td>
</tr>
<tr>
<td>215</td>
<td>D7</td>
<td>OE</td>
<td>大写字母 OE 连字 2</td>
</tr>
<tr>
<td>216</td>
<td>D8</td>
<td>Ø</td>
<td>带斜杠的大写字母 O</td>
</tr>
<tr>
<td>217</td>
<td>D9</td>
<td>Ù</td>
<td>带重音符的大写字母 U</td>
</tr>
<tr>
<td>218</td>
<td>DA</td>
<td>Ú</td>
<td>带尖锐重音的大写字母 U</td>
</tr>
<tr>
<td>219</td>
<td>DB</td>
<td>Û</td>
<td>带音调符号的大写字母 U</td>
</tr>
<tr>
<td>220</td>
<td>DC</td>
<td>Ü</td>
<td>带元音变音 (分音符号) 的大写字母 U</td>
</tr>
<tr>
<td>221</td>
<td>DD</td>
<td>Y</td>
<td>带元音变音 (分音符号) 的大写字母 Y</td>
</tr>
<tr>
<td>222</td>
<td>DE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>223</td>
<td>DF</td>
<td>ß</td>
<td>德语高调小写字母 s</td>
</tr>
<tr>
<td>224</td>
<td>E0</td>
<td>à</td>
<td>带重音符的小写字母 a</td>
</tr>
<tr>
<td>225</td>
<td>E1</td>
<td>á</td>
<td>带尖锐重音的小写字母 a</td>
</tr>
<tr>
<td>226</td>
<td>E2</td>
<td>â</td>
<td>带音调符号的小写字母 a</td>
</tr>
<tr>
<td>227</td>
<td>E3</td>
<td>ã</td>
<td>带代字号的小写字母 a</td>
</tr>
<tr>
<td>228</td>
<td>E4</td>
<td>ä</td>
<td>带元音变音 (分音符号) 的小写字母 a</td>
</tr>
<tr>
<td>229</td>
<td>E5</td>
<td>å</td>
<td>带铃声的小写字母 a</td>
</tr>
<tr>
<td>230</td>
<td>E6</td>
<td>æ</td>
<td>小写字母 ae 双重元音</td>
</tr>
<tr>
<td>231</td>
<td>E7</td>
<td>ç</td>
<td>带变音符号的小写字母 c</td>
</tr>
<tr>
<td>232</td>
<td>E8</td>
<td>è</td>
<td>带重音符的小写字母 e</td>
</tr>
<tr>
<td>233</td>
<td>E9</td>
<td>é</td>
<td>带尖锐重音的小写字母 e</td>
</tr>
<tr>
<td>234</td>
<td>EA</td>
<td>ê</td>
<td>带音调符号的小写字母 e</td>
</tr>
<tr>
<td>235</td>
<td>EB</td>
<td>ë</td>
<td>带元音变音 (分音符号) 的小写字母 e</td>
</tr>
<tr>
<td>236</td>
<td>EC</td>
<td>ì</td>
<td>带重音符的小写字母 i</td>
</tr>
<tr>
<td>237</td>
<td>ED</td>
<td>í</td>
<td>带尖锐重音的小写字母 i</td>
</tr>
<tr>
<td>238</td>
<td>EE</td>
<td>î</td>
<td>带音调符号的小写字母 i</td>
</tr>
<tr>
<td>239</td>
<td>EF</td>
<td>ï</td>
<td>带元音变音 (分音符号) 的小写字母 i</td>
</tr>
<tr>
<td>240</td>
<td>F0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>241</td>
<td>F1</td>
<td>ñ</td>
<td>带代字号的小写字母 n</td>
</tr>
<tr>
<td>242</td>
<td>F2</td>
<td>ò</td>
<td>带重音符的小写字母 o</td>
</tr>
<tr>
<td>243</td>
<td>F3</td>
<td>ó</td>
<td>带尖锐重音的小写字母 o</td>
</tr>
<tr>
<td>244</td>
<td>F4</td>
<td>ô</td>
<td>带音调符号的小写字母 o</td>
</tr>
<tr>
<td>245</td>
<td>F5</td>
<td>õ</td>
<td>带代字号的小写字母 o</td>
</tr>
<tr>
<td>246</td>
<td>F6</td>
<td>ö</td>
<td>带元音变音 (分音符号) 的小写字母 o</td>
</tr>
<tr>
<td>247</td>
<td>F7</td>
<td>oe</td>
<td>小写字母 oe 连字 2</td>
</tr>
<tr>
<td>248</td>
<td>F8</td>
<td>ø</td>
<td>带斜杠的小写字母 o</td>
</tr>
<tr>
<td>249</td>
<td>F9</td>
<td>ù</td>
<td>带重音符的小写字母 u</td>
</tr>
<tr>
<td>250</td>
<td>FA</td>
<td>ú</td>
<td>带尖锐重音的小写字母 u</td>
</tr>
<tr>
<td>251</td>
<td>FB</td>
<td>û</td>
<td>带音调符号的小写字母 u</td>
</tr>
<tr>
<td>252</td>
<td>FC</td>
<td>ü</td>
<td>带元音变音 (分音符号) 的小写字母 u</td>
</tr>
<tr>
<td>253</td>
<td>FD</td>
<td>ÿ</td>
<td>带元音变音 (分音符号) 的小写字母 y 2</td>
</tr>
<tr>
<td>254</td>
<td>FE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>255</td>
<td>FF</td>
<td></td>
<td>[保留] 2</td>
</tr>
</tbody></table>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令。</li>
</ul>
<p>4.转义字符</p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII码值（十进制）</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td>\n</td>
<td>换行(LF) ，将当前位置移到下一行开头</td>
<td>010</td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表(HT) （跳到下一个TAB位置）</td>
<td>009</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>\</td>
<td>代表一个反斜线字符”&quot;</td>
<td>092</td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<h4 id="5-浮点型（float-double）"><a href="#5-浮点型（float-double）" class="headerlink" title="5.浮点型（float,double）"></a>5.浮点型（float,double）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//传统方式赋值</span>
	<span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span> <span class="token comment">//或3.14F</span>
	<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %lf\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//科学法赋值</span>
	a <span class="token operator">=</span> <span class="token number">3.2e3f</span><span class="token punctuation">;</span> <span class="token comment">//3.2*1000 = 3200，e可以写E</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a1 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">100e-3f</span><span class="token punctuation">;</span> <span class="token comment">//100*0.001 = 0.1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a2 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3.1415926f</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a3 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为3.141593</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-进制"><a href="#6-进制" class="headerlink" title="6.进制"></a>6.进制</h4><ul>
<li><p>进制也就是进位制，是人们规定的一种进位方法。 对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制</strong></th>
<th><strong>二进制</strong></th>
<th><strong>八进制</strong></th>
<th><strong>十六进制</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>10</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>11</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>100</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>101</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>110</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>111</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>1000</td>
<td>10</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
<td>11</td>
<td>9</td>
</tr>
<tr>
<td>10</td>
<td>1010</td>
<td>12</td>
<td>A</td>
</tr>
<tr>
<td>11</td>
<td>1011</td>
<td>13</td>
<td>B</td>
</tr>
<tr>
<td>12</td>
<td>1100</td>
<td>14</td>
<td>C</td>
</tr>
<tr>
<td>13</td>
<td>1101</td>
<td>15</td>
<td>D</td>
</tr>
<tr>
<td>14</td>
<td>1110</td>
<td>16</td>
<td>E</td>
</tr>
<tr>
<td>15</td>
<td>1111</td>
<td>17</td>
<td>F</td>
</tr>
<tr>
<td>16</td>
<td>10000</td>
<td>20</td>
<td>10</td>
</tr>
</tbody></table>
</li>
<li><p>二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p>
</li>
<li><p>数据在计算机中主要是以补码的形式存储的。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>术语</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bit(比特)</td>
<td>一个二进制代表一位，一个位只能表示0或1两种状态。数据传输是习惯以“位”（bit）为单位。</td>
</tr>
<tr>
<td>Byte(字节)</td>
<td>一个字节为8个二进制，称为8位，计算机中存储的最小单位是字节。数据存储是习惯以“字节”（Byte）为单位。</td>
</tr>
<tr>
<td>WORD(双字节)</td>
<td>2个字节，16位</td>
</tr>
<tr>
<td>DWORD</td>
<td>两个WORD，4个字节，32位</td>
</tr>
<tr>
<td>1b</td>
<td>1bit，1位</td>
</tr>
<tr>
<td>1B</td>
<td>1Byte,1字节，8位</td>
</tr>
<tr>
<td>1k，1K</td>
<td>1024</td>
</tr>
<tr>
<td>1M(1兆)</td>
<td>1024k, 1024*1024</td>
</tr>
<tr>
<td>1G</td>
<td>1024M</td>
</tr>
<tr>
<td>1T</td>
<td>1024G</td>
</tr>
<tr>
<td>1Kb(千位)</td>
<td>1024bit,1024位</td>
</tr>
<tr>
<td>1KB(千字节)</td>
<td>1024Byte，1024字节</td>
</tr>
<tr>
<td>1Mb(兆位)</td>
<td>1024Kb = 1024 * 1024bit</td>
</tr>
<tr>
<td>1MB(兆字节)</td>
<td>1024KB = 1024 * 1024Byte</td>
</tr>
</tbody></table>
</li>
<li><p>八进制，Octal，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1。一些编程语言中常常以数字0开始表明该数字是八进制。</p>
</li>
<li><p>八进制的数和二进制数可以按位对应（八进制一位对应二进制三位），因此常应用在计算机语言中。</p>
</li>
<li><p>十六进制（英文名称：Hexadecimal），同我们日常生活中的表示法不一样，它由0-9，A-F组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9，A-F对应10-15。</p>
</li>
<li><p>十六进制的数和二进制数可以按位对应（十六进制一位对应二进制四位），因此常应用在计算机语言中。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>十进制</th>
<th>以正常数字1-9开头，如123</th>
</tr>
</thead>
<tbody><tr>
<td>八进制</td>
<td>以数字0开头，如0123</td>
</tr>
<tr>
<td>十六进制</td>
<td>以0x开头，如0x123</td>
</tr>
<tr>
<td>二进制</td>
<td>C语言不能直接书写二进制数</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>		<span class="token comment">//十进制方式赋值</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0123</span><span class="token punctuation">;</span>		<span class="token comment">//八进制方式赋值， 以数字0开头</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xABC</span><span class="token punctuation">;</span>	<span class="token comment">//十六进制方式赋值</span>

	<span class="token comment">//如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十进制：%d\n"</span><span class="token punctuation">,</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"八进制：%o\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//%o,为字母o,不是数字</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十六进制：%x\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-计算机内存数值存储方式"><a href="#7-计算机内存数值存储方式" class="headerlink" title="7. 计算机内存数值存储方式"></a>7. 计算机内存数值存储方式</h4><ol>
<li><p>原码</p>
<ul>
<li><p>一个数的原码(原始的二进制码)有如下特点：</p>
<ul>
<li><p>最高位做为符号位，0表示正,为1表示负</p>
</li>
<li><p>其它数值部分就是数值本身绝对值的二进制数</p>
</li>
<li><p>负数的原码是在其绝对值的基础上，最高位变为1</p>
</li>
</ul>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
</li>
<li><p>原码表示法简单易懂，与带符号数本身转换方便，只要符号还原即可，但当两个正数相减或不同符号数相加时，必须比较两个数哪个绝对值大，才能决定谁减谁，才能确定结果是正还是负，所以原码不便于加减运算。</p>
</li>
</ul>
</li>
<li><p>反码</p>
<ul>
<li><p>对于正数，反码与原码相同</p>
</li>
<li><p>对于负数，符号位不变，其它部分取反(1变0,0变1)</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>反码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0000</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
</li>
<li><p>反码运算也不方便，通常用来作为求补码的中间过渡。</p>
</li>
</ul>
</li>
<li><p>补码</p>
<ul>
<li><strong>在计算机系统中，数值一律用补码来存储。</strong></li>
<li>补码特点：<ul>
<li>对于正数，原码、反码、补码相同</li>
<li>对于负数，其补码为它的反码加1</li>
<li>补码符号位不动，其他位求反，最后整个数加1，得到原码</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//结果为 fffffff1</span>
	<span class="token comment">//fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001</span>
	<span class="token comment">//符号位不变，其它取反：1000 0000 0000 0000 0000 0000 0000 1110</span>
	<span class="token comment">//上面加1：1000 0000 0000 0000 0000 0000 0000 1111  最高位1代表负数，就是-15</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li><p>补码的意义</p>
</li>
<li><p>用8位二进制数分别表示+0和-0</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>反码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>补码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>10000 0000由于只用8位描述，最高位1丢弃，变为0000 0000</td>
</tr>
</tbody></table>
<ol start="2">
<li><strong>在计算机系统中，数值一律用补码来存储</strong>，主要原因是：<ul>
<li>统一了零的编码</li>
<li>将符号位和其它位统一处理</li>
<li>将减法运算转变为加法运算</li>
<li>两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃</li>
</ul>
</li>
</ol>
<h4 id="8-数据值溢出"><a href="#8-数据值溢出" class="headerlink" title="8.数据值溢出"></a>8.数据值溢出</h4><ul>
<li><p>有符号位最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位的溢出会导致最高位丢失。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>取值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>1字节</td>
<td>-128到 127(-27 ~ 27-1)</td>
</tr>
<tr>
<td>unsigned char</td>
<td>1字节</td>
<td>0 到 255(0 ~ 28-1)</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>

	<span class="token comment">//符号位溢出会导致数的正负发生改变</span>
	ch <span class="token operator">=</span> <span class="token number">0x7f</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//127+2</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//	0111 1111</span>
	<span class="token comment">//+2后 1000 0001，这是负数补码，其原码为 1111 1111，结果为-127</span>

	<span class="token comment">//最高位的溢出会导致最高位丢失</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch2<span class="token punctuation">;</span>
	ch2 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//255+1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//	  1111 1111</span>
	<span class="token comment">//+1后 10000 0000， char只有8位最高位的溢出，结果为0000 0000，十进制为0</span>

	ch2 <span class="token operator">=</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//255+1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//	  1111 1111</span>
	<span class="token comment">//+1后 10000 0001， char只有8位最高位的溢出，结果为0000 0001，十进制为1</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="9-类型限定符"><a href="#9-类型限定符" class="headerlink" title="9.类型限定符"></a>9.类型限定符</h4><ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>限定符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>extern</td>
<td>声明一个变量，extern声明的变量没有建立存储空间。extern int a;//变量在定义的时候创建存储空间</td>
</tr>
<tr>
<td>const</td>
<td>定义一个常量，常量的值不能修改。const int a = 10;</td>
</tr>
<tr>
<td>Volatile</td>
<td>防止编译器优化代码</td>
</tr>
<tr>
<td>register</td>
<td>定义寄存器变量，提高效率。register是建议型的指令，而不是命令型的指令，如果CPU有空闲寄存器，那么register就生效，如果没有空闲寄存器，那么register无效。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="10-字符串格式化输出和输入"><a href="#10-字符串格式化输出和输入" class="headerlink" title="10.字符串格式化输出和输入"></a>10.字符串格式化输出和输入</h4><ol>
<li> 字符串常量</li>
</ol>
<ul>
<li>字符串是<strong>内存中一段连续的char空间</strong>，<strong>以’\0’(数字0)结尾</strong>。</li>
<li>字符串常量是由双引号括起来的字符序列，如“china”、“C program”，“$12.5”等都是合法的字符串常量。</li>
<li>每个字符串的结尾，编译器会自动的添加一个结束标志位’\0’，即 “a” 包含两个字符’a’和’\0’。</li>
</ul>
<ol start="2">
<li><p>printf函数和putchar函数</p>
<ul>
<li><p>printf格式字符：</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>对应数据类型</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>int</td>
<td>接受整数值并将它表示为有符号的十进制整数</td>
</tr>
<tr>
<td>%hd</td>
<td>short int</td>
<td>短整数</td>
</tr>
<tr>
<td>%hu</td>
<td>unsigned short</td>
<td>无符号短整数</td>
</tr>
<tr>
<td>%o</td>
<td>unsigned int</td>
<td>无符号8进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>unsigned int</td>
<td>无符号10进制整数</td>
</tr>
<tr>
<td>%x,%X</td>
<td>unsigned int</td>
<td>无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF</td>
</tr>
<tr>
<td>%f</td>
<td>float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>%lf</td>
<td>double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>%e,%E</td>
<td>double</td>
<td>科学计数法表示的数，此处”e”的大小写代表在输出时用的”e”的大小写</td>
</tr>
<tr>
<td>%c</td>
<td>char</td>
<td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td>
</tr>
<tr>
<td>%s</td>
<td>char *</td>
<td>字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td>
</tr>
<tr>
<td>%p</td>
<td>void *</td>
<td>以16进制形式输出指针</td>
</tr>
<tr>
<td>%%</td>
<td>%</td>
<td>输出一个百分号</td>
</tr>
</tbody></table>
</li>
<li><p>printf附加格式：</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>字符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>l(字母l)</td>
<td>附加在d,u,x,o前面，表示长整数</td>
</tr>
<tr>
<td>-</td>
<td>左对齐</td>
</tr>
<tr>
<td>m(代表一个整数)</td>
<td>数据最小宽度</td>
</tr>
<tr>
<td>0(数字0)</td>
<td>将输出的前面补上0直到占满指定列宽为止不可以搭配使用-</td>
</tr>
<tr>
<td>m.n(代表一个整数)</td>
<td>m指域宽，即对应的输出项在输出设备上所占的字符数。n指精度，用于说明输出的实型数的小数位数。对数值型的来说，未指定n时，隐含的精度为n=6位。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式化输出一个字符串</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出变量a在内存中的地址编号</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%d\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//putchar只有一个参数，就是要输出的char</span>
	<span class="token keyword">long</span> a2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld, %lx, %lo\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">long</span> <span class="token keyword">long</span> a3 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld, %llx, %llo\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> abc <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%6d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%-6d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%06d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%-06d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d = \' %-10.3lf \'\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>scanf函数与getchar函数<ul>
<li>getchar是从标准输入设备读取一个char。</li>
<li>scanf通过%转义的方式可以得到用户通过标准输入设备输入的数据。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch1<span class="token punctuation">;</span>
	<span class="token keyword">char</span> ch2<span class="token punctuation">;</span>
	<span class="token keyword">char</span> ch3<span class="token punctuation">;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch1的字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ch1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch1 = %c\n"</span><span class="token punctuation">,</span> ch1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//测试此处getchar()的作用</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch2的字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ch2 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\'ch2 = %ctest\'\n"</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//测试此处getchar()的作用</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch3的字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里第二个参数一定是变量的地址，而不是变量名</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch3 = %c\n"</span><span class="token punctuation">,</span> ch3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入b的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-运算符与表达式"><a href="#3-运算符与表达式" class="headerlink" title="3.运算符与表达式"></a>3.运算符与表达式</h3><h4 id="1-常用运算符分类"><a href="#1-常用运算符分类" class="headerlink" title="1.常用运算符分类"></a>1.常用运算符分类</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
<tr>
<td>位运算符</td>
<td>用于处理数据的位运算</td>
</tr>
<tr>
<td>sizeof运算符</td>
<td>用于求字节数长度</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前自增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后自增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前自减</td>
<td>a=2; b=–a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后自减</td>
<td>a=2; b=a–;</td>
<td>a=1; b=2;</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6.运算符优先级"></a>6.运算符优先级</h4><ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>优先级</strong></th>
<th><strong>运算符</strong></th>
<th><strong>名称或含义</strong></th>
<th><strong>使用形式</strong></th>
<th><strong>结合方向</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td><strong>[]</strong></td>
<td>数组下标</td>
<td>数组名[常量表达式]</td>
<td>左到右</td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>()</strong></td>
<td>圆括号</td>
<td>(表达式）/函数名(形参表)</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>.</strong></td>
<td>成员选择（对象）</td>
<td>对象.成员名</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>-&gt;</strong></td>
<td>成员选择（指针）</td>
<td>对象指针-&gt;成员名</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2</strong></td>
<td><strong>-</strong></td>
<td>负号运算符</td>
<td>-表达式</td>
<td>右到左</td>
<td>单目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>~</strong></td>
<td>按位取反运算符</td>
<td>~表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>++</strong></td>
<td>自增运算符</td>
<td>++变量名/变量名++</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>–</strong></td>
<td>自减运算符</td>
<td>–变量名/变量名–</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>*****</td>
<td>取值运算符</td>
<td>*指针变量</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>&amp;</strong></td>
<td>取地址运算符</td>
<td>&amp;变量名</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>!</strong></td>
<td>逻辑非运算符</td>
<td>!表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>(类型)</strong></td>
<td>强制类型转换</td>
<td>(数据类型)表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>sizeof</strong></td>
<td>长度运算符</td>
<td>sizeof(表达式)</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3</strong></td>
<td><strong>/</strong></td>
<td>除</td>
<td>表达式/表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td>*****</td>
<td>乘</td>
<td>表达式*表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>%</strong></td>
<td>余数（取模）</td>
<td>整型表达式%整型表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>4</strong></td>
<td><strong>+</strong></td>
<td>加</td>
<td>表达式+表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>-</strong></td>
<td>减</td>
<td>表达式-表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td><strong>&lt;&lt;</strong></td>
<td>左移</td>
<td>变量&lt;&lt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>&gt;&gt;</strong></td>
<td>右移</td>
<td>变量&gt;&gt;表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>6</strong></td>
<td><strong>&gt;</strong></td>
<td>大于</td>
<td>表达式&gt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>&gt;=</strong></td>
<td>大于等于</td>
<td>表达式&gt;=表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>&lt;</strong></td>
<td>小于</td>
<td>表达式&lt;表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>&lt;=</strong></td>
<td>小于等于</td>
<td>表达式&lt;=表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>7</strong></td>
<td><strong>==</strong></td>
<td>等于</td>
<td>表达式==表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>!****=</strong></td>
<td>不等于</td>
<td>表达式!= 表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>8</strong></td>
<td><strong>&amp;</strong></td>
<td>按位与</td>
<td>表达式&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>9</strong></td>
<td><strong>^</strong></td>
<td>按位异或</td>
<td>表达式^表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>10</strong></td>
<td><strong>|</strong></td>
<td>按位或</td>
<td>表达式|表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>11</strong></td>
<td><strong>&amp;&amp;</strong></td>
<td>逻辑与</td>
<td>表达式&amp;&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td><strong>||</strong></td>
<td>逻辑或</td>
<td>表达式||表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>13</strong></td>
<td><strong>?:</strong></td>
<td>条件运算符</td>
<td>表达式1?表达式2: 表达式3</td>
<td>右到左</td>
<td>三目运算符</td>
</tr>
<tr>
<td><strong>14</strong></td>
<td><strong>=</strong></td>
<td>赋值运算符</td>
<td>变量=表达式</td>
<td>右到左</td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>/=</strong></td>
<td>除后赋值</td>
<td>变量/=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td>***=**</td>
<td>乘后赋值</td>
<td>变量*=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>%=</strong></td>
<td>取模后赋值</td>
<td>变量%=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>+=</strong></td>
<td>加后赋值</td>
<td>变量+=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>-=</strong></td>
<td>减后赋值</td>
<td>变量-=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>&lt;&lt;=</strong></td>
<td>左移后赋值</td>
<td>变量&lt;&lt;=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>&gt;&gt;=</strong></td>
<td>右移后赋值</td>
<td>变量&gt;&gt;=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>&amp;=</strong></td>
<td>按位与后赋值</td>
<td>变量&amp;=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>^=</strong></td>
<td>按位异或后赋值</td>
<td>变量^=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>|=</strong></td>
<td>按位或后赋值</td>
<td>变量|=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>15</strong></td>
<td><strong>，</strong></td>
<td>逗号运算符</td>
<td>表达式,表达式,…</td>
<td>左到右</td>
<td>–</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h4><ul>
<li><p>转换的方法有两种：</p>
<ul>
<li>自动转换(隐式转换)：遵循一定的规则,由编译系统自动完成。</li>
<li>强制类型转换：把表达式的运算结果强制转换成所需的数据类型。</li>
</ul>
</li>
<li><p>类型转换的原则：占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低。</p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wpsD743.tmp.jpg" alt="img"></p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s1=%d\n"</span><span class="token punctuation">,</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s2=%lf\n"</span><span class="token punctuation">,</span> num <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	x <span class="token operator">=</span> <span class="token number">3.6f</span><span class="token punctuation">;</span>

	i <span class="token operator">=</span> x<span class="token punctuation">;</span>			<span class="token comment">//x为实型, i为整型，直接赋值会有警告</span>
	i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>		<span class="token comment">//使用强制类型转换</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x=%f, i=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4.程序流程结构"></a>4.程序流程结构</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ol>
<li>C语言支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构。<ul>
<li>顺序结构：程序按顺序执行，不发生跳转。</li>
<li>选择结构：依据是否满足条件，有选择的执行相应功能。</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码。</li>
</ul>
</li>
</ol>
<h4 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h4><ol>
<li>if语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.if…else 语句</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li> if…else if…else语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"个位\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十位\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"百位\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"很大\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.三目运算符</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		c <span class="token operator">=</span> a<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		c <span class="token operator">=</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1 = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	c <span class="token operator">=</span> <span class="token punctuation">(</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c2 = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.switch语句</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;

int main()
&#123;
	char c;
	c &#x3D; getchar();

	switch (c) &#x2F;&#x2F;参数只能是整型变量
	&#123;
	case &#39;1&#39;:
		printf(&quot;OK\n&quot;);
		break;&#x2F;&#x2F;switch遇到break就中断了
	case &#39;2&#39;:
		printf(&quot;not OK\n&quot;);
		break;
	default:&#x2F;&#x2F;如果上面的条件都不满足，那么执行default
		printf(&quot;are u ok?\n&quot;);
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><ol>
<li>while语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>do…while语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">do</span>
	<span class="token punctuation">&#123;</span>
		a<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>for语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.嵌套循环</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				num<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-跳转语句break、continue、goto"><a href="#4-跳转语句break、continue、goto" class="headerlink" title="4.跳转语句break、continue、goto"></a>4.跳转语句break、continue、goto</h4><ol>
<li>break语句<ul>
<li>在switch条件语句和循环语句中都可以使用break语句：<ul>
<li>当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。</li>
<li>当它出现在循环语句中，作用是跳出当前内循环语句，执行后面的代码。</li>
<li>当它出现在嵌套循环语句中，跳出最近的内循环语句，执行后面的代码。</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出while循环</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出for (n = 0; n &lt; 10; n++)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出for (m = 0; m &lt; 10; m++)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>continue语句<ul>
<li>在循环语句中，如果希望立即终止本次循环，并执行下一次循环，此时就需要使用continue语句。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//定义变量sum</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">//如果i是一个偶数，执行if语句中的代码</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">//结束本次循环</span>
		<span class="token punctuation">&#125;</span>
		sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>          <span class="token comment">//实现sum和i的累加</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.goto语句(无条件跳转，尽量少用)</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">goto</span> End<span class="token punctuation">;</span> <span class="token comment">//无条件跳转到End的标识</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aaaaaaaaa\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

End<span class="token operator">:</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bbbbbbbb\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-数组和字符串"><a href="#5-数组和字符串" class="headerlink" title="5.数组和字符串"></a>5.数组和字符串</h3><ol>
<li><p>概述</p>
<ul>
<li><p>数组就是在内存中连续的相同类型的变量空间。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。</p>
</li>
<li><p>数组属于构造数据类型：</p>
<ul>
<li><p>一个数组可以分解为多个数组元素：这些数组元素可以是基本数据类型或构造类型。</p>
</li>
<li><p>按数组元素类型的不同，数组可分为：数值数组、字符数组、指针数组、结构数组等类别。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">struct</span> <span class="token class-name">Stu</span> boy<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1.一维数组"></a>1.一维数组</h4><ol>
<li><p>一维数组的定义和使用</p>
<ul>
<li><p>数组名字符合标识符的书写规定(数字、英文字母、下划线)</p>
</li>
<li><p>数组名不能与其它变量名相同，同一作用域内是唯一的</p>
</li>
<li><p>方括号[]中常量表达式表示数组元素的个数</p>
</li>
<li><p>定义数组时[]内最好是常量，使用数组时[]内即可是常量，也可以是变量</p>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义了一个数组，名字叫a，有10个成员，每个成员都是int类型</span>
	<span class="token comment">//a[0]…… a[9]，没有a[10]</span>
	<span class="token comment">//没有a这个变量，a是数组的名字，但不是变量名，它是常量</span>
	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//……</span>
	a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//给数组赋值</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//遍历数组，并输出每个成员的值</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.一维数组的初始化</p>
<ul>
<li>在定义数组的同时进行赋值，称为初始化。全局数组若不初始化，编译器将其初始化为零。局部数组若不初始化，内容为随机值。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化前三个成员，后面所有元素都设置为0</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//所有的成员都设置为0</span>
	
<span class="token comment">//[]中不定义元素个数，定义时必须初始化</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义了一个数组，有5个成员</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.数组名</p>
<ul>
<li>数组名是一个地址的常量，代表数组中首元素的地址。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a[0] = %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组占用内存的大小，10个int类型，10 * 4  = 40</span>
	<span class="token keyword">int</span> n0 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组第0个元素占用内存大小，第0个元素为int，4</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.强化训练</p>
<ol>
<li>一维数组的最值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> max <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			max <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组中最大值为：%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.一维数组的逆置</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
		j<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.冒泡法排序</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>

	<span class="token comment">//1、流程</span>
	<span class="token comment">//2、试数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//内循环的目的是比较相邻的元素，把大的放到后面</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token operator">></span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2.二维数组"></a>2.二维数组</h4><ul>
<li>二维数组在概念上是二维的：其下标在两个方向上变化，对其访问一般需要两个下标。</li>
<li>在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，也就是说内存中只有一维数组，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义了一个二维数组，名字叫a</span>
	<span class="token comment">//由3个一维数组组成，这个一维数组是int [4]</span>
	<span class="token comment">//这3个一维数组的数组名分别为a[0],a[1],a[2]</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//……</span>
	a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

	<span class="token comment">//给数组每个元素赋值</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//遍历数组，并输出每个成员的值</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>初始化</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//分段赋值 	int a[3][4] = &#123;&#123; 1, 2, 3, 4 &#125;,&#123; 5, 6, 7, 8, &#125;,&#123; 9, 10, 11, 12 &#125;&#125;;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
	<span class="token punctuation">&#123;</span> 
		<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//连续赋值</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//可以只给部分元素赋初值，未初始化则为0</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//所有的成员都设置为0</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//[]中不定义元素个数，定义时必须初始化</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>数组名<ul>
<li>数组名是一个地址的常量，代表数组中首元素的地址。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义了一个二维数组，名字叫a</span>
	<span class="token comment">//二维数组是本质上还是一维数组，此一维数组有3个元素</span>
<span class="token comment">//每个元素又是一个一维数组int[4]</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//数组名为数组首元素地址，二维数组的第0个元素为一维数组</span>
	<span class="token comment">//第0个一维数组的数组名为a[0]</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[0] = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//测二维数组所占内存空间，有3个一维数组，每个一维数组的空间为4*4</span>
	<span class="token comment">//sizeof(a) = 3 * 4 * 4 = 48</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//测第0个元素所占内存空间，a[0]为第0个一维数组int[4]的数组名，4*4=16</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a[0]) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//测第0行0列元素所占内存空间，第0行0列元素为一个int类型，4字节</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a[0][0]) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//求二维数组行数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 求二维数组列数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//求二维数组行*列总数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-字符数组与字符串"><a href="#3-字符数组与字符串" class="headerlink" title="3.字符数组与字符串"></a>3.字符数组与字符串</h4><ol>
<li>字符数组与字符串区别<ul>
<li>C语言中没有字符串这种数据类型，可以通过char的数组来替代；</li>
<li>字符串一定是一个char的数组，但char的数组未必是字符串；</li>
<li>数字0(和字符‘\0’等价)结尾的char数组就是一个字符串，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以字符串是一种特殊的char的数组。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> c1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'g'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//普通字符数组</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1 = %s\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//乱码，因为没有’\0’结束符</span>

	<span class="token comment">//以‘\0’(‘\0’就是数字0)结尾的字符数组是字符串</span>
	<span class="token keyword">char</span> c2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c2 = %s\n"</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//字符串处理以‘\0’(数字0)作为结束符，后面的'h', 'l', 'l', 'e', 'o'不会输出</span>
	<span class="token keyword">char</span> c3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c3 = %s\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>字符串的初始化</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">// C语言没有字符串类型，通过字符数组模拟</span>
<span class="token comment">// C语言字符串，以字符‘\0’, 数字0</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//不指定长度, 没有0结束符，有多少个元素就有多长</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//乱码</span>

	<span class="token comment">//指定长度，后面没有赋值的元素，自动补0</span>
	<span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>“hello”<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2 = %s\n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//所有元素赋值为0</span>
	<span class="token keyword">char</span> buf3<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//char buf4[2] = &#123; '1', '2', '3' &#125;;//数组越界</span>

	<span class="token keyword">char</span> buf5<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'7'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf5 = %s\n"</span><span class="token punctuation">,</span> buf5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> buf6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'7'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf6 = %s\n"</span><span class="token punctuation">,</span> buf6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> buf7<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token char">'7'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf7 = %s\n"</span><span class="token punctuation">,</span> buf7<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//使用字符串初始化，编译器自动在后面补0，常用</span>
	<span class="token keyword">char</span> buf8<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"agjdslgjlsdjg"</span><span class="token punctuation">;</span>

	<span class="token comment">//'\0'后面最好不要连着数字，有可能几个数字连起来刚好是一个转义字符</span>
	<span class="token comment">//'\ddd'八进制字义字符，'\xdd'十六进制转移字符</span>
	<span class="token comment">// \012相当于\n</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\012abc"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str == %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>字符串的输入输出<ul>
<li>由于字符串采用了’\0’标志，字符串的输入输出将变得简单方便。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input string1 : \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//scanf(“%s”,str)默认以空格分隔</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"output:%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>gets()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止。
参数：
	s：字符串首地址
返回值：
	成功：读入的字符串
	失败：<span class="token constant">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>gets(str)与scanf(“%s”,str)的区别：</p>
<ul>
<li>gets(str)允许输入的字符串含有空格</li>
<li>scanf(“%s”,str)不允许含有空格</li>
<li>由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字符数组越界(缓冲区溢出)的情况。</li>
</ul>
</li>
<li><p>fgets()</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size <span class="token operator">-</span> <span class="token number">1</span>个字符为止，最后会自动加上字符 <span class="token char">'\0'</span> 作为字符串结束。
参数：
	s：字符串
	size：指定最大读取字符串的长度（size <span class="token operator">-</span> <span class="token number">1</span>）
	stream：文件指针，如果读键盘输入的字符串，固定写为<span class="token constant">stdin</span>
返回值：
	成功：成功读取的字符串
	读到文件尾或出错： <span class="token constant">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fgets()在读取一个用户通过键盘输入的字符串的时候，同时把用户输入的回车也做为字符串的一部分。通过scanf和gets输入一个字符串的时候，不包含结尾的“\n”，但通过fgets结尾多了“\n”。fgets()函数是安全的，不存在缓冲区溢出的问题。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入str: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str = \"%s\"\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>puts()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：标准设备输出s字符串，在输出完成后自动输出一个<span class="token char">'\n'</span>。
参数：
	s：字符串首地址
返回值：
	成功：非负数
	失败：<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fputs()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将str所指定的字符串写入到stream指定的文件中， 字符串结束符 <span class="token char">'\0'</span>  不写入文件。 
参数：
	str：字符串
	stream：文件指针，如果把字符串输出到屏幕，固定写为<span class="token constant">stdout</span>
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fputs()是puts()的文件操作版本，但fputs()不会自动输出一个’\n’。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>strlen()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token class-name">size_t</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：计算指定指定字符串s的长度，不包含字符串结束符‘\<span class="token number">0</span>’
参数：
s：字符串首地址
返回值：字符串s的长度，<span class="token class-name">size_t</span>为<span class="token keyword">unsigned</span> <span class="token keyword">int</span>类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc\0defg"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="4-字符串追加"><a href="#4-字符串追加" class="headerlink" title="4.字符串追加"></a>4.字符串追加</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;

int main()
&#123;
	char str1[] &#x3D; &quot;abcdef&quot;;
	char str2[] &#x3D; &quot;123456&quot;;
	char dst[100];

	int i &#x3D; 0;
	while (str1[i] !&#x3D; 0)
	&#123;
		dst[i] &#x3D; str1[i];
		i++;
	&#125;

	int j &#x3D; 0;
	while (str2[j] !&#x3D; 0)
	&#123;
		dst[i + j] &#x3D; str2[j];
		j++;
	&#125;
	dst[i + j] &#x3D; 0; &#x2F;&#x2F;字符串结束符

	printf(&quot;dst &#x3D; %s\n&quot;, dst);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>系统函数，即库函数：这是由编译系统提供的，用户不必自己定义这些函数，可以直接使用它们，如我们常用的打印函数printf()。</li>
<li>用户定义函数：用以解决用户的专门需要。</li>
<li>函数的使用可以省去重复代码的编写，降低代码重复率</li>
<li>函数可以让程序更加模块化，从而有利于程序的阅读，修改和完善</li>
</ul>
<h4 id="2-函数的调用：产生随机数"><a href="#2-函数的调用：产生随机数" class="headerlink" title="2.函数的调用：产生随机数"></a>2.函数的调用：产生随机数</h4><ol>
<li>函数五要素<ul>
<li>头文件：包含指定的头文件</li>
<li>函数名字：函数名字必须和头文件声明的名字一样</li>
<li>功能：需要知道此函数能干嘛后才调用</li>
<li>参数：参数类型要匹配</li>
<li>返回值：根据需要接收返回值</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token class-name">time_t</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token class-name">time_t</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：获取当前系统时间
参数：常设置为<span class="token constant">NULL</span>
返回值：当前系统时间<span class="token punctuation">,</span> <span class="token class-name">time_t</span> 相当于<span class="token keyword">long</span>类型，单位为毫秒

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：用来设置<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>产生随机数时的随机种子
参数：如果每次seed相等，<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>产生随机数相等
返回值：无

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：返回一个随机数值
参数：无
返回值：随机数

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">time_t</span> tm <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到系统时间</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机种子只需要设置一次即可</span>

	<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"r = %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-函数的定义"><a href="#3-函数的定义" class="headerlink" title="3.函数的定义"></a>3.函数的定义</h4><ul>
<li><p>函数定义的一般形式：</p>
</li>
<li><blockquote>
<p>返回类型 函数名(形式参数列表)</p>
<p>​    {</p>
<p>​        数据定义部分;</p>
<p>​        执行语句部分;</p>
<p>}</p>
</blockquote>
</li>
<li><p> 函数名字、形参、函数体、返回值</p>
</li>
</ul>
<ol>
<li>函数名</li>
<li>形参列表<ul>
<li>在定义函数时指定的形参，在未出现函数调用时，它们并不占内存中的存储单元，因此称它们是形式参数或虚拟参数，简称形参，表示它们并不是实际存在的数据，所以，形参里的变量不能赋值。</li>
<li>在定义函数时指定的形参，必须是，类型+变量的形式</li>
<li>在定义函数时指定的形参，可有可无，根据函数的需要来设计，如果没有形参，圆括号内容为空，或写一个void关键字</li>
</ul>
</li>
<li>函数体<ul>
<li>花括号{ }里的内容即为函数体的内容，这里为函数功能实现的过程，这和以前的写代码没太大区别，以前我们把代码写在main()函数里，现在只是把这些写到别的函数里。</li>
</ul>
</li>
<li>返回值<ul>
<li>函数的返回值是通过函数中的return语句获得的，return后面的值也可以是一个表达式。</li>
<li>尽量保证return语句中表达式的值和函数返回类型是同一类型。</li>
<li>如果函数返回的类型和return语句中表达式的值不一致，则以函数返回类型为准，即函数返回类型决定返回值的类型。对数值型数据，可以自动进行类型转换。</li>
<li>如果函数返回的类型和return语句中表达式的值不一致，而它又无法自动进行类型转换，程序则会报错。</li>
<li>return语句的另一个作用为中断return所在的执行函数，类似于break中断循环、switch语句一样。</li>
<li>如果函数带返回值，return后面必须跟着一个值，如果函数没有返回值，函数名字的前面必须写一个void关键字，这时候，我们写代码时也可以通过return中断函数(也可以不用)，只是这时，return后面不带内容( 分号“；”除外)。</li>
</ul>
</li>
</ol>
<h4 id="4-函数的调用"><a href="#4-函数的调用" class="headerlink" title="4.函数的调用"></a>4.函数的调用</h4><ul>
<li>main()为编译器设定好自动调用的主函数，无需人为调用，我们都是在main()函数里调用别的函数，一个 C 程序里有且只有一个main()函数。</li>
<li>函数执行流程<ol>
<li>查找函数定义</li>
<li>参数类型匹配</li>
<li>执行函数</li>
</ol>
</li>
<li>函数的形参和实参<ul>
<li>形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用。</li>
<li>实参出现在主调函数中，进入被调函数后，实参也不能使用。</li>
<li>实参变量对形参变量的数据传递是“值传递”，即单向传递，只由实参传给形参，而不能由形参传回来给实参。</li>
<li>在调用函数时，编译系统临时给形参分配存储单元。调用结束后，形参单元被释放。</li>
<li>实参单元与形参单元是不同的单元。调用结束后，形参单元被释放，函数调用结束返回主调函数后则不能再使用该形参变量。实参单元仍保留并维持原值。因此，在执行一个被调用函数时，形参的值如果发生改变，并不会改变主调函数中实参的值。</li>
</ul>
</li>
<li>无参函数调用<ul>
<li>如果是调用无参函数，则不能加上“实参”，但括号不能省略。</li>
</ul>
</li>
<li>有参函数调用<ul>
<li>如果实参表列包含多个实参，则各参数间用逗号隔开。</li>
<li>实参与形参的个数应相等，类型应匹配(相同或赋值兼容)。实参与形参按顺序对应，一对一地传递数据。</li>
<li>实参可以是常量、变量或表达式，无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值，以便把这些值传送给形参。所以，这里的变量是在圆括号( )外面定义好、赋好值的变量。</li>
</ul>
</li>
<li>函数返回值<ul>
<li>如果函数定义没有返回值，函数调用时不能写void关键字，调用函数时也不能接收函数的返回值。</li>
<li>如果函数定义有返回值，这个返回值我们根据用户需要可用可不用，但是，假如我们需要使用这个函数返回值，我们需要<strong>定义一个匹配类型的变量来接收。</strong></li>
</ul>
</li>
</ul>
<h4 id="5-函数的声明"><a href="#5-函数的声明" class="headerlink" title="5.函数的声明"></a>5.函数的声明</h4><ul>
<li><p>如果使用用户自己定义的函数，而该函数与调用它的函数（即主调函数）不在同一文件中，或者函数定义的位置在主调函数之后，则必须在调用此函数之前对被调用的函数作声明。</p>
</li>
<li><p>所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行。</p>
</li>
<li><p>注意：一个函数只能被定义一次，但可以声明多次。</p>
</li>
<li><p><strong>函数定义和声明的区别：</strong></p>
<ol>
<li>定义是指对函数功能的确立，包括指定函数名、函数类型、形参及其类型、函数体等，它是一个完整的、独立的函数单位。</li>
<li>声明的作用则是把函数的名字、函数类型以及形参的个数、类型和顺序(注意，不包括函数体)通知编译系统，以便在对包含函数调用的语句进行编译时，据此对其进行对照检查（例如函数名是否正确，实参与形参的类型和个数是否一致）。</li>
</ol>
</li>
</ul>
<h4 id="6-main函数与exit函数"><a href="#6-main函数与exit函数" class="headerlink" title="6.main函数与exit函数"></a>6.main函数与exit函数</h4><ul>
<li>在main函数中调用exit和return结果是一样的，但在子函数中调用return只是代表子函数终止了，在子函数中调用exit，那么程序终止。</li>
</ul>
<h4 id="7-多文件（分文件）编程"><a href="#7-多文件（分文件）编程" class="headerlink" title="7.多文件（分文件）编程"></a>7.多文件（分文件）编程</h4><ol>
<li>分文件编程<ul>
<li>把函数声明放在头文件xxx.h中，在主函数中包含相应头文件</li>
<li>在头文件对应的xxx.c中实现xxx.h声明的函数</li>
<li><img src="http://qiniu.orangew.cn/img/wps6DF8.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>防止头文件重复包含<ul>
<li>为了避免同一个文件被include多次，C/C++中有两种方式，一种是 #ifndef 方式，一种是 #pragma once 方式。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SOMEFILE_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SOMEFILE_H__</span></span>

<span class="token comment">// 声明语句</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token comment">// 声明语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="7-指针"><a href="#7-指针" class="headerlink" title="7.指针"></a>7.指针</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.  概述"></a>1.  概述</h4><ol>
<li>内存<ul>
<li>存储器：计算机的组成中，用来存储程序和数据，辅助CPU进行运算处理的重要部分。</li>
<li>内存：内部存贮器，暂存程序/数据——掉电丢失 SRAM、DRAM、DDR、DDR2、DDR3。</li>
<li>外存：外部存储器，长时间保存程序/数据—掉电不丢ROM、ERRROM、FLASH（NAND、NOR）、硬盘、光盘。</li>
<li>内存是沟通CPU与硬盘的桥梁：<ul>
<li>暂存放CPU中的运算数据</li>
<li>暂存与硬盘等外部存储器交换的数据</li>
</ul>
</li>
</ul>
</li>
<li>物理存储器和存储地址空间<ul>
<li>物理存储器：实际存在的具体存储器芯片<ul>
<li>主板上装插的内存条</li>
<li>显示卡上的显示RAM芯片</li>
<li>各种适配卡上的RAM芯片和ROM芯片</li>
</ul>
</li>
<li>存储地址空间：对存储器编码的范围。我们在软件上常说的内存是指这一层含义。<ul>
<li>编码：对每个物理存储单元（一个字节）分配一个号码</li>
<li>寻址：可以根据分配的号码找到相应的存储单元，完成数据的读写</li>
</ul>
</li>
</ul>
<ol start="3">
<li>内存地址</li>
</ol>
<ul>
<li>将内存抽象成一个很大的一维字符数组。</li>
<li>编码就是对内存的每一个字节分配一个32位或64位的编号（与32位或者64位处理器相关）。</li>
<li> 这个内存编号我们称之为内存地址。</li>
<li>内存中的每一个数据都会分配相应的地址：</li>
<li>char:占一个字节分配一个地址</li>
<li>int: 占四个字节分配四个地址</li>
<li>float、struct、函数、数组等</li>
</ul>
<ol start="4">
<li>指针和指针变量</li>
</ol>
<ul>
<li>内存区的每一个字节都有一个编号，这就是“地址”。</li>
<li>如果在程序中定义了一个变量，在对程序进行编译或运行时，系统就会给这个变量分配内存单元，并确定它的内存地址(编号)</li>
<li>指针的实质就是内存“地址”。指针就是地址，地址就是指针。</li>
<li>指针是内存单元的编号，指针变量是存放地址的变量。</li>
<li>通常我们叙述时会把指针变量简称为指针，实际他们含义并不一样。</li>
</ul>
</li>
</ol>
<h4 id="2-指针基础知识"><a href="#2-指针基础知识" class="headerlink" title="2.指针基础知识"></a>2.指针基础知识</h4><ol>
<li> 指针变量的定义和使用</li>
</ol>
<ul>
<li>指针也是一种数据类型，指针变量也是一种变量</li>
<li>指针变量指向谁，就把谁的地址赋值给指针变量</li>
<li>“*”操作符操作的是指针变量指向的内存空间</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p, %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印a, b的地址</span>

	<span class="token comment">//int *代表是一种数据类型，int*指针类型，p才是变量名</span>
	<span class="token comment">//定义了一个指针类型的变量，可以指向一个int类型变量的地址</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//将a的地址赋值给变量p，p也是一个变量，值是一个内存地址编号</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p指向了a的地址，*p就是a的值</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*p1指向了b的地址，*p1就是b的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>注意：&amp;可以取得一个变量在内存中的地址。但是，<strong>不能取寄存器变量，因为寄存器变量不在内存里，而在CPU里面</strong>，所以是没有地址的。</li>
</ul>
<ol start="2">
<li>通过指针间接修改变量的值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>

	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, *p = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, *p = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>指针大小<ul>
<li>使用sizeof()测量指针的大小，得到的总是：4或8</li>
<li>sizeof()测的是指针变量指向存储地址的大小</li>
<li>在32位平台，所有的指针（地址）都是32位(4字节)</li>
<li>在64位平台，所有的指针（地址）都是64位(8字节)</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p4<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p1) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p2) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p3) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p4) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(double *) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>野指针和空指针<ul>
<li>指针变量也是变量，是变量就可以任意赋值，不要越界即可（32位为4字节，64位为8字节），但是，任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。所以，野指针不会直接引发错误，操作野指针指向的内存区域才会出问题。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义</span>

	p <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span> <span class="token comment">//给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义</span>

	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment">//操作野指针指向未知区域，内存出问题，err</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>但是，野指针和有效指针变量保存的都是数值，为了标志此指针变量没有指向任何变量(空闲可用)，C语言中，可以把NULL赋值给此指针，这样就标志此指针为空指针，没有任何指针。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>NULL是一个值为0的宏常量</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>万能指针void *<ul>
<li>void *指针可以指向任意变量的内存空间：</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指向变量时，最好转换为void *</span>

	<span class="token comment">//使用指针变量指向的内存时，转换为int *</span>
	<span class="token operator">*</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.const修饰的指针变量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token comment">//指向常量的指针</span>
	<span class="token comment">//修饰*，指针指向内存区域不能修改，指针指向可以变</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//等价于int const *p1 = &amp;a;</span>
	<span class="token comment">//*p1 = 111; //err</span>
	p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span> <span class="token comment">//ok</span>

<span class="token comment">//指针常量</span>
	<span class="token comment">//修饰p1，指针指向不能变，指针指向的内存可以修改</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token comment">//p2 = &amp;b; //err</span>
	<span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span> <span class="token comment">//ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在编辑程序时，指针作为函数参数，如果不想修改指针对应内存空间的值，需要使用const修饰指针数据类型。</li>
</ul>
<p>7.指针和数组</p>
<ol>
<li>数组名</li>
</ol>
<ul>
<li>数组名字是数组的首元素地址，但它是一个常量：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a[0] = %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//a = 10; //err, 数组名只是常量，不能修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>指针操作数组元素</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//printf("%d, ", a[i]);</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//定义一个指针变量保存a的地址</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   3.指针加减运算</p>
<ul>
<li>加法运算<ul>
<li>指针计算不是简单的整数相加</li>
<li>如果是一个int *，+1的结果是增加一个int的大小</li>
<li>如果是一个char *，+1的结果是增加一个char大小</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//移动了2个int</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p1 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//移动了2个char</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>通过改变指针指向操作数组元素：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>减法运算</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//第2个元素地址</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//第1个元素地址</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 = %p, p2 = %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> n1 <span class="token operator">=</span> p2 <span class="token operator">-</span> p1<span class="token punctuation">;</span> <span class="token comment">//n1 = 1</span>
	<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p2 <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span> <span class="token comment">//n2 = 4</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n1 = %d, n2 = %d\n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>指针数组<ul>
<li>指针数组，它是数组，数组的每个元素都是指针类型。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//指针数组</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-多级指针"><a href="#3-多级指针" class="headerlink" title="3.多级指针"></a>3.多级指针</h4><ul>
<li>C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针。</li>
<li>二级指针就是指向一个一级指针变量地址的指针。</li>
<li>三级指针基本用不着。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//一级指针</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//*p就是a</span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>q <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>
<span class="token comment">//*q就是p</span>
<span class="token comment">//**q就是a</span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>t <span class="token operator">=</span> <span class="token operator">&amp;</span>q<span class="token punctuation">;</span>
<span class="token comment">//*t就是q</span>
<span class="token comment">//**t就是p</span>
<span class="token comment">//***t就是a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-指针和函数"><a href="#4-指针和函数" class="headerlink" title="4.指针和函数"></a>4.指针和函数</h4><ol>
<li>函数形参改变实参的值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>
	x <span class="token operator">=</span> y<span class="token punctuation">;</span>
	y <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d, y = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span>
	<span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span>
	<span class="token operator">*</span>y <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a2 = %d, b2 = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>数组名做函数参数<ul>
<li>数组名做函数参数，函数的形参会退化为指针：</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printArrary</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//数组名做函数参数</span>
	<span class="token function">printArrary</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>指针做为函数的返回值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-指针和字符串"><a href="#5-指针和字符串" class="headerlink" title="5.指针和字符串"></a>5.指针和字符串</h4><ol>
<li>字符指针</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">'m'</span><span class="token punctuation">;</span>
	p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token string">"mike jiang"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>字符指针做函数参数</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">mystrcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>dest<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		len1<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		len2<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		dest<span class="token punctuation">[</span>len1 <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello mike"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>
	
	<span class="token function">mystrcat</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dst = %s\n"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.const修饰的指针变量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//const修饰一个变量为只读</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token comment">//a = 100; //err</span>

	<span class="token comment">//指针变量， 指针指向的内存， 2个不同概念</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"aklgjdlsgjlkds"</span><span class="token punctuation">;</span>

	<span class="token comment">//从左往右看，跳过类型，看修饰哪个字符</span>
	<span class="token comment">//如果是*， 说明指针指向的内存不能改变</span>
	<span class="token comment">//如果是指针变量，说明指针的指向不能改变，指针的值不能修改</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span>
	<span class="token comment">// 等价于上面 char const *p1 = buf;</span>
	<span class="token comment">//p[1] = '2'; //err</span>
	p <span class="token operator">=</span> <span class="token string">"agdlsjaglkdsajgl"</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>

	<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2 <span class="token operator">=</span> buf<span class="token punctuation">;</span>
	p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'3'</span><span class="token punctuation">;</span>
	<span class="token comment">//p2 = "salkjgldsjaglk"; //err</span>

	<span class="token comment">//p3为只读，指向不能变，指向的内存也不能变</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p3 <span class="token operator">=</span> buf<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.指针数组做为main函数的形参</p>
<ul>
<li>main函数是操作系统调用的，第一个参数标明argc数组的成员数量，argv数组的每个成员都是char *类型</li>
<li>argv是命令行参数的字符串数组</li>
<li>argc代表命令行参数的数量，程序名字本身算一个参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//argc: 传参数的个数（包含可执行程序）</span>
<span class="token comment">//argv：指针数组，指向输入的参数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token comment">//指针数组，它是数组，每个元素都是指针</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aaaaaaa"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbbbbb"</span><span class="token punctuation">,</span> <span class="token string">"ccccccc"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argc = %d\n"</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-项目开发常用字符串应用模型"><a href="#6-项目开发常用字符串应用模型" class="headerlink" title="6.项目开发常用字符串应用模型"></a>6.项目开发常用字符串应用模型</h4><ol>
<li>strstr中的while和do-while模型<ul>
<li>利用strstr标准库函数找出一个字符串中substr出现的个数。</li>
</ul>
</li>
</ol>
<ul>
<li>while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"11abcd111122abcd333abcd3322abcd3333322qqq"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//能进来，肯定有匹配的子串</span>
		<span class="token comment">//重新设置起点位置</span>
		p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		n<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//如果到结束符</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>do-while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"11abcd111122abcd333abcd3322abcd3333322qqq"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">do</span>
	<span class="token punctuation">&#123;</span>
		p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//累计个数</span>

			<span class="token comment">//重新设置查找的起点</span>
			p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token comment">//如果没有匹配的字符串，跳出循环</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果没有到结尾</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.两头堵模型</p>
<ul>
<li>求非空字符串元素的个数：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>

<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">//从左边开始</span>
	<span class="token comment">//如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//位置从右移动一位</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左移动</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//非空元素个数</span>
	<span class="token operator">*</span>n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"      abcddsgadsgefg      "</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"非空字符串元素个数：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>字符串反转模型(逆置)</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> tmp<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//交换元素</span>
		tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>
		str<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
		str<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

		begin<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//往右移动位置</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span>	    <span class="token comment">//往左移动位置</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//char *str = "abcdefg"; //文件常量区，内容不允许修改</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">inverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str ========== %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-字符串处理函数"><a href="#7-字符串处理函数" class="headerlink" title="7.字符串处理函数"></a>7.字符串处理函数</h4><ol>
<li>strcpy()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把src所指向的字符串复制到dest所指向的空间中，<span class="token char">'\0'</span>也会拷贝过去
参数：
	dest：目的字符串首地址
	src：源字符首地址
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
    
    <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况。</li>
</ul>
<ol start="2">
<li>strncpy()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把src指向字符串的前n个字符复制到dest所指向的空间中，是否拷贝结束符看指定的长度是否包含<span class="token char">'\0'</span>。
参数：
	dest：目的字符串首地址
	src：源字符首地址
	n：指定需要拷贝字符串个数
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
    
    <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>

	dest<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>strcat()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将src字符串连接到dest的尾部，‘\<span class="token number">0</span>’也会追加过去
参数：
	dest：目的字符串首地址
	src：源字符首地址
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
	
		<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>src <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>strncat()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strncat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将src字符串前n个字符连接到dest的尾部，‘\<span class="token number">0</span>’也会追加过去
参数：
	dest：目的字符串首地址
	src：源字符首地址
	n：指定需要追加字符串个数
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
    
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>src <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strncat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.strcmp()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：比较 s1 和 s2 的大小，比较的是字符ASCII码大小。
参数：
	s1：字符串<span class="token number">1</span>首地址
	s2：字符串<span class="token number">2</span>首地址
返回值：
	相等：<span class="token number">0</span>
	大于：<span class="token operator">></span><span class="token number">0</span> 在不同操作系统strcmp结果会不同   返回ASCII差值
	小于：<span class="token operator">&lt;</span><span class="token number">0</span>
	
    <span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token string">"hello mike"</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1==str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1>str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1&lt;str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>strncmp()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：比较 s1 和 s2 前n个字符的大小，比较的是字符ASCII码大小。
参数：
	s1：字符串<span class="token number">1</span>首地址
	s2：字符串<span class="token number">2</span>首地址
	n：指定比较字符串的数量
返回值：
	相等：<span class="token number">0</span>
	大于： <span class="token operator">></span> <span class="token number">0</span>
	小于： <span class="token operator">&lt;</span> <span class="token number">0</span>
	
	<span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token string">"hello mike"</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1==str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1>str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1&lt;str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7.sprintf()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到出现字符串结束符 <span class="token char">'\0'</span>  为止。
参数：
	str：字符串首地址
	format：字符串格式，用法和<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：实际格式化的字符个数
	失败： <span class="token operator">-</span> <span class="token number">1</span>
    
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, src = %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">"a = %d, src = %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dst = \" %s\"\n"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len = %d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>sscanf()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据。
参数：
	str：指定的字符串首地址
	format：字符串格式，用法和<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：参数数目
	
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a=10, b=20"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token function">sscanf</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"a=%d,  b=%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%d, b:%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9.strchr()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在字符串s中查找字母c出现的位置
参数：
	s：字符串首地址
	c：匹配字母<span class="token punctuation">(</span>字符<span class="token punctuation">)</span>
返回值：
	成功：返回第一次出现的c地址
	失败：<span class="token constant">NULL</span>

	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ddda123abcd"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="10">
<li> strstr()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>haystack<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在字符串haystack中查找字符串needle出现的位置
参数：
	haystack：源字符串首地址
	needle：匹配字符串首地址
返回值：
	成功：返回第一次出现的needle地址
	失败：<span class="token constant">NULL</span>

	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ddddabcd123abcd333abcd"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="11">
<li>strtok()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>delim<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：来将字符串分割成一个个片段。当<span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在参数s的字符串中发现参数delim中包含的分割字符时<span class="token punctuation">,</span> 则会将该字符改为\<span class="token number">0</span> 字符，当连续出现多个时只替换第一个为\<span class="token number">0</span>。
参数：
	str：指向欲分割的字符串
	delim：为分割字符串中包含的所有字符
返回值：
	成功：分割后字符串首地址
	失败：<span class="token constant">NULL</span>
	
在第一次调用时：<span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>必需给予参数s字符串
往后的调用则将参数s设置成<span class="token constant">NULL</span>，每次调用成功则返回指向被分割出片段的指针

	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"adc*fvcv*ebcy*hghbdfg*casdert"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将"*"分割的子串取出</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		s <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>12.atoi()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：<span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符<span class="token punctuation">(</span><span class="token char">'\0'</span><span class="token punctuation">)</span>才结束转换，并将结果返回返回值。
参数：
	nptr：待转换的字符串
返回值：成功转换后整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>atof()：把一个小数形式的字符串转化为一个浮点数。</li>
<li>atol()：将一个字符串转化为long类型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-10"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num1 = %d\n"</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0.123"</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num2 = %lf\n"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="8-指针小结"><a href="#8-指针小结" class="headerlink" title="8.指针小结"></a>8.指针小结</h4><table>
<thead>
<tr>
<th><strong>定义</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int i</td>
<td>定义整形变量</td>
</tr>
<tr>
<td>int *p</td>
<td>定义一个指向int的指针变量</td>
</tr>
<tr>
<td>int a[10]</td>
<td>定义一个有10个元素的数组，每个元素类型为int</td>
</tr>
<tr>
<td>int *p[10]</td>
<td>定义一个有10个元素的数组，每个元素类型为int*</td>
</tr>
<tr>
<td>int func()</td>
<td>定义一个函数，返回值为int型</td>
</tr>
<tr>
<td>int *func()</td>
<td>定义一个函数，返回值为int *型</td>
</tr>
<tr>
<td>int **p</td>
<td>定义一个指向int的指针的指针，二级指针</td>
</tr>
</tbody></table>
<h3 id="8-内存管理"><a href="#8-内存管理" class="headerlink" title="8.内存管理"></a>8.内存管理</h3><h4 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1.作用域"></a>1.作用域</h4><ul>
<li>C语言变量的作用域分为：<ul>
<li>代码块作用域(代码块是{}之间的一段代码)</li>
<li>函数作用域</li>
<li>文件作用域</li>
</ul>
</li>
<li>局部变量<ul>
<li>局部变量也叫auto自动变量(auto可写可不写)，一般情况下代码块{}内部定义的变量都是自动变量，它有如下特点：<ul>
<li>在一个函数内定义，只在函数范围内有效</li>
<li>在复合语句中定义，只在复合语句中有效</li>
<li>随着函数调用的结束或复合语句的结束局部变量的声明声明周期也结束</li>
<li>如果没有赋初值，内容为随机</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//auto写不写是一样的</span>
	<span class="token comment">//auto只能出现在&#123;&#125;内部</span>
	<span class="token keyword">auto</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//b = 100; //err， 在main作用域中没有b</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//在复合语句中定义，只在复合语句中有效</span>
		<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//a = 10; //err离开if()的复合语句，a已经不存在</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>静态(static)局部变量<ul>
<li>static局部变量的作用域也是在定义的函数内有效</li>
<li>static局部变量的生命周期和程序运行周期一样，同时staitc局部变量的值只初始化一次，但可以赋值多次</li>
<li>static局部变量若未赋以初值，则由系统自动赋值：数值型变量自动赋初值0，字符型变量赋空字符</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//静态局部变量，没有赋值，系统赋值为0，而且只会初始化一次</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	a<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p> 全局变量</p>
</li>
<li><p>在函数外定义，可被本文件及其它文件中的函数所共用，若其它文件中的函数调用此变量,须用extern声明</p>
</li>
<li><p>全局变量的生命周期和程序运行周期一样</p>
</li>
<li><p>不同文件的全局变量不可重名</p>
</li>
<li><p>静态(static)全局变量</p>
<ul>
<li>在函数外定义,作用范围被限制在所定义的文件中</li>
<li>不同文件静态全局变量可以重名,但作用域不冲突</li>
<li>static全局变量的生命周期和程序运行周期一样，同时staitc全局变量的值只初始化一次</li>
</ul>
</li>
<li><p>extern全局变量声明</p>
<ul>
<li>extern int a;声明一个变量，这个全局变量在别的文件中已经定义了，这里只是声明，而不是定义。</li>
</ul>
</li>
<li><p>全局函数和静态函数</p>
<ul>
<li>在C语言中函数默认都是全局的，使用关键字static可以将函数声明为静态，函数定义为static就意味着这个函数只能在定义这个函数的文件中使用，在其他文件中不能调用，即使在其他文件中声明这个函数都没用。</li>
<li>对于不同文件中的staitc函数名字可以相同。</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>允许在不同的函数中使用相同的变量名，它们代表不同的对象，分配不同的单元，互不干扰。</li>
<li>同一源文件中,允许全局变量和局部变量同名，在局部变量的作用域内，全局变量不起作用。</li>
<li>所有的函数默认都是全局的，意味着所有的函数都不能重名，但如果是staitc函数，那么作用域是文件级的，所以不同的文件static函数名是可以相同的。</li>
</ul>
</li>
<li><p>总结</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>作用域</strong></th>
<th><strong>生命周期</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>auto变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td></td>
</tr>
<tr>
<td>static局部变量</td>
<td>一对{}内</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>extern变量</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>static全局变量</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>extern函数</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>static函数</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>register变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td></td>
</tr>
<tr>
<td>全局变量</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="2-内存布局"><a href="#2-内存布局" class="headerlink" title="2.内存布局"></a>2.内存布局</h4><ol>
<li>内存分区<ul>
<li>C代码经过预处理、编译、汇编、链接4步后生成一个可执行程序。</li>
<li>在 Windows 下，程序是一个普通的可执行文件，以下列出一个二进制可执行文件的基本情况：</li>
<li><img src="http://qiniu.orangew.cn/img/wps430F.tmp.jpg" alt="img"></li>
<li>通过上图可以得知，在没有运行程序前，也就是说程序没有加载到内存前，可执行程序内部已经分好3段信息，分别为代码区（text）、数据区（data）和未初始化数据区（bss）3 个部分（有些人直接把data和bss合起来叫做静态区或全局区）。<ul>
<li>代码区<ul>
<li>存放 CPU 执行的机器指令。通常代码区是可共享的（即另外的执行程序可以调用它），使其可共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。<strong>代码区通常是只读的</strong>，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。</li>
</ul>
</li>
<li>全局初始化数据区/静态数据区（data段）<ul>
<li>该区包含了在程序中明确被初始化的全局变量、已经初始化的静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。</li>
</ul>
</li>
<li>未初始化数据区（又叫 bss 区）<ul>
<li>存入的是全局未初始化变量和未初始化静态变量。未初始化数据区的数据在程序开始执行之前被内核初始化为 0 或者空（NULL）。</li>
<li>程序在加载到内存前，代码区和全局区(data和bss)的大小就是固定的，程序运行期间不能改变。然后，运行可执行程序，系统把程序加载到内存，除了根据可执行程序的信息分出代码区（text）、数据区（data）和未初始化数据区（bss）之外，还额外增加了栈区、堆区。</li>
<li><img src="http://qiniu.orangew.cn/img/wps3AF8.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>代码区（text segment）<ul>
<li>加载的是可执行文件代码段，所有的可执行代码都加载到代码区，这块内存是不可以在运行期间修改的。</li>
</ul>
</li>
<li>未初始化数据区（BSS）<ul>
<li>加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</li>
</ul>
</li>
<li>全局初始化数据区/静态数据区（data segment）<ul>
<li>加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的生存周期为整个程序运行过程。</li>
</ul>
</li>
<li>栈区（stack）<ul>
<li>栈是一种先进后出的内存结构，由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</li>
</ul>
</li>
<li>堆区（heap）<ul>
<li>堆是一个大容器，它的容量要远远大于栈，但没有栈那样先进后出的顺序。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>存储类型总结</li>
</ol>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>作用域</strong></th>
<th><strong>生命周期</strong></th>
<th><strong>存储位置</strong></th>
</tr>
</thead>
<tbody><tr>
<td>auto变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td>栈区</td>
</tr>
<tr>
<td>static局部变量</td>
<td>一对{}内</td>
<td>整个程序运行期</td>
<td>初始化在data段，未初始化在BSS段</td>
</tr>
<tr>
<td>extern变量</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td>初始化在data段，未初始化在BSS段</td>
</tr>
<tr>
<td>static全局变量</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td>初始化在data段，未初始化在BSS段</td>
</tr>
<tr>
<td>extern函数</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td>代码区</td>
</tr>
<tr>
<td>static函数</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td>代码区</td>
</tr>
<tr>
<td>register变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td>运行时存储在CPU寄存器</td>
</tr>
<tr>
<td>字符串常量</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td>data段</td>
</tr>
</tbody></table>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> e<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> f<span class="token punctuation">;</span>
<span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>i <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>k <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a\t %p\t //局部未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;b\t %p\t //局部初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;c\t %p\t //静态局部未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;d\t %p\t //静态局部初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;e\t %p\t //全局未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;f\t %p\t //全局静态未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;g\t %p\t //全局初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;h\t %p\t //全局静态初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i\t %p\t //只读数据(文字常量区)\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

	k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"k\t %p\t //动态分配的内存\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>内存操作函数</li>
</ol>
<ul>
<li>memset()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将s的内存区域的前n个字节以参数c填入
参数：
	s：需要操作内存s的首地址
	c：填充的字符，c虽然参数为<span class="token keyword">int</span>，但必须是<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span> 范围为<span class="token number">0</span><span class="token operator">~</span><span class="token number">255</span>
	n：指定需要设置的大小
返回值：s的首地址
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>memcpy()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：拷贝src所指的内存内容的前n个字节到dest所值的内存地址上。
参数：
	dest：目的内存首地址
	src：源内存首地址，注意：dest和src所指的内存空间不可重叠，可能会导致程序报错
	n：需要拷贝的字节数
返回值：dest的首地址

	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//memcpy(&amp;a[3], a, 5 * sizeof(int)); //err, 内存重叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> memmove()</li>
<li>memmove()功能用法和memcpy()一样，区别在于：dest和src所指的内存空间重叠时，memmove()仍然能处理，不过执行效率比memcpy()低些。</li>
<li>memcmp()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：比较s1和s2所指向内存区域的前n个字节
参数：
	s1：内存首地址<span class="token number">1</span>
	s2：内存首地址<span class="token number">2</span>
	n：需比较的前n个字节
返回值：
	相等：<span class="token operator">=</span><span class="token number">0</span>
	大于：<span class="token operator">></span><span class="token number">0</span>
	小于：<span class="token operator">&lt;</span><span class="token number">0</span>

	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag = %d\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.堆区内存分配和释放</p>
<ul>
<li>malloc() </li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在内存的动态存储区<span class="token punctuation">(</span>堆区<span class="token punctuation">)</span>中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。分配的内存空间内容不确定，一般使用memset初始化。
参数：
	size：需要分配内存大小<span class="token punctuation">(</span>单位：字节<span class="token punctuation">)</span>
返回值：
成功：分配空间的起始地址
失败：<span class="token constant">NULL</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要申请数组的个数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"申请空间失败!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//将申请到空间清0</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">/*给数组赋值*/</span>
		array<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">/*打印数组元素*/</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> free()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。对同一内存空间多次释放会出错。
参数：
ptr：需要释放空间的首地址，被释放区应是由malloc函数所分配的区域。
返回值：无<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-内存分区代码分析"><a href="#3-内存分区代码分析" class="headerlink" title="3.内存分区代码分析"></a>3.内存分区代码分析</h4><ul>
<li>返回栈区地址</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//函数调用完毕，a释放</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//操作野指针指向的内存,err</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>返回data区地址</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//函数调用完毕，a不释放</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>值传递1</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递，形参修改不会影响实参</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err，操作空指针指向的内存</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>值传递2</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ok，*p为100</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>返回堆区地址</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token comment">//返回堆区地址，函数调用完毕，不释放</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span>

	<span class="token comment">//堆区空间，使用完毕，手动释放</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="9-复合类型-自定义类型"><a href="#9-复合类型-自定义类型" class="headerlink" title="9.复合类型(自定义类型)"></a>9.复合类型(自定义类型)</h3><h4 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1.结构体"></a>1.结构体</h4><ol>
<li> 概述</li>
<li>结构体变量的定义和初始化<ul>
<li>先声明结构体类型再定义变量名</li>
<li>在声明类型的同时定义变量</li>
<li>直接定义结构体类型变量（无类型名）</li>
<li><img src="http://qiniu.orangew.cn/img/wps11E2.tmp.jpg" alt="img"></li>
<li>结构体类型和结构体变量关系：<ul>
<li>结构体类型：指定了一个结构体类型，它相当于一个模型，但其中并无具体数据，系统对之也不分配实际内存单元。</li>
<li>结构体变量：系统根据结构体类型（内部成员状况）为之分配空间。</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//先定义类型，再定义变量（常用）</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//定义类型同时定义变量</span>
<span class="token keyword">struct</span> <span class="token class-name">stu2</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"yuri"</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>结构体成员的使用</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1<span class="token punctuation">;</span>

	<span class="token comment">//如果是普通变量，通过点运算符操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s1.name = %s, s1.age = %d\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//如果是指针变量，通过->操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(&amp;s1)->name = %s, (&amp;s1)->age = %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.结构体数组</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//统计学生成绩</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
	<span class="token keyword">float</span> score<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义一个含有5个元素的结构体数组并将其初始化</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> boy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"Li ping"</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">45</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>			
		<span class="token punctuation">&#123;</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"Zhang ping"</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">62.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"He fang"</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token number">92.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"Cheng ling"</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token number">87</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">"Wang ming"</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">58</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> ave<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		s <span class="token operator">+=</span> boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>	<span class="token comment">//计算总分</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">//统计不及格人的分数</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s=%f\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印总分数</span>
	ave <span class="token operator">=</span> s <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>					<span class="token comment">//计算平均分数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"average=%f\ncount=%d\n\n"</span><span class="token punctuation">,</span> ave<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印平均分与不及格人数</span>


	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" name=%s,  score=%f\n"</span><span class="token punctuation">,</span> boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// printf(" name=%s,  score=%f\n", (boy+i)->name, (boy+i)->score);</span>

	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.结构体套结构体</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">person</span> info<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"yuri"</span><span class="token punctuation">,</span> <span class="token char">'M'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id = %d\tinfo.name=%s\tinfo.sex=%c\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.结构体赋值</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1<span class="token punctuation">;</span>

	<span class="token comment">//如果是普通变量，通过点运算符操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s1.name = %s, s1.age = %d\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//相同类型的两个结构体变量，可以相互赋值</span>
	<span class="token comment">//把s1成员变量的值拷贝给s2成员变量的内存</span>
	<span class="token comment">//s1和s2只是成员变量的值一样而已，它们还是没有关系的两个变量</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>
<span class="token comment">//memcpy(&amp;s2, &amp;s1, sizeof(s1));</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s2.name = %s, s2.age = %d\n"</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li> 结构体和指针</li>
</ol>
<ul>
<li>指向普通结构体变量的指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//如果是指针变量，通过->操作结构体成员</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p->name = %s, p->age=%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(*p).name = %s, (*p).age=%d\n"</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>堆区结构体变量</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span>  <span class="token class-name">stu</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//如果是指针变量，通过->操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p->name = %s, p->age=%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(*p).name = %s, (*p).age=%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>结构体套一级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">//一级指针</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span>  <span class="token class-name">stu</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	p<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p->name = %s, p->age=%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(*p).name = %s, (*p).age=%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>8.结构体做函数参数</p>
<ul>
<li>结构体普通变量做函数参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//函数参数为结构体普通变量</span>
<span class="token keyword">void</span> <span class="token function">set_stu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tmp.name = %s, tmp.age = %d\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">set_stu</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s.name = %s, s.age = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>结构体指针变量做函数参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//函数参数为结构体指针变量</span>
<span class="token keyword">void</span> <span class="token function">set_stu_pro</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">set_stu_pro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s.name = %s, s.age = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>构体数组名做函数参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//void set_stu_pro(struct stu tmp[100], int n)</span>
<span class="token comment">//void set_stu_pro(struct stu tmp[], int n)</span>
<span class="token keyword">void</span> <span class="token function">set_stu_pro</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>tmp<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"name%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tmp<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
		tmp<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_stu_pro</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组名传递</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>const修饰结构体指针形参变量</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//p = NULL; //err</span>
	p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//void fun2(struct stu const*  p)</span>
<span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>  p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
	<span class="token comment">//p->age = 10; //err</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//p = NULL; //err</span>
	<span class="token comment">//p->age = 10; //err</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-联合体"><a href="#2-联合体" class="headerlink" title="2.联合体"></a>2.联合体</h4><ul>
<li>联合union是一个能在同一个存储空间存储不同类型数据的类型；</li>
<li>联合体所占的内存长度等于其最长成员的长度倍数，也有叫做共用体；</li>
<li>同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用；</li>
<li>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖；</li>
<li>共用体变量的地址和它的各成员的地址都是同一地址。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//共用体也叫联合体 </span>
<span class="token keyword">union</span> Test
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义共用体变量</span>
	<span class="token keyword">union</span> Test tmp<span class="token punctuation">;</span>

	<span class="token comment">//1、所有成员的首地址是一样的</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p, %p, %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//2、共用体大小为最大成员类型的大小</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">union</span> Test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//3、一个成员赋值，会影响另外的成员</span>
	<span class="token comment">//左边是高位，右边是低位</span>
	<span class="token comment">//低位放低地址，高位放高地址</span>
	tmp<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0x44332211</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2211</span>

	tmp<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short: %x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2200</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int: %x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//44332200</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3.枚举"></a>3.枚举</h4><ul>
<li>枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内。</li>
<li>枚举类型定义：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span>  枚举名
<span class="token punctuation">&#123;</span>
	枚举值表
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在枚举值表中应列出所有可用值，也称为枚举元素。</li>
<li>枚举值是常量，不能在程序中用赋值语句再对它赋值。</li>
<li>枚举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">enum</span> <span class="token class-name">weekday</span>
<span class="token punctuation">&#123;</span>
	sun <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> mon<span class="token punctuation">,</span> tue<span class="token punctuation">,</span> wed<span class="token punctuation">,</span> thu<span class="token punctuation">,</span> fri<span class="token punctuation">,</span> sat
<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">bool</span>
<span class="token punctuation">&#123;</span>
	flase<span class="token punctuation">,</span> true
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">enum</span> <span class="token class-name">weekday</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
	a <span class="token operator">=</span> sun<span class="token punctuation">;</span>
	b <span class="token operator">=</span> mon<span class="token punctuation">;</span>
	c <span class="token operator">=</span> tue<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">enum</span> <span class="token class-name">bool</span> flag<span class="token punctuation">;</span>
	flag <span class="token operator">=</span> true<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag为真\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-typedf"><a href="#4-typedf" class="headerlink" title="4. typedf"></a>4. typedf</h4><ul>
<li>typedef为C语言的关键字，作用是为一种数据类型(基本类型或自定义数据类型)定义一个新名字，不能创建新类型。</li>
<li>与#define不同，typedef仅限于数据类型，而不是能是表达式或具体的值</li>
<li>#define发生在预处理，typedef发生在编译阶段</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> INT<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span> BYTE<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> BYTE T_BYTE<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> UBYTE<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">type</span>
<span class="token punctuation">&#123;</span>
	UBYTE a<span class="token punctuation">;</span>
	INT b<span class="token punctuation">;</span>
	T_BYTE c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>TYPE<span class="token punctuation">,</span> <span class="token operator">*</span>PTYPE<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	TYPE t<span class="token punctuation">;</span>
	t<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">254</span><span class="token punctuation">;</span>
	t<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	t<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>

	PTYPE p <span class="token operator">=</span> <span class="token operator">&amp;</span>t<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u, %d, %c\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>a<span class="token punctuation">,</span> p<span class="token operator">-></span>b<span class="token punctuation">,</span> p<span class="token operator">-></span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-文件操作"><a href="#10-文件操作" class="headerlink" title="10.文件操作"></a>10.文件操作</h3><h4 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1.概述"></a>1.概述</h4><ol>
<li><p>磁盘文件和设备文件</p>
<ul>
<li>磁盘文件<ul>
<li>指一组相关数据的有序集合,通常存储在外部介质(如磁盘)上，使用时才调入内存。</li>
</ul>
</li>
<li>设备文件<ul>
<li>在操作系统中把每一个与主机相连的输入、输出设备看作是一个文件，把它们的输入、输出等同于对磁盘文件的读和写。</li>
</ul>
</li>
</ul>
</li>
<li><p>磁盘文件的分类</p>
<ul>
<li>计算机的存储在物理上是二进制的，所以物理上所有的磁盘文件本质上都是一样的：以字节为单位进行顺序存储。</li>
</ul>
</li>
</ol>
<ul>
<li>从用户或者操作系统使用的角度（逻辑上）把文件分为：<ul>
<li>文本文件：基于字符编码的文件 </li>
<li>二进制文件：基于值编码的文件</li>
</ul>
</li>
</ul>
<ol start="3">
<li><p>文本文件和二进制文件</p>
<ol>
<li><p>文本文件</p>
<ul>
<li><p>基于字符编码，常见编码有ASCII、UNICODE等</p>
</li>
<li><p>一般可以使用文本编辑器直接打开</p>
</li>
<li><p>数5678的以ASCII存储形式(ASCII码)为：</p>
<p> 00110101 00110110 00110111 00111000</p>
</li>
</ul>
</li>
<li><p>二进制文件</p>
<ul>
<li>基于值编码,自己根据具体应用,指定某个值是什么意思</li>
<li>把内存中的数据按其在内存中的存储形式原样输出到磁盘</li>
<li>数5678的存储形式(二进制码)为：00010110 0010111</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="2-文件的打开和关闭"><a href="#2-文件的打开和关闭" class="headerlink" title="2.文件的打开和关闭"></a>2.文件的打开和关闭</h4><ol>
<li>文件指针<ul>
<li>在C语言中用一个指针变量指向一个文件，这个指针称为文件指针。 </li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">short</span>           level<span class="token punctuation">;</span>	<span class="token comment">//缓冲区"满"或者"空"的程度 </span>
	<span class="token keyword">unsigned</span>        flags<span class="token punctuation">;</span>	<span class="token comment">//文件状态标志 </span>
	<span class="token keyword">char</span>            fd<span class="token punctuation">;</span>		<span class="token comment">//文件描述符</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>   hold<span class="token punctuation">;</span>	<span class="token comment">//如无缓冲区不读取字符</span>
	<span class="token keyword">short</span>           bsize<span class="token punctuation">;</span>	<span class="token comment">//缓冲区的大小</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>   <span class="token operator">*</span>buffer<span class="token punctuation">;</span><span class="token comment">//数据缓冲区的位置 </span>
	<span class="token keyword">unsigned</span>        ar<span class="token punctuation">;</span>	 <span class="token comment">//指针，当前的指向 </span>
	<span class="token keyword">unsigned</span>        istemp<span class="token punctuation">;</span>	<span class="token comment">//临时文件，指示器</span>
	<span class="token keyword">short</span>           token<span class="token punctuation">;</span>	<span class="token comment">//用于有效性的检查 </span>
<span class="token punctuation">&#125;</span>FILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>FILE是系统使用typedef定义出来的有关文件信息的一种结构体类型，结构中含有文件名、文件状态和文件当前位置等信息。</li>
<li>声明FILE结构体类型的信息包含在头文件“stdio.h”中，一般设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量。通过文件指针就可对它所指的文件进行各种操作。</li>
<li><img src="http://qiniu.orangew.cn/img/wpsF582.tmp.jpg" alt="img"></li>
<li>C语言中有三个特殊的文件指针由系统默认打开，用户无需定义即可直接使用:<ul>
<li>stdin： 标准输入，默认为当前终端（键盘），我们使用的scanf、getchar函数默认从此终端获得数据。</li>
<li>stdout：标准输出，默认为当前终端（屏幕），我们使用的printf、puts函数默认输出信息到此终端。</li>
<li>stderr：标准出错，默认为当前终端（屏幕），我们使用的perror函数默认输出信息到此终端。</li>
</ul>
</li>
</ul>
<ol start="2">
<li>文件打开</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
FILE <span class="token operator">*</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：打开文件
参数：
	filename：需要打开的文件名，根据需要加上路径
	mode：打开文件的模式设置
返回值：
	成功：文件指针
	失败：<span class="token constant">NULL</span>

第一个参数的几种形式<span class="token operator">:</span>
	FILE <span class="token operator">*</span>fp_passwd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//相对路径：</span>
	<span class="token comment">//打开当前目录passdw文件：源文件(源程序)所在目录</span>
	FILE <span class="token operator">*</span>fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"passwd.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//打开当前目录(test)下passwd.txt文件</span>
	fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">". / test / passwd.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//打开当前目录上一级目录（相对当前目录）passwd.txt文件</span>
	fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">".. / passwd.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token comment">//绝对路径：</span>
	<span class="token comment">//打开C盘test目录下一个叫passwd.txt文件</span>
	fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"c:/test/passwd.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二个参数的几种形式(打开文件的方式)：</li>
</ul>
<table>
<thead>
<tr>
<th><strong>打开模式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>r或rb</td>
<td>以只读方式打开一个文本文件（不创建文件，若文件不存在则报错）</td>
</tr>
<tr>
<td>w或wb</td>
<td>以写方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td>
</tr>
<tr>
<td>a或ab</td>
<td>以追加方式打开文件，在末尾添加内容，若文件不存在则创建文件</td>
</tr>
<tr>
<td>r+或rb+</td>
<td>以可读、可写的方式打开文件(不创建新文件)</td>
</tr>
<tr>
<td>w+或wb+</td>
<td>以可读、可写的方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td>
</tr>
<tr>
<td>a+或ab+</td>
<td>以添加方式打开文件，打开文件并在末尾更改文件,若文件不存在则创建文件</td>
</tr>
</tbody></table>
<ul>
<li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li>
<li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li>
<li>在Windows平台下，以“文本”方式打开文件，不加b：<ul>
<li>当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li>
<li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入 </li>
<li>以”二进制”方式打开文件，则读\n写都不会进行这样的转换</li>
</ul>
</li>
<li>在Unix/Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">nt <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">// "\\"这样的路径形式，只能在windows使用</span>
	<span class="token comment">// "/"这样的路径形式，windows和linux平台下都可用，建议使用这种</span>
	<span class="token comment">// 路径可以是相对路径，也可是绝对路径</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"../test"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//fp = fopen("..\\test", "w");</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//返回空，说明打开失败</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//perror()是标准出错打印函数，能打印调用库函数出错原因</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>文件的关闭<ul>
<li>打开的文件会占用内存资源，如果总是打开不关闭，会消耗很多内存</li>
<li>一个进程同时打开的文件数是有限制的，超过最大同时打开文件数，再次调用fopen打开文件会失败</li>
<li>如果没有明确的调用fclose关闭打开的文件，那么程序在退出的时候，操作系统会统一关闭。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：关闭先前<span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>打开的文件。此动作让缓冲区的数据写入文件中，并释放系统所提供的文件资源。
参数：
	stream：文件指针
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

	FILE <span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"abc.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-文件的顺序读写"><a href="#3-文件的顺序读写" class="headerlink" title="3.文件的顺序读写"></a>3.文件的顺序读写</h4><ol>
<li>按照字符读写文件fgetc、fputc</li>
</ol>
<ul>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将ch转换为<span class="token keyword">unsigned</span> <span class="token keyword">char</span>后写入stream指定的文件中
参数：
	ch：需要写入文件的字符
	stream：文件指针
返回值：
	成功：成功写入文件的字符
	失败：返回<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"this is a test for fputc"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//往文件fp写入字符buf[i]</span>
	<span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fputc</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>文件结尾</li>
<li>在C语言中，EOF表示文件结束符(end of file)。在while循环中以EOF作为文件结束标志，这种以EOF作为文件结束标志的文件，必须是文本文件。在文本文件中，数据都是以字符的ASCII代码值的形式存放。我们知道，ASCII代码值的范围是0~127，不可能出现-1，因此可以用EOF作为文件结束标志。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EOF</span>     <span class="token expression"><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ANSI C提供一个feof函数，用来判断文件是否结束。feof函数既可用以判断二进制文件又可用以判断文本文件。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">feof</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：检测是否读取到了文件结尾。判断的是最后一次“读操作的内容”，不是当前位置内容<span class="token punctuation">(</span>上一个内容<span class="token punctuation">)</span>。
参数：
	stream：文件指针
返回值：
	非<span class="token number">0</span>值：已经到文件结尾
	<span class="token number">0</span>：没有到文件结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件中读取一个字符
参数：
	stream：文件指针
返回值：
	成功：返回读取到的字符
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束，则执行循环</span>
<span class="token punctuation">&#123;</span>
	ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>强化训练：实现vi、cat命令（这个可以搞一下）</li>
<li><img src="http://qiniu.orangew.cn/img/wps9088.tmp.jpg" alt="img"></li>
</ul>
<ol start="2">
<li>按照行读写文件fgets、fputs</li>
</ol>
<ul>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将str所指定的字符串写入到stream指定的文件中，字符串结束符 <span class="token char">'\0'</span>  不写入文件。 
参数：
	str：字符串
	stream：文件指针
返回值：<span class="token number">6</span>
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"123456\n"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbbbbb\n"</span><span class="token punctuation">,</span> <span class="token string">"ccccccccccc\n"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">fputs</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len = %d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件内读入字符，保存到str所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size <span class="token operator">-</span> <span class="token number">1</span>个字符为止，最后会自动加上字符 <span class="token char">'\0'</span> 作为字符串结束。
参数：
	str：字符串
	size：指定最大读取字符串的长度（size <span class="token operator">-</span> <span class="token number">1</span>）
	stream：文件指针
返回值：
	成功：成功读取的字符串
	读到文件尾或出错： <span class="token constant">NULL</span>

<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>强化训练：文件版四则运算（可以写一下）<ul>
<li>有个文件大小不确定，每行内容都是一个四则运算表达式，还没有算出结果，写一个程序，自动算出其结果后修改文件。</li>
<li><img src="http://qiniu.orangew.cn/img/wps2E66.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>按照格式化文件fprintf、fscanf</li>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：根据参数format字符串来转换并格式化数据，然后将结果输出到stream指定的文件中，指定出现字符串结束符 <span class="token char">'\0'</span>  为止。
参数：
	stream：已经打开的文件
	format：字符串格式，用法和<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：实际写入文件的字符个数
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件读取字符串，并根据参数format字符串来转换并格式化数据。
参数：
	stream：已经打开的文件
	format：字符串格式，用法和<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：参数数目，成功转换的值的个数
	失败： <span class="token operator">-</span> <span class="token number">1</span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d, c = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><h2 id="强化训练：文件版排序"><a href="#强化训练：文件版排序" class="headerlink" title="强化训练：文件版排序"></a>强化训练：文件版排序</h2><ul>
<li><img src="http://qiniu.orangew.cn/img/wps605F.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>按照块读写文件fread、fwrite</li>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：以数据块的方式给文件写入内容
参数：
	ptr：准备写入文件数据的地址
	size： <span class="token class-name">size_t</span> 为 <span class="token keyword">unsigned</span> <span class="token keyword">int</span>类型，此参数指定写入文件内容的块数据大小
	nmemb：写入文件的块数，写入文件数据总大小为：size <span class="token operator">*</span> nmemb
	stream：已经打开的文件指针
返回值：
	成功：实际成功写入文件数据的块数目，此值和 nmemb 相等
	失败：<span class="token number">0</span>


<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"stu%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：以数据块的方式从文件中读取内容
参数：
	ptr：存放读取出来数据的内存空间
	size： <span class="token class-name">size_t</span> 为 <span class="token keyword">unsigned</span> <span class="token keyword">int</span>类型，此参数指定读取文件内容的块数据大小
	nmemb：读取文件的块数，读取文件数据总大小为：size <span class="token operator">*</span> nmemb
	stream：已经打开的文件指针
返回值：
	成功：实际成功读取到内容的块数，如果此值比nmemb小，但大于<span class="token number">0</span>，说明读到文件的结尾。
	失败：<span class="token number">0</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s = %s, %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>强化训练：大文件拷贝<ul>
<li><img src="http://qiniu.orangew.cn/img/wpsB15A.tmp.jpg" alt="img"></li>
</ul>
</li>
</ul>
<h4 id="4-文件的随机读写"><a href="#4-文件的随机读写" class="headerlink" title="4.文件的随机读写"></a>4.文件的随机读写</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：移动文件流（文件光标）的读写位置。
参数：
	stream：已经打开的文件指针
	offset：根据whence来移动的位移数（偏移量），可以是正数，也可以负数，如果正数，则相对于whence往右移动，如果是负数，则相对于whence往左移动。如果向前移动的字节数超过了文件开头则出错返回，如果向后移动的字节数超过了文件末尾，再次写入时将增大文件尺寸。
	whence：其取值如下：
		<span class="token constant">SEEK_SET</span>：从文件开头移动offset个字节
		<span class="token constant">SEEK_CUR</span>：从当前位置移动offset个字节
		<span class="token constant">SEEK_END</span>：从文件末尾移动offset个字节
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：获取文件流（文件光标）的读写位置。
参数：
	stream：已经打开的文件指针
返回值：
	成功：当前文件流（文件光标）的读写位置
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把文件流（文件光标）的读写位置移动到文件开头。
参数：
	stream：已经打开的文件指针
返回值：
	无返回值

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

<span class="token comment">//假如已经往文件写入3个结构体</span>
<span class="token comment">//fwrite(s, sizeof(Stu), 3, fp);</span>

Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Stu tmp<span class="token punctuation">;</span> 
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">//文件光标读写位置从开头往右移动2个结构体的位置</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读第3个结构体</span>
ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[tmp]%s, %d\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//把文件光标移动到文件开头</span>
<span class="token comment">//fseek(fp, 0, SEEK_SET);</span>
<span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s === %s, %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-Windows和Linux文本文件区别"><a href="#5-Windows和Linux文本文件区别" class="headerlink" title="5.Windows和Linux文本文件区别"></a>5.Windows和Linux文本文件区别</h4><ul>
<li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li>
<li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li>
<li>在Windows平台下，以“文本”方式打开文件，不加b：<ul>
<li>当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li>
<li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入 </li>
<li>以”二进制”方式打开文件，则读\写都不会进行这样的转换</li>
</ul>
</li>
<li>在Unix/Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li>
</ul>
<ul>
<li>判断文本文件是Linux格式还是Windows格式:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	FILE <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">fgets</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\r'</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"windows file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"linux file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		len<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">fclose</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-获取文件状态"><a href="#6-获取文件状态" class="headerlink" title="6.获取文件状态"></a>6.获取文件状态</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：获取文件状态信息
参数：
path：文件名
buf：保存文件信息的结构体
返回值：
成功：<span class="token number">0</span>
失败<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">dev_t</span>         st_dev<span class="token punctuation">;</span>         <span class="token comment">//文件的设备编号</span>
	<span class="token class-name">ino_t</span>         st_ino<span class="token punctuation">;</span>          <span class="token comment">//节点</span>
	<span class="token class-name">mode_t</span>        st_mode<span class="token punctuation">;</span>   <span class="token comment">//文件的类型和存取的权限</span>
	<span class="token class-name">nlink_t</span>       st_nlink<span class="token punctuation">;</span>     <span class="token comment">//连到该文件的硬连接数目，刚建立的文件值为1</span>
	<span class="token class-name">uid_t</span>         st_uid<span class="token punctuation">;</span>         <span class="token comment">//用户ID</span>
	<span class="token class-name">gid_t</span>         st_gid<span class="token punctuation">;</span>         <span class="token comment">//组ID</span>
	<span class="token class-name">dev_t</span>         st_rdev<span class="token punctuation">;</span>      <span class="token comment">//(设备类型)若此文件为设备文件，则为其设备编号</span>
	<span class="token class-name">off_t</span>         st_size<span class="token punctuation">;</span>        <span class="token comment">//文件字节数(文件大小)</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> st_blksize<span class="token punctuation">;</span>   <span class="token comment">//块大小(文件系统的I/O 缓冲区大小)</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> st_blocks<span class="token punctuation">;</span>    <span class="token comment">//块数</span>
	<span class="token class-name">time_t</span>        st_atime<span class="token punctuation">;</span>     <span class="token comment">//最后一次访问时间</span>
	<span class="token class-name">time_t</span>        st_mtime<span class="token punctuation">;</span>    <span class="token comment">//最后一次修改时间</span>
	<span class="token class-name">time_t</span>        st_ctime<span class="token punctuation">;</span>     <span class="token comment">//最后一次改变时间(指属性)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">stat</span> st <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">stat</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> st<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span><span class="token comment">//得到结构体中的成员变量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-删除文件、重命名文件名"><a href="#7-删除文件、重命名文件名" class="headerlink" title="7.删除文件、重命名文件名"></a>7.删除文件、重命名文件名</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：删除文件
参数：
	pathname：文件名
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldpath<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把oldpath的文件名改为newpath
参数：
oldpath：旧文件名
newpath：新文件名
返回值：
成功：<span class="token number">0</span>
失败： <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="8-文件缓冲区"><a href="#8-文件缓冲区" class="headerlink" title="8.文件缓冲区"></a>8.文件缓冲区</h4><ol>
<li>文件缓冲区<ul>
<li>ANSI C标准采用“缓冲文件系统”处理数据文件。</li>
<li>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</li>
<li>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。</li>
</ul>
</li>
<li>磁盘文件的存取<ul>
<li><img src="http://qiniu.orangew.cn/img/wps8F97.tmp.jpg" alt="img"></li>
<li>磁盘文件，一般保存在硬盘、U盘等掉电不丢失的磁盘设备中，在需要时调入内存</li>
<li>在内存中对文件进行编辑处理后，保存到磁盘中</li>
<li>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率</li>
</ul>
</li>
<li>更新缓冲区</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">fflush</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：更新缓冲区，让缓冲区的数据立马写到文件中。
参数：
stream：文件指针
返回值：
成功：<span class="token number">0</span>
失败：<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构讲义</title>
    <url>/2022/07/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%B2%E4%B9%89/</url>
    <content><![CDATA[<h2 id="1-数据结构概念"><a href="#1-数据结构概念" class="headerlink" title="1.数据结构概念"></a><strong>1.数据结构概念</strong></h2><h3 id="1-1数据结构相关概念"><a href="#1-1数据结构相关概念" class="headerlink" title="1.1数据结构相关概念"></a><strong>1.1数据结构相关概念</strong></h3><h4 id="1-1-1为什么要学习数据结构"><a href="#1-1-1为什么要学习数据结构" class="headerlink" title="1.1.1为什么要学习数据结构?"></a><strong>1.1.1为什么要学习数据结构?</strong></h4><ul>
<li><p>为什么要学习数据结构？在回答这个问题之前，我们是不是应该弄清楚什么是数据结构，数据结构能够用来做什么？最直白的，它能够帮我们解决什么问题？</p>
</li>
<li><p>我们之前的学习的设计模式和现在数据结构，有个相似的特点，他们两个都是在思想层面的东西，和具体的语言无关，你可以用其他的语言去实现这些思想都没有问题。</p>
</li>
<li><p>设计模式在教我们如何编写代码，让我们的代码具有可扩展性，灵活性，可复用性，这个是编码层次上的，那么数据结构呢？我们举一个例子:</p>
</li>
<li><p>比如我们C语言中没有数组这么个数据结构，那么你如何实现10个数排序呢？是不是要定义10个变量，然后让10个变量互相比较，重复劳动，但是你用数组之后，是不是问题变得简单了，只需要通过数组下表就可以，提高了程序的编写效率。</p>
</li>
<li><p>再比如说，我们有了数组了，为什么还需要学习链表这种数据结构？数组是连续内存空间，一旦定义了不能概念，适应性差，但是链表你有多少数据，我就创建多少个结点，而且比如说数据，你删除中间位置一个元素，会引起后面数据的移动，但是链表不会啊，在有些场合下，你使用链表是不是会增加程序的效率。</p>
</li>
<li><p>从我们的讲的东西中，也可以得出数据结构的概念，数据结构就是帮我们解决如何组织和存储数据的方式。</p>
</li>
<li><p>数据结构主要<strong>研究非数值计算问题的程序中的操作对象以及他们之间的关系</strong>，<strong>不是研究复杂的算法</strong>。</p>
</li>
<li><p><strong>数据结构是计算机存储、组织数据的方式。</strong></p>
</li>
</ul>
<h4 id="1-1-2数据结构中的基本概念"><a href="#1-1-2数据结构中的基本概念" class="headerlink" title="1.1.2数据结构中的基本概念"></a><strong>1.1.2数据结构中的基本概念</strong></h4><ul>
<li>数据 – 程序的操作对象，用于描述客观事物。</li>
</ul>
<ul>
<li>数据是一个抽象的概念，将其进行分类后得到程序设计语言中的类型。如：int，float，char等等。</li>
</ul>
<ul>
<li>数据元素：组成数据的基本单位。</li>
</ul>
<ul>
<li>数据项：一个数据元素由若干数据项组成。</li>
</ul>
<ul>
<li>数据对象 – 性质相同的数据元素的集合（比如：数组，链表）。 </li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;声明一个结构体类型
struct _MyTeacher   &#x2F;&#x2F;一种数据类型
&#123;
	char	name[32];
	char	tile[32];
	int		age;
	char	addr[128];
&#125;;

int main()
&#123;
	struct _MyTeacher  t1; &#x2F;&#x2F;数据元素
	struct _MyTeacher tArray[30]; &#x2F;&#x2F;数据对象
	memset(&amp;t1, 0, sizeof(t1));

	strcpy(t1.name, &quot;name&quot;); &#x2F;&#x2F;数据项
	strcpy(t1.addr, &quot;addr&quot;); &#x2F;&#x2F;数据项
	strcpy(t1.tile, &quot;addr&quot;); &#x2F;&#x2F;数据项
	t1.age &#x3D; 1;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="1-2算法"><a href="#1-2算法" class="headerlink" title="1.2算法"></a><strong>1.2算法</strong></h3><h4 id="1-2-1算法的概念"><a href="#1-2-1算法的概念" class="headerlink" title="1.2.1算法的概念"></a><strong>1.2.1算法的概念</strong></h4><ul>
<li><p><strong>为啥子我们学习数据结构还要了解算法？</strong></p>
</li>
<li><p><strong>比如说:我有10个学生，我们将是10个学生保存在一个链表中，但是我不能把学生保存进去就完事了吧？我放进去是为了使用这些个数据完成一定的业务需求，比如按成绩大小排序并显示，比如计算这些学生的平均分等等，这些才是我们最终要解决的问题，既然要解决问题，那么就需要一些算法，比如排序算法，比如计算平均分的算法，对吧？所以数据结构和算法是互相配合完成工作。</strong></p>
</li>
<li><p>算法是特定问题求解步骤的描述，在计算机中表现为<strong>指令的有限序列</strong>，算法是独立存在的一种解决问题的方法和思想。</p>
</li>
</ul>
<ul>
<li>对于算法而言，语言并不重要，重要的是思想。</li>
</ul>
<h4 id="1-2-2算法和数据结构区别"><a href="#1-2-2算法和数据结构区别" class="headerlink" title="1.2.2算法和数据结构区别"></a><strong>1.2.2算法和数据结构区别</strong></h4><ul>
<li>数据结构只是静态的描述了数据元素之间的关系，高效的程序需要在数据结构的基础上设计和选择算法。</li>
<li><strong>算法是为了解决实际问题而设计的。</strong></li>
<li><strong>数据结构是算法需要处理的问题载体。</strong></li>
<li><strong>数据结构与算法相辅相成</strong></li>
</ul>
<h4 id="1-2-3算法特性"><a href="#1-2-3算法特性" class="headerlink" title="1.2.3算法特性"></a><strong>1.2.3算法特性</strong></h4><ul>
<li><p> <strong>输入</strong>: 算法具有0个或多个输入</p>
</li>
<li><p> <strong>输出</strong>: 算法至少有1个或多个输出</p>
</li>
<li><p> <strong>有穷性</strong>: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在接收的实际内完成</p>
</li>
<li><p> <strong>确定性</strong>：算法中的每一步都有确定的含义，不会出现二义性</p>
</li>
<li><p><strong>可行性</strong>：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成。</p>
</li>
<li><p><strong>问题:针对某一具体的问题，解决此问题的算法是唯一的吗？</strong></p>
</li>
</ul>
<p><strong>比如说:求从1到100的和？</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
&#x2F;&#x2F;算法1
long sum1(int n)&#123;
	long ret &#x3D; 0;
	int* array &#x3D; (int*)malloc(n * sizeof(int));
	int i &#x3D; 0;
	for (int i &#x3D; 0; i &lt; n; i ++)&#123;
		array[i] &#x3D; i + 1;
	&#125;
	for (int i &#x3D; 0; i &lt; n;i++)&#123;
		ret +&#x3D; array[i];
	&#125;
	free(array);

	return ret;
&#125;
&#x2F;&#x2F;算法2
long sum2(int n)&#123;
	long ret &#x3D; 0; 
	int i &#x3D; 0;
	for (i &#x3D; 1; i &lt;&#x3D; n;i++)&#123; 
		ret +&#x3D; i;
	&#125;
	return ret;
&#125;
&#x2F;&#x2F;算法3
long sum3(int n)&#123;
	long ret &#x3D; 0; &#x2F;&#x2F; 1
	if (n &gt; 0)&#123; 
		ret &#x3D; (1 + n)*n &#x2F; 2;
	&#125;
	return ret;
&#125;
int main()&#123;
	printf(&quot;%d&quot;, sum1(100));
	printf(&quot;%d&quot;, sum2(100));
	printf(&quot;%d&quot;, sum3(100));
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>同样一个问题，我有三种不同的算法，这三种算法都可以解决同样的问题，那么我们如何选择？需要有个方法来衡量算法的效率吧？</strong></li>
</ul>
<h4 id="1-2-4算法效率的度量"><a href="#1-2-4算法效率的度量" class="headerlink" title="1.2.4算法效率的度量"></a><strong>1.2.4算法效率的度量</strong></h4><h5 id="1-2-4-1事后统计法"><a href="#1-2-4-1事后统计法" class="headerlink" title="1.2.4.1事后统计法"></a><strong>1.2.4.1事后统计法</strong></h5><ul>
<li>主要通过设计好的测试程序和数据，利用计算机的计时器对不同算法的编制的程序的运行时间进行比较，从而确定算法效率的高低。</li>
</ul>
<ul>
<li><p>统计方法</p>
<ul>
<li>比较不同算法对同一组输入数据的运行处理时间。</li>
</ul>
</li>
</ul>
<ul>
<li><p>缺陷 </p>
<ul>
<li>为了获得不同算法的运行时间必须编写相应程序</li>
</ul>
</li>
</ul>
<ul>
<li>运行时间严重依赖硬件以及运行时的环境因素</li>
</ul>
<ul>
<li>算法的测试数据的选取相当困难</li>
</ul>
<ul>
<li><p>总结</p>
<ul>
<li>事后统计法虽然直观，但是实施困难且缺陷多</li>
</ul>
</li>
</ul>
<h5 id="1-2-4-2事前分析估算"><a href="#1-2-4-2事前分析估算" class="headerlink" title="1.2.4.2事前分析估算"></a><strong>1.2.4.2事前分析估算</strong></h5><ul>
<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>
</ul>
<ul>
<li><p>统计方法：</p>
<ul>
<li>依据统计的方法对算法效率进行估算</li>
</ul>
</li>
<li><p>影响算法效率的主要因素：</p>
<ul>
<li>算法采用的策略和方法</li>
<li>问题的输入规模</li>
<li>编译器所产生的代码</li>
<li>计算机执行速度</li>
</ul>
</li>
</ul>
<p><strong>算法推倒的理论基础：</strong></p>
<ul>
<li>算法最终编译成具体的计算机指令</li>
<li>每一个指令，在具体的计算机上运行速度固定</li>
<li>通过具体的步骤，就可以推导出算法的复杂度（如下表）</li>
</ul>
<table>
<thead>
<tr>
<th><strong>次数</strong></th>
<th><strong>算法C（4n+8）</strong></th>
<th><strong>算法C’（n）</strong></th>
<th><strong>算法D（2n^2+1）</strong></th>
<th><strong>算法D1(n^2)</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>n = 1</strong></td>
<td><strong>12</strong></td>
<td><strong>1</strong></td>
<td><strong>3</strong></td>
<td><strong>1</strong></td>
</tr>
<tr>
<td><strong>n = 2</strong></td>
<td><strong>16</strong></td>
<td><strong>2</strong></td>
<td><strong>9</strong></td>
<td><strong>4</strong></td>
</tr>
<tr>
<td><strong>n = 3</strong></td>
<td><strong>20</strong></td>
<td><strong>3</strong></td>
<td><strong>19</strong></td>
<td><strong>9</strong></td>
</tr>
<tr>
<td><strong>n = 10</strong></td>
<td><strong>48</strong></td>
<td><strong>10</strong></td>
<td><strong>201</strong></td>
<td><strong>100</strong></td>
</tr>
<tr>
<td><strong>n = 100</strong></td>
<td><strong>408</strong></td>
<td><strong>100</strong></td>
<td><strong>20001</strong></td>
<td><strong>10000</strong></td>
</tr>
<tr>
<td><strong>n = 1000</strong></td>
<td><strong>4008</strong></td>
<td><strong>1000</strong></td>
<td><strong>2000001</strong></td>
<td><strong>1000000</strong></td>
</tr>
</tbody></table>
<p>​    </p>
<table>
<thead>
<tr>
<th><strong>次数</strong></th>
<th><strong>算法G（2n……^2）</strong></th>
<th><strong>算法H（3n+1）</strong></th>
<th><strong>算法I（2n^2+3n+1）</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>n = 1</strong></td>
<td><strong>2</strong></td>
<td><strong>4</strong></td>
<td><strong>6</strong></td>
</tr>
<tr>
<td><strong>n = 2</strong></td>
<td><strong>8</strong></td>
<td><strong>7</strong></td>
<td><strong>15</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>5</strong></td>
<td><strong>50</strong></td>
<td><strong>16</strong></td>
<td><strong>66</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>10</strong></td>
<td><strong>200</strong></td>
<td><strong>31</strong></td>
<td><strong>231</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>100</strong></td>
<td><strong>20000</strong></td>
<td><strong>301</strong></td>
<td><strong>20301</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>1000</strong></td>
<td><strong>2000000</strong></td>
<td><strong>3001</strong></td>
<td><strong>2003001</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>10000</strong></td>
<td><strong>2000000000</strong></td>
<td><strong>30001</strong></td>
<td><strong>200030001</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>100000</strong></td>
<td><strong>20000000000</strong></td>
<td><strong>300001</strong></td>
<td><strong>20000300001</strong></td>
</tr>
<tr>
<td><strong>n =</strong> <strong>1000000</strong></td>
<td><strong>2000000000000</strong></td>
<td><strong>3000001</strong></td>
<td><strong>2000003000001</strong></td>
</tr>
</tbody></table>
<p><strong>怎么判断一个算法的效率?（规则如下）</strong></p>
<ul>
<li>判断一个算法的效率时，往往<strong>只需要关注操作数量的最高次项，其它次要项和常数项可以忽略。</strong></li>
</ul>
<ul>
<li>在没有特殊说明时，我们所分析的<strong>算法的时间复杂度都是指最坏时间复杂度</strong>。</li>
<li><strong>只有常数项记做1</strong></li>
<li><strong>操作数量的估算可以作为时间复杂度的估算</strong></li>
</ul>
<h5 id="1-2-4-3大O表示法"><a href="#1-2-4-3大O表示法" class="headerlink" title="1.2.4.3大O表示法"></a><strong>1.2.4.3大O表示法</strong></h5><ul>
<li>算法的时间复杂度<ul>
<li>常见的时间复杂度</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>执行次数函数</th>
<th>阶</th>
<th>非正式术语</th>
</tr>
</thead>
<tbody><tr>
<td>12</td>
<td>O(1)</td>
<td>常数阶</td>
</tr>
<tr>
<td>2n+3</td>
<td>O(n)</td>
<td>线性阶</td>
</tr>
<tr>
<td>3n^2+2n+1</td>
<td>O(n^2)</td>
<td>平方阶</td>
</tr>
<tr>
<td>5log2n+20</td>
<td>O(logn)</td>
<td>对数阶</td>
</tr>
<tr>
<td>2n+3nlog2n+19</td>
<td>O(nlogn)</td>
<td>nlogn阶</td>
</tr>
<tr>
<td>6n^3+2n^2+3n+4</td>
<td>O(n^3)</td>
<td>立方阶</td>
</tr>
<tr>
<td>2n</td>
<td>O(2^n)</td>
<td>指数阶</td>
</tr>
</tbody></table>
<ul>
<li>常见的时间复杂度之间的关系</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8CA4.tmp.jpg" alt="img"> </p>
<p>常用的时间复杂度所耗费的时间从小到大依次是：</p>
<p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p>
<ul>
<li>时间复杂度练习( 参考算法的效率规则判断 )</li>
<li>O(5) = O(1)</li>
<li>O(2n + 1) = O(n) </li>
<li>O(6n²+ n + 1) = O(n²)</li>
<li>O(3n³+1) = O(n³)</li>
</ul>
<p><strong>总结:</strong></p>
<ul>
<li><p><strong>只关注最高次项</strong></p>
</li>
<li><p><strong>时间复杂度是指最坏时间复杂度</strong></p>
</li>
<li><p><strong>只有常数项记做1</strong></p>
</li>
<li><p>算法的空间复杂度</p>
<ul>
<li>算法的空间复杂度并不是计算所有算法所占的空间，而是使用的辅助空间的大小。</li>
</ul>
</li>
</ul>
<h2 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2.线性表"></a><strong>2.线性表</strong></h2><h3 id="2-1线性表基本概念"><a href="#2-1线性表基本概念" class="headerlink" title="2.1线性表基本概念"></a><strong>2.1线性表基本概念</strong></h3><h4 id="2-1-1基本概念"><a href="#2-1-1基本概念" class="headerlink" title="2.1.1基本概念"></a><strong>2.1.1基本概念</strong></h4><p><strong>线性表是零个或者多个数据元素的有限序列</strong>。</p>
<p><strong>特性:</strong></p>
<ul>
<li>数据元素之间是<strong>有顺序的.</strong></li>
<li>数据元素个数是<strong>有限的.</strong></li>
<li>数据元素的<strong>类型必须相同.</strong></li>
</ul>
<p><strong>例：</strong>先来看一个大家感兴趣的话题，一年里的星座列表，是不是线性表呢？如图所示：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8CA5.tmp.jpg" alt="img"> </p>
<h4 id="2-1-1数学定义"><a href="#2-1-1数学定义" class="headerlink" title="2.1.1数学定义"></a><strong>2.1.1数学定义</strong></h4><ul>
<li>线性表是具有相同类型的 n（ ≥ 0）个数据元素的有限序列（a0,a1, a2, …, an）</li>
</ul>
<p>ai是表项，n 是表长度。</p>
<h4 id="2-1-2性质"><a href="#2-1-2性质" class="headerlink" title="2.1.2性质"></a><strong>2.1.2性质</strong></h4><ul>
<li>a0为线性表的第一个元素，只有一个后继。</li>
<li>an为线性表的最后一个元素，只有一个前驱。</li>
<li>除a0和an外的其它元素ai，既有前驱，又有后继。</li>
<li>线性表能够逐项访问和顺序存取。</li>
</ul>
<h4 id="2-1-3线性表的操作"><a href="#2-1-3线性表的操作" class="headerlink" title="2.1.3线性表的操作"></a><strong>2.1.3线性表的操作</strong></h4><ul>
<li>创建线性表</li>
<li>销毁线性表</li>
<li>清空线性表</li>
<li>将元素插入线性表</li>
<li>将元素从线性表中删除</li>
<li>获取线性表中某个位置的元素</li>
<li>获取线性表的长度</li>
</ul>
<p>线性表的抽象数据类型定义：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ADT线性表（List）
Data
线性表的数据对象集合为&#123; a1, a2, ……, an &#125;，每个元素的类型均为DataType。其中，除第一个元素a1外，每个元素有且只有一个直接前驱元素，除了最后一个元素an外，每个元素有且只有一个直接后继元素。数据元素之间的关系是一一对应的。

Operation（操作）
&#x2F;&#x2F; 初始化，建立一个空的线性表L。
InitList(*L);
&#x2F;&#x2F; 若线性表为空，返回true，否则返回false
ListEmpty(L);
&#x2F;&#x2F; 将线性表清空
ClearList(*L);
&#x2F;&#x2F; 将线性表L中的第i个位置的元素返回给e
GetElem(L, i, *e);
&#x2F;&#x2F; 在线性表L中的第i个位置插入新元素e
ListInsert(*L, i, e);
&#x2F;&#x2F; 删除线性表L中的第i个位置元素，并用e返回其值
ListDelete(*L, i, *e);
&#x2F;&#x2F; 返回线性表L的元素个数
ListLength(L);
&#x2F;&#x2F; 销毁线性表
DestroyList(*L);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-2线性表的顺序存储"><a href="#2-2线性表的顺序存储" class="headerlink" title="2.2线性表的顺序存储"></a><strong>2.2线性表的顺序存储</strong></h3><h4 id="2-2-1线性表顺序存储基本概念"><a href="#2-2-1线性表顺序存储基本概念" class="headerlink" title="2.2.1线性表顺序存储基本概念"></a><strong>2.2.1线性表顺序存储基本概念</strong></h4><ul>
<li>线性表的顺序存储结构，指的是<strong>用一段地址连续的存储单元依次存储线性表的数据元素</strong>。</li>
</ul>
<ul>
<li>线性表 （a1，a2，……，an）的顺序存储示意图如下：</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8CA6.tmp.jpg" alt="img"> </p>
<h4 id="2-2-2线性表顺序存储的设计与实现"><a href="#2-2-2线性表顺序存储的设计与实现" class="headerlink" title="2.2.2线性表顺序存储的设计与实现"></a><strong>2.2.2线性表顺序存储的设计与实现</strong></h4><p><strong>操作要点:</strong></p>
<ul>
<li><p>插入元素算法</p>
<ul>
<li>判断线性表是否合法</li>
<li>判断插入位置是否合法</li>
<li>把最后一个元素到插入位置的元素后移一个位置</li>
<li>将新元素插入</li>
<li>线性表长度加1</li>
</ul>
</li>
<li><p>获取元素操作</p>
<ul>
<li>判断线性表是否合法</li>
<li>判断位置是否合法</li>
<li>直接通过数组下标的方式获取元素</li>
</ul>
</li>
<li><p>删除元素算法</p>
<ul>
<li>判断线性表是否合法</li>
<li>判断删除位置是否合法</li>
<li>将元素取出</li>
<li>将删除位置后的元素分别向前移动一个位置</li>
<li>线性表长度减1</li>
</ul>
</li>
</ul>
<p><strong>链表顺序存储插入算法和删除算法:</strong></p>
<ul>
<li>元素的插入</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CB7.tmp.jpg" alt="img"> </p>
<ul>
<li>元素的删除</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8CB8.tmp.jpg" alt="img"> </p>
<ul>
<li><strong>注意:</strong> <strong>链表的容量和链表的长度是两个不同的概念</strong></li>
</ul>
<h4 id="2-2-3优点和缺点"><a href="#2-2-3优点和缺点" class="headerlink" title="2.2.3优点和缺点"></a><strong>2.2.3优点和缺点</strong></h4><p><strong>优点：</strong></p>
<ul>
<li>无需为线性表中的逻辑关系增加额外的空间。</li>
<li>可以快速的获取表中合法位置的元素。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>插入和删除操作需要移动大量元素。</li>
<li>当线性表长度变化较大的时候，难以确定存储空间的容量。 </li>
</ul>
<h4 id="2-2-4-线性表顺序存储案例"><a href="#2-2-4-线性表顺序存储案例" class="headerlink" title="2.2.4 线性表顺序存储案例"></a><strong>2.2.4 线性表顺序存储案例</strong></h4><p><strong>动态数组案例:</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

#define MYARRAY_TRUE 1
#define MYARRAY_FALSE 0

&#x2F;&#x2F;定义结构体 保存数据首地址和数组长度
typedef struct MyArray&#123;
	int* ArrayAddr; &#x2F;&#x2F;数据首地址
	int capacity; &#x2F;&#x2F;数据容量
	int length; &#x2F;&#x2F;数据长度
&#125;MyArray;


&#x2F;&#x2F;初始化数组
MyArray* Init_MyArray()&#123;

	MyArray* array &#x3D; (MyArray*)malloc(sizeof(MyArray)); &#x2F;&#x2F;给数组结构体分配内存
	array-&gt;ArrayAddr &#x3D; (int*)malloc(sizeof(int)*20); &#x2F;&#x2F;初始化分配内存20个int类型长度
	if (array-&gt;ArrayAddr &#x3D;&#x3D; NULL)&#123;
		printf(&quot;申请内存失败!\n&quot;);
		return NULL;
	&#125;
	memset(array-&gt;ArrayAddr, 0, sizeof(int)* 20); &#x2F;&#x2F;初始化内存空间
	array-&gt;capacity &#x3D; 20; &#x2F;&#x2F;初始化数据容量
	array-&gt;length &#x3D; 0; &#x2F;&#x2F;初始化长度为0

	return array; &#x2F;&#x2F;成功返回数组指针
&#125;

&#x2F;&#x2F;判断数组是否为空 0:false 不为空  1:true 为空
int IsEmpty_MyArray(MyArray* array)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	if (array-&gt;length &#x3D;&#x3D; 0)&#123;
		return MYARRAY_TRUE;
	&#125;
	return MYARRAY_FALSE;
&#125;

&#x2F;&#x2F;清空数组
int Clear_MyArray(MyArray* array)&#123;
	
	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	if (array-&gt;ArrayAddr !&#x3D; NULL)&#123;
		memset(array-&gt;ArrayAddr, 0, array-&gt;capacity*sizeof(int)); &#x2F;&#x2F;重新初始化内存空间
	&#125;
	array-&gt;length &#x3D; 0;

	return 0;
&#125;

&#x2F;&#x2F;获得指定位置元素
int GetElement_MyArray(MyArray* array,int pos)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	if (pos &gt; array-&gt;length-1)&#123;
		printf(&quot;数组访问越界!\n&quot;);
		return -2;
	&#125;

	return array-&gt;ArrayAddr[pos];
&#125;

&#x2F;&#x2F;向指定位置插入元素
int InsertElement_MyArray(MyArray* array, int pos,int val)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	&#x2F;&#x2F;判断是否插入越界
	if (pos &gt; array-&gt;length)&#123;
		printf(&quot;元素插入位置不合法!\n&quot;);
		return -2;
	&#125;
	&#x2F;&#x2F;判断当前是否还有容量，没有的话，重新申请内存空间
	if (array-&gt;length &#x3D;&#x3D; array-&gt;capacity)&#123;
		&#x2F;&#x2F;申请新的内存空间
		int* newSpaceAddr &#x3D; (int*)malloc(array-&gt;capacity * 2 * sizeof(int)); 
		&#x2F;&#x2F;将原内存空间数据拷贝到新的空间
		memcpy(newSpaceAddr,array-&gt;ArrayAddr,array-&gt;length*sizeof(int));
		&#x2F;&#x2F;释放旧内存空间的内存
		if (NULL !&#x3D; array-&gt;ArrayAddr)&#123;
			free(array-&gt;ArrayAddr);
		&#125;
		&#x2F;&#x2F;让ArrayAddr重新指向新的内存空间
		array-&gt;ArrayAddr &#x3D; newSpaceAddr;
		&#x2F;&#x2F;更新容量
		array-&gt;capacity &#x3D; array-&gt;capacity * 2;
	&#125;
	&#x2F;&#x2F;插入元素
	&#x2F;&#x2F;第一步 移动元素
	for (int i &#x3D; array-&gt;length-1; i &gt;&#x3D; pos; i--)&#123;
		array-&gt;ArrayAddr[i + 1] &#x3D; array-&gt;ArrayAddr[i];
	&#125;
	&#x2F;&#x2F;第二部 在Pos位置插入元素
	array-&gt;ArrayAddr[pos] &#x3D; val;
	array-&gt;length++;

	return 0;
&#125;

&#x2F;&#x2F;删除指定位置元素
int RemoevElement_MyArray(MyArray* array, int pos)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	&#x2F;&#x2F;移动元素
	for (int i &#x3D; pos; i &lt; array-&gt;length; i ++)&#123;
		array-&gt;ArrayAddr[i] &#x3D; array-&gt;ArrayAddr[i + 1];
	&#125;
	array-&gt;length--;

	return 0;
&#125;

&#x2F;&#x2F;获得链表长度
int GetLength_MyArray(MyArray* array)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	return array-&gt;length;
&#125;

&#x2F;&#x2F;获得链表容量
int GetCapacity_MyArray(MyArray* array)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	return array-&gt;capacity;
&#125;

&#x2F;&#x2F;打印数组内容
void PrintArray_MyArray(MyArray* array)&#123;

	for (int i &#x3D; 0; i &lt; array-&gt;length;i++)&#123;
		printf(&quot;%d &quot;,array-&gt;ArrayAddr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;销毁数组
int DestroyArray_MyArray(MyArray* array)&#123;

	if (array &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	if (array-&gt;ArrayAddr !&#x3D; NULL)&#123;
		delete array-&gt;ArrayAddr;
		array-&gt;ArrayAddr &#x3D; NULL;
	&#125;
	array-&gt;capacity &#x3D; 0;
	array-&gt;length &#x3D; 0;
	
	&#x2F;&#x2F;销毁数组
	delete array;

	return 0;
&#125;

&#x2F;&#x2F;测试API
void test01()&#123;
	
	MyArray* array &#x3D; Init_MyArray(); &#x2F;&#x2F;初始化数组
	&#x2F;&#x2F;打印数组容量和长度
	printf(&quot;数组初始化长度:%d ,容量:%d\n&quot;,GetLength_MyArray(array),GetCapacity_MyArray(array));
	&#x2F;&#x2F;循环向数组中插入元素
	for (int i &#x3D; 10; i &lt;&#x3D; 300;i++)&#123;
		InsertElement_MyArray(array,0,i);
	&#125;
	printf(&quot;数组插入元素长度:%d ,容量:%d\n&quot;, GetLength_MyArray(array), GetCapacity_MyArray(array));
	&#x2F;&#x2F;打印数组
	PrintArray_MyArray(array);
	&#x2F;&#x2F;删除位置10的元素
	RemoevElement_MyArray(array,10);
	&#x2F;&#x2F;打印数组
	PrintArray_MyArray(array);
	printf(&quot;数组插入元素长度:%d ,容量:%d\n&quot;, GetLength_MyArray(array), GetCapacity_MyArray(array));
	&#x2F;&#x2F;销毁数组
	DestroyArray_MyArray(array);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-3线性表的链式存储"><a href="#2-3线性表的链式存储" class="headerlink" title="2.3线性表的链式存储"></a><strong>2.3线性表的链式存储</strong></h3><h4 id="2-3-1基本概念"><a href="#2-3-1基本概念" class="headerlink" title="2.3.1基本概念"></a><strong>2.3.1基本概念</strong></h4><ul>
<li>链式存储定义</li>
<li>为了表示每个数据元素与其直接后继元素之间的逻辑关系，每个元素除了存储本身的信息外，还需要存储指示其直接后继的信息。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CC8.tmp.jpg" alt="img"> </p>
<ul>
<li>单链表<ul>
<li>线性表的链式存储结构中，每个节点中只包含一个指针域，这样的链表叫单链表。</li>
<li>通过每个节点的指针域将线性表的数据元素按其逻辑次序链接在一起（如图）。</li>
</ul>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CC9.tmp.jpg" alt="img"> </p>
<ul>
<li>概念解释：<ul>
<li>表头结点<ul>
<li>链表中的第一个结点，包含指向第一个数据元素的指针以及链表自身的一些信息</li>
</ul>
</li>
<li> 数据结点</li>
<li>链表中代表数据元素的结点，包含指向下一个数据元素的指针和数据元素的信息</li>
<li>尾结点<ul>
<li>链表中的最后一个数据结点，其下一元素指针为空，表示无后继。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CCA.tmp.jpg" alt="img"> </p>
<h4 id="2-3-2设计与实现"><a href="#2-3-2设计与实现" class="headerlink" title="2.3.2设计与实现"></a><strong>2.3.2设计与实现</strong></h4><p><strong>插入操作</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8CCB.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">node-&gt;next &#x3D; current-&gt;next;
current-&gt;next &#x3D; node;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>删除操作</strong></p>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8CDC.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">current-&gt;next &#x3D; ret-&gt;next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="2-3-3优点和缺点"><a href="#2-3-3优点和缺点" class="headerlink" title="2.3.3优点和缺点"></a><strong>2.3.3优点和缺点</strong></h4><p><strong>优点：</strong></p>
<ul>
<li>无需一次性定制链表的容量 n 插入和删除操作无需移动数据元素</li>
</ul>
<p> <strong>缺点：</strong></p>
<ul>
<li>数据元素必须保存后继元素的位置信息n 获取指定数据的元素操作需要顺序访问之前的元素</li>
</ul>
<h4 id="2-3-4链表技术领域推演-能力提高"><a href="#2-3-4链表技术领域推演-能力提高" class="headerlink" title="2.3.4链表技术领域推演(能力提高)"></a><strong>2.3.4链表技术领域推演(能力提高)</strong></h4><p><img src="http://qiniu.orangew.cn/img/wps8CDD.tmp.jpg" alt="img"> </p>
<h4 id="2-3-5企业链表-通用链表-单向链表-案例"><a href="#2-3-5企业链表-通用链表-单向链表-案例" class="headerlink" title="2.3.5企业链表/通用链表(单向链表)案例"></a><strong>2.3.5企业链表/通用链表(单向链表)案例</strong></h4><ul>
<li>头文件LinkList.h</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef LINKLIST_H
#define LINKLIST_H

#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#define LINK_TRUE 1
#define LINK_FALSE 0

&#x2F;&#x2F;链表结点
typedef struct _ListNode&#123;
	struct _ListNode* next;
&#125;ListNode;

&#x2F;&#x2F;表头结点
typedef struct _LinkList&#123;
	ListNode header; &#x2F;&#x2F;头结点
	int length; &#x2F;&#x2F;链表长度
&#125;LinkList;
&#x2F;&#x2F;打印回调函数
typedef void(*PrintLinkListData)(ListNode*);
&#x2F;&#x2F;初始化链表
LinkList* InitLinkList();
&#x2F;&#x2F;销毁链表
void DestroyLinkList(LinkList* list);
&#x2F;&#x2F;链表中在指定位置插入结点
int InsertLinkList(LinkList* list, int pos, ListNode* node);
&#x2F;&#x2F;删除指定位置结点
int DeleteLinkList(LinkList* list, int pos);
&#x2F;&#x2F;链表是否为空
int IsEmptyLinkList(LinkList* list);
&#x2F;&#x2F;返回链表长度
int GetLengthLinkList(LinkList* list);
&#x2F;&#x2F;清空链表
void ClearLinkList(LinkList* list);
&#x2F;&#x2F;打印链表结点
void PrintLinkList(LinkList* list, PrintLinkListData print);
&#x2F;&#x2F;获得指定位置的结点
ListNode* GetNodeLinkList(LinkList* list, int pos);
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C文件LinkList.c</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;LinkList.h&quot;


&#x2F;&#x2F;初始化链表
LinkList* InitLinkList()&#123;

	LinkList* list &#x3D; (LinkList*)malloc(sizeof(LinkList));
	if (list &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;
	list-&gt;header.next &#x3D; NULL;
	list-&gt;length &#x3D; 0;

	return list;

&#125;
&#x2F;&#x2F;销毁链表
void DestroyLinkList(LinkList* list)&#123;
	if (NULL !&#x3D; list)&#123;
		list-&gt;header.next &#x3D; NULL;
		list-&gt;length &#x3D; 0;
		free(list);
	&#125;
&#125;
&#x2F;&#x2F;链表中在指定位置插入结点
int InsertLinkList(LinkList* list, int pos, ListNode* node)&#123;

	ListNode* current &#x3D; &amp;(list-&gt;header);
	&#x2F;&#x2F;如果pos位置超出链表长度，那么就插入到最后一个位置
	if (pos &gt; list-&gt;length) pos &#x3D; list-&gt;length;
	&#x2F;&#x2F;找到插入的位置
	for (int i &#x3D; 0; i &lt; pos; i ++)&#123;
		current &#x3D; current-&gt;next;
	&#125;
	&#x2F;&#x2F;新节点插入到pos位置
	node-&gt;next &#x3D; current-&gt;next;
	current-&gt;next &#x3D; node;

	list-&gt;length++;
	
	return 0;
&#125;
&#x2F;&#x2F;删除指定位置结点
int DeleteLinkList(LinkList* list, int pos)&#123;

	if (pos &gt; list-&gt;length-1)&#123;
		printf(&quot;删除位置%d不合法!\n&quot;,pos);
		return -1;
	&#125;
	ListNode* current &#x3D; &amp;(list-&gt;header);
	&#x2F;&#x2F;找到要删除的位置
	for (int i &#x3D; 0; i &lt; pos; i++)&#123;
		current &#x3D; current-&gt;next;
	&#125;
	&#x2F;&#x2F;要删除的结点
	ListNode* delNode &#x3D; current-&gt;next;
	&#x2F;&#x2F;删除结点
	current-&gt;next &#x3D; delNode-&gt;next;

	list-&gt;length--;

	return 0;
&#125;

&#x2F;&#x2F;链表是否为空
int IsEmptyLinkList(LinkList* list)&#123;
	if (list-&gt;length &#x3D;&#x3D; 0)&#123;
		return LINK_TRUE;
	&#125;
	return LINK_FALSE;
&#125;
&#x2F;&#x2F;返回链表长度
int GetLengthLinkList(LinkList* list)&#123;
	return list-&gt;length;
&#125;
&#x2F;&#x2F;清空链表
void ClearLinkList(LinkList* list)&#123;
	list-&gt;header.next &#x3D; NULL;
	list-&gt;length &#x3D; 0;
&#125;
&#x2F;&#x2F;打印链表结点
void PrintLinkList(LinkList* list, PrintLinkListData print)&#123;
	
	ListNode* current &#x3D; (&amp;(list-&gt;header))-&gt;next;
	while (current !&#x3D; NULL)&#123;
		print(current);
		current &#x3D; current-&gt;next;
	&#125;
	printf(&quot;-----------------------------\n&quot;);

&#125;

&#x2F;&#x2F;获得指定位置的结点
ListNode* GetNodeLinkList(LinkList* list, int pos)&#123;
	
	if (pos &gt; list-&gt;length-1)&#123;
		printf(&quot;位置%d不合法!\n&quot;,pos);
		return NULL;
	&#125;

	ListNode* current &#x3D; &amp;(list-&gt;header);
	for (int i &#x3D; 0; i &lt;&#x3D; pos; i ++)&#123;
		current &#x3D; current-&gt;next;
	&#125;
	return current;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

#include&quot;LinkList.h&quot;

typedef struct _Teacher&#123;
	ListNode node;
	char name[128];
	int age;
&#125;Teacher;

void PrintTeacher(ListNode* node)&#123;
	Teacher* teacher &#x3D; (Teacher*)node;
	printf(&quot;Name:%s Age:%d\n&quot;, teacher-&gt;name, teacher-&gt;age);
&#125;

&#x2F;&#x2F;测试链表API
void test01()&#123;

	&#x2F;&#x2F;初始化链表
	LinkList* list &#x3D; InitLinkList();

	&#x2F;&#x2F;创建数据
	Teacher t1, t2, t3;
	t1.age &#x3D; 10;
	t2.age &#x3D; 20;
	t3.age &#x3D; 30;
	strcpy(t1.name, &quot;aaa&quot;);
	strcpy(t2.name, &quot;bbb&quot;);
	strcpy(t3.name, &quot;ccc&quot;);

	&#x2F;&#x2F;向链表中插入数据
	InsertLinkList(list, 0, (ListNode*)&amp;t1);
	InsertLinkList(list, 0, (ListNode*)&amp;t2);
	InsertLinkList(list, 0, (ListNode*)&amp;t3);
	&#x2F;&#x2F;打印链表内容
	PrintLinkList(list, PrintTeacher);
	&#x2F;&#x2F;删除位置1的结点
	DeleteLinkList(list,2);
	&#x2F;&#x2F;打印链表内容
	PrintLinkList(list, PrintTeacher);
	&#x2F;&#x2F;获得位置1的结点
	Teacher* node &#x3D; (Teacher*)GetNodeLinkList(list, 1);
	printf(&quot;位置1结点为:\n&quot;);
	printf(&quot;Name:%s Age:%d\n&quot;, node-&gt;name, node-&gt;age);

	&#x2F;&#x2F;销毁链表
	DestroyLinkList(list);
&#125;
int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-4循环链表"><a href="#2-4循环链表" class="headerlink" title="2.4循环链表"></a><strong>2.4循环链表</strong></h3><h4 id="2-4-1循环链表基本概念"><a href="#2-4-1循环链表基本概念" class="headerlink" title="2.4.1循环链表基本概念"></a><strong>2.4.1循环链表基本概念</strong></h4><ul>
<li>链表中最后一个结点的指针域指向头结点，整个链表形成一个环。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CEE.tmp.jpg" alt="img"> </p>
<h4 id="2-4-2循环链表设计与实现"><a href="#2-4-2循环链表设计与实现" class="headerlink" title="2.4.2循环链表设计与实现"></a><strong>2.4.2循环链表设计与实现</strong></h4><p><strong>插入元素分析</strong></p>
<ul>
<li>普通插入元素（和单链表是一样的）</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CEF.tmp.jpg" alt="img"> </p>
<ul>
<li>尾插法（和单链表是一样的，单链表的写法支持尾插法</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CF0.tmp.jpg" alt="img"> </p>
<p><strong>分析：最后一个结点的next指针指向新添加的结点，新结点的next指向第一个结点。</strong></p>
<ul>
<li>头插法</li>
</ul>
<p><strong>分析：</strong></p>
<p><strong>新节点指向当前的第一个结点</strong></p>
<p><strong>尾结点指向新节点</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8CF1.tmp.jpg" alt="img"> </p>
<ul>
<li> 第一次插入结点</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8CF2.tmp.jpg" alt="img"> </p>
<p><strong>尾节点指针指向第一个数据节点（即自己指向自己）</strong></p>
<ul>
<li><strong>删除结点分析</strong></li>
</ul>
<ul>
<li>删除普通结点</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D02.tmp.jpg" alt="img"> </p>
<ul>
<li>删除头结点</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D03.tmp.jpg" alt="img"> </p>
<p>更新head结点，并且尾结点重新连接新的头结点</p>
<h4 id="2-4-3循环链表案例"><a href="#2-4-3循环链表案例" class="headerlink" title="2.4.3循环链表案例"></a><strong>2.4.3循环链表案例</strong></h4><ul>
<li>头文件CircleLinkList.h</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef CIRCLELINKLIST_H
#define CIRCLELINKLIST_H

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

typedef void(*CIRCLEPRINT)(void*);
#define CIRCLE_TRUE 1
#define CIRCLE_FALSE 0

&#x2F;&#x2F;循环链表结点
typedef struct _CircleLinkNode&#123;

	void* data;
	struct _CircleLinkNode* next;

&#125;CircleLinkNode;

&#x2F;&#x2F;链表
typedef struct _DoubleLinkList&#123;

	CircleLinkNode* head; &#x2F;&#x2F;头结点
	CircleLinkNode* rear; &#x2F;&#x2F;尾节点
	int length;

&#125;CircleLinkList;

&#x2F;&#x2F;循环链表初始化
CircleLinkNode* CircleLinkList_Init();
&#x2F;&#x2F;循环链表插入数据
void CircleLinkList_Insert(CircleLinkList* dlist, int pos, void* data);
&#x2F;&#x2F;循环链表删除数据
void CircleLinkList_Delete(CircleLinkList* dlist, int pos);
&#x2F;&#x2F;销毁链表
void CircleLinkList_Destroy(CircleLinkList* dlist);
&#x2F;&#x2F;打印链表
void CircleLinkList_Print(CircleLinkList* dlist, CIRCLEPRINT print);
&#x2F;&#x2F;获得链表长度
int CircleLinkList_Length(CircleLinkList* dlist);
&#x2F;&#x2F;判断链表是否为空
int CircleLinkList_Length(CircleLinkList* dlist);
&#x2F;&#x2F;清空链表
void CircleLinkList_Clear(CircleLinkList* dlist);

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C文件CircleLinkList.c</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;CircleLinkList.h&quot;

&#x2F;&#x2F;循环链表初始化
CircleLinkNode* CircleLinkList_Init()&#123;
	
	&#x2F;&#x2F;链表结构体分配内存
	CircleLinkList* dlist &#x3D; (CircleLinkList*)malloc(sizeof(CircleLinkList));
	if (dlist &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;
	&#x2F;&#x2F;创建头结点 创建头结点 是为了空链表和非空链表处理一致
	CircleLinkNode* head &#x3D; (CircleLinkNode*)malloc(sizeof(CircleLinkNode));
	if (head &#x3D;&#x3D; NULL)&#123;
		if (dlist !&#x3D; NULL)&#123;
			free(dlist);
		&#125;
		return NULL;
	&#125;
	head-&gt;data &#x3D; NULL;
	head-&gt;next &#x3D; NULL;
	&#x2F;&#x2F;初始化链表
	dlist-&gt;head &#x3D; head;
	dlist-&gt;rear &#x3D; head;
	dlist-&gt;length &#x3D; 0;

	return dlist;

&#125;
&#x2F;&#x2F;循环链表插入数据
void CircleLinkList_Insert(CircleLinkList* dlist, int pos, void* data)&#123;

	if (dlist &#x3D;&#x3D; NULL || data &#x3D;&#x3D; NULL || pos &lt; 0)&#123;
		return;
	&#125;

	if (pos &gt; dlist-&gt;length)&#123;
		pos &#x3D; dlist-&gt;length;
	&#125;

	&#x2F;&#x2F;辅助指针
	CircleLinkNode* pCurrent &#x3D; dlist-&gt;head;
	for (int i &#x3D; 0; i &lt; pos;i++)&#123;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;

	&#x2F;&#x2F;创建新节点
	CircleLinkNode* newnode &#x3D; (CircleLinkNode*)malloc(sizeof(CircleLinkNode));
	if (newnode &#x3D;&#x3D; NULL)&#123;
		return;
	&#125;
	newnode-&gt;data &#x3D; data;
	newnode-&gt;next &#x3D; NULL;

	&#x2F;&#x2F;将新结点插入到链表中
	newnode-&gt;next &#x3D; pCurrent-&gt;next;
	pCurrent-&gt;next &#x3D; newnode;

	&#x2F;&#x2F;判断是否在尾部插入结点
	if (pCurrent &#x3D;&#x3D; dlist-&gt;rear)&#123;
		dlist-&gt;rear &#x3D; newnode;
		dlist-&gt;rear-&gt;next &#x3D; dlist-&gt;head;
	&#125;
	
	dlist-&gt;length++;
&#125;
&#x2F;&#x2F;循环链表删除数据
void CircleLinkList_Delete(CircleLinkList* dlist, int pos)&#123;

	if (dlist &#x3D;&#x3D; NULL || pos &lt; 0)&#123;
		return;
	&#125;

	if (pos &gt;&#x3D; dlist-&gt;length)&#123;
		return;
	&#125;

	&#x2F;&#x2F;赋值指针
	CircleLinkNode* pCurrent &#x3D; dlist-&gt;head;
	for (int i &#x3D; 0; i &lt; pos;i++)&#123;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
	&#x2F;&#x2F;缓存被删除结点
	CircleLinkNode* pDel &#x3D; pCurrent-&gt;next;
	&#x2F;&#x2F;重新建立前后结点关系
	pCurrent-&gt;next &#x3D; pDel-&gt;next;
	&#x2F;&#x2F;释放被删除结点内存
	free(pDel);

	&#x2F;&#x2F;链表结点数量减1
	dlist-&gt;length--;

&#125;
&#x2F;&#x2F;打印链表
void CircleLinkList_Print(CircleLinkList* dlist, CIRCLEPRINT print)&#123;
	
	CircleLinkNode* pCurrent &#x3D; dlist-&gt;head-&gt;next;
	while (pCurrent !&#x3D; dlist-&gt;head)&#123;
		print(pCurrent-&gt;data);
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
&#125;
&#x2F;&#x2F;销毁链表
void CircleLinkList_Destroy(CircleLinkList* dlist)&#123;
	
	CircleLinkNode* pCurrent &#x3D; dlist-&gt;head;
	while (pCurrent!&#x3D;dlist-&gt;head)&#123;
		&#x2F;&#x2F;缓存被删除结点的下一个结点
		CircleLinkNode* pNext &#x3D; pCurrent-&gt;next;
		free(pCurrent);
		pCurrent &#x3D; pNext;
	&#125;

	free(dlist);
&#125;

&#x2F;&#x2F;获得链表长度
int CircleLinkList_Length(CircleLinkList* dlist)&#123;
	if (dlist &#x3D;&#x3D; NULL)&#123;
		return -1;
	&#125;
	return dlist-&gt;length;
&#125;
&#x2F;&#x2F;判断链表是否为空
int CircleLinkList_Length(CircleLinkList* dlist)&#123;
	if (dlist-&gt;length &#x3D;&#x3D; 0)&#123;
		return CIRCLE_TRUE;
	&#125;
	return CIRCLE_FALSE;
&#125;
&#x2F;&#x2F;清空链表
void CircleLinkList_Clear(CircleLinkList* dlist)&#123;

	CircleLinkNode* pCurrent &#x3D; dlist-&gt;head-&gt;next;
	while (pCurrent !&#x3D; dlist-&gt;head)&#123;
		CircleLinkNode* pNext &#x3D; pCurrent-&gt;next;
		free(pCurrent);
		pCurrent &#x3D; pNext;
	&#125;

	dlist-&gt;head-&gt;next &#x3D; NULL;
	dlist-&gt;rear &#x3D; dlist-&gt;head;
	dlist-&gt;length &#x3D; 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#include&quot;CircleLinkList.h&quot;

typedef struct _Teacher&#123;
	int age;
	double salary;
&#125;Teacher;

&#x2F;&#x2F;打印回调函数
void ShowLinkList(void* data)&#123;
	Teacher* t &#x3D; (Teacher*)data;
	printf(&quot;age:%d salay:%f \n&quot;, t-&gt;age, t-&gt;salary);
&#125;

void test01()&#123;
	
	&#x2F;&#x2F;创建循环链表
	CircleLinkList* clist &#x3D;  CircleLinkList_Init();
	&#x2F;&#x2F;创建测试数据
	Teacher t1 &#x3D; &#123; 10, 200.0 &#125;;
	Teacher t2 &#x3D; &#123; 20, 300.0 &#125;;
	Teacher t3 &#x3D; &#123; 30, 400.0 &#125;;
	&#x2F;&#x2F;向循环链表中插入数据
	CircleLinkList_Insert(clist, 0, &amp;t1);
	CircleLinkList_Insert(clist, 0, &amp;t2);
	CircleLinkList_Insert(clist, 0, &amp;t3);
	CircleLinkList_Insert(clist, 0, &amp;t2);
	CircleLinkList_Insert(clist, 0, &amp;t3);
	&#x2F;&#x2F;打印链表
	CircleLinkList_Print(clist, ShowLinkList);
	&#x2F;&#x2F;删除链表结点
	CircleLinkList_Delete(clist,3);
	&#x2F;&#x2F;打印链表
	printf(&quot;-------------------\n&quot;);
	CircleLinkList_Print(clist, ShowLinkList);
	&#x2F;&#x2F;销毁链表
	CircleLinkList_Destroy(clist);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-4-4循环链表应用-约瑟夫问题"><a href="#2-4-4循环链表应用-约瑟夫问题" class="headerlink" title="2.4.4循环链表应用(约瑟夫问题)"></a><strong>2.4.4循环链表应用(约瑟夫问题)</strong></h4><ul>
<li>约瑟夫问题-循环链表典型应用</li>
</ul>
<p><strong>例题：</strong>n 个人围成一个圆圈，首先第 1 个人从 1 开始一个人一个人顺时针报数，报到第 m 个人，令其出列。然后再从下一 个人开始从 1 顺时针报数，报到第 m 个人，再令其出列，…，如此下去，求出列顺序。</p>
<p><strong>假设：</strong> m = 8，n=3</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8D14.tmp.jpg" alt="img"></p>
<p><strong>实现代码(通过我们自己编写的循环链表库):</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#include&quot;CircleLinkList.h&quot;

typedef struct _Teacher&#123;
	int age;
	double salary;
&#125;Teacher;

&#x2F;&#x2F;打印回调函数
void ShowLinkList(void* data)&#123;
	
	Teacher* t &#x3D; (Teacher*)data;
	printf(&quot;age:%d salay:%f \n&quot;, t-&gt;age, t-&gt;salary);

&#125;

void ShowData(void* data)&#123;
	printf(&quot;%d &quot;,(int)data);
&#125;

&#x2F;&#x2F;约瑟夫问题
void test02()&#123;

	&#x2F;&#x2F;m表示8个人 n表示第几个出列
	int m &#x3D; 8;
	int n &#x3D; 3;
	&#x2F;&#x2F;创建循环链表
	CircleLinkList* clist &#x3D; CircleLinkList_Init();
	for (int i &#x3D; 1; i &lt;&#x3D; m; i ++)&#123;
		CircleLinkList_Insert(clist,i,i);
	&#125;
	&#x2F;&#x2F;打印循环链表
	CircleLinkList_Print(clist, ShowData);
	printf(&quot;\n&quot;);
	CircleLinkNode* pCurrent &#x3D; clist-&gt;head;
	int index &#x3D; 0;
	while (pCurrent)&#123;
		if (index &#x3D;&#x3D; n)&#123;
			index &#x3D; 1;
			printf(&quot;%d &quot;,(int)pCurrent-&gt;data);
			&#x2F;&#x2F;缓存删除结点的下一个结点
			CircleLinkNode* pNext &#x3D; pCurrent-&gt;next;
			if (pNext &#x3D;&#x3D; clist-&gt;head)&#123;
				pNext &#x3D; pNext-&gt;next;
			&#125;
			CircleLinkList_DeleteByValue(clist, pCurrent-&gt;data);
			pCurrent &#x3D; pNext;
			if (CircleLinkList_Length(clist) &#x3D;&#x3D; 1)&#123;
				printf(&quot;%d &quot;, (int)pCurrent-&gt;data);
				break;
			&#125;
		&#125;

		pCurrent &#x3D; pCurrent-&gt;next;
		if (pCurrent &#x3D;&#x3D; clist-&gt;head)&#123;
			pCurrent &#x3D; pCurrent-&gt;next;
		&#125;
		index++;
	&#125;

	&#x2F;&#x2F;销毁链表
	CircleLinkList_Destroy(clist);
&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-4-5优缺点分析"><a href="#2-4-5优缺点分析" class="headerlink" title="2.4.5优缺点分析"></a><strong>2.4.5优缺点分析</strong></h4><ul>
<li>优点<ul>
<li>功能增强了（循环链表只是在单链表的基础上做了一个加强）</li>
<li>循环链表可以完全取代单链表的使用</li>
<li>循环链表的Next和Current操作可以高效的遍历链表中的所有元素</li>
</ul>
</li>
<li>缺点<ul>
<li>代码复杂度提高了（成也萧何败萧何）</li>
</ul>
</li>
</ul>
<h3 id="2-5双向链表"><a href="#2-5双向链表" class="headerlink" title="2.5双向链表"></a><strong>2.5双向链表</strong></h3><h4 id="2-5-1双向链表基本概念"><a href="#2-5-1双向链表基本概念" class="headerlink" title="2.5.1双向链表基本概念"></a><strong>2.5.1双向链表基本概念</strong></h4><ul>
<li><p><strong>请思考</strong>： 为什么<strong>需要</strong>双向链表？</p>
<ul>
<li><p>单链表的结点都只有一个指向下一个结点的指针</p>
</li>
<li><p>单链表的数据元素无法直接访问其前驱元素</p>
</li>
<li><p> <strong>逆序访问单链表</strong>中的元素是极其<strong>耗时</strong>的操作！（如图）</p>
</li>
</ul>
</li>
<li><p> 双向链表的定义</p>
</li>
<li><p>在单链表的结点中增加一个指向其前驱的pre指针。</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D15.tmp.jpg" alt="img"> </p>
<h4 id="2-5-2双向链表设计与实现"><a href="#2-5-2双向链表设计与实现" class="headerlink" title="2.5.2双向链表设计与实现"></a><strong>2.5.2双向链表设计与实现</strong></h4><ul>
<li> 插入操作</li>
<li>在普通位置插入节点</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D16.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">current-&gt;next &#x3D; node;
node-&gt;next &#x3D; next;
next-&gt;pre &#x3D; node;
node-&gt;pre &#x3D; current;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> <strong>在空链表中插入节点</strong></li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D26.tmp.jpg" alt="img"> </p>
<ul>
<li><p><strong>插入操作异常处理</strong></p>
<ul>
<li><strong>在空链表中插入新的元素</strong></li>
<li><strong>空节点（NULL）没有前驱指针；</strong></li>
<li> <strong>新节点的前驱指针，需要指向NULL；</strong></li>
</ul>
</li>
<li><p>删除操作</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D27.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">current-&gt;next &#x3D; next;
next-&gt;pre &#x3D; current;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li> <strong>删除操作异常处理：当双向链表仅有一个节点的时候</strong></li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D28.tmp.jpg" alt="img"> </p>
<p><strong>如果辅助指针变量pNext == NULL，那么pNext是没有前驱操作的。空指针既没有前驱也没有后继。</strong></p>
<h4 id="2-5-3双向链表案例"><a href="#2-5-3双向链表案例" class="headerlink" title="2.5.3双向链表案例"></a><strong>2.5.3双向链表案例</strong></h4><ul>
<li>DoubleLinkList.h</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">v#ifndef DOUBLELINKLIST_H
#define DOUBLELINKLIST_H

#define DOUBLE_FALSE 0
#define DOUBLE_TRUE 1

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

&#x2F;&#x2F;链表结点
typedef struct _DOUBLELISTNODE&#123;
	void* data;
	struct _DOUBLELISTNODE* next;
	struct _DOUBLELISTNODE* prev;
&#125;DoubleListNode;

&#x2F;&#x2F;头结点
typedef struct _DOUBLELINKLIST&#123;
	DoubleListNode* head; &#x2F;&#x2F;首结点
	DoubleListNode* rear; &#x2F;&#x2F;尾结点
	int length; &#x2F;&#x2F;链表长度
&#125;DoubleLinkList;

&#x2F;&#x2F;打印回调函数
typedef void(*PrintDoubleLinkListNode)(DoubleListNode*);

&#x2F;&#x2F;双向链表初始化
DoubleLinkList* InitDoubleLinkList();
&#x2F;&#x2F;销毁双向链表
void DestroyDoubleLinkList(DoubleLinkList* dlist);
&#x2F;&#x2F;向链表中插入结点
int InsertDoubleLinkList(DoubleLinkList* dlist, int pos, void* data);
&#x2F;&#x2F;打印链表
void PrintDoubleListNode(DoubleLinkList* dlist, PrintDoubleLinkListNode* print,int IsReverse);
&#x2F;&#x2F;获得链表长度
int GetLengthDoubleLinkList(DoubleLinkList* dlist);
&#x2F;&#x2F;判断链表是否为空
int IsEmptyDoubleLinkList(DoubleLinkList* dlist);

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>DoubleLinkList.c</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;DoubleLinkList.h&quot;


&#x2F;&#x2F;双向链表初始化
DoubleLinkList* InitDoubleLinkList()&#123;

	DoubleLinkList* dlist &#x3D; (DoubleLinkList*)malloc(sizeof(DoubleLinkList));
	if (dlist &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;

	dlist-&gt;head &#x3D; NULL;
	dlist-&gt;rear &#x3D; NULL;
	dlist-&gt;length &#x3D; 0;

	return dlist;
&#125;
&#x2F;&#x2F;销毁双向链表
void DestroyDoubleLinkList(DoubleLinkList* dlist)&#123;

&#125;
&#x2F;&#x2F;向链表中插入结点
int InsertDoubleLinkList(DoubleLinkList* dlist, int pos, void* data)&#123;

	&#x2F;&#x2F;创建新的结点
	DoubleListNode* newnode &#x3D; (DoubleListNode*)malloc(sizeof(DoubleListNode));
	newnode-&gt;data &#x3D; data;
	newnode-&gt;next &#x3D; NULL;
	newnode-&gt;prev &#x3D; NULL;

	&#x2F;&#x2F;第一次插入
	if (dlist-&gt;head &#x3D;&#x3D; NULL &amp;&amp; dlist-&gt;rear &#x3D;&#x3D; NULL)&#123;
		dlist-&gt;head &#x3D; newnode;
		dlist-&gt;rear &#x3D; newnode;

		&#x2F;&#x2F;初始化head结点前驱和后继结点
		dlist-&gt;head-&gt;next &#x3D; NULL;
		dlist-&gt;head-&gt;prev &#x3D; NULL;
		&#x2F;&#x2F;初始化rear结点的前驱和后继结点
		dlist-&gt;rear-&gt;next &#x3D; NULL;
		dlist-&gt;rear-&gt;prev &#x3D; NULL;

		dlist-&gt;length++;
		return 0;
	&#125;

	&#x2F;&#x2F;头插法
	if (pos &#x3D;&#x3D; 0)&#123;
		newnode-&gt;prev &#x3D; NULL;
		newnode-&gt;next &#x3D; dlist-&gt;head;

		dlist-&gt;head-&gt;prev &#x3D; newnode;
		dlist-&gt;head &#x3D; newnode;

		dlist-&gt;length++;
		return 0;
	&#125;

	&#x2F;&#x2F;尾差法
	if (pos &gt;&#x3D; dlist-&gt;length)&#123;
		
		dlist-&gt;rear-&gt;next &#x3D; newnode;
		newnode-&gt;prev &#x3D; dlist-&gt;rear;
		newnode-&gt;next &#x3D; NULL;
		dlist-&gt;rear &#x3D; newnode;
		dlist-&gt;length++;
		return 0;
	&#125;
	
	&#x2F;&#x2F;其他插入
	DoubleListNode* pPrev &#x3D; dlist-&gt;head;
	DoubleListNode* pCurrent &#x3D; pPrev-&gt;next;
	for (int i &#x3D; 1; i &lt; pos;i++)&#123;
		pPrev &#x3D; pCurrent;
		pCurrent &#x3D; pPrev-&gt;next;
	&#125;

	newnode-&gt;next &#x3D; pCurrent;
	pCurrent-&gt;prev &#x3D; newnode;

	pPrev-&gt;next &#x3D; newnode;
	newnode-&gt;prev &#x3D; pPrev;

	dlist-&gt;length++;

	return 0;
&#125;
&#x2F;&#x2F;打印链表
void PrintDoubleListNode(DoubleLinkList* dlist, PrintDoubleLinkListNode print, int IsReverse)&#123;

	DoubleListNode* pCurrent &#x3D; NULL;
	&#x2F;&#x2F;true表示 逆序遍历
	if (IsReverse &#x3D;&#x3D; DOUBLE_TRUE)&#123;
		pCurrent &#x3D; dlist-&gt;rear;
		while (pCurrent !&#x3D; NULL)&#123;
			print(pCurrent);
			pCurrent &#x3D; pCurrent-&gt;prev;
		&#125;
	&#125;
	else&#123;
		pCurrent &#x3D; dlist-&gt;head;
		while (pCurrent !&#x3D; NULL)&#123;
			print(pCurrent);
			pCurrent &#x3D; pCurrent-&gt;next;
		&#125;
	&#125;
	printf(&quot;----------------------------\n&quot;);
&#125;
&#x2F;&#x2F;获得链表长度
int GetLengthDoubleLinkList(DoubleLinkList* dlist)&#123;
	return dlist-&gt;length;
&#125;
&#x2F;&#x2F;判断链表是否为空
int IsEmptyDoubleLinkList(DoubleLinkList* dlist)&#123;
	return DOUBLE_TRUE;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;DoubleLinkList.h&quot;


typedef struct _TEAHCER&#123;
	char name[64];
	int age;
&#125;Teacher;

void PrintNode(DoubleListNode* node)&#123;
	Teacher* teacher &#x3D; (Teacher*)(node-&gt;data);
	printf(&quot;Name:%s Age:%d\n&quot;,teacher-&gt;name,teacher-&gt;age);
&#125;

&#x2F;&#x2F;测试双向链表函数
void test01()&#123;

	&#x2F;&#x2F;创建双向链表
	DoubleLinkList* dlist &#x3D; InitDoubleLinkList();
	&#x2F;&#x2F;创建数据
	Teacher t1, t2, t3;
	t1.age &#x3D; 10;
	t2.age &#x3D; 20;
	t3.age &#x3D; 30;
	strcpy(t1.name, &quot;aaa&quot;);
	strcpy(t2.name, &quot;bbb&quot;);
	strcpy(t3.name, &quot;ccc&quot;);
	&#x2F;&#x2F;插入数据
	InsertDoubleLinkList(dlist, 0, &amp;t1);
	InsertDoubleLinkList(dlist, 10, &amp;t2);
	InsertDoubleLinkList(dlist, 0, &amp;t3);
	&#x2F;&#x2F;打印数据
	printf(&quot;----------正向遍历----------\n&quot;);
	PrintDoubleListNode(dlist, PrintNode, DOUBLE_FALSE);
	printf(&quot;----------逆序遍历----------\n&quot;);
	PrintDoubleListNode(dlist, PrintNode,DOUBLE_TRUE);

&#125;

int main()&#123;
	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5-4优点和缺点"><a href="#2-5-4优点和缺点" class="headerlink" title="2.5.4优点和缺点"></a><strong>2.5.4优点和缺点</strong></h4><ul>
<li><p>优点：</p>
</li>
<li><p>双向链表在单链表的基础上增加了指向前驱的指针</p>
</li>
<li><p>功能上双向链表可以完全取代单链表的使用</p>
</li>
<li><p>双向链表的Next，Pre和Current操作可以高效的遍历链表中的所有元素</p>
</li>
<li><p>缺点:</p>
</li>
<li><p>代码复杂</p>
</li>
</ul>
<h3 id="3-受限线性表"><a href="#3-受限线性表" class="headerlink" title="3.受限线性表"></a><strong>3.受限线性表</strong></h3><h3 id="3-1栈-Stack"><a href="#3-1栈-Stack" class="headerlink" title="3.1栈(Stack)"></a><strong>3.1栈(Stack)</strong></h3><h4 id="3-1-1栈的基本概念"><a href="#3-1-1栈的基本概念" class="headerlink" title="3.1.1栈的基本概念"></a><strong>3.1.1栈的基本概念</strong></h4><ul>
<li>概念：</li>
</ul>
<ul>
<li>首先它是一个线性表，也就是说，栈元素具有线性关系，即前驱后继关系。只不过<strong>它是一种特殊的线性表</strong>而已。定义中说是在线性表的表尾进行插入和删除操作，这里表尾是指栈顶，而不是栈底。</li>
</ul>
<ul>
<li>特性</li>
</ul>
<ul>
<li><p><strong>它的特殊之处在于限制了这个线性表的插入和删除的位置，它始终只在栈顶进行。这也就使得：栈底是固定的，最先进栈的只能在栈底。</strong></p>
</li>
<li><p>操作</p>
</li>
</ul>
<ul>
<li>栈的插入操作，叫做进栈，也成压栈。类似子弹入弹夹（如下图所示）</li>
</ul>
<ul>
<li>栈的删除操作，叫做出栈，也有的叫做弾栈，退栈。如同弹夹中的子弹出夹（如下图所示）</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D39.tmp.jpg" alt="img"> </p>
<ul>
<li>创建栈</li>
<li>销毁栈</li>
<li>清空栈</li>
<li>进栈</li>
<li>出栈</li>
<li>获取栈顶元素</li>
<li>获取栈的大小 </li>
</ul>
<p>栈的抽象数据类型</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ADT 栈（stack）
Data
	通线性表。元素具有相同的类型，相邻的元素具有前驱和后继关系。
Operation
	&#x2F;&#x2F; 初始化，建立一个空栈S
	InitStack(*S);
	&#x2F;&#x2F; 若栈存在，则销毁它
	DestroyStack(*S);
	&#x2F;&#x2F; 将栈清空
	ClearStack(*S);
	&#x2F;&#x2F; 若栈为空则返回true，否则返回false
	StackEmpty(S);
	&#x2F;&#x2F; 若栈存在且非空，用e返回S的栈顶元素
	GetTop(S，*e);
	&#x2F;&#x2F; 若栈S存在，插入新元素e到栈S中并成为其栈顶元素
	Push(*S，e);
	&#x2F;&#x2F; 删除栈S中的栈顶元素，并用e返回其值
	Pop（*S, *e）;
	&#x2F;&#x2F; 返回栈S的元素个数
	StackLength(S);
endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/wps8D4A.tmp.jpg" alt="img"> </p>
<h4 id="3-1-2栈的顺序存储"><a href="#3-1-2栈的顺序存储" class="headerlink" title="3.1.2栈的顺序存储"></a><strong>3.1.2栈的顺序存储</strong></h4><p> <strong>基本概念</strong></p>
<ul>
<li>栈的顺序存储结构简称顺序栈，它是运算受限制的顺序表。顺序栈的存储结构是：<strong>利用一组地址连续的的存储单元依次存放自栈底到栈顶的数据元素</strong>，同时附设指针top只是栈顶元素在顺序表中的位置。</li>
</ul>
<p> <strong>设计与实现</strong></p>
<ul>
<li><p><strong>因为栈是一种特殊的线性表，所以栈的顺序存储可以通过顺序线性表来实现。</strong></p>
</li>
<li><p>SqStack.h</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef SQSTACK_H
#define SQSTACK_H

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

#define STACK_FALSE 0
#define STACK_TRUE 1

#define MAX 256
&#x2F;&#x2F;栈结构体
typedef struct _SQSTACK&#123;
	void* data[MAX];
	int length;
&#125;SqStack;

&#x2F;&#x2F;初始化顺序栈
SqStack* InitSqStack();
&#x2F;&#x2F;销毁栈
void DestroySqStack(SqStack* stack);
&#x2F;&#x2F;弹出栈顶元素
void PopSqStack(SqStack* stack);
&#x2F;&#x2F;获得栈顶元素
void* TopSqStack(SqStack* stack);
&#x2F;&#x2F;获得栈中元素个数
int GetLengthSqStack(SqStack* stack);
&#x2F;&#x2F;栈中是否为空
int IsEmptySqStack(SqStack* stack);
&#x2F;&#x2F;向栈中添加元素
int PushSqStack(SqStack* stack,void* data);

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>SqStack.c</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;SqStack.h&quot;

&#x2F;&#x2F;初始化顺序栈
SqStack* InitSqStack()&#123;
	SqStack* stack &#x3D; (SqStack*)malloc(sizeof(SqStack));
	if (stack &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;
	&#x2F;&#x2F;初始化
	for (int i &#x3D; 0; i &lt; MAX; i++)&#123;
		stack-&gt;data[i] &#x3D; 0;
	&#125;
	stack-&gt;length &#x3D; 0;

	return stack;
&#125;
&#x2F;&#x2F;销毁栈
void DestroySqStack(SqStack* stack)&#123;
	if (NULL !&#x3D; stack)&#123;
		free(stack);
		stack &#x3D; NULL;
	&#125;
&#125;
&#x2F;&#x2F;弹出栈顶元素
void PopSqStack(SqStack* stack)&#123;
	stack-&gt;data[stack-&gt;length - 1] &#x3D; 0;
	stack-&gt;length--;
&#125;
&#x2F;&#x2F;获得栈顶元素
void* TopSqStack(SqStack* stack)&#123;
	return stack-&gt;data[stack-&gt;length - 1];
&#125;
&#x2F;&#x2F;获得栈中元素个数
int GetLengthSqStack(SqStack* stack)&#123;
	return stack-&gt;length;
&#125;
&#x2F;&#x2F;栈中是否为空
int IsEmptySqStack(SqStack* stack)&#123;
	if (stack-&gt;length &#x3D;&#x3D; 0)&#123;
		return STACK_TRUE;
	&#125;
	return STACK_FALSE;
&#125;
&#x2F;&#x2F;向栈中添加元素
int PushSqStack(SqStack* stack, void* data)&#123;

	if (stack-&gt;length &gt; MAX)&#123;
		return -1;
	&#125;
	stack-&gt;data[stack-&gt;length] &#x3D; data;
	stack-&gt;length++;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;SqStack.h&quot;

typedef struct _TEAHCER&#123;
	char name[64];
	int age;
&#125;Teacher;

void test01()&#123;

	&#x2F;&#x2F;创建空栈
	SqStack* stack &#x3D; InitSqStack();
	&#x2F;&#x2F;创建数据
	Teacher t1, t2, t3;
	t1.age &#x3D; 10;
	t2.age &#x3D; 20;
	t3.age &#x3D; 30;
	strcpy(t1.name, &quot;aaa&quot;);
	strcpy(t2.name, &quot;bbb&quot;);
	strcpy(t3.name, &quot;ccc&quot;);
	&#x2F;&#x2F;向栈中添加元素
	PushSqStack(stack, &amp;t1);
	PushSqStack(stack, &amp;t3);
	PushSqStack(stack, &amp;t2);
	&#x2F;&#x2F;打印栈中元素个数
	printf(&quot;栈元素个数:%d\n&quot;, GetLengthSqStack(stack));
	&#x2F;&#x2F;遍历栈中元素
	while (GetLengthSqStack(stack) &gt; 0)&#123;
		Teacher* teacher &#x3D;  (Teacher*)TopSqStack(stack);
		printf(&quot;Name:%s Age:%d\n&quot;,teacher-&gt;name,teacher-&gt;age);
		PopSqStack(stack);
	&#125;
	&#x2F;&#x2F;打印栈中元素个数
	printf(&quot;栈元素个数:%d\n&quot;,GetLengthSqStack(stack));
	&#x2F;&#x2F;销毁栈
	DestroySqStack(stack);

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-1-3栈的链式存储"><a href="#3-1-3栈的链式存储" class="headerlink" title="3.1.3栈的链式存储"></a><strong>3.1.3栈的链式存储</strong></h4><p> <strong>基本概念</strong></p>
<ul>
<li>栈的链式存储结构简称链栈。</li>
</ul>
<p><strong>思考如下问题</strong>：</p>
<ul>
<li>栈只是栈顶来做插入和删除操作，栈顶放在链表的头部还是尾部呢？</li>
</ul>
<ul>
<li>由于单链表有头指针，而栈顶指针也是必须的，那干嘛不让他俩合二为一呢，所以比较好的办法就是把栈顶放在单链表的头部。另外都已经有了栈顶在头部了，单链表中比较常用的头结点也就失去了意义，通常对于链栈来说，是不需要头结点的。</li>
</ul>
<p> <strong>设计与实现</strong></p>
<ul>
<li>链栈是一种特殊的线性表，链栈可以通过链式线性表来实现。</li>
</ul>
<ul>
<li>LinkStack.h</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef LINKSTACK_H
#define LINKSTACK_H

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

#define STACK_FALSE 0
#define STACK_TRUE 1

&#x2F;&#x2F;链栈结点
typedef struct _LINKNODE&#123;
	void* data;
	struct _LINKNODE* next;
&#125;LinkNode;
&#x2F;&#x2F;头结点
typedef struct _LINKSTACK&#123;
	LinkNode* head;
	int length;
&#125;LinkStack;

&#x2F;&#x2F;初始化链栈
LinkStack* InitLinkStack();
&#x2F;&#x2F;销毁链栈
void DestroyLinkStack(LinkStack* lstack);
&#x2F;&#x2F;获得栈顶元素
void* TopLinkStack(LinkStack* lstack);
&#x2F;&#x2F;弹出栈顶元素
void PopLinkStack(LinkStack* lstack);
&#x2F;&#x2F;获得栈元素个数
int GetLengthLinkStack(LinkStack* lstack);
&#x2F;&#x2F;向栈中加入元素
int PushLinkStack(LinkStack* lstack,void* data);
&#x2F;&#x2F;判断栈是否为空
int IsEmptyLinkStack(LinkStack* lstack);

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>LinkStack.c</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;LinkStack.h&quot;

&#x2F;&#x2F;初始化链栈
LinkStack* InitLinkStack()&#123;

	LinkStack* lstack &#x3D; (LinkStack*)malloc(sizeof(LinkStack));
	if (lstack &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;
	&#x2F;&#x2F;初始化
	lstack-&gt;head &#x3D; NULL;
	lstack-&gt;length &#x3D; 0;

	return lstack;
&#125;
&#x2F;&#x2F;销毁链栈
void DestroyLinkStack(LinkStack* lstack)&#123;
	
	while (!IsEmptyLinkStack(lstack))&#123;
		PopLinkStack(lstack);
	&#125;
	free(lstack);
&#125;
&#x2F;&#x2F;获得栈顶元素
void* TopLinkStack(LinkStack* lstack)&#123;
	return lstack-&gt;head-&gt;data;
&#125;
&#x2F;&#x2F;弹出栈顶元素
void PopLinkStack(LinkStack* lstack)&#123;
	if (lstack-&gt;length &#x3D;&#x3D; 0)&#123;
		return;
	&#125;
	&#x2F;&#x2F;缓存要删除的结点
	LinkNode* pDel &#x3D;  lstack-&gt;head;
	&#x2F;&#x2F;将被删除结点的下一个结点作为head结点
	lstack-&gt;head &#x3D; pDel-&gt;next;
	&#x2F;&#x2F;释放被删除结点内存
	free(pDel);
	&#x2F;&#x2F;结点数量减1
	lstack-&gt;length--;
&#125;
&#x2F;&#x2F;获得栈元素个数
int GetLengthLinkStack(LinkStack* lstack)&#123;
	return lstack-&gt;length;
&#125;
&#x2F;&#x2F;向栈中加入元素
int PushLinkStack(LinkStack* lstack, void* data)&#123;

	&#x2F;&#x2F;创建结点
	LinkNode* newnode &#x3D; (LinkNode*)malloc(sizeof(LinkNode));
	newnode-&gt;data &#x3D; data;
	newnode-&gt;next &#x3D; NULL;

	&#x2F;&#x2F;是否第一次插入元素
	if (lstack-&gt;head &#x3D;&#x3D; NULL)&#123;
		lstack-&gt;head &#x3D; newnode;
		lstack-&gt;length++;
		return 0;
	&#125;

	&#x2F;&#x2F;其他插入情况
	newnode-&gt;next &#x3D; lstack-&gt;head;
	lstack-&gt;head &#x3D; newnode;
	lstack-&gt;length++;

	return 0;
&#125;
&#x2F;&#x2F;判断栈是否为空
int IsEmptyLinkStack(LinkStack* lstack)&#123;
	if (lstack-&gt;length &#x3D;&#x3D; 0)&#123;
		return STACK_TRUE;
	&#125;
	return STACK_FALSE;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;LinkStack.h&quot;

typedef struct _TEAHCER&#123;
	char name[64];
	int age;
&#125;Teacher;

void test01()&#123;
	
	&#x2F;&#x2F;创建链栈
	LinkStack* lstack &#x3D; InitLinkStack();
	&#x2F;&#x2F;创建数据
	Teacher t1, t2, t3;
	t1.age &#x3D; 10;
	t2.age &#x3D; 20;
	t3.age &#x3D; 30;
	strcpy(t1.name, &quot;aaa&quot;);
	strcpy(t2.name, &quot;bbb&quot;);
	strcpy(t3.name, &quot;ccc&quot;);
	&#x2F;&#x2F;向栈中添加元素
	PushLinkStack(lstack, &amp;t1);
	PushLinkStack(lstack, &amp;t3);
	PushLinkStack(lstack, &amp;t2);
	&#x2F;&#x2F;打印链栈数据
	while (!IsEmptyLinkStack(lstack))&#123;
		Teacher* teacher &#x3D; (Teacher*)TopLinkStack(lstack);
		printf(&quot;Name:%s Age:%d\n&quot;,teacher-&gt;name,teacher-&gt;age);
		PopLinkStack(lstack);
	&#125;	
	&#x2F;&#x2F;销毁链表
	DestroyLinkStack(lstack);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-1-4栈的应用-案例"><a href="#3-1-4栈的应用-案例" class="headerlink" title="3.1.4栈的应用(案例)"></a><strong>3.1.4栈的应用(案例)</strong></h4><p><strong>案例1: 就近匹配</strong></p>
<ul>
<li>几乎所有的编译器都具有检测括号是否匹配的能力，那么如何实现编译器中的符号成对检测？如下字符串: </li>
</ul>
<ul>
<li><p>#include &lt;stdio.h&gt; int main() { int a[4] [4]; int (*p)[4]; p = a[0]; return 0;}</p>
</li>
<li><p>算法思路</p>
</li>
<li><p>从第一个字符开始扫描</p>
</li>
<li><p>当遇见普通字符时忽略，</p>
</li>
<li><p>当遇见左符号时压入栈中</p>
</li>
<li><p>当遇见右符号时从栈中弹出栈顶符号，并进行匹配</p>
</li>
<li><p>匹配成功：继续读入下一个字符</p>
</li>
<li><p>匹配失败：立即停止，并报错</p>
</li>
<li><p>结束：</p>
</li>
<li><p>成功: 所有字符扫描完毕，且栈为空</p>
</li>
<li><p>失败：匹配失败或所有字符扫描完毕但栈非空</p>
</li>
<li><p>总结</p>
</li>
</ul>
<p> <strong>当需要检测成对出现但又互不相邻的事物时可以使用栈“后进先出”的特性</strong></p>
<p> <strong>栈非常适合于需要“就近匹配”的场合</strong></p>
<ul>
<li> 案例代码:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;LinkStack.h&quot;

&#x2F;&#x2F;案例一 就近匹配
void test02()&#123;

	char* str &#x3D; &quot;#include &lt;stdio.h&gt; int main() &#123; int a[4][4]; int (*p)[4]; p &#x3D; a[0]; return 0;&#125;&quot;;
	&#x2F;&#x2F;初始化栈
	LinkStack* lstack &#x3D; InitLinkStack();
	&#x2F;&#x2F;匹配括号
	char* pCurrent &#x3D; str;
	while (*pCurrent !&#x3D; &#39;\0&#39;)&#123;
		if (*pCurrent &#x3D;&#x3D; &#39;(&#39;)&#123;
			PushLinkStack(lstack, pCurrent);
		&#125;
		else if (*pCurrent &#x3D;&#x3D; &#39;)&#39;)&#123;
			char* p &#x3D; (char*)TopLinkStack(lstack);
			if (*p &#x3D;&#x3D; &#39;(&#39;)&#123;
				PopLinkStack(lstack);
			&#125;
		&#125;
		pCurrent++;
	&#125;
	if (GetLengthLinkStack(lstack) &gt; 0)&#123;
		printf(&quot;匹配失败!\n&quot;);
	&#125;
	&#x2F;&#x2F;销毁栈
	DestroyLinkStack(lstack);
&#125;

int main()&#123;

	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>案例2：中缀表达式和后缀表达式</strong></p>
<ul>
<li><p>后缀表达式（由波兰科学家在20世纪50年代提出）</p>
</li>
<li><p><strong>将运算符放在数字后面 ===》 符合计算机运算</strong></p>
</li>
<li><p>我们习惯的数学表达式叫做中缀表达式===》符合人类思考习惯</p>
</li>
<li><p>实例</p>
<ul>
<li>5 + 4 =&gt; 5 4 + </li>
<li>1 + 2 * 3 =&gt; 1 2 3 * + </li>
<li>8 + ( 3 – 1 ) * 5 =&gt; 8 3 1 – 5 * +</li>
</ul>
</li>
<li><p>中缀转后缀算法：</p>
</li>
<li><p>遍历中缀表达式中的数字和符号：</p>
<ul>
<li><p>对于数字：直接输出</p>
</li>
<li><p>对于符号：</p>
</li>
<li><p>左括号：进栈 </p>
</li>
<li><p>运算符号：与栈顶符号进行优先级比较</p>
</li>
<li><p>若栈顶符号优先级低：此符号进栈 （默认栈顶若是左括号，左括号优先级最低）</p>
</li>
<li><p>若栈顶符号优先级不低：将栈顶符号弹出并输出，之后进栈</p>
</li>
<li><p>右括号：将栈顶符号弹出并输出，直到匹配左括号</p>
</li>
<li><p>遍历结束：将栈中的所有符号弹出并输出</p>
</li>
</ul>
</li>
<li><p>中缀转后缀伪代码 priority</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">transform(exp)
&#123;
	创建栈S；
	i&#x3D; 0；
	while(exp[i] !&#x3D; ‘\0’)
&#123;
		if(exp[i] 为数字)
		&#123;
			Output（exp[i]）;
		&#125;
		else if(exp[i] 为符号)
		&#123;
			while(exp[i]优先级 &lt;&#x3D; 栈顶符号优先级)
			&#123;
				output（栈顶符号）；
				Pop（S）;
			&#125;
			Push(S, exp[i]);
		&#125;
		else if(exp[i] 为左括号)
		&#123;
			Push(S, exp[i]);
		&#125;
		else if(exp[i] 为右括号)
		&#123;
			while(栈顶符号不为左括号)
			&#123;
				output（栈顶符号）；
				Pop（S）;
			&#125;
			从S中弹出左括号；
		&#125;
		else
		&#123;
			报错，停止循环；
		&#125;
		i++;
&#125;
while(size(S) &gt; 0 &amp;&amp; exp[i] &#x3D;&#x3D; ‘\0’)
&#123;
		output(栈顶符号)；
		Pop（S）;
&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>动手练习</li>
</ul>
<ul>
<li>将我们喜欢的读的中缀表达式转换成计算机喜欢的后缀表达式</li>
<li>中缀表达式: 8 + ( 3 – 1 ) * 5</li>
<li>后缀表达式: 8 3 1 – 5 * +</li>
</ul>
<p> <strong>案例3：计算机如何基于后缀表达式计算</strong></p>
<ul>
<li>思考 </li>
</ul>
<ul>
<li><p>计算机是如何基于后缀表达式计算的？</p>
</li>
<li><p>例如：8 3 1 – 5 * +</p>
</li>
<li><p>计算规则</p>
</li>
<li><p>遍历后缀表达式中的数字和符号</p>
</li>
<li><p>对于数字：进栈</p>
</li>
<li><p>对于符号：</p>
</li>
<li><p>从栈中弹出右操作数</p>
</li>
<li><p>从栈中弹出左操作数</p>
</li>
<li><p>根据符号进行运算</p>
</li>
<li><p>将运算结果压入栈中</p>
</li>
<li><p>遍历结束：栈中的唯一数字为计算结果</p>
</li>
<li><p>代码实现（伪代码） express</p>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">compute(exp)
&#123;
	创建栈；
	int i &#x3D; 0;
	while( exp[i] !&#x3D; ‘\0’)
	&#123;
		if（exp[i]为数字）
		&#123;
			Push（S, exp[i]）;
		&#125;
		else if(exp[i]为符号)
		&#123;
1. 从栈顶弹出右操作数；
2. 从栈中弹出左操作数；
3. 根据符号进行运算；
4. Push（stack， 结果）；
		&#125;
		else
		&#123;
			报错，停止循环；
		&#125;
		i++;
	&#125;
	if( Size(s) &#x3D;&#x3D; 1 &amp;&amp; exp[i] &#x3D;&#x3D; ‘\0’)
	&#123;
		栈中唯一的数字为运算结果；
	&#125;
	返回结果；
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-2队列-Queue"><a href="#3-2队列-Queue" class="headerlink" title="3.2队列(Queue)"></a><strong>3.2队列(Queue)</strong></h3><h4 id="3-2-1队列基本概念"><a href="#3-2-1队列基本概念" class="headerlink" title="3.2.1队列基本概念"></a><strong>3.2.1队列基本概念</strong></h4><ul>
<li>队列是一种特殊的受限制的线性表。 </li>
</ul>
<ul>
<li><p><strong>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</strong></p>
</li>
<li><p>队列是一种先进先出的（First In First Out）的线性表，简称FIFO。允许插入的一端为队尾，允许删除的一端为队头。队列不允许在中间部位进行操作！假设队列是q=（a1，a2，……，an），那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，总是在队列最后。这也比较符合我们通常生活中的习惯，排在第一个的优先出列，最后来的当然排在队伍最后。如下图：</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D4B.tmp.jpg" alt="img"> </p>
<h4 id="3-2-2队列常用操作"><a href="#3-2-2队列常用操作" class="headerlink" title="3.2.2队列常用操作"></a><strong>3.2.2队列常用操作</strong></h4><ul>
<li>创建队列</li>
<li>销毁队列</li>
<li>清空队列</li>
<li>进队列</li>
<li>出队列</li>
<li>获取队头元素</li>
<li>获取队列的长度</li>
</ul>
<p><strong>ADT</strong> 队列（Queue）</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ADT 队列（Queue）
Data
	通线性表。元素具有相同的类型，相邻元素具有前驱后继关系。
Operation
	&#x2F;&#x2F; 初始化操作，建立一个空队列Q
	InitQueue（*Q）；
	&#x2F;&#x2F; 若队列Q存储，则销毁它。
	DestroyQueue(*Q);
	&#x2F;&#x2F; 将队列Q清空
	ClearQueue(*Q);
	&#x2F;&#x2F; 若队列为空则返回true，否则返回false
	QueueEmpty(Q);
	&#x2F;&#x2F; 若队列Q存在且非空，用e返回队列Q的队头元素
	GetHead(Q, *e);
	&#x2F;&#x2F; 若队列Q存在，插入新元素e到队列Q中并成为队尾元素。
	EnQueue(*Q, e);
	&#x2F;&#x2F; 删除队列Q中的队头元素，并用e返回其值
	DeQueue(*Q, *e);
	&#x2F;&#x2F; 返回队列Q的元素个数
	QueueLength(Q);
endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/wps8D5B.tmp.jpg" alt="img"> </p>
<h4 id="3-2-3队列的顺序存储"><a href="#3-2-3队列的顺序存储" class="headerlink" title="3.2.3队列的顺序存储"></a><strong>3.2.3队列的顺序存储</strong></h4><ul>
<li> 基本概念</li>
</ul>
<ul>
<li>​    <strong>队列也是一种特殊的线性表；可以用线性表顺序存储来模拟队列。</strong></li>
</ul>
<ul>
<li>SqQueue.h</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef SQQUEUE_H
#define SQQUEUE_H

#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;

#define MAX 256
#define QUEUE_FALSE 0
#define QUEUE_TRUE 1

&#x2F;&#x2F;队列头结点
typedef struct _SQQUEUE&#123;
	void* data[MAX];
	int length;
&#125;SqQueue;

&#x2F;&#x2F;初始化空队列
SqQueue* InitSqQueue();
&#x2F;&#x2F;销毁队列
void DestroySqQueue(SqQueue* queue);
&#x2F;&#x2F;向队列中插入元素
int PushSqQueue(SqQueue* queue, void* data);
&#x2F;&#x2F;获得队列长度
int GetLengthSqQueue(SqQueue* queue);
&#x2F;&#x2F;获得对头元素
void* FrontSqQueue(SqQueue* queue);
&#x2F;&#x2F;从对头弹出元素
void PopSqQueue(SqQueue* queue);
&#x2F;&#x2F;判断队列是否为空
int IsEmptySqQueue(SqQueue* queue);

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>SqQueue.c</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;SqQueue.h&quot;


&#x2F;&#x2F;初始化空队列
SqQueue* InitSqQueue()&#123;

	SqQueue* queue &#x3D; (SqQueue*)malloc(sizeof(SqQueue));
	if (queue &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;
	&#x2F;&#x2F;初始化
	for (int i &#x3D; 0; i &lt; MAX;i++)&#123;
		queue-&gt;data[i] &#x3D; 0;
	&#125;
	queue-&gt;length &#x3D; 0;

	return queue;
&#125;
&#x2F;&#x2F;销毁队列
void DestroySqQueue(SqQueue* queue)&#123;
	if (queue !&#x3D; NULL)&#123;
		free(queue);
	&#125;
&#125;
&#x2F;&#x2F;向队列中插入元素
int PushSqQueue(SqQueue* queue, void* data)&#123;
	if (queue-&gt;length &gt;&#x3D; MAX)&#123;
		return -1;
	&#125;
	queue-&gt;data[queue-&gt;length] &#x3D; data;
	queue-&gt;length++;
&#125;
&#x2F;&#x2F;获得队列长度
int GetLengthSqQueue(SqQueue* queue)&#123;
	return queue-&gt;length;
&#125;
&#x2F;&#x2F;获得对头元素
void* FrontSqQueue(SqQueue* queue)&#123;
	return queue-&gt;data[0];
&#125;
&#x2F;&#x2F;从对头弹出元素
void PopSqQueue(SqQueue* queue)&#123;
	for (int i &#x3D; 0; i &lt; queue-&gt;length;i++)&#123;
		queue-&gt;data[i] &#x3D; queue-&gt;data[i + 1];
	&#125;
	queue-&gt;length--;
&#125;
&#x2F;&#x2F;判断队列是否为空
int IsEmptySqQueue(SqQueue* queue)&#123;
	if (queue-&gt;length &#x3D;&#x3D; 0)&#123;
		return QUEUE_TRUE;
	&#125;
	return QUEUE_FALSE;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;SqQueue.h&quot;

typedef struct _TEAHCER&#123;
	char name[64];
	int age;
&#125;Teacher;

void test01()&#123;
	
	&#x2F;&#x2F;创建队列
	SqQueue* queue &#x3D; InitSqQueue();
	&#x2F;&#x2F;创建数据
	Teacher t1, t2, t3;
	t1.age &#x3D; 10;
	t2.age &#x3D; 20;
	t3.age &#x3D; 30;
	strcpy(t1.name, &quot;aaa&quot;);
	strcpy(t2.name, &quot;bbb&quot;);
	strcpy(t3.name, &quot;ccc&quot;);
	&#x2F;&#x2F;队列中插入数据
	PushSqQueue(queue, &amp;t3);
	PushSqQueue(queue, &amp;t1);
	PushSqQueue(queue, &amp;t2);
	&#x2F;&#x2F;打印队列数据
	while (!IsEmptySqQueue(queue))&#123;
		Teacher* teacher &#x3D; (Teacher*)FrontSqQueue(queue);
		printf(&quot;Name:%s Age:%d\n&quot;,teacher-&gt;name,teacher-&gt;age);
		PopSqQueue(queue);
	&#125;
	&#x2F;&#x2F;销毁队列
	DestroySqQueue(queue);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-2-4队列的链式存储"><a href="#3-2-4队列的链式存储" class="headerlink" title="3.2.4队列的链式存储"></a><strong>3.2.4队列的链式存储</strong></h4><p> <strong>基本概念</strong></p>
<p><strong>队列也是一种特殊的线性表；可以用线性表链式存储来模拟队列的链式存储。</strong> </p>
<p> <strong>LinkQueue.h</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef LINKQUEUE_H
#define LINKQUEUE_H

#define QUEUE_FALSE 0
#define QUEUE_TRUE 1

#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;

&#x2F;&#x2F;链表队列结点
typedef struct _LINKNODE&#123;
	void* data;
	struct _LINKNODE* next;
&#125;LinkNode;

&#x2F;&#x2F;链式队列头结点
typedef struct _LINKQUEUE&#123;
	LinkNode* head;
	int length;
&#125;LinkQueue;

&#x2F;&#x2F;初始化链式队列
LinkQueue* InitLinkQueue();
&#x2F;&#x2F;销毁链式队列
void DestroyLinkQueue(LinkQueue* lqueue);
&#x2F;&#x2F;向队尾插入结点
int PushLinkQueue(LinkQueue* lqueue,void* data);
&#x2F;&#x2F;返回对头数据
void* FrontLinkQueue(LinkQueue* lqueue);
&#x2F;&#x2F;弹出对头结点
void PopLinkQueue(LinkQueue* lqueue);
&#x2F;&#x2F;返回队列长度
int GetLengthLinkQueue(LinkQueue* lqueue);
&#x2F;&#x2F;判断队列是否为空
int IsEmptyLinkQueue(LinkQueue* lqueue);

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> <strong>LinkQueue.c</strong></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;LinkQueue.h&quot;

&#x2F;&#x2F;初始化链式队列
LinkQueue* InitLinkQueue()&#123;

	LinkQueue* lqueue &#x3D; (LinkQueue*)malloc(sizeof(LinkQueue));
	if (lqueue &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;

	lqueue-&gt;head &#x3D; NULL;
	lqueue-&gt;length &#x3D; 0;

	return lqueue;
&#125;
&#x2F;&#x2F;销毁链式队列
void DestroyLinkQueue(LinkQueue* lqueue)&#123;

	while (!IsEmptyLinkQueue(lqueue))&#123;
		PopLinkQueue(lqueue);
	&#125;
	free(lqueue);
&#125;
&#x2F;&#x2F;向队尾插入结点
int PushLinkQueue(LinkQueue* lqueue, void* data)&#123;

	&#x2F;&#x2F;创建新结点
	LinkNode* newnode &#x3D; (LinkNode*)malloc(sizeof(LinkNode));
	newnode-&gt;data &#x3D; data;
	newnode-&gt;next &#x3D; NULL;

	&#x2F;&#x2F;第一次插入
	if (lqueue-&gt;head &#x3D;&#x3D; NULL)&#123;
		lqueue-&gt;head &#x3D; newnode;
		lqueue-&gt;length++;
		return 0;
	&#125;

	&#x2F;&#x2F;其他插入
	newnode-&gt;next &#x3D; lqueue-&gt;head;
	lqueue-&gt;head &#x3D; newnode;
	lqueue-&gt;length++;

	return 0;
&#125;
&#x2F;&#x2F;返回对头数据
void* FrontLinkQueue(LinkQueue* lqueue)&#123;
	LinkNode* pCurrent &#x3D; lqueue-&gt;head;
	while (pCurrent-&gt;next !&#x3D; NULL)&#123;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
	return pCurrent-&gt;data;
&#125;
&#x2F;&#x2F;弹出对头结点
void PopLinkQueue(LinkQueue* lqueue)&#123;

	&#x2F;&#x2F;如果只有一个结点
	if (lqueue-&gt;length &#x3D;&#x3D; 1)&#123;
		free(lqueue-&gt;head);
		lqueue-&gt;head &#x3D; NULL;
		lqueue-&gt;length--;
		return;
	&#125;
	&#x2F;&#x2F;多于一个结点
	LinkNode* pPrev &#x3D; lqueue-&gt;head;
	LinkNode* pCurrent &#x3D; pPrev-&gt;next;
	while (pCurrent-&gt;next !&#x3D; NULL)&#123;
		pPrev &#x3D; pCurrent;
		pCurrent &#x3D; pPrev-&gt;next;
	&#125;
	free(pCurrent);
	pPrev-&gt;next &#x3D; NULL;
	lqueue-&gt;length--;
&#125;
&#x2F;&#x2F;返回队列长度
int GetLengthLinkQueue(LinkQueue* lqueue)&#123;
	return lqueue-&gt;length;
&#125;
&#x2F;&#x2F;判断队列是否为空
int IsEmptyLinkQueue(LinkQueue* lqueue)&#123;
	if (lqueue-&gt;length &#x3D;&#x3D; 0)&#123;
		return QUEUE_TRUE;
	&#125;
	return QUEUE_FALSE;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试文件</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;LinkQueue.h&quot;


typedef struct _TEAHCER&#123;
	char name[64];
	int age;
&#125;Teacher;

void test01()&#123;
	
	&#x2F;&#x2F;创建链式队列
	LinkQueue* queue &#x3D; InitLinkQueue();
	&#x2F;&#x2F;创建数据
	Teacher t1, t2, t3;
	t1.age &#x3D; 10;
	t2.age &#x3D; 20;
	t3.age &#x3D; 30;
	strcpy(t1.name, &quot;aaa&quot;);
	strcpy(t2.name, &quot;bbb&quot;);
	strcpy(t3.name, &quot;ccc&quot;);
	&#x2F;&#x2F;链式队列插入数据
	PushLinkQueue(queue, &amp;t1);
	PushLinkQueue(queue, &amp;t3);
	PushLinkQueue(queue, &amp;t2);
	&#x2F;&#x2F;打印链式队列
	printf(&quot;链式队列长度:%d\n&quot;,GetLengthLinkQueue(queue));
	while (!IsEmptyLinkQueue(queue))&#123;
		Teacher* teacher &#x3D; (Teacher*)FrontLinkQueue(queue);
		printf(&quot;Name:%s Age:%d\n&quot;,teacher-&gt;name,teacher-&gt;age);
		PopLinkQueue(queue);
	&#125;
	printf(&quot;链式队列长度:%d\n&quot;, GetLengthLinkQueue(queue));
	&#x2F;&#x2F;销毁链式队列
	DestroyLinkQueue(queue);

&#125;

int main()&#123;
	
	test01();
	
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="4-树和二叉树"><a href="#4-树和二叉树" class="headerlink" title="4.树和二叉树"></a><strong>4.树和二叉树</strong></h2><h3 id="4-1树的基本概念"><a href="#4-1树的基本概念" class="headerlink" title="4.1树的基本概念"></a><strong>4.1树的基本概念</strong></h3><p><img src="http://qiniu.orangew.cn/img/wps8D6C.tmp.jpg" alt="img"> </p>
<ul>
<li>树的定义：</li>
</ul>
<ul>
<li>由一个或多个(n≥0)结点组成的有限集合T，有且仅有一个结点称为根（root），当n&gt;1时，其余的结点分为<strong>m(m≥0)个互不相交的有限集合</strong>T1,T2，…，Tm。每个集合本身又是棵树，被称作这个根的子树 。</li>
</ul>
<ul>
<li>树的结构特点</li>
<li>非线性结构，有一个直接前驱，但可能有多个直接后继（1:n）</li>
<li>树的定义具有递归性，树中还有树。</li>
<li>树可以为空，即节点个数为0。</li>
<li>若干术语</li>
<li>根-&gt;即根结点(没有前驱)</li>
<li>叶子-&gt;即终端结点(没有后继)</li>
<li>森林-&gt;指m棵不相交的树的集合(例如删除A后的子树个数)</li>
<li>有序树-&gt;结点各子树从左至右有序，不能互换（左为第一）</li>
<li>无序树-&gt;结点各子树可互换位置。</li>
<li>双亲-&gt;即上层的那个结点(直接前驱) parent</li>
<li>孩子-&gt;即下层结点的子树 (直接后继) child</li>
<li>兄弟-&gt;同一双亲下的同层结点（孩子之间互称兄弟）sibling</li>
<li>堂兄弟-&gt;即双亲位于同一层的结点（但并非同一双亲）cousin</li>
<li>祖先-&gt;即从根到该结点所经分支的所有结点</li>
<li>子孙-&gt;即该结点下层子树中的任一结点</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D6D.tmp.jpg" alt="img"> </p>
<ul>
<li>结点-&gt;即树的数据元素                       </li>
<li>结点的度-&gt;结点挂接的子树数（有几个直接后继就是几度）</li>
<li>结点的层次-&gt;从根到该结点的层数（根结点算第一层） </li>
<li>终端结点-&gt;即度为0的结点，即叶子       </li>
<li>分支结点-&gt;除树根以外的结点（也称为内部结点）</li>
<li>树的度-&gt;所有结点度中的最大值（Max{各结点的度}）    </li>
<li>树的深度(或高度) -&gt;指所有结点中最大的层数（Max{各结点的层次}）</li>
<li>上图中的结点数＝ 13，树的度＝ 3，树的深度＝ 4</li>
</ul>
<h3 id="4-2树的表示法"><a href="#4-2树的表示法" class="headerlink" title="4.2树的表示法"></a><strong>4.2树的表示法</strong></h3><h4 id="4-2-1图形表示法"><a href="#4-2-1图形表示法" class="headerlink" title="4.2.1图形表示法"></a><strong>4.2.1图形表示法</strong></h4><p><strong>事物之间的逻辑关系</strong>可以通过数的形式很直观的表示出来，如下图：</p>
<p><img src="http://qiniu.orangew.cn/img/wps8D6E.tmp.jpg" alt="img"> </p>
<h4 id="4-2-2广义表-表示法"><a href="#4-2-2广义表-表示法" class="headerlink" title="4.2.2广义表 表示法"></a><strong>4.2.2广义表 表示法</strong></h4><p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8D7F.tmp.jpg" alt="img"> </p>
<ul>
<li>用广义表表示法表示上图：</li>
<li>中国（河北（保定，石家庄），广东（广州，东莞），山东（青岛，济南））</li>
<li><strong>根作为由子树森林组成的表的名字写在表的左边。</strong></li>
</ul>
<h4 id="4-2-3左孩子右兄弟表示法"><a href="#4-2-3左孩子右兄弟表示法" class="headerlink" title="4.2.3左孩子右兄弟表示法"></a><strong>4.2.3左孩子右兄弟表示法</strong></h4><p><img src="http://qiniu.orangew.cn/img/wps8D80.tmp.jpg" alt="img"> </p>
<ul>
<li>左孩子右兄弟表示法可以将一颗多叉树转化为一颗二叉树：</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D81.tmp.jpg" alt="img"> </p>
<p>节点的结构：</p>
<p>​    <img src="http://qiniu.orangew.cn/img/wps8D82.tmp.jpg" alt="img"></p>
<p>节点有两个指针域，其中一个指针指向子节点，另一个指针指向其兄弟节点。</p>
<h3 id="4-3树的结构"><a href="#4-3树的结构" class="headerlink" title="4.3树的结构"></a><strong>4.3树的结构</strong></h3><h4 id="4-3-1树的逻辑结构"><a href="#4-3-1树的逻辑结构" class="headerlink" title="4.3.1树的逻辑结构"></a><strong>4.3.1树的逻辑结构</strong></h4><ul>
<li>树的逻辑结构特点：</li>
</ul>
<ul>
<li>一对多（1:n），有多个直接后继（如家谱树、目录树等等），但只有一个根结点，且子树之间互不相交。</li>
</ul>
<h4 id="4-3-2树的存储结构"><a href="#4-3-2树的存储结构" class="headerlink" title="4.3.2树的存储结构"></a><strong>4.3.2树的存储结构</strong></h4><ul>
<li><p>树的存储仍然有两种方式：</p>
</li>
<li><p> <strong>顺序存储</strong></p>
</li>
<li><p>可规定为：从上至下、从左至右将树的结点依次存入内存。</p>
</li>
</ul>
<ul>
<li><p>重大缺陷：复原<strong>困难</strong>（不能唯一复原就没有实用价值）。</p>
</li>
<li><p> <strong>链式存储</strong></p>
</li>
<li><p>可用多重链表：一个前趋指针，n个后继指针。</p>
</li>
</ul>
<ul>
<li>细节问题：树中结点的结构类型样式该如何设计？</li>
</ul>
<ul>
<li> 即应该设计成“等长”还是“不等长”？</li>
</ul>
<ul>
<li><p>缺点：等长结构太浪费（每个结点的度不一定相同）；</p>
</li>
<li><p>不等长结构太复杂（要定义好多种结构类型）。</p>
</li>
<li><p>以上两种存储方式都存在重大缺陷，应该如何解决呢？</p>
</li>
</ul>
<ul>
<li>计算机实现各种不同进制的运算是通过先研究最简单、最有规律的二进制运算规律，然后设法把各种不同进制的运算转化二进制运算。树的存储也可以通过先研究最简单、最有规律的树，然后设法把一般的树转化为这种简单的树，这种树就是<strong>二叉树</strong>。</li>
</ul>
<h3 id="4-4二叉树概念"><a href="#4-4二叉树概念" class="headerlink" title="4.4二叉树概念"></a><strong>4.4二叉树概念</strong></h3><h4 id="4-4-1二叉树基本概念"><a href="#4-4-1二叉树基本概念" class="headerlink" title="4.4.1二叉树基本概念"></a><strong>4.4.1二叉树基本概念</strong></h4><p> <strong>定义</strong>：</p>
<ul>
<li>n（n≥0）个结点的有限集合，由一个根结点以及两棵互不相交的、分别称为左子树和右子树的二叉树组成 。</li>
</ul>
<p> <strong>逻辑结构</strong>：</p>
<ul>
<li>一对二（1：2） </li>
</ul>
<p> <strong>基本特征:</strong></p>
<ul>
<li>每个结点最多只有两棵子树（<strong>不存在度大于2的结点</strong>）；</li>
</ul>
<ul>
<li>左子树和右子树次序不能颠倒（<strong>有序树</strong>）。</li>
</ul>
<p> <strong>基本形态:</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8D83.tmp.jpg" alt="img"> </p>
<p> <strong>问题：</strong></p>
<ul>
<li>具有3个结点的二叉树可能有几种不同形态？普通树呢？</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D84.tmp.jpg" alt="img"> </p>
<ul>
<li>二叉树可以画出五种形态，但是普通的数只能有两种形态。</li>
</ul>
<p> <strong>二叉树性质</strong></p>
<ul>
<li>性质1: 在二叉树的第i层上至多有2i-1个结点（i&gt;0）</li>
<li>性质2: 深度为k的二叉树至多有2k-1个结点（k&gt;0）</li>
<li>性质3: 对于任何一棵二叉树，若度为2的结点数有n2个，则叶子数（n0）必定为n2＋1 （即n0=n2+1）</li>
</ul>
<p><strong>概念解释</strong>：</p>
<p><strong>满二叉树</strong></p>
<ul>
<li>一棵深度为k 且有2^k -1个结点的二叉树。</li>
</ul>
<p>​    <strong>特点：每层都“充满”了结点</strong></p>
<p>​              <img src="http://qiniu.orangew.cn/img/wps8D95.tmp.jpg" alt="img"></p>
<p> <strong>完全二叉树</strong></p>
<ul>
<li>除最后一层外，每一层上的节点数均达到最大值；在最后一层上只缺少右边的若干结点。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D96.tmp.jpg" alt="img"> </p>
<p><strong>理解：k-1层与满二叉树完全相同，第k层结点尽力靠左</strong></p>
<ul>
<li><strong>性质4: 具有n个结点的完全二叉树的深度必为log2n+1的向下取整</strong></li>
<li> <strong>性质5: 对完全二叉树，若从上至下、从左至右编号，则编号为i 的结点，其左孩子编号必为2i，其右孩子编号必为2i＋1；其双亲的编号必为i/2（i＝1 时为根,除外）</strong></li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8D97.tmp.jpg" alt="img"> </p>
<ul>
<li>使用此性质可以使用完全二叉树实现树的顺序存储。</li>
</ul>
<ul>
<li>如果不是完全二叉树咋整???</li>
</ul>
<ul>
<li>—— 将其转换成完全二叉树即可</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8D98.tmp.jpg" alt="img"> </p>
<ul>
<li><strong>缺点：①浪费空间；②插入、删除不便</strong>   </li>
</ul>
<h4 id="4-4-2二叉树的表示"><a href="#4-4-2二叉树的表示" class="headerlink" title="4.4.2二叉树的表示"></a><strong>4.4.2二叉树的表示</strong></h4><p> <strong>二叉链表示法</strong></p>
<ul>
<li>一般从根结点开始存储。相应地，访问树中结点时也只能从根开始。</li>
</ul>
<p> <strong>存储结构</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8D99.tmp.jpg" alt="img"> </p>
<p> <strong>结点数据类型定义：</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct BiTNode
&#123;
	int		data;
	struct BiTNode *lchild, *rchild;
&#125;BiTNode, *BiTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>三叉链表表示法</strong></p>
<p> <strong>存储结构</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8DAA.tmp.jpg" alt="img"> </p>
<ul>
<li>每个节点有三个指针域，其中两个分别指向子节点（左孩子，右孩子），还有一共指针指向该节点的父节点。</li>
</ul>
<p> <strong>节点数据类型定义</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;三叉链表
typedef struct TriTNode 
&#123;
	int data;
	&#x2F;&#x2F;左右孩子指针
	struct TriTNode *lchild, *rchild;
	struct TriTNode *parent;
&#125;TriTNode, *TriTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-4-3二叉树的遍历"><a href="#4-4-3二叉树的遍历" class="headerlink" title="4.4.3二叉树的遍历"></a><strong>4.4.3二叉树的遍历</strong></h4><ul>
<li><p>遍历定义</p>
</li>
<li><p>指按某条搜索路线<strong>遍访每个结点且不重复</strong>（又称周游）。</p>
</li>
<li><p>遍历用途</p>
</li>
<li><p>它是树结构插入、删除、修改、查找和排序运算的前提，是二叉树一切运算的基础和核心。 </p>
</li>
<li><p>遍历方法</p>
</li>
<li><p>牢记一种约定，<strong>对每个结点的查看都是“先左后右”</strong> 。</p>
</li>
</ul>
<ul>
<li>限定先左后右，树的遍历有三种实现方案：</li>
</ul>
<ul>
<li>   <strong>DLR         LDR        LRD</strong></li>
</ul>
<ul>
<li><p><strong>先</strong> (<strong>根</strong>)序遍历    <strong>中</strong> (<strong>根</strong>)序遍历    <strong>后</strong>(<strong>根</strong>)序遍历 </p>
</li>
<li><p><strong>DLR — 先序遍历，即先根再左再右</strong></p>
</li>
<li><p> <strong>LDR — 中序遍历，即先左再根再右</strong></p>
</li>
</ul>
<ul>
<li> <strong>LRD — 后序遍历，即先左再右再根</strong></li>
</ul>
<ul>
<li><p><strong>注：“先、中、后”的意思是指访问的结点D是先于子树出现还是后于子树出现。</strong></p>
</li>
<li><p><strong>从递归的角度看，这三种算法是完全相同的，或者说这三种遍历算法的访问路径是相同的，只是访问结点的时机不同。</strong></p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8DAB.tmp.jpg" alt="img"> </p>
<ul>
<li>​    从虚线的出发点到终点的路径上，每个结点经过3次。</li>
<li> <strong>第1次经过时访问＝先序遍历</strong></li>
<li> <strong>第2次经过时访问＝中序遍历</strong></li>
<li> <strong>第3次经过时访问＝后序遍历</strong></li>
</ul>
<p><strong>案例：</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8DAC.tmp.jpg" alt="img"> </p>
<p><strong>代码:</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;二叉树结点 二叉链表
typedef struct _PTNode&#123;
	char ch;
	struct _PTNode* lchild;
	struct _PTNode* rchild;
&#125;PTNode;

&#x2F;&#x2F;递归遍历
void RecursionBiTree(PTNode* root)&#123;
	if (root &#x3D;&#x3D; NULL)&#123;
		return;
	&#125;
	printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;先序遍历
	RecursionBiTree(root-&gt;lchild);
	&#x2F;&#x2F;printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;中序遍历
	RecursionBiTree(root-&gt;rchild);
	&#x2F;&#x2F;printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;后序遍历
&#125;

&#x2F;&#x2F;测试
void test01()&#123;

	&#x2F;&#x2F;创建结点
	PTNode node1, node2, node3, node4, node5, node6, node7, node8;
	node1.ch &#x3D; &#39;A&#39;; node1.lchild &#x3D; NULL; node1.rchild &#x3D; NULL;
	node2.ch &#x3D; &#39;B&#39;; node2.lchild &#x3D; NULL; node2.rchild &#x3D; NULL;
	node3.ch &#x3D; &#39;C&#39;;	node3.lchild &#x3D; NULL; node3.rchild &#x3D; NULL;
	node4.ch &#x3D; &#39;D&#39;;	node4.lchild &#x3D; NULL; node4.rchild &#x3D; NULL;
	node5.ch &#x3D; &#39;E&#39;;	node5.lchild &#x3D; NULL; node5.rchild &#x3D; NULL;
	node6.ch &#x3D; &#39;F&#39;;	node6.lchild &#x3D; NULL; node6.rchild &#x3D; NULL;
	node7.ch &#x3D; &#39;G&#39;;	node7.lchild &#x3D; NULL; node7.rchild &#x3D; NULL;
	node8.ch &#x3D; &#39;H&#39;;	node8.lchild &#x3D; NULL; node8.rchild &#x3D; NULL;

	&#x2F;&#x2F;建立结点关系
	node1.lchild &#x3D; &amp;node2;
	node1.rchild &#x3D; &amp;node6;

	node2.lchild &#x3D; NULL;
	node2.rchild &#x3D; &amp;node3;

	node3.lchild &#x3D; &amp;node4;
	node3.rchild &#x3D; &amp;node5;

	node6.lchild &#x3D; NULL;
	node6.rchild &#x3D; &amp;node7;

	node7.lchild &#x3D; &amp;node8;
	node7.rchild &#x3D; NULL;

	RecursionBiTree(&amp;node1);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>非递归前序遍历：</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#include&quot;LinkStack.h&quot;

&#x2F;&#x2F;二叉树结点 二叉链表
typedef struct _PTNode&#123;
	char ch;
	struct _PTNode* lchild;
	struct _PTNode* rchild;
&#125;PTNode;

&#x2F;&#x2F;递归遍历
void RecursionBiTree(PTNode* root)&#123;
	if (root &#x3D;&#x3D; NULL)&#123;
		return;
	&#125;
	&#x2F;&#x2F;printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;先序遍历
	RecursionBiTree(root-&gt;lchild);
	printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;中序遍历
	RecursionBiTree(root-&gt;rchild);
	&#x2F;&#x2F;printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;后序遍历
&#125;

&#x2F;&#x2F;非递归的方式遍历二叉树
void NonRecursion01(PTNode* root)&#123;
	
	&#x2F;&#x2F;创建栈
	LinkStack* stack &#x3D;  InitLinkStack();
	
	PTNode* pChild &#x3D; root;
	PushLinkStack(stack,root);
	while (!IsEmptyLinkStack(stack) || pChild )&#123;
		
		while (pChild !&#x3D; NULL)&#123;
			printf(&quot;%c\n&quot;,pChild-&gt;ch);
			if (pChild !&#x3D; root)&#123;
				PushLinkStack(stack, pChild);
			&#125;
			pChild &#x3D; pChild-&gt;lchild;
		&#125;

		if (!IsEmptyLinkStack(stack))&#123;
			pChild &#x3D; (PTNode*)TopLinkStack(stack);
			PopLinkStack(stack);
			pChild &#x3D; pChild-&gt;rchild;
		&#125;
	&#125;
&#125;

&#x2F;&#x2F;测试
void test01()&#123;

	&#x2F;&#x2F;创建结点
	PTNode node1, node2, node3, node4, node5, node6, node7, node8;
	node1.ch &#x3D; &#39;A&#39;; node1.lchild &#x3D; NULL; node1.rchild &#x3D; NULL;
	node2.ch &#x3D; &#39;B&#39;; node2.lchild &#x3D; NULL; node2.rchild &#x3D; NULL;
	node3.ch &#x3D; &#39;C&#39;;	node3.lchild &#x3D; NULL; node3.rchild &#x3D; NULL;
	node4.ch &#x3D; &#39;D&#39;;	node4.lchild &#x3D; NULL; node4.rchild &#x3D; NULL;
	node5.ch &#x3D; &#39;E&#39;;	node5.lchild &#x3D; NULL; node5.rchild &#x3D; NULL;
	node6.ch &#x3D; &#39;F&#39;;	node6.lchild &#x3D; NULL; node6.rchild &#x3D; NULL;
	node7.ch &#x3D; &#39;G&#39;;	node7.lchild &#x3D; NULL; node7.rchild &#x3D; NULL;
	node8.ch &#x3D; &#39;H&#39;;	node8.lchild &#x3D; NULL; node8.rchild &#x3D; NULL;

	&#x2F;&#x2F;建立结点关系
	node1.lchild &#x3D; &amp;node2;
	node1.rchild &#x3D; &amp;node6;

	node2.lchild &#x3D; NULL;
	node2.rchild &#x3D; &amp;node3;

	node3.lchild &#x3D; &amp;node4;
	node3.rchild &#x3D; &amp;node5;

	node6.lchild &#x3D; NULL;
	node6.rchild &#x3D; &amp;node7;

	node7.lchild &#x3D; &amp;node8;
	node7.rchild &#x3D; NULL;

	&#x2F;&#x2F;非递归前序遍历
	printf(&quot;\n非递归前序遍历:\n&quot;);
	NonRecursion01(&amp;node1);
&#125;

int main()&#123;

	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="4-4-5二叉树编程实践"><a href="#4-4-5二叉树编程实践" class="headerlink" title="4.4.5二叉树编程实践"></a><strong>4.4.5二叉树编程实践</strong></h4><p><strong>案例1：计算二叉树中叶子结点的数目</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;二叉树结点 二叉链表
typedef struct _PTNode&#123;
	char ch;
	struct _PTNode* lchild;
	struct _PTNode* rchild;
&#125;PTNode;

&#x2F;&#x2F;求叶子结点数量
int leafNum &#x3D; 0;
void RecursionBiTree(PTNode* root)&#123;
	if (root &#x3D;&#x3D; NULL)&#123;
		return;
	&#125;

	if (!root-&gt;lchild &amp;&amp; !root-&gt;rchild)&#123;
		leafNum++;
	&#125;

	RecursionLeafNumTree(root-&gt;lchild);
	RecursionLeafNumTree(root-&gt;rchild);
&#125;

&#x2F;&#x2F;测试
void test01()&#123;

	&#x2F;&#x2F;创建结点
	PTNode node1, node2, node3, node4, node5, node6, node7, node8;
	node1.ch &#x3D; &#39;A&#39;; node1.lchild &#x3D; NULL; node1.rchild &#x3D; NULL;
	node2.ch &#x3D; &#39;B&#39;; node2.lchild &#x3D; NULL; node2.rchild &#x3D; NULL;
	node3.ch &#x3D; &#39;C&#39;;	node3.lchild &#x3D; NULL; node3.rchild &#x3D; NULL;
	node4.ch &#x3D; &#39;D&#39;;	node4.lchild &#x3D; NULL; node4.rchild &#x3D; NULL;
	node5.ch &#x3D; &#39;E&#39;;	node5.lchild &#x3D; NULL; node5.rchild &#x3D; NULL;
	node6.ch &#x3D; &#39;F&#39;;	node6.lchild &#x3D; NULL; node6.rchild &#x3D; NULL;
	node7.ch &#x3D; &#39;G&#39;;	node7.lchild &#x3D; NULL; node7.rchild &#x3D; NULL;
	node8.ch &#x3D; &#39;H&#39;;	node8.lchild &#x3D; NULL; node8.rchild &#x3D; NULL;

	&#x2F;&#x2F;建立结点关系
	node1.lchild &#x3D; &amp;node2;
	node1.rchild &#x3D; &amp;node6;

	node2.lchild &#x3D; NULL;
	node2.rchild &#x3D; &amp;node3;

	node3.lchild &#x3D; &amp;node4;
	node3.rchild &#x3D; &amp;node5;

	node6.lchild &#x3D; NULL;
	node6.rchild &#x3D; &amp;node7;

	node7.lchild &#x3D; &amp;node8;
	node7.rchild &#x3D; NULL;

	RecursionBiTree(&amp;node1); &#x2F;&#x2F;求叶子结点书目
	printf(&quot;叶子结点数量:%d\n&quot;,leafNum);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>思想：</strong>    </p>
<ul>
<li>求根结点左子树的叶子结点个数，累计到sum中，求根结点右子树的叶子结点个数累计到sum中。</li>
<li>若左子树还是树，重复步骤1；若右子树还是树，重复步骤1。</li>
</ul>
<p> <strong>全局变量转成函数参数</strong></p>
<ul>
<li>可以按照先序、中序、后序方式计算叶子结点</li>
</ul>
<p><strong>三种遍历的本质思想强化：访问结点的路径都是一样的，计算结点的时机不同。</strong></p>
<p><strong>案例2：求二叉树的深度</strong></p>
<p><strong>思想：</strong>    </p>
<ul>
<li>求根结点左子树高度，根结点右子树高度，比较的子树最大高度，再+1。</li>
<li>若左子树还是树，重复步骤1；若右子树还是树，重复步骤1。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;二叉树结点 二叉链表
typedef struct _PTNode&#123;
	char ch;
	struct _PTNode* lchild;
	struct _PTNode* rchild;
&#125;PTNode;

&#x2F;&#x2F;求二叉树深度
int RecursionTreeDepth(PTNode* root)&#123;

	int depth &#x3D; 0;
	if (root &#x3D;&#x3D; NULL)&#123;
		return depth;
	&#125;

	int ldepth &#x3D; RecursionTreeDepth(root-&gt;lchild);
	int rdepth &#x3D; RecursionTreeDepth(root-&gt;rchild);
	depth &#x3D; ldepth &gt;&#x3D; rdepth ? ldepth + 1 : rdepth + 1;

	return depth;
&#125;

&#x2F;&#x2F;测试
void test01()&#123;

	&#x2F;&#x2F;创建结点
	PTNode node1, node2, node3, node4, node5, node6, node7, node8;
	node1.ch &#x3D; &#39;A&#39;;   node1.lchild &#x3D; NULL; node1.rchild &#x3D; NULL;
	node2.ch &#x3D; &#39;B&#39;;   node2.lchild &#x3D; NULL; node2.rchild &#x3D; NULL;
	node3.ch &#x3D; &#39;C&#39;;	node3.lchild &#x3D; NULL; node3.rchild &#x3D; NULL;
	node4.ch &#x3D; &#39;D&#39;;	node4.lchild &#x3D; NULL; node4.rchild &#x3D; NULL;
	node5.ch &#x3D; &#39;E&#39;;	node5.lchild &#x3D; NULL; node5.rchild &#x3D; NULL;
	node6.ch &#x3D; &#39;F&#39;;	node6.lchild &#x3D; NULL; node6.rchild &#x3D; NULL;
	node7.ch &#x3D; &#39;G&#39;;	node7.lchild &#x3D; NULL; node7.rchild &#x3D; NULL;
	node8.ch &#x3D; &#39;H&#39;;	node8.lchild &#x3D; NULL; node8.rchild &#x3D; NULL;

	&#x2F;&#x2F;建立结点关系
	node1.lchild &#x3D; &amp;node2;
	node1.rchild &#x3D; &amp;node6;

	node2.lchild &#x3D; NULL;
	node2.rchild &#x3D; &amp;node3;

	node3.lchild &#x3D; &amp;node4;
	node3.rchild &#x3D; &amp;node5;

	node6.lchild &#x3D; NULL;
	node6.rchild &#x3D; &amp;node7;

	node7.lchild &#x3D; &amp;node8;
	node7.rchild &#x3D; NULL;

	int depth &#x3D; RecursionTreeDepth(&amp;node1);
	printf(&quot;树的深度为:%d\n&quot;,depth);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>案例3：Copy二叉树</strong></p>
<p><strong>思想：</strong>    </p>
<ul>
<li>malloc新结点，</li>
<li>拷贝左子树，拷贝右子树，让新结点连接左子树，右子树。</li>
<li>若左子树还是树，重复步骤1、2；若右子树还是树，重复步骤1、2。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;二叉树结点 二叉链表
typedef struct _PTNode&#123;
	char ch;
	struct _PTNode* lchild;
	struct _PTNode* rchild;
&#125;PTNode;

&#x2F;&#x2F;递归遍历
void RecursionBiTree(PTNode* root)&#123;
	if (root &#x3D;&#x3D; NULL)&#123;
		return;
	&#125;
	printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;先序遍历
	RecursionBiTree(root-&gt;lchild);
	&#x2F;&#x2F;printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;中序遍历
	RecursionBiTree(root-&gt;rchild);
	&#x2F;&#x2F;printf(&quot;%c&quot;, root-&gt;ch); &#x2F;&#x2F;后序遍历
&#125;

&#x2F;&#x2F;拷贝二叉树
PTNode* CopyTree(PTNode* root)&#123;
	if (root &#x3D;&#x3D; NULL)&#123;
		return NULL;
	&#125;

	&#x2F;&#x2F;拷贝左子树
	if (root-&gt;lchild)&#123;
		root-&gt;lchild &#x3D;  CopyTree(root-&gt;lchild);
	&#125;
	else&#123;
		root-&gt;lchild &#x3D; NULL;
	&#125;
	&#x2F;&#x2F;拷贝右子树
	if (root-&gt;rchild)&#123;
		root-&gt;rchild &#x3D; CopyTree(root-&gt;rchild);
	&#125;
	else&#123;
		root-&gt;rchild &#x3D; NULL;
	&#125;

	&#x2F;&#x2F;创建新节点
	PTNode* newnode &#x3D; (PTNode*)malloc(sizeof(PTNode));
	newnode-&gt;ch &#x3D; root-&gt;ch;
	newnode-&gt;lchild &#x3D; root-&gt;lchild;
	newnode-&gt;rchild &#x3D; root-&gt;rchild;

	return newnode;
&#125;

&#x2F;&#x2F;测试
void test01()&#123;

	&#x2F;&#x2F;创建结点
	PTNode node1, node2, node3, node4, node5, node6, node7, node8;
	node1.ch &#x3D; &#39;A&#39;; node1.lchild &#x3D; NULL; node1.rchild &#x3D; NULL;
	node2.ch &#x3D; &#39;B&#39;; node2.lchild &#x3D; NULL; node2.rchild &#x3D; NULL;
	node3.ch &#x3D; &#39;C&#39;;	node3.lchild &#x3D; NULL; node3.rchild &#x3D; NULL;
	node4.ch &#x3D; &#39;D&#39;;	node4.lchild &#x3D; NULL; node4.rchild &#x3D; NULL;
	node5.ch &#x3D; &#39;E&#39;;	node5.lchild &#x3D; NULL; node5.rchild &#x3D; NULL;
	node6.ch &#x3D; &#39;F&#39;;	node6.lchild &#x3D; NULL; node6.rchild &#x3D; NULL;
	node7.ch &#x3D; &#39;G&#39;;	node7.lchild &#x3D; NULL; node7.rchild &#x3D; NULL;
	node8.ch &#x3D; &#39;H&#39;;	node8.lchild &#x3D; NULL; node8.rchild &#x3D; NULL;

	&#x2F;&#x2F;建立结点关系
	node1.lchild &#x3D; &amp;node2;
	node1.rchild &#x3D; &amp;node6;

	node2.lchild &#x3D; NULL;
	node2.rchild &#x3D; &amp;node3;

	node3.lchild &#x3D; &amp;node4;
	node3.rchild &#x3D; &amp;node5;

	node6.lchild &#x3D; NULL;
	node6.rchild &#x3D; &amp;node7;

	node7.lchild &#x3D; &amp;node8;
	node7.rchild &#x3D; NULL;

	printf(&quot;打印拷贝二叉树:\n&quot;);
	PTNode* root &#x3D; CopyTree(&amp;node1);
	RecursionBiTree(root); &#x2F;&#x2F;打印结点
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="4-6二叉树的创建"><a href="#4-6二叉树的创建" class="headerlink" title="4.6二叉树的创建"></a><strong>4.6二叉树的创建</strong></h3><h4 id="4-6-1中序和先序创建树"><a href="#4-6-1中序和先序创建树" class="headerlink" title="4.6.1中序和先序创建树"></a><strong>4.6.1中序和先序创建树</strong></h4><p>1、根据中序遍历的结果能确定一棵树吗？</p>
<p>中序遍历：结果为：“12345”，这个“12345”能确定一棵树吗？</p>
<p>请思考，会有多少种形状。<strong>树的形状能唯一确定吗？？？</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wps8DBC.tmp.jpg" alt="img"> </p>
<p>2、如何才能确定一棵树？</p>
<p>结论：    </p>
<p><strong>通过中序遍历和先序遍历可以确定一个树</strong></p>
<p>通过中序遍历和后续遍历可以确定一个树</p>
<p>通过先序遍历和后序遍历确定不了一个树。</p>
<p><strong>单独先序遍历：能求解根，但不能求解左子树什么时候结束、右子树什么时候开始。</strong></p>
<p>3、根据先序和中序结果画树</p>
<p>算法</p>
<ul>
<li>通过先序遍历找到根结点A，再通过A在中序遍历的位置找出左子树，右子树</li>
<li>在A的左子树中，找左子树的根结点（在先序中找），转步骤1</li>
<li>在A的右子树中，找右子树的根结点（在先序中找），转步骤1</li>
</ul>
<p>练习1</p>
<p>先序遍历结果：A D E B C F</p>
<p>中序遍历结果：D E A C F B</p>
<p><img src="http://qiniu.orangew.cn/img/wps8DBD.tmp.jpg" alt="img"> </p>
<p>练习2</p>
<p>先序遍历结果：A B D H K E C F I G J</p>
<p>中序遍历结果：H K D B E A I F C G J</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8DBE.tmp.jpg" alt="img"> </p>
<h4 id="4-6-2-号法创建树"><a href="#4-6-2-号法创建树" class="headerlink" title="4.6.2#号法创建树"></a><strong>4.6.2#号法创建树</strong></h4><p>1、什么是#号法创建树</p>
<p>#创建树，让树的每一个节点都变成度数为2的树</p>
<p>先序遍历结果: 124###3##</p>
<p><img src="http://qiniu.orangew.cn/img/wps8DCF.tmp.jpg" alt="img"> </p>
<p>​    先序遍历：124###3##可以唯一确定一棵树吗，为什么？</p>
<p><img src="http://qiniu.orangew.cn/img/wps8DD0.tmp.jpg" alt="img"> </p>
<p>确定出来的树模型: 上图即是。</p>
<p>2 #创建树练习 ABDH#K###E##CFI###G#J##</p>
<p>先序遍历：ABDH#K###E##CFI###G#J## , 请画出树的形状：</p>
<p><img src="http://qiniu.orangew.cn/img/wps8DD1.tmp.jpg" alt="img"> </p>
<p>3、#号法编程实践</p>
<p> <strong>利用前序遍历来建树</strong>（结点值陆续从键盘输入，用DLR为宜）</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Bintree createBTpre( )
&#123;      Bintree T; char ch;
        scanf(“%c”,&amp;ch);
        if(ch&#x3D;&#x3D;’#’) T&#x3D;NULL; 
        else
        &#123;   T&#x3D;( Bintree )malloc(sizeof(BinTNode));
            T-&gt;data&#x3D;ch;
            T-&gt;lchild&#x3D;createBTpre(); 
            T-&gt;rchild&#x3D;createBTpre();
        &#125;        
        return T;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>使用后序遍历的方式销毁一棵树， 先释放叶子节点，在释放根节点</strong></p>
<p><strong>//销毁树</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void  BiTree_Free(BiTNode* T)
&#123;	
	BiTNode *tmp &#x3D; NULL;
	if (T!&#x3D; NULL)
	&#123;
		if (T-&gt;rchild !&#x3D; NULL) BiTree_Free(T-&gt;rchild);
		if (T-&gt;lchild !&#x3D; NULL) BiTree_Free(T-&gt;lchild);
		if (T !&#x3D; NULL)
		&#123;
			free(T); 
			T &#x3D; NULL;
		&#125;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-7霍夫曼树"><a href="#4-7霍夫曼树" class="headerlink" title="4.7霍夫曼树"></a><strong>4.7霍夫曼树</strong></h3><h4 id="4-7-1概念"><a href="#4-7-1概念" class="headerlink" title="4.7.1概念"></a><strong>4.7.1概念</strong></h4><ul>
<li>组建一个网络，耗费最小 WPL(树的带权路径长度)最小；这个方法是霍夫曼想出来的，称为霍夫曼树。</li>
</ul>
<ul>
<li>霍夫曼大叔说，从树中一个节点到另一个节点之间的分支构成两个节点之间的路径，路径上的分支数目称作路径长度。如下图的二叉树a中，根节点到节点D的路径长度为4，二叉树b中根节点到节点D的路径长度为2.树的路径长度就是从树根到每一节点的路径长度之和。二叉树a的树路径长度就为1+1+2+2+3+3+4+4=20。二叉树b的树路径长度为1+2+3+3+2+1+2+2=16。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8DD2.tmp.jpg" alt="img"> </p>
<h4 id="4-7-2霍夫曼树的构造"><a href="#4-7-2霍夫曼树的构造" class="headerlink" title="4.7.2霍夫曼树的构造"></a><strong>4.7.2霍夫曼树的构造</strong></h4><p>对于文本”BADCADFEED”的传输而言，因为重复出现的只有“ABCDEF”这6个字符，因此可以用下面的方式编码：</p>
<table>
<thead>
<tr>
<th><strong>A</strong></th>
<th><strong>B</strong></th>
<th><strong>C</strong></th>
<th><strong>D</strong></th>
<th><strong>E</strong></th>
<th><strong>F</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>000</strong></td>
<td><strong>001</strong></td>
<td><strong>010</strong></td>
<td><strong>011</strong></td>
<td><strong>100</strong></td>
<td><strong>101</strong></td>
</tr>
</tbody></table>
<p><strong>B A D C A D F E E D</strong> <strong>à</strong> <strong>001 000 011 010 000 011 101 100 100 011</strong></p>
<p>接收方可以根据每3个bit进行一次字符解码的方式还原文本信息。这样的编码方式需要30个bit位才能表示10个字符那么当传输一篇500个字符的情报时，需要15000个bit位，在战争年代，这种编码方式对于情报的发送和接受是很低效且容易出错的。如何提高收发效率？</p>
<p><strong>要提高效率，必然要从编码方式的改进入手，要避免每个字符都占用相同的bit位.</strong></p>
<table>
<thead>
<tr>
<th><strong>A</strong></th>
<th><strong>B</strong></th>
<th><strong>C</strong></th>
<th><strong>D</strong></th>
<th><strong>E</strong></th>
<th><strong>F</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>01</strong></td>
<td><strong>1001</strong></td>
<td><strong>101</strong></td>
<td><strong>00</strong></td>
<td><strong>11</strong></td>
<td><strong>1000</strong></td>
</tr>
</tbody></table>
<p><strong>B A D C A D F E E D</strong> <strong>à</strong> <strong>1001 01 00 101 01 00 1000 11 11 00</strong></p>
<p><strong>准则：任一字符的编码都不是另一个字符编码的前缀！</strong></p>
<p><strong>也就是说：每一个字符的编码路径，都不包含另外一个字符的路径。</strong></p>
<ul>
<li><p>霍夫曼树的构建规则: </p>
</li>
<li><p>给定n个数值{ v1, v2, …, vn}。</p>
</li>
<li><p>根据这n个数值构造二叉树集合F = { T1, T2, …, Tn}，Ti的数据域为vi，左右子树为空。</p>
</li>
<li><p>在F中选取两棵根结点的值最小的树作为左右子树构造一棵新的二叉树，这棵二叉树的根结点中的值为左右子树根结点中的值之和</p>
</li>
<li><p>在F中删除这两棵子树，并将构造的新二叉树根节点加入F中</p>
</li>
<li><p>重复3和4，直到F中只剩下一个树为止。</p>
</li>
<li><p>这棵树即霍夫曼树</p>
</li>
</ul>
<p>假设经过统计ABCDEF在需要传输的报文中出现的概率如下：</p>
<table>
<thead>
<tr>
<th><strong>A</strong></th>
<th><strong>B</strong></th>
<th><strong>C</strong></th>
<th><strong>D</strong></th>
<th><strong>E</strong></th>
<th><strong>F</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>27%</strong></td>
<td><strong>8%</strong></td>
<td><strong>15%</strong></td>
<td><strong>15%</strong></td>
<td><strong>30%</strong></td>
<td><strong>5%</strong></td>
</tr>
</tbody></table>
<p><strong>构建出的树模型如下：</strong></p>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8DE3.tmp.jpg" alt="img"></p>
<p> <strong>特点：</strong></p>
<p><strong>所用的字符都作为叶子节点出现。</strong></p>
<p><strong>根到每个字符的路径都不重复，也不存在重叠的现象。</strong></p>
<p><strong>总结：</strong></p>
<ul>
<li>霍夫曼树<strong>是一种特殊的二叉树</strong>。</li>
<li>霍夫曼树应用于<strong>信息编码</strong>和<strong>数据压缩领域</strong>。 </li>
<li><strong>霍夫曼树是现代压缩算法的基础。</strong></li>
</ul>
<h2 id="5-排序"><a href="#5-排序" class="headerlink" title="5.排序"></a><strong>5.排序</strong></h2><h3 id="5-1排序基本概念"><a href="#5-1排序基本概念" class="headerlink" title="5.1排序基本概念"></a><strong>5.1排序基本概念</strong></h3><ul>
<li>现实生活中排序很重要，例如：淘宝按条件搜索的结果展示等。</li>
</ul>
<ul>
<li><p>概念</p>
</li>
<li><p>排序是计算机内经常进行的一种操作，其目的是将一组“无序”的数据元素调整为“有序”的数据元素。</p>
</li>
<li><p>排序数学定义：</p>
</li>
<li><p>假设含n个数据元素的序列为{ R1, R2, …, Rn}，其相应的关键字序列为{ K1, K2, …, Kn}这些关键字相互之间可以进行比较，即在它们之间存在着这样一个关系 ：</p>
</li>
<li><p>Kp1≤Kp2≤…≤Kpn</p>
</li>
<li><p>按此固有关系将上式记录序列重新排列为{ Rp1, Rp2, …，Rpn}的操作称作排序</p>
</li>
<li><p>排序的稳定性</p>
</li>
<li><p>如果在序列中有两个数据元素r[i]和r[j]，它们的关键字k[i] == k [j]，且在排序之前，对象r[i]排在r[j]前面。如果在排序之后，对象r[i]仍在r[j]前面，则称这个排序方法是稳定的，否则称这个排序方法是不稳定的。</p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8DE4.tmp.jpg" alt="img"> </p>
<ul>
<li><p><strong>多关键字排序</strong></p>
</li>
<li><p>排序时需要比较的关键字多于一个，排序结果首先按关键字1进行排序，当关键字1相同时按关键字2进行排序，当关键字n-1相同时按关键字n进行排序，对于多关键字排序，只需要在比较操作时同时考虑多个关键字即可！</p>
</li>
<li><p><strong>排序中的关键操作</strong></p>
</li>
<li><p>比较：任意两个数据元素通过比较操作确定先后次序。</p>
</li>
<li><p>交换：数据元素之间需要交换才能得到预期结果。</p>
</li>
<li><p>内排序和外排序</p>
</li>
<li><p>内排序：在排序过程中，待排序的所有记录全部都放置在内存中，排序分为：内排序和外排序。</p>
</li>
<li><p>外排序：由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。</p>
</li>
<li><p><strong>排序的审判</strong></p>
</li>
<li><p>时间性能：关键性能差异体现在比较和交换的数量</p>
</li>
<li><p>辅助存储空间：为完成排序操作需要的额外的存储空间，必要时可以“空间换时间”</p>
</li>
<li><p>算法的实现复杂性：过于复杂的排序法会影响代码的可读性和可维护性，也可能影响排序的性能</p>
</li>
<li><p><strong>总结</strong></p>
</li>
<li><p>排序是数据元素从无序到有序的过程</p>
</li>
<li><p>排序具有稳定性，是选择排序算法的因素之一</p>
</li>
<li><p>比较和交换是排序的基本操作</p>
</li>
<li><p>多关键字排序与单关键字排序无本质区别</p>
</li>
<li><p>排序的时间性能是区分排序算法好坏的主要因素</p>
</li>
</ul>
<h3 id="5-2冒泡排序"><a href="#5-2冒泡排序" class="headerlink" title="5.2冒泡排序"></a><strong>5.2冒泡排序</strong></h3><p><img src="http://qiniu.orangew.cn/img/wps8DF4.tmp.png" alt="img"></p>
<h4 id="5-2-1冒泡排序实现案例"><a href="#5-2-1冒泡排序实现案例" class="headerlink" title="5.2.1冒泡排序实现案例"></a><strong>5.2.1冒泡排序实现案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;打印数组
void PrintArray(int* arr,int length)&#123;
	for (int i &#x3D; 0; i &lt; length;i++)&#123;
		printf(&quot;%d &quot;,arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;交换函数
void swap(int* arr,int pos1,int pos2)&#123;

	int temp &#x3D; arr[pos1];
	arr[pos1] &#x3D; arr[pos2];
	arr[pos2] &#x3D; temp;

&#125;

&#x2F;&#x2F;冒泡排序
void BubbleSort(int* arr, int length)&#123;

	int i,j;
	for (i &#x3D; 0; i &lt; length; i ++)&#123;

		for (j &#x3D; length - 1; j &gt; i;j --)&#123;
			
			if (arr[j-1] &lt; arr[j])&#123;
				swap(arr,i,j);
			&#125;
		&#125;
	&#125;
&#125;

void test01()&#123;

	int array[] &#x3D; &#123;23,12,89,6,45,77,67&#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印排序前的数组
	printf(&quot;打印冒泡排序前的数组:\n&quot;);
	PrintArray(array, length);
	&#x2F;&#x2F;对数组进行冒泡排序
	BubbleSort(array,length);
	printf(&quot;打印冒泡排序后的数组:\n&quot;);
	PrintArray(array, length);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-2-2冒泡排序-改进版-实现案例"><a href="#5-2-2冒泡排序-改进版-实现案例" class="headerlink" title="5.2.2冒泡排序(改进版)实现案例"></a><strong>5.2.2冒泡排序(改进版)实现案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

#define BUBBLE_TRUE 1
#define BUBBLE_FALSE 0

&#x2F;&#x2F;打印数组
void PrintArray(int* arr,int length)&#123;
	for (int i &#x3D; 0; i &lt; length;i++)&#123;
		printf(&quot;%d &quot;,arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;交换函数
void swap(int* arr,int pos1,int pos2)&#123;
	int temp &#x3D; arr[pos1];
	arr[pos1] &#x3D; arr[pos2];
	arr[pos2] &#x3D; temp;
&#125;

&#x2F;&#x2F;冒泡排序
void BubbleSort(int* arr, int length)&#123;

	int i,j;
	int flag &#x3D; BUBBLE_TRUE; &#x2F;&#x2F;是否排序完成 BUBBLE_TRUE表示没有排序完成，BUBBLE_FALSE表示排序完成
	for (i &#x3D; 0; i &lt; length &amp;&amp; flag &#x3D;&#x3D; BUBBLE_TRUE; i++)&#123;
		flag &#x3D; BUBBLE_FALSE;
		for (j &#x3D; length - 1; j &gt; i;j --)&#123;
			
			if (arr[j-1] &lt; arr[j])&#123;
				flag &#x3D; BUBBLE_TRUE;
				swap(arr,i,j);
			&#125;
		&#125;
	&#125;
&#125;

void test01()&#123;

	int array[] &#x3D; &#123;23,12,89,6,45,77,67&#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印排序前的数组
	printf(&quot;打印冒泡排序前的数组:\n&quot;);
	PrintArray(array, length);
	&#x2F;&#x2F;对数组进行冒泡排序
	BubbleSort(array,length);
	printf(&quot;打印冒泡排序后的数组:\n&quot;);
	PrintArray(array, length);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-2-3冒泡排序总结"><a href="#5-2-3冒泡排序总结" class="headerlink" title="5.2.3冒泡排序总结"></a><strong>5.2.3冒泡排序总结</strong></h4><ul>
<li>冒泡总结：</li>
<li>冒泡排序是一种效率低下的排序方法，在数据规模很小时，可以采用。数据规模比较大时，最好用其它排序方法。</li>
<li>上述例子总对冒泡做了优化，添加了flag作为标记，记录序列是否已经有序，减少循环次数。</li>
<li>稳定性</li>
<li> <strong>冒泡排序是一种稳定的排序算法</strong></li>
<li> <strong>冒泡排序的效率：O（n²）</strong></li>
</ul>
<h3 id="5-3选择排序"><a href="#5-3选择排序" class="headerlink" title="5.3选择排序"></a><strong>5.3选择排序</strong></h3><p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8DF5.tmp.png" alt="img"></p>
<h3 id="5-3-1选择排序实现案例"><a href="#5-3-1选择排序实现案例" class="headerlink" title="5.3.1选择排序实现案例"></a><strong>5.3.1选择排序实现案例</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;打印数组
void PrintArray(int* arr, int length)&#123;
	for (int i &#x3D; 0; i &lt; length; i++)&#123;
		printf(&quot;%d &quot;, arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;交换函数
void swap(int* arr, int pos1, int pos2)&#123;

	int temp &#x3D; arr[pos1];
	arr[pos1] &#x3D; arr[pos2];
	arr[pos2] &#x3D; temp;

&#125;

&#x2F;&#x2F;选择排序
void SelectSort(int* arr,int length)&#123;

	int i, j;
	int min;

	for (i &#x3D; 0; i &lt; length; i++)&#123;

		min &#x3D; i;
		for (j &#x3D; i + 1; j &lt; length;j++)&#123;
			
			if (arr[min] &gt; arr[j])&#123;
				min &#x3D; j;
			&#125;
		&#125;

		if (i !&#x3D; min)&#123;
			swap(arr,min,i);
		&#125;
	&#125;
&#125;

void test01()&#123;

	int array[] &#x3D; &#123; 23, 12, 89, 6, 45, 77, 67 &#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印选择排序前的数组
	printf(&quot;打印选择排序前的数组:\n&quot;);
	PrintArray(array,length);
	&#x2F;&#x2F;对数组进行选择排序
	SelectSort(array, length);
	&#x2F;&#x2F;打印选择排序前的数组
	printf(&quot;打印选择排序后的数组:\n&quot;);
	PrintArray(array, length);
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-3-2选择排序总结"><a href="#5-3-2选择排序总结" class="headerlink" title="5.3.2选择排序总结"></a><strong>5.3.2选择排序总结</strong></h4><ul>
<li>稳定性</li>
<li> <strong>选择排序是不稳定的排序方法</strong></li>
<li> <strong>选择排序效率：O（n²）</strong></li>
</ul>
<h3 id="5-4插入排序"><a href="#5-4插入排序" class="headerlink" title="5.4插入排序"></a><strong>5.4插入排序</strong></h3><p><img src="http://qiniu.orangew.cn/img/wps8E06.tmp.jpg" alt="img"> </p>
<h4 id="5-4-1插入排序实现案例"><a href="#5-4-1插入排序实现案例" class="headerlink" title="5.4.1插入排序实现案例"></a><strong>5.4.1插入排序实现案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;


&#x2F;&#x2F;打印数组
void PrintArray(int* arr, int length)&#123;
	for (int i &#x3D; 0; i &lt; length; i++)&#123;
		printf(&quot;%d &quot;, arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;插入排序
void InsertSort(int* arr, int length)&#123;
	
	int i, j;
	for (i &#x3D; 1; i &lt; length; i++)&#123;
		
		if (arr[i] &lt; arr[i-1])&#123;
			
			int temp &#x3D; arr[i];
			for (j &#x3D; i - 1; j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; temp; j--)&#123;
				arr[j + 1] &#x3D; arr[j];
			&#125;
			arr[j+1] &#x3D; temp;
		&#125;
	&#125;
&#125;

void test01()&#123;

	int array[] &#x3D; &#123; 23, 12, 89, 6, 45, 77, 67 &#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印插入排序前的数组
	printf(&quot;打印插入排序前的数组:\n&quot;);
	PrintArray(array, length);
	&#x2F;&#x2F;对数组进行插入排序
	InsertSort(array, length);
	printf(&quot;打印插入排序后的数组:\n&quot;);
	PrintArray(array, length);
&#125;

int main()&#123;

	test01();


	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-4-2插入排序总结"><a href="#5-4-2插入排序总结" class="headerlink" title="5.4.2插入排序总结"></a><strong>5.4.2插入排序总结</strong></h4><ul>
<li>稳定性</li>
<li> <strong>插入排序是稳定的排序算法</strong></li>
<li><strong>插入排序效率：O（n²）</strong></li>
</ul>
<h3 id="5-5希尔排序"><a href="#5-5希尔排序" class="headerlink" title="5.5希尔排序"></a><strong>5.5希尔排序</strong></h3><ul>
<li>算法介绍</li>
<li><strong>希尔排序的实质就是分组插入排序</strong>，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。</li>
<li>基本思想</li>
</ul>
<p><strong>先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前三种方法有较大提高。</strong></p>
<h3 id="5-5-1希尔排序实现案例"><a href="#5-5-1希尔排序实现案例" class="headerlink" title="5.5.1希尔排序实现案例"></a><strong>5.5.1希尔排序实现案例</strong></h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;打印数组
void PrintArray(int* arr, int length)&#123;
	for (int i &#x3D; 0; i &lt; length; i++)&#123;
		printf(&quot;%d &quot;, arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;希尔排序
void ShellSort(int* arr, int length)&#123;

	int i, j, k;
	int increament &#x3D; length;  &#x2F;&#x2F;初始增量

	while (increament &gt; 1)&#123;

		increament &#x3D; increament &#x2F; 3 + 1;
		&#x2F;&#x2F;分组
		for (i &#x3D; 0; i &lt; increament; i ++)&#123;
			&#x2F;&#x2F;遍历每一个分组，并对每一组的元素进行插入排序
			for (j &#x3D; i + increament; j &lt; length; j+&#x3D;increament)&#123;
				int temp &#x3D; arr[j];
				if (arr[j-increament] &gt; arr[j])&#123;
					for (k &#x3D; j - increament; k &gt;&#x3D; 0 &amp;&amp; temp &lt; arr[k]; k -&#x3D; increament)&#123;
						arr[k + increament] &#x3D; arr[k];
					&#125;
					arr[k + increament] &#x3D; temp;
				&#125;
			&#125;
		&#125;
	&#125;
&#125;

void test01()&#123;

	int array[] &#x3D; &#123; 23, 12, 89, 6, 45, 77, 67 &#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印希尔排序前的数组
	printf(&quot;打印希尔排序前的数组:\n&quot;);
	PrintArray(array, length);
	&#x2F;&#x2F;对数组进行希尔排序
	ShellSort(array, length);
	printf(&quot;打印希尔排序后的数组:\n&quot;);
	PrintArray(array, length);

&#125;

int main()&#123;

	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="5-6快速排序"><a href="#5-6快速排序" class="headerlink" title="5.6快速排序"></a><strong>5.6快速排序</strong></h2><ul>
<li>算法介绍</li>
<li>快速排序是C.R.A.Hoare于1962年提出的<strong>一种划分交换排序</strong>。它<strong>采用了一种分治的策略</strong>，通常称其为分治法(Divide-and-ConquerMethod)。</li>
<li>分治法基本思想</li>
<li>先从数列中取出一个数作为基准数（枢轴）。</li>
<li> <strong>分区过程将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。(升序)</strong></li>
<li>再对左右区间重复第二步，直到各区间只有一个数。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8E07.tmp.jpg" alt="img"></p>
<h4 id="5-6-1快速排序实现案例"><a href="#5-6-1快速排序实现案例" class="headerlink" title="5.6.1快速排序实现案例"></a><strong>5.6.1快速排序实现案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;

&#x2F;&#x2F;打印数组
void PrintArray(int* arr, int length)&#123;
	for (int i &#x3D; 0; i &lt; length; i++)&#123;
		printf(&quot;%d &quot;, arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

&#x2F;&#x2F;快速排序
void QuickSort(int* arr,int low,int height)&#123;

	int left &#x3D; low;
	int right &#x3D; height;
	&#x2F;&#x2F;取出基准数
	int target &#x3D; arr[left];
	
	if (left &lt; right)&#123;

		while (left &lt; right)&#123;
			
			&#x2F;&#x2F;因为在左边挖坑，从右面开始　找比基准数小的
			while (left &lt; right &amp;&amp; arr[right] &gt; target)&#123;
				right--;
			&#125;
			if (left &lt; right)&#123;
				arr[left] &#x3D; arr[right];
				left++;
			&#125;

			&#x2F;&#x2F;从左向右找比基准数大的
			while (left &lt; right &amp;&amp; arr[left] &lt; target)&#123;
				left++;
			&#125;
			if (left &lt; right)&#123;
				arr[right] &#x3D; arr[left];
				right--;
			&#125;

		&#125;
		&#x2F;&#x2F;这个时候left和right同时指向的位置，将基准数插入这个位置
		arr[left] &#x3D; target;

		QuickSort(arr, low, left - 1);
		QuickSort(arr, left + 1, height);

	&#125;
&#125;

void test01()&#123;
	
	int array[] &#x3D; &#123; 23, 12, 89, 6, 45, 77, 67 &#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印快速排序前的数组
	printf(&quot;打印快速排序前的数组:\n&quot;);
	PrintArray(array, length);
	&#x2F;&#x2F;对数组进行快速排序
	QuickSort(array, 0,length-1);
	printf(&quot;打印快速排序后的数组:\n&quot;);
	PrintArray(array, length);

&#125;

int main()&#123;
	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-7归并排序"><a href="#5-7归并排序" class="headerlink" title="5.7归并排序"></a><strong>5.7归并排序</strong></h3><ul>
<li><p>算法介绍</p>
</li>
<li><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
</li>
<li><p>基本思想</p>
</li>
<li><p><strong>基本思路就是将数组分成二组A，B，如果这二组组内的数据都是有序的，那么就可以很方便的将这二组数据进行排序</strong>。如何让这二组组内数据有序了？</p>
</li>
<li><p><strong>可以将A，B组各自再分成二组。依次类推,当分出来的小组只有一个数据时，可以认为这个小组组内已经达到了有序，然后再合并相邻的二个小组就可以了。这样通过先递归的分解数列，再合并数列就完成了归并排序。</strong></p>
</li>
<li><p><strong>归并的定义</strong>                </p>
</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wps8E18.tmp.jpg" alt="img"> </p>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8E19.tmp.jpg" alt="img"> </p>
<ul>
<li> <strong>如何合并连个有序序列？？？</strong></li>
</ul>
<ul>
<li>只要从比较二个数列的第一个数，谁小就先取谁，取了后就在对应数列中删除这个数。然后再进行比较，如果有数列为空，那直接将另一个数列的数据依次取出即可。</li>
</ul>
<h4 id="5-7-1归并排序实现案例"><a href="#5-7-1归并排序实现案例" class="headerlink" title="5.7.1归并排序实现案例"></a><strong>5.7.1归并排序实现案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;



&#x2F;&#x2F;打印数组
void PrintArray(int* arr, int length)&#123;
	for (int i &#x3D; 0; i &lt; length; i++)&#123;
		printf(&quot;%d &quot;, arr[i]);
	&#125;
	printf(&quot;\n&quot;);
&#125;

void Merge(int arr[],int first,int last,int mid,int temp[])&#123;
		
	int i &#x3D; first; &#x2F;&#x2F;第一个有序序列开始的下标
	int j &#x3D; mid + 1; &#x2F;&#x2F;第二个有序序列开始的下标
	int length &#x3D; 0;

	&#x2F;&#x2F;开始合并两个有序序列
	while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; last)&#123;
		
		&#x2F;&#x2F;找当前两个数中最小的数
		if (arr[i] &lt; arr[j])&#123;
			&#x2F;&#x2F;将最小数放到temp中
			temp[length] &#x3D; arr[i];
			i++;
		&#125;
		else&#123;
			temp[length] &#x3D; arr[j];
			j++;
		&#125;

		length++;
	&#125;

	&#x2F;&#x2F;两个序列中肯定有一个还剩下数据，但是这里我不知道那个还剩下数据,所以我写两个while循环
	while (i &lt;&#x3D; mid)&#123;
		temp[length] &#x3D; arr[i];
		i++;
		length++;
	&#125;

	while (j &lt;&#x3D; last)&#123;
		temp[length] &#x3D; arr[j];
		j++;
		length++;
	&#125;

	&#x2F;&#x2F;覆盖原来位置的无序序列
	for (int i &#x3D; 0; i &lt; length; i++)&#123;
		&#x2F;&#x2F;printf(&quot;%d &quot;,temp[i]);
		arr[first + i] &#x3D; temp[i];
	&#125;
	&#x2F;&#x2F;printf(&quot;\n&quot;);

&#125;

&#x2F;&#x2F;归并排序
void MergeSort(int arr[], int first, int last, int temp[])&#123;

	if (first &#x3D;&#x3D; last)&#123;
		return;
	&#125;
	&#x2F;&#x2F;从哪里拆分？我们这里从中间拆分
	int mid &#x3D; (first + last) &#x2F; 2;
	&#x2F;&#x2F;对左半部分进行拆分
	MergeSort(arr, first, mid, temp);
	&#x2F;&#x2F;对右半部分拆分
	MergeSort(arr, mid + 1, last, temp);
	&#x2F;&#x2F;拆分完了，然后合并
	Merge(arr, first, last, mid, temp);
&#125;

void test01()&#123;
	
	int array[] &#x3D; &#123; 23, 12, 89, 6, 45, 77, 67&#125;;
	int length &#x3D; sizeof(array) &#x2F; sizeof(int);
	&#x2F;&#x2F;打印归并排序前的数组
	printf(&quot;打印归并排序前的数组:\n&quot;);
	PrintArray(array, length);
	&#x2F;&#x2F;对数组进行归并排序
	int* temp &#x3D; (int*)malloc(sizeof(int)* length);
	MergeSort(array, 0, length - 1, temp);
	free(temp);
	printf(&quot;打印归并排序后的数组:\n&quot;);
	PrintArray(array, length);

&#125;

int main()&#123;
	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="5-8排序总结"><a href="#5-8排序总结" class="headerlink" title="5.8排序总结"></a><strong>5.8排序总结</strong></h2><table>
<thead>
<tr>
<th><strong>排序算法</strong></th>
<th><strong>平均时间复杂度</strong></th>
<th><strong>最坏时间复杂度</strong></th>
<th><strong>平均空间复杂度</strong></th>
<th><strong>稳定性</strong></th>
</tr>
</thead>
<tbody><tr>
<td>选择排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>冒泡排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>直接插入排序</td>
<td>O(n^2)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td>O(nlogn)</td>
<td>O(n^2)</td>
<td>O(log2n)</td>
<td>不稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td>O(nlogn)</td>
<td>O(n^2)</td>
<td>O(1)</td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td>O(nlogn)</td>
<td>O(nlogn)</td>
<td>O(n)</td>
<td>稳定</td>
</tr>
</tbody></table>
<h2 id="6-C-模板类与数据结构基础"><a href="#6-C-模板类与数据结构基础" class="headerlink" title="6.C++模板类与数据结构基础"></a><strong>6.C++模板类与数据结构基础</strong></h2><h3 id="6-1前言"><a href="#6-1前言" class="headerlink" title="6.1前言"></a><strong>6.1前言</strong></h3><ul>
<li>C++模板是容器的概念。</li>
</ul>
<p><img src="E:\Computer\myblog\hexo\source_posts\数据结构讲义\wps8E1A.tmp.jpg" alt="img"> </p>
<ul>
<li><p><strong>理论提高：</strong>所有容器提供的都是值（value）语意，而非引用（reference）语意。<strong>容器执行插入元素的操作时，内部实施拷贝动作。</strong>所以STL容器内存储的元素必须<strong>能够被拷贝</strong>（必须提供拷贝构造函数）。</p>
</li>
<li><p>加入到容器中的元素，应该可以被加入才行。</p>
</li>
</ul>
<h2 id="6-2模板类设计与实现"><a href="#6-2模板类设计与实现" class="headerlink" title="6.2模板类设计与实现"></a><strong>6.2模板类设计与实现</strong></h2><h4 id="6-2-1链表类-链式存储设计与实现"><a href="#6-2-1链表类-链式存储设计与实现" class="headerlink" title="6.2.1链表类_链式存储设计与实现"></a><strong>6.2.1链表类_链式存储设计与实现</strong></h4><ul>
<li>LinkList.hpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef LINKLIST_HPP
#define LINKLIST_HPP
#include&lt;string&gt;

&#x2F;&#x2F;c++模板完成单向链表

&#x2F;&#x2F;结点结构
template&lt;class T&gt;
class ListNode&#123;
public:
	T data;  &#x2F;&#x2F;数据域
	ListNode* next; &#x2F;&#x2F;指针域
&#125;;

&#x2F;&#x2F;定义链表类
template&lt;class T&gt;
class LinkList&#123;
public:

	&#x2F;&#x2F;构造函数
	LinkList():length(0),head(NULL)&#123;&#125;

	&#x2F;&#x2F;链表操作相关API
	&#x2F;&#x2F;设置链表长度
	void setLength(int length)&#123;
		if (length &lt; 0)&#123;
			return;
		&#125;
		this-&gt;length &#x3D; length;
	&#125;
	&#x2F;&#x2F;获得链表长度
	int getLength()&#123;
		return this-&gt;length;
	&#125;
	&#x2F;&#x2F;设置链表头结点
	void setHead(ListNode&lt;T&gt;* head)&#123;
		this-&gt;head &#x3D; head;
	&#125;
	&#x2F;&#x2F;获得链表的头结点
	ListNode&lt;T&gt;* getHead()&#123;
		return this-&gt;head;
	&#125;
	&#x2F;&#x2F;插入元素
	int Insert(int pos, T value)&#123;
		
		&#x2F;&#x2F;创建结点
		ListNode&lt;T&gt;* newnode &#x3D; new ListNode&lt;T&gt;();
		newnode-&gt;next &#x3D; NULL;
		newnode-&gt;data &#x3D; value;

		&#x2F;&#x2F;第一次插入
		if (this-&gt;head &#x3D;&#x3D; NULL)&#123;
			this-&gt;head &#x3D; newnode;
			this-&gt;length++;
			return 0;
		&#125;

		&#x2F;&#x2F;头插法
		ListNode&lt;T&gt;* pCurrent &#x3D; head;
		if(pos &#x3D;&#x3D; 0)&#123;
			newnode-&gt;next &#x3D; pCurrent;
			this-&gt;head &#x3D; newnode;
			this-&gt;length++;
			return 0;
		&#125;

		&#x2F;&#x2F;找到插入位置
		&#x2F;&#x2F;ListNode&lt;T&gt;* pCurrent &#x3D; head;
		for (int i &#x3D; 1; i &lt; pos;i++)&#123;
			if (pCurrent-&gt;next &#x3D;&#x3D; NULL)&#123;
				break;
			&#125;
			pCurrent &#x3D; pCurrent-&gt;next;
		&#125;
		&#x2F;&#x2F;插入新的结点
		newnode-&gt;next &#x3D; pCurrent-&gt;next;
		pCurrent-&gt;next &#x3D; newnode;
		this-&gt;length++;
	&#125;

	&#x2F;&#x2F;删除某个位置的结点
	int Delete(int pos)&#123;
		
		if (this-&gt;length &#x3D;&#x3D; 0)&#123;
			return -1;
		&#125;
		if(pos &gt; this-&gt;length || pos &lt; 0)&#123;
			return -2;
		&#125;

		&#x2F;&#x2F;头删法
		if (pos &#x3D;&#x3D; 0)&#123;
			ListNode&lt;T&gt;* pDel &#x3D; this-&gt;head;
			this-&gt;head &#x3D; pDel-&gt;next;
			this-&gt;length--;
			delete pDel;
			return 0;
		&#125;

		&#x2F;&#x2F;找删除的位置
		ListNode&lt;T&gt;* pCurrent &#x3D; head;
		for (int i &#x3D; 1; i &lt; pos;i++)&#123;
			pCurrent &#x3D; pCurrent-&gt;next;
		&#125;

		ListNode&lt;T&gt;* pDel &#x3D; pCurrent-&gt;next;
		&#x2F;&#x2F;重新连接结点
		pCurrent-&gt;next &#x3D; pDel-&gt;next;
		&#x2F;&#x2F;删除结点
		delete pDel;
		this-&gt;length--;
	&#125;

	&#x2F;&#x2F;判断链表是否为空
	bool IsEmpty()&#123;
		if (this-&gt;length &#x3D;&#x3D; 0)&#123;
			return true;
		&#125;
		return false;
	&#125;
	~LinkList()&#123;
		while (this-&gt;length)&#123;
			Delete(0);
		&#125;
	&#125;
private:
	int length; &#x2F;&#x2F;保存结点数量
	ListNode&lt;T&gt;* head;
&#125;;

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>LinkListTest.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&quot;LinkList.hpp&quot;
using namespace std;

&#x2F;&#x2F;测试单向链表容器
void test01()&#123;

	&#x2F;&#x2F;创建容器
	LinkList&lt;int&gt; list;
	&#x2F;&#x2F;向容器中插入数据
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		list.Insert(list.getLength(), i);
	&#125;
	&#x2F;&#x2F;遍历打印链表
	ListNode&lt;int&gt;* pCurrent &#x3D; list.getHead();
	while (pCurrent !&#x3D; NULL)&#123;
		cout &lt;&lt; pCurrent-&gt;data &lt;&lt; &quot; &quot;;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
	cout &lt;&lt; endl;


	&#x2F;&#x2F;删除结点
	list.Delete(0);
	list.Delete(1);

	&#x2F;&#x2F;遍历打印链表
	pCurrent &#x3D; list.getHead();
	while (pCurrent !&#x3D; NULL)&#123;
		cout &lt;&lt; pCurrent-&gt;data &lt;&lt; &quot; &quot;;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
	cout &lt;&lt; endl;
&#125;


&#x2F;&#x2F;Teacher类
class Teacher&#123;
public:
	Teacher()&#123;&#125;
	Teacher(string name, int age)&#123;
		this-&gt;m_name &#x3D; name;
		this-&gt;m_age &#x3D; age;
	&#125;
	&#x2F;&#x2F;拷贝构造
	Teacher(const Teacher&amp; t)&#123;
		this-&gt;m_name &#x3D; t.m_name;
		this-&gt;m_age &#x3D; t.m_age;
	&#125;
	&#x2F;&#x2F;重载&#x3D;操作符
	Teacher operator&#x3D;(Teacher&amp; t)&#123;
		this-&gt;m_name &#x3D; t.m_name;
		this-&gt;m_age &#x3D; t.m_age;
		return *this;
	&#125;
public:
	string m_name;
	int m_age;
&#125;;

&#x2F;&#x2F;容器中存储对象 重点：容器元素都是值寓意，而非引用寓意
void test02()&#123;

	&#x2F;&#x2F;创建两个Teacher类的实例
	Teacher t1(&quot;aaa&quot;, 10), t2(&quot;bbb&quot;, 20);
	&#x2F;&#x2F;创建容器
	LinkList&lt;Teacher&gt; list;
	&#x2F;&#x2F;向list中插入元素
	list.Insert(0, t1);
	list.Insert(0, t2);
	&#x2F;&#x2F;打印容器中的元素的值
	ListNode&lt;Teacher&gt;* pCurrent &#x3D; list.getHead();
	while (pCurrent !&#x3D; NULL)&#123;
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; pCurrent-&gt;data.m_name &lt;&lt; &quot; Age:&quot; &lt;&lt; pCurrent-&gt;data.m_age &lt;&lt; endl;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
	list.Delete(1);
	&#x2F;&#x2F;打印容器中的元素的值
	pCurrent &#x3D; list.getHead();
	while (pCurrent !&#x3D; NULL)&#123;
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; pCurrent-&gt;data.m_name &lt;&lt; &quot; Age:&quot; &lt;&lt; pCurrent-&gt;data.m_age &lt;&lt; endl;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;

&#125;

&#x2F;&#x2F;容器中存储指针
void test03()&#123;

	&#x2F;&#x2F;创建两个Teacher类的实例
	Teacher t1(&quot;aaa&quot;, 10), t2(&quot;bbb&quot;, 20);
	&#x2F;&#x2F;创建容器
	LinkList&lt;Teacher*&gt; list;
	&#x2F;&#x2F;插入元素
	list.Insert(0, &amp;t1);
	list.Insert(0, &amp;t2);

	&#x2F;&#x2F;打印容器中的元素的值
	ListNode&lt;Teacher*&gt;* pCurrent &#x3D; list.getHead();
	while (pCurrent !&#x3D; NULL)&#123;
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; pCurrent-&gt;data-&gt;m_name &lt;&lt; &quot; Age:&quot; &lt;&lt; pCurrent-&gt;data-&gt;m_age &lt;&lt; endl;
		pCurrent &#x3D; pCurrent-&gt;next;
	&#125;
&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	&#x2F;&#x2F;test02();
	test03();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-2-2栈类-链式存储设计与实现"><a href="#6-2-2栈类-链式存储设计与实现" class="headerlink" title="6.2.2栈类_链式存储设计与实现"></a><strong>6.2.2栈类_链式存储设计与实现</strong></h4><ul>
<li>LinkStack.hpp</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">#ifndef LINKQUEUE_HPP
#define LINKQUEUE_HPP

&#x2F;&#x2F;结点结构
template&lt;class T&gt;
class LinkNode&#123;
public:
	T data;
	LinkNode* next;
&#125;;

&#x2F;&#x2F;队列类
template&lt;class T&gt;
class LinkQueue&#123;
public:
	&#x2F;&#x2F;初始化链式队列
	LinkQueue()&#123;
		pFront &#x3D; NULL;
		pBack &#x3D; NULL;
		mLength &#x3D; 0;
	&#125;
	&#x2F;&#x2F;获得队列长度
	int getLength()&#123;
		return this-&gt;mLength;
	&#125;
	&#x2F;&#x2F;队列加入元素
	void Push(T data)&#123;
		
		&#x2F;&#x2F;创建新的结点
		LinkNode&lt;T&gt;* newnode &#x3D; new LinkNode&lt;T&gt;();
		newnode-&gt;data &#x3D; data;
		newnode-&gt;next &#x3D; NULL;

		&#x2F;&#x2F;判断是不是第一次插入
		if (pFront &#x3D;&#x3D; NULL &amp;&amp; pBack &#x3D;&#x3D; NULL)&#123;
			pFront &#x3D; newnode;
			pBack &#x3D; newnode;
			this-&gt;mLength++;
			return;
		&#125;

		&#x2F;&#x2F;其他情况
		this-&gt;pBack-&gt;next &#x3D; newnode;
		this-&gt;pBack &#x3D; newnode;
		this-&gt;mLength++;

		return;
	&#125;

	T&amp; Front()&#123;
		return this-&gt;pFront-&gt;data;
	&#125;

	void Pop()&#123;

		if (this-&gt;mLength &#x3D;&#x3D; 0)&#123;
			return;
		&#125;

		&#x2F;&#x2F;当队列中只有一个元素的时候
		if (this-&gt;mLength &#x3D;&#x3D; 1)&#123;
			delete this-&gt;pFront;
			this-&gt;pFront &#x3D; NULL;
			this-&gt;pBack &#x3D; NULL;
			this-&gt;mLength--;
			return;
		&#125;

		&#x2F;&#x2F;其他情况
		LinkNode&lt;T&gt;* pDel &#x3D; this-&gt;pFront;
		this-&gt;pFront &#x3D; pDel-&gt;next;
		delete pDel;
		this-&gt;mLength--;
		return;
	&#125;
	~LinkQueue()&#123;
		while (this-&gt;mLength &gt; 0)&#123;
			Pop();
		&#125;
	&#125;
private:
	LinkNode&lt;T&gt;* pFront; &#x2F;&#x2F;队头
	LinkNode&lt;T&gt;* pBack; &#x2F;&#x2F;队尾
	int mLength; &#x2F;&#x2F;队列长度
&#125;;
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>LinkStackTest.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&quot;LinkStack.hpp&quot;
using namespace std;

&#x2F;&#x2F;栈容器存储基础数据类型
void test01()&#123;
	
	&#x2F;&#x2F;创建栈容器
	LinkStack&lt;int&gt; lstack;
	&#x2F;&#x2F;向栈中加入元素
	for (int i &#x3D; 10; i &lt; 20;i++)&#123;
		lstack.Push(i);
	&#125;
	&#x2F;&#x2F;打印栈中元素
	while (lstack.getLength() &gt; 0)&#123;
		int val &#x3D; lstack.Top();
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
		lstack.Pop();
	&#125;
	cout &lt;&lt; endl;
&#125;

&#x2F;&#x2F;栈容器存储对象

&#x2F;&#x2F;Teacher类
class Teacher&#123;
public:
	Teacher()&#123;&#125;
	Teacher(string name, int age)&#123;
		this-&gt;m_name &#x3D; name;
		this-&gt;m_age &#x3D; age;
	&#125;
	&#x2F;&#x2F;拷贝构造
	Teacher(const Teacher&amp; t)&#123;
		this-&gt;m_name &#x3D; t.m_name;
		this-&gt;m_age &#x3D; t.m_age;
	&#125;
	&#x2F;&#x2F;重载&#x3D;操作符
	Teacher operator&#x3D;(Teacher&amp; t)&#123;
		this-&gt;m_name &#x3D; t.m_name;
		this-&gt;m_age &#x3D; t.m_age;
		return *this;
	&#125;
public:
	string m_name;
	int m_age;
&#125;;

void test02()&#123;

	&#x2F;&#x2F;创建栈
	LinkStack&lt;Teacher&gt; lstack;
	&#x2F;&#x2F;插入数据
	Teacher t1(&quot;aaa&quot;, 10), t2(&quot;bbb&quot;, 20),t3(&quot;ccc&quot;,30);
	lstack.Push(t1);
	lstack.Push(t2);
	lstack.Push(t3);
	&#x2F;&#x2F;遍历打印
	while (lstack.getLength() &gt; 0)&#123;
		Teacher teahcer &#x3D; lstack.Top();
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; teahcer.m_name &lt;&lt; &quot; Age:&quot; &lt;&lt; teahcer.m_age &lt;&lt; endl;;
		lstack.Pop();
	&#125;

&#125;

&#x2F;&#x2F;容器存储对象指针
void test03()&#123;
	
	&#x2F;&#x2F;创建栈
	LinkStack&lt;Teacher*&gt; lstack;
	&#x2F;&#x2F;插入数据
	Teacher t1(&quot;aaa&quot;, 10), t2(&quot;bbb&quot;, 20), t3(&quot;ccc&quot;, 30);
	lstack.Push(&amp;t1);
	lstack.Push(&amp;t2);
	lstack.Push(&amp;t3);
	&#x2F;&#x2F;遍历打印
	while (lstack.getLength() &gt; 0)&#123;
		Teacher* teahcer &#x3D; lstack.Top();
		cout &lt;&lt; &quot;Name:&quot; &lt;&lt; teahcer-&gt;m_name &lt;&lt; &quot; Age:&quot; &lt;&lt; teahcer-&gt;m_age &lt;&lt; endl;;
		lstack.Pop();
	&#125;

&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	&#x2F;&#x2F;test02();
	test03();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-2-3队列类-链式存储设计与实现"><a href="#6-2-3队列类-链式存储设计与实现" class="headerlink" title="6.2.3队列类_链式存储设计与实现"></a><strong>6.2.3队列类_链式存储设计与实现</strong></h4><ul>
<li>LinkQueue.hpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef LINKQUEUE_HPP
#define LINKQUEUE_HPP

&#x2F;&#x2F;结点结构
template&lt;class T&gt;
class LinkNode&#123;
public:
	T data;
	LinkNode* next;
&#125;;

&#x2F;&#x2F;队列类
template&lt;class T&gt;
class LinkQueue&#123;
public:
	&#x2F;&#x2F;初始化链式队列
	LinkQueue()&#123;
		pFront &#x3D; NULL;
		pBack &#x3D; NULL;
		mLength &#x3D; 0;
	&#125;
	&#x2F;&#x2F;获得队列长度
	int getLength()&#123;
		return this-&gt;mLength;
	&#125;
	&#x2F;&#x2F;队列加入元素
	void Push(T data)&#123;
		
		&#x2F;&#x2F;创建新的结点
		LinkNode&lt;T&gt;* newnode &#x3D; new LinkNode&lt;T&gt;();
		newnode-&gt;data &#x3D; data;
		newnode-&gt;next &#x3D; NULL;

		&#x2F;&#x2F;判断是不是第一次插入
		if (pFront &#x3D;&#x3D; NULL &amp;&amp; pBack &#x3D;&#x3D; NULL)&#123;
			pFront &#x3D; newnode;
			pBack &#x3D; newnode;
			this-&gt;mLength++;
			return;
		&#125;

		&#x2F;&#x2F;其他情况
		this-&gt;pBack-&gt;next &#x3D; newnode;
		this-&gt;pBack &#x3D; newnode;
		this-&gt;mLength++;

		return;
	&#125;

	T&amp; Front()&#123;
		return this-&gt;pFront-&gt;data;
	&#125;

	void Pop()&#123;

		if (this-&gt;mLength &#x3D;&#x3D; 0)&#123;
			return;
		&#125;

		&#x2F;&#x2F;当队列中只有一个元素的时候
		if (this-&gt;mLength &#x3D;&#x3D; 1)&#123;
			delete this-&gt;pFront;
			this-&gt;pFront &#x3D; NULL;
			this-&gt;pBack &#x3D; NULL;
			this-&gt;mLength--;
			return;
		&#125;

		&#x2F;&#x2F;其他情况
		LinkNode&lt;T&gt;* pDel &#x3D; this-&gt;pFront;
		this-&gt;pFront &#x3D; pDel-&gt;next;
		delete pDel;
		this-&gt;mLength--;
		return;
	&#125;

private:
	LinkNode&lt;T&gt;* pFront; &#x2F;&#x2F;队头
	LinkNode&lt;T&gt;* pBack; &#x2F;&#x2F;队尾
	int mLength; &#x2F;&#x2F;队列长度
&#125;;

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>LinkQueueTest.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&quot;LinkQueue.hpp&quot;
using namespace std;

&#x2F;&#x2F;存储基础数据类型
void test01()&#123;

	&#x2F;&#x2F;创建链式队列
	LinkQueue&lt;int&gt; queue;
	&#x2F;&#x2F;添加数据
	for (int i &#x3D; 0; i &lt; 10;i++)&#123;
		queue.Push(i);
	&#125;
	&#x2F;&#x2F;修改队头元素的值
	queue.Front() &#x3D; 100;
	&#x2F;&#x2F;打印队列
	while (queue.getLength() &gt; 0)&#123;
		int val &#x3D; queue.Front();
		cout &lt;&lt; val &lt;&lt; &quot; &quot;;
		queue.Pop();
	&#125;
	cout &lt;&lt; endl;
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-2-4链表类-顺序存储设计与实现"><a href="#6-2-4链表类-顺序存储设计与实现" class="headerlink" title="6.2.4链表类_顺序存储设计与实现"></a><strong>6.2.4链表类_顺序存储设计与实现</strong></h4><ul>
<li>SqList.hpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef SQLIST_HPP
#define SQLIST_HPP

&#x2F;&#x2F;链表类
template&lt;class T&gt;
class SqList&#123;
public:
	&#x2F;&#x2F;构造函数，由用户指定容量
	SqList(int capacity)&#123;
		this-&gt;mCapacity &#x3D; capacity;
		this-&gt;mLength &#x3D; 0;
		this-&gt;mArray &#x3D; new T[capacity];
	&#125;
	&#x2F;&#x2F;获得容量
	int getCapacity()&#123;
		return this-&gt;mCapacity;
	&#125;
	&#x2F;&#x2F;获得链表长度
	int getLength()&#123;
		return this-&gt;mLength;
	&#125;
	&#x2F;&#x2F;获得数组
	T* getArray()&#123;
		return this-&gt;mArray;
	&#125;
	&#x2F;&#x2F;获得指定位置元素
	T Get(int pos)&#123;
		if (pos &gt; this-&gt;mLength - 1)&#123;
			return -1;
		&#125;
		return this-&gt;mArray[pos];
	&#125;
	&#x2F;&#x2F;链表中指定位置插入结点
	void Insert(int pos, T data)&#123;
		if (this-&gt;mLength &gt;&#x3D; this-&gt;mCapacity)&#123;
			return;
		&#125;
		if (pos &gt; this-&gt;mLength)&#123;
			pos &#x3D; this-&gt;mLength - 1;
		&#125;

		this-&gt;mArray[pos] &#x3D; data;
		this-&gt;mLength++;
	&#125;
	&#x2F;&#x2F;删除指定位置结点
	void Delete(int pos)&#123;
		
		if (pos &gt; this-&gt;mLength-1)&#123;
			return;
		&#125;

		for (int i &#x3D; pos; i &lt; mLength;i++)&#123;
			this-&gt;mArray[i] &#x3D; this-&gt;mArray[i + 1];
		&#125;
		this-&gt;mLength--;
	&#125;

	~SqList()&#123;
		if (mArray !&#x3D; NULL)&#123;
			delete mArray;
		&#125;
	&#125;
private:
	int mCapacity;&#x2F;&#x2F;容量
	int mLength;&#x2F;&#x2F;长度
	T* mArray;
&#125;;

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>SqListTest.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&quot;SqList.hpp&quot;
using namespace std;

void test01()&#123;
	
	&#x2F;&#x2F;创建栈
	SqList&lt;int&gt; list(20);
	&#x2F;&#x2F;插入数据
	for (int i &#x3D; 0; i &lt; 20;i++)&#123;
		list.Insert(i,i+1);
	&#125;
	&#x2F;&#x2F;打印数据
	for (int i &#x3D; 0; i &lt; 20;i++)&#123;
		cout &lt;&lt; list.Get(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;
&#125;

int main()&#123;
	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-2-5栈类-顺序存储设计与实现"><a href="#6-2-5栈类-顺序存储设计与实现" class="headerlink" title="6.2.5栈类_顺序存储设计与实现"></a><strong>6.2.5栈类_顺序存储设计与实现</strong></h4><ul>
<li>SqStack.hpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef SQSTACK_HPP
#define SQSTACK_HPP

&#x2F;&#x2F;栈的顺序存储
template&lt;class T&gt;
class SqStack&#123;
public:
	&#x2F;&#x2F;构造函数
	SqStack(int capacity)&#123;
		this-&gt;mCapacity &#x3D; capacity;
		this-&gt;mLength &#x3D; 0;
		this-&gt;mArray &#x3D; new T[capacity];
	&#125;
	int getLength()&#123;
		return this-&gt;mLength;
	&#125;
	&#x2F;&#x2F;压栈
	void Push(T data)&#123;
		
		if (this-&gt;mLength &gt;&#x3D; this-&gt;mCapacity)&#123;
			return;
		&#125;

		this-&gt;mArray[this-&gt;mLength] &#x3D; data;
		this-&gt;mLength++;

	&#125;

	&#x2F;&#x2F;出栈
	T Top()&#123;
		return this-&gt;mArray[this-&gt;mLength - 1];
	&#125;

	&#x2F;&#x2F;弹出栈顶元素
	void Pop()&#123;
		this-&gt;mLength--;
	&#125;

	~SqStack()&#123;
		if (this-&gt;mArray !&#x3D; NULL)&#123;
			delete this-&gt;mArray;
		&#125;
	&#125;
private:
	T* mArray;
	int mCapacity; &#x2F;&#x2F;容量
	int mLength; &#x2F;&#x2F;长度
&#125;;

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>SqStackTest.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&quot;SqStack.hpp&quot;
using namespace std;

void test01()&#123;
	
	&#x2F;&#x2F;创建栈
	SqStack&lt;int&gt; stack(20);
	&#x2F;&#x2F;压栈
	for (int i &#x3D; 0; i &lt; 20;i++)&#123;
		stack.Push(i);
	&#125;
	&#x2F;&#x2F;遍历
	while (stack.getLength() &gt; 0)&#123;
		cout &lt;&lt; stack.Top() &lt;&lt; &quot; &quot;;
		stack.Pop();
	&#125;
	cout &lt;&lt; endl;

&#125;

int main()&#123;
	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-2-6队列类-顺序存储设计与实现"><a href="#6-2-6队列类-顺序存储设计与实现" class="headerlink" title="6.2.6队列类_顺序存储设计与实现"></a><strong>6.2.6队列类_顺序存储设计与实现</strong></h4><ul>
<li>SqQueue.hpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef SQQUEUE_HPP
#define SQQUEUE_HPP

&#x2F;&#x2F;队列的顺序存储
template&lt;class T&gt;
class SqQueue&#123;
public:
	SqQueue(int capacity)&#123;
		this-&gt;mCapacity &#x3D; capacity;
		this-&gt;mLength &#x3D; 0;
		this-&gt;mArray &#x3D; new T[capacity];
	&#125;
	&#x2F;&#x2F;获得队列长度
	int getLength()&#123;
		return this-&gt;mLength;
	&#125;

	&#x2F;&#x2F;获得容量
	int getCapacity()&#123;
		return this-&gt;mCapacity;
	&#125;

	&#x2F;&#x2F;入队操作
	void Push(T data)&#123;
		if (this-&gt;mLength &gt;&#x3D; this-&gt;mCapacity)&#123;
			return;
		&#125;
		this-&gt;mArray[mLength] &#x3D; data;
		this-&gt;mLength++;
	&#125;

	&#x2F;&#x2F;出队操作
	T Front()&#123;
		return this-&gt;mArray[0];
	&#125;

	&#x2F;&#x2F;队头弹出元素
	void Pop()&#123;
		for (int i &#x3D; 0; i &lt; mLength; i++)&#123;
			mArray[i] &#x3D; mArray[i + 1];
		&#125;
		this-&gt;mLength--;
	&#125;
private:
	int mLength;
	T* mArray;
	int mCapacity;
&#125;;

#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>SqQueueTest.cpp</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&quot;SqQueue.hpp&quot;
using namespace std;

void test01()&#123;
	
	&#x2F;&#x2F;创建队列
	SqQueue&lt;int&gt; queue(20);
	&#x2F;&#x2F;向队列中插入元素
	for (int i &#x3D; 0; i &lt; 20;i++)&#123;
		queue.Push(i);
	&#125;
	&#x2F;&#x2F;打印队列元素
	while (queue.getLength() &gt; 0)&#123;
		cout &lt;&lt; queue.Front() &lt;&lt; &quot; &quot;;
		queue.Pop();
	&#125;
	cout &lt;&lt; endl;

&#125;

int main()&#123;
	test01();
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式讲义</title>
    <url>/2022/07/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AE%B2%E4%B9%89/</url>
    <content><![CDATA[<h2 id="1-设计模式概述"><a href="#1-设计模式概述" class="headerlink" title="1.设计模式概述"></a><strong>1.设计模式概述</strong></h2><ul>
<li>如果把修习软件开发当做武功修炼的话，那么可以分为招式和内功。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsB07E.tmp.jpg" alt="img"> <img src="http://qiniu.orangew.cn/img/wpsB07F.tmp.jpg" alt="img"> </p>
<ul>
<li><p>招式： Java、C#、C++等编程语言；</p>
</li>
<li><p>Eclipse、Visual Studio等开发工具；</p>
</li>
<li><p>JSP、ASP.net等开发技术；</p>
</li>
<li><p>Struts、Hibernate、JBPM等框架技术；</p>
</li>
<li><p>内功： 数据结构、算法、设计模式、重构、软件工程</p>
</li>
</ul>
<h3 id="1-1设计模式从何而来"><a href="#1-1设计模式从何而来" class="headerlink" title="1.1设计模式从何而来"></a><strong>1.1设计模式从何而来</strong></h3><p>模式之父——</p>
<p>Christopher Alexander（克里斯托弗.亚历山大）———哈佛大学建筑学博士、美国加州大学伯克利分校建筑学教授、加州大学伯克利分校环境结构研究所所长、美国艺术和科学院院士。 </p>
<h3 id="1-2软件设计模式又从何而来"><a href="#1-2软件设计模式又从何而来" class="headerlink" title="1.2软件设计模式又从何而来"></a><strong>1.2软件设计模式又从何而来</strong></h3><p><img src="http://qiniu.orangew.cn/img/wpsB091.tmp.jpg" alt="img"> </p>
<ul>
<li>  四人组（Gang of Four），简称GoF。Ralph Johnson，Richard Helm，Erich Gamma，John Vlissides</li>
</ul>
<ul>
<li><p> GoF将模式的概念引入软件工程领域，这标志着软件模式的诞生。软件模式(Software Patterns)是将模式的一般概念应用于软件开发领域，即软件开发的总体指导思路或参照样板。软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等，实际上，在软件开发生命周期的每一个阶段都存在着一些被认同的模式。</p>
</li>
<li><p>软件模式与具体的应用领域无关，也就是说无论你从事的是移动应用开发、桌面应用开发、Web应用开发还是嵌入式软件的开发，都可以使用软件模式。无论你是使用Java、C#、Objective-C、VB.net、Smalltalk等纯面向对象编程语言，还是使用C++、PHP、Delphi、JavaScript等可支持面向对象编程的语言，你都需要了解软件设计模式！</p>
</li>
<li><p>我们可用一句大白话：“<strong>在一定环境下，用固定套路解决问题。</strong>”</p>
</li>
</ul>
<h3 id="1-3软件设计模式的种类"><a href="#1-3软件设计模式的种类" class="headerlink" title="1.3软件设计模式的种类"></a><strong>1.3软件设计模式的种类</strong></h3><ul>
<li>GoF提出的设计模式有23个，包括：</li>
</ul>
<ul>
<li>创建型(Creational)模式： 如何创建对象；</li>
</ul>
<ul>
<li>结构型(Structural )模式： 如何实现类或对象的组合；</li>
</ul>
<ul>
<li>行为型(Behavioral)模式： 类或对象怎样交互以及怎样分配职责。</li>
<li> 有一个“简单工厂模式”不属于GoF 23种设计模式，但大部分的设计模式书籍都会对它进行专门的介绍。</li>
<li>设计模式目前种类： GoF的23种  + “简单工厂模式” = 24种。</li>
</ul>
<h3 id="1-4软件设计模式有什么用？"><a href="#1-4软件设计模式有什么用？" class="headerlink" title="1.4软件设计模式有什么用？"></a><strong>1.4软件设计模式有什么用？</strong></h3><ul>
<li> 从高端来讲的话，那么作用大了去了，这里我们也体会不到，那么对于初学者来说，<strong>学习设计模式将有助于更加深入地理解面向对象思想</strong>, 让你知道：</li>
</ul>
<p>​    1. 如何将代码分散在几个不同的类中？</p>
<p>​    2. 为什么要有“接口”？</p>
<p>​    3. 何谓针对抽象编程？</p>
<p>​    4. 何时不应该使用继承？</p>
<p>​    5. 如果不修改源代码增加新功能？</p>
<p>​    6. 更好地阅读和理解现有类库与其他系统中的源代码。</p>
<ul>
<li>学习设计模式会让你早点脱离面向对象编程的“菜鸟期”。</li>
</ul>
<h3 id="1-5如何学好设计模式"><a href="#1-5如何学好设计模式" class="headerlink" title="1.5如何学好设计模式"></a><strong>1.5如何学好设计模式</strong></h3><ul>
<li>设计模式的基础是：<strong>多态</strong>。</li>
</ul>
<ul>
<li>初学者： 积累案例， 不要盲目的背类图。</li>
</ul>
<ul>
<li>初级开发人员：多思考，多梳理，归纳总结，尊重事物的认知规律，注意临界点的突破，不要浮躁。</li>
</ul>
<ul>
<li>中级开发人员：合适的开发环境，寻找合适的设计模式来解决问题。多应用， 对经典则组合设计模式的大量，自由的运用。要不断的追求。</li>
</ul>
<h3 id="1-6设计模式总览表"><a href="#1-6设计模式总览表" class="headerlink" title="1.6设计模式总览表"></a><strong>1.6设计模式总览表</strong></h3><table>
<thead>
<tr>
<th>模式名称</th>
<th>模式名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>创建型模式  Creational Pattern（6）</td>
<td>单例模式★★★★☆</td>
<td>是保证一个类仅有一个实例，并提供一个访问它的全局访问点。</td>
</tr>
<tr>
<td>简单工厂模式★★★☆☆</td>
<td>通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</td>
<td></td>
</tr>
<tr>
<td>工厂方法模式★★★★★</td>
<td>定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。</td>
<td></td>
</tr>
<tr>
<td>抽象工厂模式★★★★★</td>
<td>提供一个创建一系列相关或者相互依赖的接口，而无需指定它们具体的类。</td>
<td></td>
</tr>
<tr>
<td>原型模式★★★☆☆</td>
<td>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</td>
<td></td>
</tr>
<tr>
<td>建造者模式★★☆☆☆</td>
<td>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>模式名称</th>
<th>模式名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>结构型模式Structural Pattern（7）</td>
<td>适配器模式★★★★☆</td>
<td>将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</td>
</tr>
<tr>
<td>桥接模式★★★☆☆</td>
<td>将抽象部分与实际部分分离，使它们都可以独立的变化。</td>
<td></td>
</tr>
<tr>
<td>组合模式★★☆☆☆</td>
<td>将对象组合成树形结构以表示“部分–整体”的层次结构。使得用户对单个对象和组合对象的使用具有一致性。</td>
<td></td>
</tr>
<tr>
<td>装饰模式★★★☆☆</td>
<td>动态的给一个对象添加一些额外的职责。就增加功能来说，此模式比生成子类更为灵活。</td>
<td></td>
</tr>
<tr>
<td>外观模式★★★★★</td>
<td>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</td>
<td></td>
</tr>
<tr>
<td>享元模式★☆☆☆☆</td>
<td>以共享的方式高效的支持大量的细粒度的对象。</td>
<td></td>
</tr>
<tr>
<td>代理模式★★★★☆</td>
<td>为其他对象提供一种代理以控制对这个对象的访问。</td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>模式名称</th>
<th>模式名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>行为型模式Behavioral Pattern（11）</td>
<td>职责链模式★★☆☆☆</td>
<td>在该模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</td>
</tr>
<tr>
<td>命令模式★★★★☆</td>
<td>将一个请求封装为一个对象，从而使你可用不同的请求对客户端进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</td>
<td></td>
</tr>
<tr>
<td>解释器模式★☆☆☆☆</td>
<td>如何为简单的语言定义一个语法，如何在该语言中表示一个句子，以及如何解释这些句子。</td>
<td></td>
</tr>
<tr>
<td>迭代器模式★☆☆☆☆</td>
<td>提供了一种方法顺序来访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</td>
<td></td>
</tr>
<tr>
<td>中介者模式★★☆☆☆</td>
<td>定义一个中介对象来封装系列对象之间的交互。终结者使各个对象不需要显示的相互调用 ，从而使其耦合性松散，而且可以独立的改变他们之间的交互。</td>
<td></td>
</tr>
<tr>
<td>备忘录模式★★☆☆☆</td>
<td>是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</td>
<td></td>
</tr>
<tr>
<td>观察者模式★★★★★</td>
<td>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</td>
<td></td>
</tr>
<tr>
<td>状态模式★★☆☆☆</td>
<td>对象的行为，依赖于它所处的状态。</td>
<td></td>
</tr>
<tr>
<td>策略模式★★★★☆</td>
<td>准备一组算法，并将每一个算法封装起来，使得它们可以互换。</td>
<td></td>
</tr>
<tr>
<td>模板方法模式★★★☆☆</td>
<td>得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</td>
<td></td>
</tr>
<tr>
<td>访问者模式★☆☆☆☆</td>
<td>表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</td>
<td></td>
</tr>
</tbody></table>
<h2 id="2-面向对象设计原则"><a href="#2-面向对象设计原则" class="headerlink" title="2.面向对象设计原则"></a><strong>2.面向对象设计原则</strong></h2><ul>
<li>对于面向对象软件系统的设计而言，在支持可维护性的同时，提高系统的可复用性是一个至关重要的问题，如何同时提高一个软件系统的可维护性和可复用性是面向对象设计需要解决的核心问题之一。在面向对象设计中，可维护性的复用是以设计原则为基础的。每一个原则都蕴含一些面向对象设计的思想，可以从不同的角度提升一个软件结构的设计水平。</li>
</ul>
<ul>
<li>面向对象设计原则为支持可维护性复用而诞生，这些原则蕴含在很多设计模式中，它们是从许多设计方案中总结出的指导性原则。面向对象设计原则也是我们用于评价一个设计模式的使用效果的重要指标之一。</li>
<li>原则的目的： 高内聚，低耦合</li>
</ul>
<h3 id="2-1面向对象设计原创表"><a href="#2-1面向对象设计原创表" class="headerlink" title="2.1面向对象设计原创表"></a><strong>2.1面向对象设计原创表</strong></h3><table>
<thead>
<tr>
<th>名称</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>单一职责原则(Single Responsibility Principle, SRP)★★★★☆</td>
<td>类的职责单一，对外只提供一种功能，而引起类变化的原因都应该只有一个。</td>
</tr>
<tr>
<td>开闭原则(Open-Closed Principle, OCP)★★★★★</td>
<td>类的改动是通过增加代码进行的，而不是修改源代码。</td>
</tr>
<tr>
<td>里氏代换原则(Liskov Substitution Principle, LSP★★★★★</td>
<td>任何抽象类出现的地方都可以用他的实现类进行替换，实际就是虚拟机制，语言级别实现面向对象功能。</td>
</tr>
<tr>
<td>依赖倒转原则(Dependence Inversion Principle, DIP)★★★★★</td>
<td>依赖于抽象(接口)，不要依赖具体的实现(类)，也就是针对接口编程。</td>
</tr>
<tr>
<td>接口隔离原则(Interface Segregation Principle, ISP★★☆☆☆</td>
<td>不应该强迫用户的程序依赖他们不需要的接口方法。一个接口应该只提供一种对外功能，不应该把所有操作都封装到一个接口中去。</td>
</tr>
<tr>
<td>合成复用原则(Composite Reuse Principle, CRP)★★★★☆</td>
<td>如果使用继承，会导致父类的任何变换都可能影响到子类的行为。如果使用对象组合，就降低了这种依赖关系。对于继承和组合，优先使用组合。</td>
</tr>
<tr>
<td>迪米特法则(Law of Demeter, LoD★★★☆☆</td>
<td>一个对象应当对其他对象尽可能少的了解，从而降低各个对象之间的耦合，提高系统的可维护性。例如在一个程序中，各个模块之间相互调用时，通常会提供一个统一的接口来实现。这样其他模块不需要了解另外一个模块的内部实现细节，这样当一个模块内部的实现发生改变时，不会影响其他模块的使用。（黑盒原理）</td>
</tr>
</tbody></table>
<h4 id="2-1-1开闭原则案例"><a href="#2-1-1开闭原则案例" class="headerlink" title="2.1.1开闭原则案例"></a><strong>2.1.1开闭原则案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;计算器类
class Caculaor&#123;
public:
	Caculaor(int a, int b, string moperator)&#123;
		this-&gt;m_a &#x3D; a;
		this-&gt;m_b &#x3D; b;
		this-&gt;m_operator &#x3D; moperator;
	&#125;

	int getResult()&#123;
		
		if (m_operator.compare(&quot;+&quot;) &#x3D;&#x3D; 0)&#123;
			return m_a + m_b;
		&#125;
		else if (m_operator.compare(&quot;-&quot;) &#x3D;&#x3D; 0)&#123;
			return m_a - m_b;
		&#125;
		else if (m_operator.compare(&quot;*&quot;) &#x3D;&#x3D; 0)&#123;
			return m_a * m_b;
		&#125;
		else if (m_operator.compare(&quot;&#x2F;&quot;) &#x3D;&#x3D; 0)&#123;
			return m_a &#x2F; m_b;
		&#125;

	&#125;

private:
	int m_a;
	int m_b;
	string m_operator;
	int m_ret;
&#125;;

&#x2F;*
	缺点： 如果增加取模的运算 需要修改getResult成员方法，如果增加新功能的情况下要修改源代码，那么
	就会有修改出错的可能性。我们应该在增加新的功能时候，不能影响其他已经完成的功能。这就是对修改关闭，
	对扩展开放，叫做开闭原则

*&#x2F;

void test01()&#123;
	Caculaor* caculator &#x3D; new Caculaor(10, 20, &quot;+&quot;);
	cout &lt;&lt; caculator-&gt;getResult() &lt;&lt; endl;
&#125;



&#x2F;* 计算器 开闭原则 start *&#x2F;

&#x2F;&#x2F;计算器的抽象类
class AbstractCaculator&#123;
public:
	AbstractCaculator(int a,int b) :m_a(a), m_b(b)&#123;&#125;
	virtual int getResult() &#x3D; 0;
protected:
	int m_a;
	int m_b;
&#125;;

&#x2F;&#x2F;加法类
class Plus : public AbstractCaculator&#123;
public:
	Plus(int a, int b) :AbstractCaculator(a, b)&#123;&#125;
	virtual int getResult()&#123;
		return m_a + m_b;
	&#125;
&#125;;

&#x2F;&#x2F;减法类
class Minute : public AbstractCaculator&#123;
public:
	Minute(int a, int b) :AbstractCaculator(a, b)&#123;&#125;
	virtual int getResult()&#123;
		return m_a - m_b;
	&#125;
&#125;;


void test02()&#123;
	
	AbstractCaculator* caculator &#x3D; NULL;
	caculator &#x3D; new Plus(10,20);
	cout &lt;&lt; caculator-&gt;getResult() &lt;&lt; endl;

	delete caculator;

	caculator &#x3D; new Minute(10,20);
	cout &lt;&lt; caculator-&gt;getResult() &lt;&lt; endl;

&#125;

&#x2F;* 计算器 开闭原则 end *&#x2F;

int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-1-2迪米特法则案例"><a href="#2-1-2迪米特法则案例" class="headerlink" title="2.1.2迪米特法则案例"></a><strong>2.1.2迪米特法则案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;list&gt;
using namespace std;


&#x2F;&#x2F;楼盘基类
class AbstractBuilding&#123;
public:
	AbstractBuilding(string quality) :m_quality(quality)&#123;&#125;
	virtual void sale() &#x3D; 0;
	string getQuality()&#123;
		return m_quality;
	&#125;
protected:
	string m_quality; &#x2F;&#x2F;楼盘品质
&#125;;

&#x2F;&#x2F;A楼盘
class BuildingA : public AbstractBuilding&#123;
public:
	BuildingA(string quality) :AbstractBuilding(quality)&#123;&#125;
	virtual void sale()&#123;
		cout &lt;&lt; &quot;A楼盘售卖&quot; &lt;&lt; m_quality &lt;&lt; &quot;的房子&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;B楼盘
class BuildingB : public AbstractBuilding&#123;
public:
	BuildingB(string quality) :AbstractBuilding(quality)&#123;&#125;
	virtual void sale()&#123;
		cout &lt;&lt; &quot;B楼盘售卖&quot; &lt;&lt; m_quality &lt;&lt; &quot;的房子&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;房屋中介
class BuildingMediator&#123;
public:
	BuildingMediator()&#123;
		
		AbstractBuilding* building &#x3D; NULL;
		building &#x3D; new BuildingA(&quot;低档品质&quot;);
		this-&gt;addNewBuilding(building);

		building &#x3D; new BuildingB(&quot;高档品质&quot;);
		this-&gt;addNewBuilding(building);

	&#125;
	void addNewBuilding(AbstractBuilding* building)&#123;
		m_list.push_back(building);
	&#125;
	AbstractBuilding* findBuilding(string quality)&#123;
		for (list&lt;AbstractBuilding*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end();it ++)&#123;
			if ((*it)-&gt;getQuality().compare(quality) &#x3D;&#x3D; 0)&#123;
				return *it;
			&#125;
		&#125;

		return NULL;
	&#125;
private:
	list&lt;AbstractBuilding*&gt; m_list;
&#125;;

void test01()&#123;
	
	BuildingMediator* mediator &#x3D; new BuildingMediator;
	AbstractBuilding* building &#x3D;  mediator-&gt;findBuilding(&quot;高档品质&quot;);
	if (building !&#x3D; NULL)&#123;
		building-&gt;sale();
	&#125;
	else&#123;
		cout &lt;&lt; &quot;没有符合要求的楼盘!&quot; &lt;&lt; endl;
	&#125;
	
&#125;



int main()&#123;

	test01();


	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="2-1-3合成复用原则案例"><a href="#2-1-3合成复用原则案例" class="headerlink" title="2.1.3合成复用原则案例"></a><strong>2.1.3合成复用原则案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

class Car &#123;
public:
	virtual void run() &#x3D; 0;
&#125;;

class BWMCar : public Car&#123;
public:
	virtual void run()&#123;
		cout &lt;&lt; &quot;宝马车启动...&quot; &lt;&lt; endl;
	&#125;
&#125;;

class DazhongCar : public Car&#123;
public:
	virtual void run()&#123;
		cout &lt;&lt; &quot;大众车启动...&quot; &lt;&lt; endl;
	&#125;
&#125;;

class PersonA : public BWMCar&#123;
public:
	void drive()&#123;
		run();
	&#125;
&#125;;

void test01()&#123;
	
	PersonA* person &#x3D; new PersonA;
	person-&gt;drive();

&#125;

&#x2F;*
	合成复用原则
	对于继承和组合 优先使用组合
*&#x2F;
class PersonB&#123;
public:
	PersonB(Car* car)&#123;
		pCar &#x3D; car;
	&#125;
	void drive()&#123;
		pCar-&gt;run();
	&#125;
	~PersonB()&#123;
		if (pCar !&#x3D; NULL)&#123;
			delete pCar;
		&#125;
	&#125;
private:
	Car* pCar;
&#125;;

void test02()&#123;

	PersonB* person &#x3D; new PersonB(new BWMCar);
	person-&gt;drive();
	delete person;

	person &#x3D; new PersonB(new DazhongCar);
	person-&gt;drive();
	delete person;
&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	test02();


	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-1-4依赖倒转原则案例"><a href="#2-1-4依赖倒转原则案例" class="headerlink" title="2.1.4依赖倒转原则案例"></a><strong>2.1.4依赖倒转原则案例</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB0A2.tmp.jpg" alt="img"></td>
</tr>
</tbody></table>
<p><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB0B2.tmp.jpg" alt="img"> </p>
<ul>
<li>传统的设计模式通常是自顶向下逐级依赖，这样，底层模块，中间层模块和高层模块的耦合度极高，若任意修改其中的一个，很容易导致全面积的修改，非常麻烦，那么依赖倒转原则利用多态的先天特性，对中间抽象层进行依赖，这样，底层和高层之间进行了<strong>解耦合</strong>。</li>
</ul>
<ul>
<li>下面我们继续看一个符合依赖倒转原则的例子:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

class BankWorker&#123;
public:
	void payService()&#123;
		cout &lt;&lt; &quot;办理付款业务&quot; &lt;&lt; endl;
	&#125;
	void transferService()&#123;
		cout &lt;&lt; &quot;办理转账业务&quot; &lt;&lt; endl;
	&#125;
	void  saveService()&#123;
		cout &lt;&lt; &quot;办理存款业务&quot; &lt;&lt; endl;
	&#125;
&#125;;

void test01()&#123;
	
	BankWorker* worker &#x3D; new BankWorker;
	worker-&gt;payService();&#x2F;&#x2F;存款业务
	worker-&gt;saveService(); &#x2F;&#x2F;存款业务
	worker-&gt;transferService();&#x2F;&#x2F;转账业务

&#125;

&#x2F;&#x2F;依赖倒转原则
&#x2F;&#x2F;抽象层
class AbstractWorkerBank&#123;
public:
	virtual void doBussiness() &#x3D; 0;
&#125;;

&#x2F;&#x2F;只办理存款业务
class SaveBankWorker : public  AbstractWorkerBank&#123;
public:
	virtual void doBussiness()&#123;
		cout &lt;&lt; &quot;办理存款业务&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;只办理转账业务
class TransferBankWorker : public  AbstractWorkerBank&#123;
public:
	virtual void doBussiness()&#123;
		cout &lt;&lt; &quot;办理存款业务&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;只办理付款业务
class PayBankWorker : public  AbstractWorkerBank&#123;
public:
	virtual void doBussiness()&#123;
		cout &lt;&lt; &quot;办理存款业务&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;高层模块
void DoBankBussiness(AbstractWorkerBank* worker)&#123;
	worker-&gt;doBussiness();
	delete worker;
&#125;

void test02()&#123;
	
	DoBankBussiness(new SaveBankWorker); &#x2F;&#x2F;办理存款业务
	DoBankBussiness(new TransferBankWorker); &#x2F;&#x2F;办理转账业务
	DoBankBussiness(new PayBankWorker); &#x2F;&#x2F;办理付款业务

&#125;
int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="3-创建型模型"><a href="#3-创建型模型" class="headerlink" title="3.创建型模型"></a><strong>3.创建型模型</strong></h2><h3 id="3-1简单工厂模式"><a href="#3-1简单工厂模式" class="headerlink" title="3.1简单工厂模式"></a><strong>3.1简单工厂模式</strong></h3><ul>
<li>简单工厂模式并不属于GoF的23种设计模式。    </li>
</ul>
<ul>
<li>那么为什么我要用工厂模式呢？请看下面的一段程序。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;水果类
class Fruit&#123;
public:
	Fruit(string name)&#123;
		m_name &#x3D; name;
	&#125;
	void showFruitName()&#123;
		if (m_name.compare(&quot;apple&quot;) &#x3D;&#x3D; 0)&#123;
			cout &lt;&lt; &quot;我是苹果&quot; &lt;&lt; endl;
		&#125;
		else if (m_name.compare(&quot;banana&quot;)&#x3D;&#x3D;0)&#123;
			cout &lt;&lt; &quot;我是香蕉&quot; &lt;&lt; endl;
		&#125;
		else if (m_name.compare(&quot;pear&quot;) &#x3D;&#x3D; 0)&#123;
			cout &lt;&lt; &quot;我是鸭梨&quot; &lt;&lt; endl;
		&#125;
	&#125;
private:
	string m_name;
&#125;;

int main()&#123;

	Fruit* apple &#x3D; new Fruit(&quot;apple&quot;);
	Fruit* banana &#x3D; new Fruit(&quot;banana&quot;);
	Fruit* pear &#x3D; new Fruit(&quot;pear&quot;);

	apple-&gt;showFruitName();
	banana-&gt;showFruitName();
	pear-&gt;showFruitName();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>不难看出，Fruit类是一个“巨大的”类，在该类的设计中存在如下几个问题：    (1) 在Fruit类中包含很多“if…else…”代码块，整个类的代码相当冗长，代码越长，阅读难度、维护难度和测试难度也越大；而且大量条件语句的存在还将影响系统的性能，程序在执行过程中需要做大量的条件判断。</li>
<li>Fruit类的职责过重，它负责初始化和显示所有的水果对象，将各种水果对象的初始化代码和显示代码集中在一个类中实现，违反了“单一职责原则”，不利于类的重用和维护；  </li>
<li>当需要增加新类型的水果时，必须修改Fruit类的源代码，违反了“开闭原则”。</li>
</ul>
<h4 id="3-1-1模式中的角色和职责"><a href="#3-1-1模式中的角色和职责" class="headerlink" title="3.1.1模式中的角色和职责"></a><strong>3.1.1模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB0C3.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>工厂（Factory）角色：简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</li>
</ul>
<ul>
<li>抽象产品（AbstractProduct）角色：简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</li>
</ul>
<ul>
<li>具体产品（Concrete Product）角色：简单工厂模式所创建的具体实例对象。</li>
</ul>
<h4 id="3-1-2简单工厂模式案例"><a href="#3-1-2简单工厂模式案例" class="headerlink" title="3.1.2简单工厂模式案例"></a><strong>3.1.2简单工厂模式案例</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB0C4.tmp.png" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;


&#x2F;&#x2F;抽象水果
class Fruit&#123;
public:
	virtual void shoName() &#x3D; 0;
&#125;;

&#x2F;&#x2F;苹果类
class Apple : public Fruit&#123;
public:
	virtual void shoName()&#123;
		cout &lt;&lt; &quot;我是苹果&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;香蕉类
class Banana : public Fruit&#123;
public:
	virtual void shoName()&#123;
		cout &lt;&lt; &quot;我是香蕉&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;鸭梨类
class Pear : public Fruit&#123;
public:
	virtual void shoName()&#123;
		cout &lt;&lt; &quot;我是鸭梨&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;水果工厂
class FruitFactory&#123;
public:
	static Fruit* CreateFruit(string name)&#123;
		if (name.compare(&quot;apple&quot;) &#x3D;&#x3D; 0)&#123;
			return new Apple;
		&#125;
		else if (name.compare(&quot;banana&quot;) &#x3D;&#x3D; 0)&#123;
			return new Banana;
		&#125;
		else if (name.compare(&quot;pear&quot;) &#x3D;&#x3D; 0)&#123;
			return new Pear;
		&#125;
	&#125;
&#125;;

&#x2F;&#x2F;测试
void test01()&#123;
	
	Fruit* fruit &#x3D; NULL;
	fruit &#x3D; FruitFactory::CreateFruit(&quot;apple&quot;);  &#x2F;&#x2F;工厂生产苹果
	fruit-&gt;shoName();
	delete fruit;

	fruit &#x3D; FruitFactory::CreateFruit(&quot;banana&quot;); &#x2F;&#x2F;工厂生产香蕉
	fruit-&gt;shoName();
	delete fruit;

	fruit &#x3D; FruitFactory::CreateFruit(&quot;pear&quot;); &#x2F;&#x2F;工厂生产鸭梨
	fruit-&gt;shoName();
	delete fruit;

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-1-3简单工厂模式的优缺点"><a href="#3-1-3简单工厂模式的优缺点" class="headerlink" title="3.1.3简单工厂模式的优缺点"></a><strong>3.1.3简单工厂模式的优缺点</strong></h4><p><strong>优点：</strong> </p>
<p>(1)实现了对象创建和使用的分离。(2)不需要记住具体类名，记住参数即可，减少使用者记忆量。</p>
<p><strong>缺点：</strong> </p>
<p>(1)对工厂类职责过重，一旦不能工作，系统受到影响。(2)增加系统中类的个数，复杂度和理解度增加。(3)违反“开闭原则”，添加新产品需要修改工厂逻辑，工厂越来越复杂。</p>
<h4 id="3-1-4适用场景"><a href="#3-1-4适用场景" class="headerlink" title="3.1.4适用场景"></a><strong>3.1.4适用场景</strong></h4><ol>
<li> 工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li>
<li>客户端只知道传入工厂类的参数，对于如何创建对象并不关心。</li>
</ol>
<h3 id="3-2工厂方法模式"><a href="#3-2工厂方法模式" class="headerlink" title="3.2工厂方法模式"></a><strong>3.2工厂方法模式</strong></h3><ul>
<li>工厂方法(Factory Method)模式的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中。核心工厂类不再负责产品的创建，这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品。</li>
<li>工厂方法模式是简单工厂模式的衍生，解决了许多简单工厂模式的问题。首先完全实现‘开－闭 原则’，实现了可扩展。</li>
</ul>
<h4 id="3-2-1-工厂方法模式中的角色与职责"><a href="#3-2-1-工厂方法模式中的角色与职责" class="headerlink" title="3.2.1 工厂方法模式中的角色与职责"></a><strong>3.2.1 工厂方法模式中的角色与职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB0D5.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>抽象工厂（Abstract Factory）角色：工厂方法模式的核心，任何工厂类都必须实现这个接口。</li>
</ul>
<ul>
<li>工厂（Concrete Factory）角色：具体工厂类是抽象工厂的一个实现，负责实例化产品对象。</li>
</ul>
<ul>
<li>抽象产品（Abstract Product）角色：工厂方法模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。    </li>
</ul>
<ul>
<li>具体产品（Concrete Product）角色：工厂方法模式所创建的具体实例对象。</li>
</ul>
<ul>
<li>简单工厂模式 + “开闭原则” =  工厂方法模式</li>
</ul>
<h4 id="3-2-2工厂方法模式案例"><a href="#3-2-2工厂方法模式案例" class="headerlink" title="3.2.2工厂方法模式案例"></a><strong>3.2.2工厂方法模式案例</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB0D6.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;


&#x2F;&#x2F;抽象水果
class AbstractFruit&#123;
public:
	virtual void showName() &#x3D; 0;
&#125;;

&#x2F;* 具体水果 start  *&#x2F;

&#x2F;&#x2F;苹果
class Apple : public AbstractFruit&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;我是苹果&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;香蕉
class Banana : public AbstractFruit&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;我是香蕉&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;鸭梨
class Pear : public AbstractFruit&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;我是鸭梨&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;* 具体水果 end  *&#x2F;

&#x2F;&#x2F;抽象工厂
class AbstractFactory&#123;
public:
	virtual AbstractFruit* CreateFruit() &#x3D; 0;
&#125;;

&#x2F;* 具体工厂类 start *&#x2F;

&#x2F;&#x2F;苹果工厂
class AppleFactory : public AbstractFactory&#123;
public:
	virtual AbstractFruit* CreateFruit()&#123;
		return new Apple;
	&#125;
&#125;;

&#x2F;&#x2F;香蕉工厂
class BananaFactory : public AbstractFactory&#123;
public:
	virtual AbstractFruit* CreateFruit()&#123;
		return new Banana;
	&#125;
&#125;;

&#x2F;&#x2F;鸭梨工厂
class PearFactory : public AbstractFactory&#123;
public:
	virtual AbstractFruit* CreateFruit()&#123;
		return new Pear;
	&#125;
&#125;;

&#x2F;* 具体工厂类 end *&#x2F;


&#x2F;&#x2F;测试
void test01()&#123;
	
	AbstractFactory* factory &#x3D; NULL;
	AbstractFruit* fruit &#x3D; NULL;

	factory &#x3D; new AppleFactory; &#x2F;&#x2F;创建苹果工厂
	fruit &#x3D; factory-&gt;CreateFruit(); &#x2F;&#x2F;苹果工厂生产苹果
	fruit-&gt;showName();

	factory &#x3D; new BananaFactory; &#x2F;&#x2F;创建香蕉工厂
	fruit &#x3D; factory-&gt;CreateFruit(); &#x2F;&#x2F;香蕉工厂生产苹果
	fruit-&gt;showName();

	factory &#x3D; new PearFactory; &#x2F;&#x2F;创建鸭梨工厂
	fruit &#x3D; factory-&gt;CreateFruit(); &#x2F;&#x2F;鸭梨工厂生产苹果
	fruit-&gt;showName();

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-1-3工厂方法模式的优缺点"><a href="#3-1-3工厂方法模式的优缺点" class="headerlink" title="3.1.3工厂方法模式的优缺点"></a><strong>3.1.3工厂方法模式的优缺点</strong></h4><p><strong>优点：</strong>    </p>
<p>(1)不需要记住具体类名，甚至连具体参数都不用记忆。</p>
<p>(2)实现了对象创建和使用的分离。</p>
<p>(3)系统的可扩展性也就变得非常好，无需修改接口和原类。</p>
<p><strong>缺点</strong>： </p>
<p>(1)增加系统中类的个数，复杂度和理解度增加。</p>
<p>(2)增加了系统的抽象性和理解难度。</p>
<h4 id="3-1-4适用场景-1"><a href="#3-1-4适用场景-1" class="headerlink" title="3.1.4适用场景"></a><strong>3.1.4适用场景</strong></h4><ol>
<li>客户端不知道它所需要的对象的类。</li>
<li>抽象工厂类通过其子类来指定创建哪个对象。</li>
</ol>
<h3 id="3-3抽象工厂模式"><a href="#3-3抽象工厂模式" class="headerlink" title="3.3抽象工厂模式"></a><strong>3.3抽象工厂模式</strong></h3><ul>
<li>工厂方法模式通过引入工厂等级结构，解决了简单工厂模式中工厂类职责太重的问题，但由于工厂方法模式中的每个工厂只生产一类产品，可能会导致系统中存在大量的工厂类，势必会增加系统的开销。此时，我们可以考虑将一些相关的产品组成一个“产品族，由同一个工厂来统一生产，这就是我们本文将要学习的抽象工厂模式的基本思想。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB0E6.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li> “工厂方法模式”实现多区域水果类图</li>
</ul>
<p>1.当我们想添加一个新产品的时候，比如葡萄，虽然不用修改代码，但是我们需要添加大量的类，而且还需要添加相对的工厂。（系统开销，维护成本）</p>
<p>2.如果我们使用同一地域的水果（日本，日本，日本），那么我们需要分别创建具体的工厂，如果选择出现失误，将会造成混乱，虽然可以加一些约束，但是代码实现变得复杂。</p>
<h4 id="3-3-1模式中的角色和职责"><a href="#3-3-1模式中的角色和职责" class="headerlink" title="3.3.1模式中的角色和职责"></a><strong>3.3.1模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB0F7.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>抽象工厂（Abstract Factory）角色：它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。</li>
</ul>
<ul>
<li>具体工厂（Concrete Factory）角色：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。</li>
</ul>
<ul>
<li>抽象产品（Abstract Product）角色：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。</li>
</ul>
<ul>
<li>具体产品（Concrete Product）角色：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。</li>
</ul>
<h4 id="3-3-2抽象工厂模式案例"><a href="#3-3-2抽象工厂模式案例" class="headerlink" title="3.3.2抽象工厂模式案例"></a><strong>3.3.2抽象工厂模式案例</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB107.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;抽象苹果类
class AbstractApple&#123;
public:
	virtual void showName() &#x3D; 0;
&#125;;

&#x2F;&#x2F;抽象香蕉
class AbstractBanana&#123;
public:
	virtual void showName() &#x3D; 0;
&#125;;

&#x2F;&#x2F;抽象鸭梨
class AbstractPear&#123;
public:
	virtual void showName() &#x3D; 0;
&#125;;

&#x2F;&#x2F;中国苹果
class ChineseApple : public AbstractApple&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;中国苹果&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;美国苹果
class AmericanApple : public AbstractApple&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;美国苹果&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;日本苹果
class JapaneseApple : public AbstractApple&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;日本苹果&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;中国香蕉
class ChineseBanana : public AbstractBanana&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;中国香蕉&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;美国香蕉
class AmericanBanana : public AbstractBanana&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;美国香蕉&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;日本香蕉
class JapaneseBanana : public AbstractBanana&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;日本香蕉&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;中国鸭梨
class ChinesePear : public AbstractPear&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;中国鸭梨&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;美国鸭梨
class AmericanPear : public AbstractPear&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;美国鸭梨&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;日本鸭梨
class JapanesePear : public AbstractPear&#123;
public:
	virtual void showName()&#123;
		cout &lt;&lt; &quot;日本鸭梨&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;抽象工厂
class AbstractFactory&#123;
public:
	virtual AbstractApple* CreateApple() &#x3D; 0;
	virtual AbstractBanana* CreateBanana() &#x3D; 0;
	virtual AbstractPear* CreatePear() &#x3D; 0;
&#125;;

&#x2F;&#x2F;中国工厂
class ChineseFactory : public AbstractFactory&#123;
public:
	virtual AbstractApple* CreateApple()&#123;
		return new ChineseApple;
	&#125;
	virtual AbstractBanana* CreateBanana()&#123;
		return new ChineseBanana;
	&#125;
	virtual AbstractPear* CreatePear()&#123;
		return new ChinesePear;
	&#125;
&#125;;

&#x2F;&#x2F;美国工厂
class AmericanFactory : public AbstractFactory&#123;
public:
	virtual AbstractApple* CreateApple()&#123;
		return new AmericanApple;
	&#125;
	virtual AbstractBanana* CreateBanana()&#123;
		return new AmericanBanana;
	&#125;
	virtual AbstractPear* CreatePear()&#123;
		return new AmericanPear;
	&#125;
&#125;;

&#x2F;&#x2F;美国工厂
class JapaneseFactory : public AbstractFactory&#123;
public:
	virtual AbstractApple* CreateApple()&#123;
		return new JapaneseApple;
	&#125;
	virtual AbstractBanana* CreateBanana()&#123;
		return new JapaneseBanana;
	&#125;
	virtual AbstractPear* CreatePear()&#123;
		return new JapanesePear;
	&#125;
&#125;;


void test01()&#123;
	
	AbstractFactory* factory &#x3D; NULL;
	AbstractApple* apple &#x3D; NULL;
	AbstractBanana* banana &#x3D; NULL;
	AbstractPear* pear &#x3D; NULL;

	factory &#x3D; new ChineseFactory; &#x2F;&#x2F;创建中国工厂
	apple &#x3D; factory-&gt;CreateApple();
	banana &#x3D; factory-&gt;CreateBanana();
	pear &#x3D; factory-&gt;CreatePear();

	apple-&gt;showName();
	banana-&gt;showName();
	pear-&gt;showName();

	delete pear;
	delete banana;
	delete apple;
	delete factory;

	factory &#x3D; new AmericanFactory; &#x2F;&#x2F;创建美国工厂
	apple &#x3D; factory-&gt;CreateApple();
	banana &#x3D; factory-&gt;CreateBanana();
	pear &#x3D; factory-&gt;CreatePear();

	apple-&gt;showName();
	banana-&gt;showName();
	pear-&gt;showName();

	delete pear;
	delete banana;
	delete apple;
	delete factory;

	factory &#x3D; new JapaneseFactory; &#x2F;&#x2F;创建日本工厂
	apple &#x3D; factory-&gt;CreateApple();
	banana &#x3D; factory-&gt;CreateBanana();
	pear &#x3D; factory-&gt;CreatePear();

	apple-&gt;showName();
	banana-&gt;showName();
	pear-&gt;showName();

	delete pear;
	delete banana;
	delete apple;
	delete factory;

&#125;

int main()&#123;

	test01();


	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-3-3抽象工厂模式的优缺点"><a href="#3-3-3抽象工厂模式的优缺点" class="headerlink" title="3.3.3抽象工厂模式的优缺点"></a><strong>3.3.3抽象工厂模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>(1)拥有工厂方法模式的优点</p>
<p>(2)当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</p>
<p>(3)增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。 </p>
<p><strong>缺点：</strong></p>
<ul>
<li>  增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</li>
</ul>
<h4 id="3-3-4适用场景"><a href="#3-3-4适用场景" class="headerlink" title="3.3.4适用场景"></a><strong>3.3.4适用场景</strong></h4><p>(1) 系统中有多于一个的产品族。而每次只使用其中某一产品族。可以通过配置文件等方式来使得用户可以动态改变产品族，也可以很方便地增加新的产品族。</p>
<p>(2) 产品等级结构稳定。设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</p>
<h4 id="3-3-5抽象工厂模式练习题"><a href="#3-3-5抽象工厂模式练习题" class="headerlink" title="3.3.5抽象工厂模式练习题"></a><strong>3.3.5抽象工厂模式练习题</strong></h4><p>​    设计一个电脑主板架构，电脑包括（显卡，内存，CPU）3个固定的插口，显卡具有显示功能（display，功能实现只要打印出意义即可）， 内存具有存储功能（storage），cpu具有计算功能（calculate）。</p>
<p>​    现有Intel厂商，nvidia厂商，Kingston厂商，均会生产以上三种硬件。要求组装两台电脑：</p>
<p>​        1台（Intel的CPU，Intel的显卡，Intel的内存）</p>
<p>​        1台（Intel的CPU， nvidia的显卡，Kingston的内存）</p>
<p>​    用抽象工厂模式实现。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;抽象显卡
class AbstractGraphics&#123;
public:
	virtual void work() &#x3D; 0;
&#125;;

&#x2F;&#x2F;因特尔显卡
class IntelGraphics : public AbstractGraphics&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;因特尔显卡开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;英伟达显卡
class NvidiaGraphics : public AbstractGraphics&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;英伟达显卡开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;金士顿显卡
class KingstonGraphics : public AbstractGraphics&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;金士顿显卡开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;抽象CPU
class AbstractCPU&#123;
public:
	virtual void work() &#x3D; 0;
&#125;;

&#x2F;&#x2F;因特尔CPU
class IntelCPU : public AbstractCPU&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;因特尔CPU开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;英伟达CPU
class NvidiaCPU : public AbstractCPU&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;英伟达CPU开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;金士顿CPU
class KingstonCPU : public AbstractCPU&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;金士顿CPU开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;抽象内存
class AbstractMemory&#123;
public:
	virtual void work() &#x3D; 0;
&#125;;

&#x2F;&#x2F;因特尔内存
class IntelMemory : public AbstractMemory&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;因特尔内存开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;英伟达内存
class NvidiaMemory : public AbstractMemory&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;英伟达内存开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;金士顿内存
class KingstonMemory : public AbstractMemory&#123;
public:
	virtual void work()&#123;
		cout &lt;&lt; &quot;金士顿内存开始工作...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;计算机
class Computer&#123;
public:	
	Computer()&#123;
		this-&gt;pCPU &#x3D; NULL;
		this-&gt;pGraphics &#x3D; NULL;
		this-&gt;pMemory &#x3D; NULL;
	&#125;
	void setCPU(AbstractCPU* cpu)&#123;
		pCPU &#x3D; cpu;
	&#125;
	void setGraphics(AbstractGraphics* graphics)&#123;
		pGraphics &#x3D; graphics;
	&#125;
	void setMemory(AbstractMemory* memory)&#123;
		pMemory &#x3D; memory;
	&#125;

	&#x2F;&#x2F;启动电脑
	void run()&#123;
		if (NULL !&#x3D; pCPU)&#123;
			this-&gt;pCPU-&gt;work();
		&#125;
		if (NULL !&#x3D; this-&gt;pGraphics)&#123;
			this-&gt;pGraphics-&gt;work();
		&#125;
		if (NULL !&#x3D; this-&gt;pMemory)&#123;
			this-&gt;pMemory-&gt;work();
		&#125;
	&#125;
private:
	AbstractCPU* pCPU;
	AbstractGraphics* pGraphics;
	AbstractMemory* pMemory;
&#125;;


&#x2F;&#x2F;抽象工厂
class AbstractFactory&#123;
public:
	virtual AbstractCPU* CreateCPU() &#x3D; 0;
	virtual AbstractGraphics* CreateGraphics() &#x3D; 0;
	virtual AbstractMemory* CreateMemory() &#x3D; 0;
&#125;;

&#x2F;&#x2F;生产第一种电脑的工厂
class FirstComputerFactory : public AbstractFactory&#123;
public:
	virtual AbstractCPU* CreateCPU()&#123;
		return new IntelCPU;
	&#125;
	virtual AbstractGraphics* CreateGraphics()&#123;
		return new IntelGraphics;
	&#125;
	virtual AbstractMemory* CreateMemory()&#123;
		return new IntelMemory;
	&#125;
&#125;;

&#x2F;&#x2F;生产第二种电脑的工厂
class SecondComputerFactory : public AbstractFactory&#123;
public:
	virtual AbstractCPU* CreateCPU()&#123;
		return new IntelCPU;
	&#125;
	virtual AbstractGraphics* CreateGraphics()&#123;
		return new NvidiaGraphics;
	&#125;
	virtual AbstractMemory* CreateMemory()&#123;
		return new KingstonMemory;
	&#125;
&#125;;

void test01()&#123;
		
	Computer* computer &#x3D; new Computer;
	AbstractFactory* factory &#x3D; NULL;
	AbstractCPU* cpu &#x3D; NULL;
	AbstractGraphics* graphics &#x3D; NULL;
	AbstractMemory* memory &#x3D; NULL;

	
	&#x2F;&#x2F;创建生产零件的工厂
	factory &#x3D; new FirstComputerFactory;
	cpu &#x3D; factory-&gt;CreateCPU();
	graphics &#x3D; factory-&gt;CreateGraphics(); 
	memory &#x3D; factory-&gt;CreateMemory();

	&#x2F;&#x2F;组装第一台电脑
	computer-&gt;setCPU(cpu);  &#x2F;&#x2F;安装CPU
	computer-&gt;setGraphics(graphics); &#x2F;&#x2F;安装显卡
	computer-&gt;setMemory(memory); &#x2F;&#x2F;安装内存
	computer-&gt;run(); &#x2F;&#x2F;启动电脑

	delete memory;
	delete graphics;
	delete cpu;
	delete factory;

	cout &lt;&lt; &quot;-------------------------&quot; &lt;&lt; endl;
	factory &#x3D; new SecondComputerFactory;
	cpu &#x3D; factory-&gt;CreateCPU();
	graphics &#x3D; factory-&gt;CreateGraphics();
	memory &#x3D; factory-&gt;CreateMemory();

	&#x2F;&#x2F;组装第二台电脑
	computer-&gt;setCPU(cpu);  &#x2F;&#x2F;安装CPU
	computer-&gt;setGraphics(graphics); &#x2F;&#x2F;安装显卡
	computer-&gt;setMemory(memory); &#x2F;&#x2F;安装内存
	computer-&gt;run(); &#x2F;&#x2F;启动电脑

	delete memory;
	delete graphics;
	delete cpu;
	delete factory;

	delete computer;

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="3-4单例模式"><a href="#3-4单例模式" class="headerlink" title="3.4单例模式"></a><strong>3.4单例模式</strong></h3><ul>
<li>单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</li>
</ul>
<h4 id="3-4-1单例模式中的角色和职责"><a href="#3-4-1单例模式中的角色和职责" class="headerlink" title="3.4.1单例模式中的角色和职责"></a><strong>3.4.1单例模式中的角色和职责</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB118.tmp.png" alt="img"></p>
<ul>
<li>Singleton（单例）：在单例类的内部实现只生成一个实例，同时它提供一个静态的getInstance()工厂方法，让客户可以访问它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为私有；在单例类内部定义了一个Singleton类型的静态对象，作为外部共享的唯一实例。</li>
</ul>
<p><strong>如何构建单例:</strong></p>
<p>一是单例模式的类只提供私有的构造函数，</p>
<p>二是类定义中含有一个该类的静态私有对象，</p>
<p>三是该类提供了一个静态的公有的函数用于创建或获取它本身的静态私有对象。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;* 懒汉式 *&#x2F;
class Chairman_lazy&#123;
private:
	Chairman_lazy()&#123;&#125;
public:
	static Chairman_lazy* getInstance()&#123;
		if (s_singleton &#x3D;&#x3D; NULL)&#123;
			s_singleton &#x3D; new Chairman_lazy;
		&#125;
		return s_singleton;
	&#125;
private:
	static Chairman_lazy* s_singleton;
&#125;;

Chairman_lazy* Chairman_lazy::s_singleton &#x3D; NULL;

void test01()&#123;
	
	Chairman_lazy* chairman1 &#x3D; Chairman_lazy::getInstance();
	Chairman_lazy* chairman2 &#x3D; Chairman_lazy::getInstance();
	if (chairman1 &#x3D;&#x3D; chairman2)&#123;
		cout &lt;&lt; &quot;指向同一个对象!&quot; &lt;&lt; endl;
	&#125;
	else&#123;
		cout &lt;&lt; &quot;指向不是同一个对象!&quot; &lt;&lt; endl;
	&#125;

&#125;

&#x2F;* 饿汉式 *&#x2F;
class Chairman_hangry&#123;
private:
	Chairman_hangry()&#123;&#125;
public:
	static Chairman_hangry* getInstance()&#123;
		return s_singleton;
	&#125;
private:
	static Chairman_hangry* s_singleton;
&#125;;

&#x2F;&#x2F;初始化
Chairman_hangry* Chairman_hangry::s_singleton &#x3D; new Chairman_hangry;

void test02()&#123;
	
	Chairman_hangry* chairman1 &#x3D; Chairman_hangry::getInstance();
	Chairman_hangry* chairman2 &#x3D; Chairman_hangry::getInstance();
	if (chairman1 &#x3D;&#x3D; chairman2)&#123;
		cout &lt;&lt; &quot;指向同一个对象!&quot; &lt;&lt; endl;
	&#125;
	else&#123;
		cout &lt;&lt; &quot;指向不是同一个对象!&quot; &lt;&lt; endl;
	&#125;
&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="3-4-2单例碰到多线程"><a href="#3-4-2单例碰到多线程" class="headerlink" title="3.4.2单例碰到多线程"></a><strong>3.4.2单例碰到多线程</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;Windows.h&gt;
using namespace std;

&#x2F;* 懒汉式 *&#x2F;
class Chairman_lazy&#123;
private:
	Chairman_lazy()&#123;&#125;
public:
	static Chairman_lazy* getInstance()&#123;
		if (s_singleton &#x3D;&#x3D; NULL)&#123;
			&#x2F;&#x2F;Sleep(1000); &#x2F;&#x2F;等到1000秒
			s_singleton &#x3D; new Chairman_lazy;
		&#125;
		return s_singleton;
	&#125;
private:
	static Chairman_lazy* s_singleton;
&#125;;

Chairman_lazy* Chairman_lazy::s_singleton &#x3D; NULL;


&#x2F;* 饿汉式 *&#x2F;
class Chairman_hangry&#123;
private:
	Chairman_hangry()&#123;&#125;
public:
	static Chairman_hangry* getInstance()&#123;
		return s_singleton;
	&#125;
private:
	static Chairman_hangry* s_singleton;
&#125;;

&#x2F;&#x2F;初始化
Chairman_hangry* Chairman_hangry::s_singleton &#x3D; new Chairman_hangry;

DWORD WINAPI MyThread_hangry(LPVOID lpThreadParameter)&#123;
	
	Chairman_hangry* chairman &#x3D; Chairman_hangry::getInstance();
	cout &lt;&lt; &quot;单例对象地址:&quot; &lt;&lt; (int*)chairman &lt;&lt; endl;

	return 0;
&#125;

&#x2F;&#x2F;饿汉式单例碰到多线程测试
void test01()&#123;

	HANDLE handler[10];
	for (int i &#x3D; 0; i &lt; 10;i++)&#123;
		handler[i] &#x3D; CreateThread(NULL, NULL, MyThread_hangry, NULL, NULL, NULL);
	&#125;

&#125;

DWORD WINAPI MyThread_lazy(LPVOID lpThreadParameter)&#123;

	Chairman_lazy* chairman &#x3D; Chairman_lazy::getInstance();
	cout &lt;&lt; &quot;单例对象地址:&quot; &lt;&lt; (int*)chairman &lt;&lt; endl;

	return 0;
&#125;

&#x2F;&#x2F;懒汉式单例碰到多线程
void test02()&#123;

	HANDLE handler[10];
	for (int i &#x3D; 0; i &lt; 10; i++)&#123;
		handler[i] &#x3D; CreateThread(NULL, NULL, MyThread_lazy, NULL, NULL, NULL);
	&#125;

&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Test01函数执行结果(饿汉式单例模式)：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB129.tmp.jpg" alt="img"> </p>
<p>Test02函数执行结果(懒汉式单例模式)：</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB12A.tmp.jpg" alt="img"> </p>
<p>练习：用单例模式，模拟公司员工使用打印机场景，打印机可以打印员工要输出的内容，并且可以累积打印机使用次数</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

class Printer&#123;
private:
	Printer()&#123;
		mCnt &#x3D; 0;
	&#125;
public:
	static Printer* getInstance()&#123;
		return pPrinter;
	&#125;

	&#x2F;&#x2F;提供打印接口
	void print(string content)&#123;
		cout &lt;&lt; &quot;打印内容为:&quot; &lt;&lt; content &lt;&lt; endl;
		mCnt++;
	&#125;
	int getCnt()&#123;
		return this-&gt;mCnt;
	&#125;
private:
	static Printer* pPrinter;
	int mCnt; &#x2F;&#x2F;统计打印次数
&#125;;

Printer* Printer::pPrinter &#x3D; new Printer;

void test01()&#123;
	
	Printer* printer &#x3D; Printer::getInstance();
	printer-&gt;print(&quot;hello world1!&quot;);
	printer-&gt;print(&quot;hello world2!&quot;);
	printer-&gt;print(&quot;hello world3!&quot;);

	cout &lt;&lt; &quot;打印机打印次数:&quot; &lt;&lt; printer-&gt;getCnt() &lt;&lt; endl;

&#125;

int main(void)&#123;
	test01();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>思考：当单例模式中的懒汉模式遇见多线程，改怎么办？</p>
<h4 id="3-4-3-单例模式的优缺点"><a href="#3-4-3-单例模式的优缺点" class="headerlink" title="3.4.3 单例模式的优缺点"></a><strong>3.4.3 单例模式的优缺点</strong></h4><p><strong>优点:</strong> </p>
<p>(1)单例模式提供了对唯一实例的受控访问。(2)节约系统资源。由于在系统内存中只存在一个对象。</p>
<p><strong>缺点:</strong> </p>
<p>(1) 扩展略难。单例模式中没有抽象层。</p>
<p>(2) 单例类的职责过重。</p>
<h4 id="3-4-4适用场景"><a href="#3-4-4适用场景" class="headerlink" title="3.4.4适用场景"></a><strong>3.4.4适用场景</strong></h4><p>(1) 系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象。</p>
<p>(2) 客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</p>
<h2 id="4-结构型模式"><a href="#4-结构型模式" class="headerlink" title="4.结构型模式"></a><strong>4.结构型模式</strong></h2><ul>
<li><strong>让类和类进行组合，获得更大的结构。</strong></li>
</ul>
<h3 id="4-1代理模式"><a href="#4-1代理模式" class="headerlink" title="4.1代理模式"></a><strong>4.1代理模式</strong></h3><ul>
<li>代理模式的定义：<strong>为其他对象提供一种代理以控制对这个对象的访问</strong>。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</li>
</ul>
<h4 id="4-1-1模式中的角色和职责"><a href="#4-1-1模式中的角色和职责" class="headerlink" title="4.1.1模式中的角色和职责"></a><strong>4.1.1模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB13A.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>subject（抽象主题角色）：真实主题与代理主题的共同接口。</li>
</ul>
<ul>
<li>RealSubject（真实主题角色）：定义了代理角色所代表的真实对象。 </li>
</ul>
<ul>
<li>Proxy（代理主题角色）：含有对真实主题角色的引用，代理角色通常在将客户端调用传递给真是主题对象之前或者之后执行某些操作，而不是单纯返回真实的对象。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsB13B.tmp.jpg" alt="img"></p>
<h4 id="4-1-2代理模式的案例"><a href="#4-1-2代理模式的案例" class="headerlink" title="4.1.2代理模式的案例"></a><strong>4.1.2代理模式的案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;

&#x2F;&#x2F;商品类
class Goods&#123;
public:
	Goods(bool IsReal, string GoodsName) :m_IsReal(IsReal), m_GoodsName(GoodsName)&#123;&#125;
	bool getIsReal()&#123;
		return m_IsReal;
	&#125;
	string getGoodsName()&#123;
		return m_GoodsName;
	&#125;
private:
	bool m_IsReal;  &#x2F;&#x2F;商品真假
	string m_GoodsName; &#x2F;&#x2F;商品名称
&#125;;


&#x2F;&#x2F;购物抽象
class AbstractShopping&#123;
public:
	virtual void BuyGoods(Goods*) &#x3D; 0; 
&#125;;

&#x2F;&#x2F;韩国购物
class KoreaShopping : public AbstractShopping&#123;
public:
	virtual void BuyGoods(Goods* goods)&#123;
		cout &lt;&lt; &quot;在韩国购买&quot; &lt;&lt; goods-&gt;getGoodsName() &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;美国购物
class AmericanShopping : public AbstractShopping&#123;
public:
	virtual void BuyGoods(Goods* goods)&#123;
		cout &lt;&lt; &quot;在美国购买&quot; &lt;&lt; goods-&gt;getGoodsName() &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;非洲购物
class AfricanShopping : public AbstractShopping&#123;
public:
	virtual void BuyGoods(Goods* goods)&#123;
		cout &lt;&lt; &quot;在非洲购买&quot; &lt;&lt; goods-&gt;getGoodsName() &lt;&lt; endl;
	&#125;
&#125;;


&#x2F;&#x2F;自己购物
void test01()&#123;
	AbstractShopping* shopping &#x3D; NULL;

	&#x2F;&#x2F;去美国买啤酒
	Goods* bear &#x3D; new Goods(true, &quot;啤酒&quot;);
	shopping &#x3D; new AmericanShopping;
	shopping-&gt;BuyGoods(bear);
	delete bear;
	delete shopping;

	&#x2F;&#x2F;去韩国买化妆品
	Goods* cosmetics &#x3D; new Goods(true, &quot;化妆品&quot;);
	shopping &#x3D; new KoreaShopping;
	shopping-&gt;BuyGoods(cosmetics);
	delete cosmetics;
	delete shopping;


	Goods* ivory &#x3D; new Goods(true, &quot;象牙&quot;);
	shopping &#x3D; new AfricanShopping;
	shopping-&gt;BuyGoods(ivory);
	delete ivory;
	delete shopping;
&#125;

&#x2F;&#x2F;现在我不想自己去购物了  自己需要花费路费 还有自己办理货品海关检查 自己辨别商品真伪
&#x2F;&#x2F;海外代购 帮助检查商品真伪 海关检查 
class OverseasShopping : public AbstractShopping&#123;
public:
	OverseasShopping(AbstractShopping* mode)&#123;
		pShoppingMode &#x3D; mode;  &#x2F;&#x2F;购物模式  去韩国买  还是去美国买 还是去非洲买
	&#125;
	virtual void BuyGoods(Goods* goods)&#123;
		if (GoodsIsReal(goods))&#123; &#x2F;&#x2F;如果产品是真的
			CheckGoods(); &#x2F;&#x2F;海关检查
			pShoppingMode-&gt;BuyGoods(goods);
		&#125;
		else&#123;
			cout &lt;&lt; goods-&gt;getGoodsName() &lt;&lt; &quot;是假商品，放弃购买!&quot; &lt;&lt; endl;
		&#125;

		delete goods;
	&#125;
	&#x2F;&#x2F;辨别商品真伪
	bool GoodsIsReal(Goods* goods)&#123;
		cout &lt;&lt; &quot;海外代理检查 &quot;&lt;&lt; goods-&gt;getGoodsName() &lt;&lt; &quot;货品真伪&quot; &lt;&lt; endl;
		return goods-&gt;getIsReal();
	&#125;
	void CheckGoods()&#123;
		cout &lt;&lt; &quot;海外代理商品海关检查&quot; &lt;&lt; endl;
	&#125;
	~OverseasShopping()&#123;
		if (NULL !&#x3D; pShoppingMode)&#123;
			delete pShoppingMode;
		&#125;
	&#125;
private:
	AbstractShopping* pShoppingMode;
&#125;;

void test02()&#123;
	
	AbstractShopping* proxy &#x3D; NULL;
	&#x2F;&#x2F;创建一个去韩国购物的代理
	proxy &#x3D; new OverseasShopping(new KoreaShopping);
	proxy-&gt;BuyGoods(new Goods(true,&quot;化妆品&quot;));
	delete proxy;

	cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;

	&#x2F;&#x2F;创建一个去美国买啤酒的代理
	proxy &#x3D; new OverseasShopping(new AmericanShopping);
	proxy-&gt;BuyGoods(new Goods(false, &quot;啤酒&quot;));
	delete proxy;

	cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;

	&#x2F;&#x2F;创建一个去非洲买啤象牙的代理
	proxy &#x3D; new OverseasShopping(new AfricanShopping);
	proxy-&gt;BuyGoods(new Goods(true, &quot;象牙&quot;));
	delete proxy;

&#125;

int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="4-1-3代理模式的优缺点"><a href="#4-1-3代理模式的优缺点" class="headerlink" title="4.1.3代理模式的优缺点"></a><strong>4.1.3代理模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p> (1)能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。  </p>
<p> (2)客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性。</p>
<p><strong>缺点</strong>:</p>
<ul>
<li>代理实现较为复杂。</li>
</ul>
<h4 id="4-1-4适用场景"><a href="#4-1-4适用场景" class="headerlink" title="4.1.4适用场景"></a><strong>4.1.4适用场景</strong></h4><ul>
<li>​    为其他对象提供一种代理以控制对这个对象的访问。</li>
</ul>
<h4 id="4-1-5-代理模式练习题"><a href="#4-1-5-代理模式练习题" class="headerlink" title="4.1.5 代理模式练习题"></a><strong>4.1.5 代理模式练习题</strong></h4><p>1 定义真实玩家(李逍遥)</p>
<p>2 定义代理玩家</p>
<p>3 代理玩家代替李逍遥打怪升级</p>
<h3 id="4-2装饰模式"><a href="#4-2装饰模式" class="headerlink" title="4.2装饰模式"></a><strong>4.2装饰模式</strong></h3><ul>
<li>装饰模式又叫包装模式，通过一种对客户端透明的方式来扩展对象功能，是继承关系的一种替代。</li>
</ul>
<ul>
<li>装饰模式就是把要附加的功能分别放在单独的类中，并让这个类包含它要装饰的对象，当需要执行时，客户端就可以有选择的、按顺序的使用装饰功能包装对象。</li>
</ul>
<h4 id="4-2-1装饰模式中的角色和职责"><a href="#4-2-1装饰模式中的角色和职责" class="headerlink" title="4.2.1装饰模式中的角色和职责"></a><strong>4.2.1装饰模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB14C.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>Component（抽象构件）：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作。</li>
</ul>
<ul>
<li>ConcreteComponent（具体构件）：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。</li>
</ul>
<ul>
<li>Decorator（抽象装饰类）：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。</li>
</ul>
<ul>
<li>ConcreteDecorator（具体装饰类）：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</li>
</ul>
<h4 id="4-2-2装饰模式案例"><a href="#4-2-2装饰模式案例" class="headerlink" title="4.2.2装饰模式案例"></a><strong>4.2.2装饰模式案例</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB15D.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;


&#x2F;&#x2F;抽象手机类
class AbstractCellphone&#123;
public:
	virtual void showPhone() &#x3D; 0;
&#125;;

&#x2F;&#x2F;小米手机
class XiaomiCellphone : public AbstractCellphone&#123;
public:
	XiaomiCellphone(string model)&#123;
		m_name &#x3D; &quot;小米 &quot; + model + &quot;手机&quot;;
	&#125;
	virtual void showPhone()&#123;
		cout &lt;&lt; m_name &lt;&lt; endl;
	&#125;
private:
	string m_name;
&#125;;

&#x2F;&#x2F;Apple手机
class AppleCellphone : public AbstractCellphone&#123;
public:
	AppleCellphone(string model)&#123;
		m_name &#x3D; &quot;小米 &quot; + model + &quot;手机&quot;;
	&#125;
	virtual void showPhone()&#123;
		cout &lt;&lt; m_name &lt;&lt; endl;
	&#125;
private:
	string m_name;
&#125;;

&#x2F;&#x2F;装饰类
class Decorator : public AbstractCellphone&#123;
public:
	Decorator(AbstractCellphone* cellphone)&#123;
		pCellphone &#x3D; cellphone;
	&#125;
	virtual void showPhone()&#123;
		pCellphone-&gt;showPhone();
	&#125;
protected:
	AbstractCellphone* pCellphone;
&#125;;

&#x2F;&#x2F;给手机贴膜
class CellphoneFilm : public Decorator&#123;
public:
	CellphoneFilm(AbstractCellphone* cellphone) :Decorator(cellphone)&#123;&#125;
	void addCellphoneFilm()&#123;
		cout &lt;&lt; &quot;手机已贴膜!&quot; &lt;&lt; endl;
	&#125;
	virtual void showPhone()&#123;
		addCellphoneFilm();
		pCellphone-&gt;showPhone();
	&#125;
&#125;;

&#x2F;&#x2F;给手机装上手机壳
class CellphoneShell : public Decorator&#123;
public:
	CellphoneShell(AbstractCellphone* cellphone) :Decorator(cellphone)&#123;&#125;
	void addShell()&#123;
		cout &lt;&lt; &quot;手机已装上保护壳!&quot; &lt;&lt; endl;
	&#125;
	virtual void showPhone()&#123;
		addShell();
		pCellphone-&gt;showPhone();
	&#125;
&#125;;

void test01()&#123;
	
	&#x2F;&#x2F;创建小米手机
	AbstractCellphone* cellphone &#x3D; NULL;
	cellphone &#x3D; new XiaomiCellphone(&quot;Note 女神版&quot;);
	cellphone-&gt;showPhone();

	cout &lt;&lt; &quot;-----------------------------&quot; &lt;&lt; endl;

	&#x2F;&#x2F;给小米手机贴膜
	Decorator* cellphoneFilm &#x3D; new CellphoneFilm(cellphone);
	cellphoneFilm-&gt;showPhone();

	cout &lt;&lt; &quot;-----------------------------&quot; &lt;&lt; endl;

	&#x2F;&#x2F;给贴膜的小米手机再装上保护壳
	Decorator* cellphoneShell &#x3D; new CellphoneShell(cellphoneFilm);
	cellphoneShell-&gt;showPhone();

	delete cellphoneShell;
	delete cellphoneFilm;
	delete cellphone;

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-2-3装饰模式的优缺点"><a href="#4-2-3装饰模式的优缺点" class="headerlink" title="4.2.3装饰模式的优缺点"></a><strong>4.2.3装饰模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>(1)对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。</p>
<p>(2)可以通过一种动态的方式来扩展一个对象的功能，从而实现不同的行为。</p>
<p>(3)可以对一个对象进行多次装饰。</p>
<p>(4)具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合“开闭原则”。 </p>
<p><strong>缺点：</strong></p>
<ul>
<li>  使用装饰模式进行系统设计时将产生很多小对象，大量小对象的产生势必会占用更多的系统资源，影响程序的性能。</li>
</ul>
<h4 id="4-2-4-适用场景"><a href="#4-2-4-适用场景" class="headerlink" title="4.2.4 适用场景"></a><strong>4.2.4 适用场景</strong></h4><p>(1) 动态、透明的方式给单个对象添加职责。</p>
<p>(2) 当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。</p>
<ul>
<li>装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。</li>
</ul>
<h3 id="4-3外观模式"><a href="#4-3外观模式" class="headerlink" title="4.3外观模式"></a><strong>4.3外观模式</strong></h3><ul>
<li>根据迪米特法则，如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。</li>
</ul>
<ul>
<li>​    Facade模式也叫外观模式，是由GoF提出的23种设计模式中的一种。Facade模式为一组具有类似功能的类群，比如类库，子系统等等，提供一个一致的简单的界面。这个一致的简单的界面被称作facade。</li>
</ul>
<h4 id="4-3-1外观模式中角色和职责"><a href="#4-3-1外观模式中角色和职责" class="headerlink" title="4.3.1外观模式中角色和职责"></a><strong>4.3.1外观模式中角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB16D.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>Façade(外观角色)：为调用方, 定义简单的调用接口。</li>
</ul>
<ul>
<li>SubSystem(子系统角色)：功能提供者。指提供功能的类群（模块或子系统） 。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;*
外观模式就是将复杂的子类系统抽象到同一个的接口进行管理
，外界只需要通过此接口与子类系统进行交互，而不必要直接与复杂的子类
系统进行交互
*&#x2F;

&#x2F;&#x2F;子系统1
class SubSystem1&#123;
public:
	void run()&#123;
		cout &lt;&lt; &quot;子系统一运行...&quot; &lt;&lt; endl;
	&#125;
&#125;;
&#x2F;&#x2F;子系统2
class SubSystem2&#123;
public:
	void run()&#123;
		cout &lt;&lt; &quot;子系统二运行...&quot; &lt;&lt; endl;
	&#125;
&#125;;
&#x2F;&#x2F;子系统3
class SubSystem3&#123;
public:
	void run()&#123;
		cout &lt;&lt; &quot;子系统三运行...&quot; &lt;&lt; endl;
	&#125;
&#125;;
&#x2F;&#x2F;子系统4
class SubSystem4&#123;
public:
	void run()&#123;
		cout &lt;&lt; &quot;子系统四运行...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;外观类
class Facede&#123;
public:
	Facede()&#123;
		pSystem1 &#x3D; new SubSystem1;
		pSystem2 &#x3D; new SubSystem2;
		pSystem3 &#x3D; new SubSystem3;
		pSystem4 &#x3D; new SubSystem4;
	&#125;
	void runSystem()&#123;
		pSystem1-&gt;run();
		pSystem2-&gt;run();
		pSystem3-&gt;run();
		pSystem4-&gt;run();
	&#125;

private:
	SubSystem1* pSystem1;
	SubSystem2* pSystem2;
	SubSystem3* pSystem3;
	SubSystem4* pSystem4;
&#125;;

void test01()&#123;
	
	Facede* facede &#x3D; new Facede;
	facede-&gt;runSystem();
&#125;


int main()&#123;
	
	test01();


	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="4-3-2外观模式案例"><a href="#4-3-2外观模式案例" class="headerlink" title="4.3.2外观模式案例"></a><strong>4.3.2外观模式案例</strong></h4><ul>
<li>根据类图，实现家庭影院外观模式应用。</li>
</ul>
<ul>
<li>实现KTV模式：电视打开，灯关掉，音响打开，麦克风打开，dvd打开；</li>
</ul>
<ul>
<li>实现游戏模式：电视打开，音响打开，游戏机打开。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsB16E.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;电视
class Television&#123;
public:
	void On()&#123;
		cout &lt;&lt; &quot;电视打开!&quot; &lt;&lt; endl;
	&#125;
	void Off()&#123;
		cout &lt;&lt; &quot;电视关闭!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;灯
class Lamp&#123;
public:
	void On()&#123;
		cout &lt;&lt; &quot;灯打开!&quot; &lt;&lt; endl;
	&#125;
	void Off()&#123;
		cout &lt;&lt; &quot;灯关闭!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;音响
class Audio&#123;
public:
	void On()&#123;
		cout &lt;&lt; &quot;音响打开!&quot; &lt;&lt; endl;
	&#125;
	void Off()&#123;
		cout &lt;&lt; &quot;音响关闭!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;麦克风
class Microphone&#123;
public:
	void On()&#123;
		cout &lt;&lt; &quot;麦克风打开!&quot; &lt;&lt; endl;
	&#125;
	void Off()&#123;
		cout &lt;&lt; &quot;麦克风关闭!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;DVD播放机
class DVDPlayer&#123;
public:
	void On()&#123;
		cout &lt;&lt; &quot;DVDPlayer打开!&quot; &lt;&lt; endl;
	&#125;
	void Off()&#123;
		cout &lt;&lt; &quot;DVDPlayer关闭!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;游戏机
class GameMachine&#123;
public:
	void On()&#123;
		cout &lt;&lt; &quot;游戏机打开!&quot; &lt;&lt; endl;
	&#125;
	void Off()&#123;
		cout &lt;&lt; &quot;游戏界关闭!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;外观抽象类
class AbstractFacede&#123;
public:
	virtual void On() &#x3D; 0;
	virtual void Off() &#x3D; 0;
&#125;;

&#x2F;&#x2F;游戏模式
class GameMode : public AbstractFacede&#123;
public:
	GameMode()&#123;
		pTelevision &#x3D; new Television;
		pAudio &#x3D; new Audio;
		pGameMachine &#x3D; new GameMachine;
	&#125;
	virtual void On()&#123;
		pTelevision-&gt;On();
		pAudio-&gt;On();
		pGameMachine-&gt;On();
	&#125;
	virtual void Off()&#123;
		pTelevision-&gt;Off();
		pAudio-&gt;Off();
		pGameMachine-&gt;Off();
	&#125;
private:
	Television* pTelevision;
	Audio* pAudio;
	GameMachine* pGameMachine;
&#125;;

&#x2F;&#x2F;KTV模式
class KTVMode : public AbstractFacede&#123;
public:
	KTVMode()&#123;
		pTelevision &#x3D; new Television;
		pAudio &#x3D; new Audio;
		pDVDPlayer &#x3D; new DVDPlayer;
		pLamp &#x3D; new Lamp;
		pMicrophone &#x3D; new Microphone;
	&#125;
	virtual void On()&#123;
		pTelevision-&gt;On();
		pAudio-&gt;On();
		pDVDPlayer-&gt;On();
		pLamp-&gt;Off();
		pMicrophone-&gt;On();
	&#125;
	virtual void Off()&#123;
		pTelevision-&gt;Off();
		pAudio-&gt;Off();
		pDVDPlayer-&gt;Off();
		pLamp-&gt;On();
		pMicrophone-&gt;Off();
	&#125;
private:
	Television* pTelevision;
	Audio* pAudio;
	DVDPlayer* pDVDPlayer;
	Lamp* pLamp;
	Microphone* pMicrophone;
&#125;;

&#x2F;&#x2F;测试游戏模式和KTV模式
void test01()&#123;
	
	AbstractFacede* facede &#x3D; NULL;
	facede &#x3D; new GameMode;
	facede-&gt;On(); &#x2F;&#x2F;启动游戏模式
	delete facede;

	cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; endl;

	facede &#x3D; new KTVMode;
	facede-&gt;On(); &#x2F;&#x2F;启动KTV模式
	delete facede;
&#125;

int main()&#123;
	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="4-3-3外观模式的优缺点"><a href="#4-3-3外观模式的优缺点" class="headerlink" title="4.3.3外观模式的优缺点"></a><strong>4.3.3外观模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>  (1)它对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。通过引入外观模式，客户端代码将变得很简单，与之关联的对象也很少。  </p>
<p>(2)它实现了子系统与客户端之间的松耦合关系，这使得子系统的变化不会影响到调用它的客户端，只需要调整外观类即可。  </p>
<p>(3)一个子系统的修改对其他子系统没有任何影响。</p>
<p><strong>缺点：</strong></p>
<p>  (1)不能很好地限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活性。  </p>
<p>(2)如果设计不当，增加新的子系统可能需要修改外观类的源代码，违背了开闭原则。</p>
<h4 id="4-3-4适用场景"><a href="#4-3-4适用场景" class="headerlink" title="4.3.4适用场景"></a><strong>4.3.4适用场景</strong></h4><p>(1) 复杂系统需要简单入口使用。</p>
<p>(2) 客户端程序与多个子系统之间存在很大的依赖性。</p>
<p>(3) 在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</p>
<h3 id="4-4适配器模式"><a href="#4-4适配器模式" class="headerlink" title="4.4适配器模式"></a><strong>4.4适配器模式</strong></h3><p><img src="http://qiniu.orangew.cn/img/wpsB17F.tmp.jpg" alt="img"><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB180.tmp.jpg" alt="img"><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB181.tmp.jpg" alt="img"> </p>
<ul>
<li>​     5V     &lt;————&gt;     适配器       &lt;————&gt;     220V</li>
<li>将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li>
</ul>
<h4 id="4-4-1适配器模式中的角色和职责"><a href="#4-4-1适配器模式中的角色和职责" class="headerlink" title="4.4.1适配器模式中的角色和职责"></a><strong>4.4.1适配器模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB191.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li> Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li>
</ul>
<ul>
<li>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</li>
</ul>
<ul>
<li>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</li>
</ul>
<ul>
<li>根据对象适配器模式结构图，在对象适配器中，客户端需要调用request()方法，而适配者类Adaptee没有该方法，但是它所提供的specificRequest()方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类Adapter，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的request()方法中调用适配者specificRequest()方法。因为适配器类与适配者类是关联关系（也可称之为委派关系），所以这种适配器模式称为对象适配器模式。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsB192.tmp.jpg" alt="img"></p>
<h4 id="4-4-2适配器模式的案例"><a href="#4-4-2适配器模式的案例" class="headerlink" title="4.4.2适配器模式的案例"></a><strong>4.4.2适配器模式的案例</strong></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;list&gt;
using namespace std;

&#x2F;&#x2F;A需要治疗感冒
class PersonA&#123;
public:
	void treatGanmao()&#123;
		cout &lt;&lt; &quot;A需要治疗感冒!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;B需要治疗头疼
class PersonB&#123;
public:
	void treatTouteng()&#123;
		cout &lt;&lt; &quot;B需要治疗头疼!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;C需要治疗痔疮
class PersonC&#123;
public:
	void treatZhichuang()&#123;
		cout &lt;&lt; &quot;C需要治疗痔疮!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;目标接口
class Target&#123;
public:
	virtual void treat() &#x3D; 0;
&#125;;

&#x2F;&#x2F;将PersonA的treatGanmao接口适配成treat
class AdapterPersonA : public Target&#123;
public:
	AdapterPersonA()&#123;
		pPerson &#x3D; new PersonA;
	&#125;
	virtual void treat()&#123;
		pPerson-&gt;treatGanmao();
	&#125;
private:
	PersonA* pPerson;
&#125;;

&#x2F;&#x2F;将PersonB的treatTouteng接口适配成treat
class AdapterPersonB : public Target&#123;
public:
	AdapterPersonB()&#123;
		pPerson &#x3D; new PersonB;
	&#125;
	virtual void treat()&#123;
		pPerson-&gt;treatTouteng();
	&#125;
private:
	PersonB* pPerson;
&#125;;

&#x2F;&#x2F;将PersonC的treatZhichuang接口适配成treat
class AdapterPersonC : public Target&#123;
public:
	AdapterPersonC()&#123;
		pPerson &#x3D; new PersonC;
	&#125;
	virtual void treat()&#123;
		pPerson-&gt;treatZhichuang();
	&#125;
private:
	PersonC* pPerson;
&#125;;

&#x2F;&#x2F;医生
class Doctor&#123;
public:
	void addPatient(Target* patient)&#123;
		m_list.push_back(patient);
	&#125;
	void startTreat()&#123;
		for (list&lt;Target*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end();it ++)&#123;
			(*it)-&gt;treat();
		&#125;
	&#125;
private:
	list&lt;Target*&gt; m_list;
&#125;;

&#x2F;&#x2F;测试
void test01()&#123;
	
	&#x2F;&#x2F;创建三个病人
	Target* patient1 &#x3D; new AdapterPersonA;
	Target* patient2 &#x3D; new AdapterPersonB;
	Target* patient3 &#x3D; new AdapterPersonC;

	&#x2F;&#x2F;创建医生
	Doctor* doctor &#x3D; new Doctor;
	doctor-&gt;addPatient(patient1);
	doctor-&gt;addPatient(patient2);
	doctor-&gt;addPatient(patient3);

	&#x2F;&#x2F;医生逐个对病人进行治疗
	doctor-&gt;startTreat();

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-4-3适配器模式优缺点"><a href="#4-4-3适配器模式优缺点" class="headerlink" title="4.4.3适配器模式优缺点"></a><strong>4.4.3适配器模式优缺点</strong></h4><p><strong>优点：</strong></p>
<p>  (1)将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。 </p>
<p> (2)增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。 </p>
<p> (3)灵活性和扩展性都非常好，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</p>
<p> <strong>缺点:</strong> </p>
<p>  适配器中置换适配者类的某些方法比较麻烦。</p>
<h4 id="4-4-4适应场景"><a href="#4-4-4适应场景" class="headerlink" title="4.4.4适应场景"></a><strong>4.4.4适应场景</strong></h4><p>(1) 系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</p>
<p>(2) 想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</p>
<h2 id="5-行为型模式"><a href="#5-行为型模式" class="headerlink" title="5.行为型模式"></a><strong>5.行为型模式</strong></h2><ul>
<li>用来对类或对象怎样交互和怎样分配职责进行描述。</li>
</ul>
<h3 id="5-1模板方法模式"><a href="#5-1模板方法模式" class="headerlink" title="5.1模板方法模式"></a><strong>5.1模板方法模式</strong></h3><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB1A3.tmp.jpg" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li> 定义一个操作中算法的框架，而将一些步骤延迟到子类中。模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li>
</ul>
<h4 id="5-1-1模板方法模式中的角色和职责"><a href="#5-1-1模板方法模式中的角色和职责" class="headerlink" title="5.1.1模板方法模式中的角色和职责"></a><strong>5.1.1模板方法模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB1A4.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li> AbstractClass（抽象类）：在抽象类中定义了一系列基本操作，这些基本操作可以是具体的，也可以是抽象的，每一个基本操作对应算法的一个步骤，在其子类中可以重定义或实现这些步骤。同时，在抽象类中实现了一个模板方法(Template Method)，用于定义一个算法的框架，模板方法不仅可以调用在抽象类中实现的基本方法，也可以调用在抽象类的子类中实现的基本方法，还可以调用其他对象中的方法。</li>
</ul>
<ul>
<li>ConcreteClass（具体子类）：它是抽象类的子类，用于实现在父类中声明的抽象基本操作以完成子类特定算法的步骤，也可以覆盖在父类中已经实现的具体基本操作。</li>
</ul>
<h4 id="5-1-2模板方法模式的案例"><a href="#5-1-2模板方法模式的案例" class="headerlink" title="5.1.2模板方法模式的案例"></a><img src="http://qiniu.orangew.cn/img/wpsB1B5.tmp.jpg" alt="img"><strong>5.1.2模板方法模式的案例</strong></h4><h4 id="5-1-3模板方法的优缺点"><a href="#5-1-3模板方法的优缺点" class="headerlink" title="5.1.3模板方法的优缺点"></a><strong>5.1.3模板方法的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>  (1)在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，在子类实现详细的处理算法时并不会改变算法中步骤的执行次序。 </p>
<p> (2)模板方法模式是一种代码复用技术，它在类库设计中尤为重要，它提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为，它鼓励我们恰当使用继承来实现代码复用。  </p>
<p>(3)可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行。 </p>
<p> (4)在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更换和增加新的子类很方便，符合单一职责原则和开闭原则。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>  需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象。</li>
</ul>
<h4 id="5-1-4适用场景"><a href="#5-1-4适用场景" class="headerlink" title="5.1.4适用场景"></a><strong>5.1.4适用场景</strong></h4><p>(1)具有统一的操作步骤或操作过程;</p>
<p>(2) 具有不同的操作细节;</p>
<p>(3) 存在多个具有同样操作步骤的应用场景，但某些具体的操作细节却各不相同;</p>
<ul>
<li> 在抽象类中统一操作步骤，并规定好接口；让子类实现接口。这样可以把各个具体的子类和操作步骤解耦合。</li>
</ul>
<h3 id="5-2命令模式"><a href="#5-2命令模式" class="headerlink" title="5.2命令模式"></a><strong>5.2命令模式</strong></h3><ul>
<li>将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。</li>
</ul>
<ul>
<li>​    命令模式可以将请求发送者和接收者完全解耦，发送者与接收者之间没有直接引用关系，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsB1B6.tmp.jpg" alt="img"> </p>
<p><img src="http://qiniu.orangew.cn/img/wpsB1B7.tmp.jpg" alt="img"> </p>
<p><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB1B8.tmp.jpg" alt="img"> </p>
<p>   <strong>亲自找医生看病</strong></p>
<p><img src="http://qiniu.orangew.cn/img/wpsB1B9.tmp.jpg" alt="img">   </p>
<p>​         <strong>填写病单</strong>                   </p>
<p><img src="http://qiniu.orangew.cn/img/wpsB1BA.tmp.jpg" alt="img"><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB1CA.tmp.jpg" alt="img"><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB1CB.tmp.jpg" alt="img"><img src="http://qiniu.orangew.cn/img/wpsB1CC.tmp.jpg" alt="img"> </p>
<p><strong>医生根据病单治病</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;医生类
class Doctor&#123;
public:
	void TreatEyes()&#123;
		cout &lt;&lt; &quot;医生治疗眼病!&quot; &lt;&lt; endl;
	&#125;
	void TreatHead()&#123;
		cout &lt;&lt; &quot;医生治疗头疼!&quot; &lt;&lt; endl;
	&#125;
	void TreatNose()&#123;
		cout &lt;&lt; &quot;医生治疗鼻子!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;命令抽象类
class AbstractCommand&#123;
public:
	virtual void Execute() &#x3D; 0;
&#125;;

&#x2F;&#x2F;治疗眼睛指令(命令) 也可理解为病单
class CommandTreatEyes : public AbstractCommand&#123;
public:
	CommandTreatEyes(Doctor* doctor)&#123;
		pDoctor &#x3D; doctor;
	&#125;
	virtual void Execute()&#123;
		pDoctor-&gt;TreatEyes();
	&#125;
private:
	Doctor* pDoctor;
&#125;;

&#x2F;&#x2F;治疗头疼命令
class CommandTreatHead : public AbstractCommand&#123;
public:
	CommandTreatHead(Doctor* doctor)&#123;
		pDoctor &#x3D; doctor;
	&#125;
	virtual void Execute()&#123;
		pDoctor-&gt;TreatHead();
	&#125;
private:
	Doctor* pDoctor;
&#125;;

&#x2F;&#x2F;治疗鼻子命令
class CommandTreatNose : public AbstractCommand&#123;
public:
	CommandTreatNose(Doctor* doctor)&#123;
		pDoctor &#x3D; doctor;
	&#125;
	virtual void Execute()&#123;
		pDoctor-&gt;TreatNose();
	&#125;
private:
	Doctor* pDoctor;
&#125;;

&#x2F;&#x2F;测试
void test01()&#123;
	
	Doctor* doctor &#x3D; new  Doctor;

	&#x2F;&#x2F;创建病单(命令)
	AbstractCommand* commandEyes &#x3D; new CommandTreatEyes(doctor);
	AbstractCommand* commandHead &#x3D; new CommandTreatHead(doctor);
	AbstractCommand* commandNose &#x3D; new CommandTreatNose(doctor);

	commandEyes-&gt;Execute();
	commandHead-&gt;Execute();
	commandNose-&gt;Execute();

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>命令模式的本质是对请求进行封装，一个请求对应于一个命令，将发出命令的责任和执行命令的责任分割开。</li>
</ul>
<p><img src="http://qiniu.orangew.cn/img/wpsB1CD.tmp.jpg" alt="img"><img src="http://qiniu.orangew.cn/img/wpsB1CE.tmp.jpg" alt="img"><img src="http://qiniu.orangew.cn/img/wpsB1CF.tmp.jpg" alt="img">             </p>
<p>   护士统计编写病单</p>
<p>   病情告知护士</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\设计模式讲义\wpsB1D0.tmp.jpg" alt="img"><img src="http://qiniu.orangew.cn/img/wpsB1D1.tmp.jpg" alt="img"><img src="http://qiniu.orangew.cn/img/wpsB1E2.tmp.jpg" alt="img"> </p>
<p><img src="http://qiniu.orangew.cn/img/wpsB1E3.tmp.jpg" alt="img"> </p>
<p>将统计好的病单统一发给医生 </p>
<h4 id="5-2-1命令模式中的角色和职责"><a href="#5-2-1命令模式中的角色和职责" class="headerlink" title="5.2.1命令模式中的角色和职责"></a><strong>5.2.1命令模式中的角色和职责</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB1E4.tmp.png" alt="img"></p>
<ul>
<li>Command（抽象命令类）：抽象命令类一般是一个抽象类或接口，在其中声明了用于执行请求的execute()等方法，通过这些方法可以调用请求接收者的相关操作。</li>
</ul>
<ul>
<li>ConcreteCommand（具体命令类）：具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中。在实现execute()方法时，将调用接收者对象的相关操作(Action)。</li>
</ul>
<ul>
<li>Invoker（调用者）：调用者即请求发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令类之间存在关联关系。在程序运行时可以将一个具体命令对象注入其中，再调用具体命令对象的execute()方法，从而实现间接调用请求接收者的相关操作。</li>
</ul>
<ul>
<li>Receiver（接收者）：接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>
</ul>
<h4 id="5-2-2命令模式的案例"><a href="#5-2-2命令模式的案例" class="headerlink" title="5.2.2命令模式的案例"></a><strong>5.2.2命令模式的案例</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB1F5.tmp.jpg" alt="img">  </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;list&gt;
using namespace std;

&#x2F;&#x2F;医生类
class Doctor&#123;
public:
	void TreatEyes()&#123;
		cout &lt;&lt; &quot;医生治疗眼病!&quot; &lt;&lt; endl;
	&#125;
	void TreatHead()&#123;
		cout &lt;&lt; &quot;医生治疗头疼!&quot; &lt;&lt; endl;
	&#125;
	void TreatNose()&#123;
		cout &lt;&lt; &quot;医生治疗鼻子!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;命令抽象类
class AbstractCommand&#123;
public:
	virtual void Execute() &#x3D; 0;
&#125;;

&#x2F;&#x2F;治疗眼睛指令(命令) 也可理解为病单
class CommandTreatEyes : public AbstractCommand&#123;
public:
	CommandTreatEyes(Doctor* doctor)&#123;
		pDoctor &#x3D; doctor;
	&#125;
	virtual void Execute()&#123;
		pDoctor-&gt;TreatEyes();
	&#125;
private:
	Doctor* pDoctor;
&#125;;

&#x2F;&#x2F;治疗头疼命令
class CommandTreatHead : public AbstractCommand&#123;
public:
	CommandTreatHead(Doctor* doctor)&#123;
		pDoctor &#x3D; doctor;
	&#125;
	virtual void Execute()&#123;
		pDoctor-&gt;TreatHead();
	&#125;
private:
	Doctor* pDoctor;
&#125;;

&#x2F;&#x2F;治疗鼻子命令
class CommandTreatNose : public AbstractCommand&#123;
public:
	CommandTreatNose(Doctor* doctor)&#123;
		pDoctor &#x3D; doctor;
	&#125;
	virtual void Execute()&#123;
		pDoctor-&gt;TreatNose();
	&#125;
private:
	Doctor* pDoctor;
&#125;;

&#x2F;&#x2F;护士类 统一编制病单
class Nurse&#123;
public:
	void addCommand(AbstractCommand* command)&#123;
		m_list.push_back(command);
	&#125;
	&#x2F;&#x2F;护士统一提交病单给医生
	void submitCommands()&#123;
		for (list&lt;AbstractCommand*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end();it ++)&#123;
			(*it)-&gt;Execute();
		&#125;
	&#125;
	~Nurse()&#123;
		for (list&lt;AbstractCommand*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end(); it++)&#123;
			if (NULL !&#x3D; *it)&#123;
				delete *it;
			&#125;
		&#125;
	&#125;
private:
	list&lt;AbstractCommand*&gt; m_list;
&#125;;

void test01()&#123;
	
	Doctor* doctor &#x3D; new Doctor; &#x2F;&#x2F;创建医生
	Nurse* nurse &#x3D; new Nurse; &#x2F;&#x2F;创建护士

	AbstractCommand* command &#x3D; NULL;
	command &#x3D; new CommandTreatEyes(doctor);
	nurse-&gt;addCommand(command);
	command &#x3D; new CommandTreatHead(doctor);
	nurse-&gt;addCommand(command);
	command &#x3D; new CommandTreatNose(doctor);
	nurse-&gt;addCommand(command);

	nurse-&gt;submitCommands(); &#x2F;&#x2F;护士统一提交病单给医生

	delete nurse;
	delete doctor;
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-2-3命令模式练习题"><a href="#5-2-3命令模式练习题" class="headerlink" title="5.2.3命令模式练习题"></a><strong>5.2.3命令模式练习题</strong></h4><ul>
<li>联想路边撸串烧烤场景， 有烤羊肉，烧鸡翅命令，有烤串师傅，和服务员MM。根据命令模式，设计烤串场景。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;list&gt;
using namespace std;

&#x2F;&#x2F;烤串大师
class SkewerMaster&#123;
public:
	void MakeChickenWings()&#123;
		cout &lt;&lt; &quot;烤鸡翅!&quot; &lt;&lt; endl;
	&#125;
	void MakeMutton()&#123;
		cout &lt;&lt; &quot;烤羊肉!&quot; &lt;&lt; endl;
	&#125;
&#125;;


&#x2F;&#x2F;抽象烤串命令
class AbstractSkewerCommand&#123;
public:
	virtual void Make() &#x3D; 0;
&#125;;

&#x2F;&#x2F;烤鸡翅的命令
class MakeChickenWingsCommand : public AbstractSkewerCommand&#123;
public:
	MakeChickenWingsCommand(SkewerMaster* master)&#123;
		pMaster &#x3D; master;
	&#125;
	virtual void Make()&#123;
		pMaster-&gt;MakeChickenWings();
	&#125;
private:
	SkewerMaster* pMaster;
&#125;;

&#x2F;&#x2F;烤羊肉的命令
class MakeMuttonCommand : public AbstractSkewerCommand&#123;
public:
	MakeMuttonCommand(SkewerMaster* master)&#123;
		pMaster &#x3D; master;
	&#125;
	virtual void Make()&#123;
		pMaster-&gt;MakeMutton();
	&#125;
private:
	SkewerMaster* pMaster;
&#125;;


&#x2F;&#x2F;服务员
class Waiter&#123;
public:
	void addCommand(AbstractSkewerCommand* command)&#123;
		m_list.push_back(command);
	&#125;
	void submitCommand()&#123;
		for (list&lt;AbstractSkewerCommand*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end(); it ++)&#123;
			(*it)-&gt;Make();
		&#125;
	&#125;
private:
	list&lt;AbstractSkewerCommand*&gt; m_list;
&#125;;

&#x2F;&#x2F;测试
void test01()&#123;
	
	&#x2F;&#x2F;创建烧烤师傅
	SkewerMaster* master &#x3D; new SkewerMaster;
	&#x2F;&#x2F;创建烧烤命令
	AbstractSkewerCommand* command1 &#x3D; new MakeChickenWingsCommand(master);
	AbstractSkewerCommand* command2 &#x3D; new MakeMuttonCommand(master);
	&#x2F;&#x2F;创建服务员
	Waiter* waiter &#x3D; new Waiter;
	waiter-&gt;addCommand(command1);
	waiter-&gt;addCommand(command2);
	&#x2F;&#x2F;服务员批量提交命令
	waiter-&gt;submitCommand();

	delete waiter;
	delete command2;
	delete command1;
	delete master;
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h4 id="5-2-4命令模式的优缺点"><a href="#5-2-4命令模式的优缺点" class="headerlink" title="5.2.4命令模式的优缺点"></a><strong>5.2.4命令模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>  (1)降低系统的耦合度。由于请求者与接收者之间不存在直接引用，因此请求者与接收者之间实现完全解耦，相同的请求者可以对应不同的接收者，同样，相同的接收者也可以供不同的请求者使用，两者之间具有良好的独立性。  </p>
<p>(2)新的命令可以很容易地加入到系统中。由于增加新的具体命令类不会影响到其他类，因此增加新的具体命令类很容易，无须修改原有系统源代码，甚至客户类代码，满足“开闭原则”的要求。  </p>
<p>(3)可以比较容易地设计一个命令队列或宏命令（组合命令）。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接收者的调用操作都需要设计一个具体命令类，因此在某些系统中可能需要提供大量的具体命令类，这将影响命令模式的使用。</li>
</ul>
<h4 id="5-2-5适用场景"><a href="#5-2-5适用场景" class="headerlink" title="5.2.5适用场景"></a><strong>5.2.5适用场景</strong></h4><p>  (1) 系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。请求调用者无须知道接收者的存在，也无须知道接收者是谁，接收者也无须关心何时被调用。  </p>
<p>(2) 系统需要在不同的时间指定请求、将请求排队和执行请求。一个命令对象和请求的初始调用者可以有不同的生命期，换言之，最初的请求发出者可能已经不在了，而命令对象本身仍然是活动的，可以通过该命令对象去调用请求接收者，而无须关心请求调用者的存在性，可以通过请求日志文件等机制来具体实现。  </p>
<p>(3) 系统需要将一组操作组合在一起形成宏命令。</p>
<h3 id="5-3策略模式"><a href="#5-3策略模式" class="headerlink" title="5.3策略模式"></a><strong>5.3策略模式</strong></h3><ul>
<li>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</li>
</ul>
<h4 id="5-3-1策略模式中的角色和职责"><a href="#5-3-1策略模式中的角色和职责" class="headerlink" title="5.3.1策略模式中的角色和职责"></a><strong>5.3.1策略模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB1F6.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>Context（环境类）：环境类是使用算法的角色，它在解决某个问题（即实现某个方法）时可以采用多种策略。在环境类中维持一个对抽象策略类的引用实例，用于定义所采用的策略。</li>
</ul>
<ul>
<li>Strategy（抽象策略类）：它为所支持的算法声明了抽象方法，是所有策略类的父类，它可以是抽象类或具体类，也可以是接口。环境类通过抽象策略类中声明的方法在运行时调用具体策略类中实现的算法。</li>
</ul>
<ul>
<li>ConcreteStrategy（具体策略类）：它实现了在抽象策略类中声明的算法，在运行时，具体策略类将覆盖在环境类中定义的抽象策略类对象，使用一种具体的算法实现某个业务处理。</li>
</ul>
<h4 id="5-3-2策略模式案例"><a href="#5-3-2策略模式案例" class="headerlink" title="5.3.2策略模式案例"></a><strong>5.3.2策略模式案例</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB206.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;武器策略
class WeaponStrategy&#123;
public:
	virtual void UseWeapon() &#x3D; 0;
&#125;;

&#x2F;&#x2F;匕首策略
class KnifeStrategy : public WeaponStrategy&#123;
public:
	virtual void UseWeapon()&#123;
		cout &lt;&lt; &quot;使用匕首!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;AK47策略
class AK47Strategy : public WeaponStrategy&#123;
public:
	virtual void UseWeapon()&#123;
		cout &lt;&lt; &quot;使用AK47!&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;* 未使用策略模式的写法 start *&#x2F;

class CharacterUseKnife&#123;
public:
	virtual void UseWeapon()&#123;
		m_knife.UseWeapon();
	&#125;
private:
	KnifeStrategy m_knife;
&#125;;

class CharacterUseAK47&#123;
public:
	virtual void UseWeapon()&#123;
		m_ak47.UseWeapon();
	&#125;
private:
	AK47Strategy m_ak47;
&#125;;

void test01()&#123;

	&#x2F;*
		未使用策略，那么人和武器的耦合度很高
	*&#x2F;
	CharacterUseKnife* chracter1 &#x3D; new CharacterUseKnife;
	chracter1-&gt;UseWeapon();

	CharacterUseAK47* chracter2 &#x3D; new CharacterUseAK47;
	chracter2-&gt;UseWeapon();

&#125;

&#x2F;* 未使用策略模式的写法 end *&#x2F;

&#x2F;* 使用策略模式的写法 start *&#x2F;

class Character&#123;
public:
	&#x2F;&#x2F;设置武器策略
	void setWeaponStrategy(WeaponStrategy* weaponStrategy)&#123;
		pWeaponStrategy &#x3D; weaponStrategy;
	&#125;
	void UseWeapon()&#123;
		pWeaponStrategy-&gt;UseWeapon();
	&#125;
private:
	WeaponStrategy* pWeaponStrategy;
&#125;;

void test02()&#123;
	
	Character* character &#x3D; new Character; &#x2F;&#x2F;创建角色
	WeaponStrategy* strategy &#x3D; NULL; &#x2F;&#x2F;武器策略

	cout &lt;&lt; &quot;---------------使用匕首策略---------------&quot; &lt;&lt; endl;
	strategy &#x3D; new KnifeStrategy; &#x2F;&#x2F;创建匕首策略
	character-&gt;setWeaponStrategy(strategy);  &#x2F;&#x2F;设置武器策略为 匕首策略
	character-&gt;UseWeapon();
	delete strategy;

	cout &lt;&lt; &quot;---------------使用AK47策略---------------&quot; &lt;&lt; endl;
	strategy &#x3D; new AK47Strategy;
	character-&gt;setWeaponStrategy(strategy);
	character-&gt;UseWeapon();
	delete strategy;

	delete character;

&#125;

&#x2F;* 使用策略模式的写法 end *&#x2F;
int main()&#123;

	&#x2F;&#x2F;test01();
	test02();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="5-3-3策略模式练习题"><a href="#5-3-3策略模式练习题" class="headerlink" title="5.3.3策略模式练习题"></a><strong>5.3.3策略模式练习题</strong></h4><ul>
<li>​    商场促销有策略A（0.8折） 策略B（消费满200，返现100），用策略模式模拟场景。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;抽象策略类
class AbstractStrategy&#123;
public:
	virtual int CaculateMoney(int) &#x3D; 0;
&#125;;

&#x2F;&#x2F;8折策略
class StrategySaleByEight : public AbstractStrategy&#123;
public:
	virtual int CaculateMoney(int money)&#123;
		return money * 0.8;
	&#125;
&#125;;

&#x2F;&#x2F;满200 返现100策略
class StrategySale200Return100 : public AbstractStrategy&#123;
public:
	virtual int CaculateMoney(int money)&#123;
		return money - (money &#x2F; 200) * 100;
	&#125;
&#125;;

&#x2F;&#x2F;超市购物类
class Shopping&#123;
public:
	Shopping()&#123;
		pStrategy &#x3D; NULL;
	&#125;
	void setStrategy(AbstractStrategy* strategy)&#123;
		pStrategy &#x3D; strategy;
	&#125;
	void PayMoney(int money)&#123;
		int realMoney &#x3D; 0;
		if (NULL &#x3D;&#x3D; pStrategy)&#123;
			realMoney &#x3D; money;
		&#125;
		else&#123;
			realMoney &#x3D; pStrategy-&gt;CaculateMoney(money);
		&#125;
		cout &lt;&lt; &quot;商品折前价格:&quot; &lt;&lt; money &lt;&lt; &quot;,折后价格:&quot; &lt;&lt; realMoney &lt;&lt; &quot;元!&quot; &lt;&lt; endl;
	&#125;
private:
	AbstractStrategy* pStrategy;
&#125;;

void test01()&#123;
	
	Shopping* shopping &#x3D; new Shopping;
	AbstractStrategy* strategy &#x3D; NULL;
	cout &lt;&lt; &quot;逢活动 八折优惠&quot; &lt;&lt; endl;
	strategy &#x3D; new StrategySaleByEight;
	shopping-&gt;setStrategy(strategy); &#x2F;&#x2F;设置商场活动为8折优惠
	shopping-&gt;PayMoney(600);

	delete strategy;

	cout &lt;&lt; &quot;再次逢活动 满200 返现100&quot; &lt;&lt; endl;
	strategy &#x3D; new StrategySale200Return100;
	shopping-&gt;setStrategy(strategy);
	shopping-&gt;PayMoney(900);

	delete strategy;
	delete shopping;

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h4 id="5-3-4策略模式的优缺点"><a href="#5-3-4策略模式的优缺点" class="headerlink" title="5.3.4策略模式的优缺点"></a><strong>5.3.4策略模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>  (1)策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。  </p>
<p>(2)使用策略模式可以避免多重条件选择语句。多重条件选择语句不易维护，它把采取哪一种算法或行为的逻辑与算法或行为本身的实现逻辑混合在一起，将它们全部硬编码(Hard Coding)在一个庞大的多重条件选择语句中，比直接继承环境类的办法还要原始和落后。  </p>
<p>(3)策略模式提供了一种算法的复用机制。由于将算法单独提取出来封装在策略类中，因此不同的环境类可以方便地复用这些策略类。 </p>
<p><strong>缺点：</strong></p>
<p>  (1)客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法。换言之，策略模式只适用于客户端知道所有的算法或行为的情况。  </p>
<p>(2)策略模式将造成系统产生很多具体策略类，任何细小的变化都将导致系统要增加一个新的具体策略类。</p>
<h4 id="5-3-5适用场景"><a href="#5-3-5适用场景" class="headerlink" title="5.3.5适用场景"></a><strong>5.3.5适用场景</strong></h4><ul>
<li>​    准备一组算法，并将每一个算法封装起来，使得它们可以互换。</li>
</ul>
<h3 id="5-4观察者模式"><a href="#5-4观察者模式" class="headerlink" title="5.4观察者模式"></a><img src="http://qiniu.orangew.cn/img/wpsB217.tmp.jpg" alt="img"><strong>5.4观察者模式</strong></h3><ul>
<li> 随着交通信号灯的变化，汽车的行为也将随之而变化，一盏交通信号灯可以指挥多辆汽车。</li>
<li>观察者模式是用于建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应。在观察者模式中，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间可以没有任何相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。</li>
</ul>
<h4 id="5-4-1观察者模式中的角色和职责"><a href="#5-4-1观察者模式中的角色和职责" class="headerlink" title="5.4.1观察者模式中的角色和职责"></a><strong>5.4.1观察者模式中的角色和职责</strong></h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB218.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<ul>
<li>Subject（被观察者或目标，抽象主题）：被观察的对象。当需要被观察的状态发生变化时，需要通知队列中所有观察者对象。Subject需要维持（添加，删除，通知）一个观察者对象的队列列表。</li>
</ul>
<ul>
<li>ConcreteSubject（具体被观察者或目标，具体主题）：被观察者的具体实现。包含一些基本的属性状态及其他操作。</li>
</ul>
<ul>
<li>Observer（观察者）：接口或抽象类。当Subject的状态发生变化时，Observer对象将通过一个callback函数得到通知。</li>
</ul>
<ul>
<li>ConcreteObserver（具体观察者）：观察者的具体实现。得到通知后将完成一些具体的业务逻辑处理。</li>
</ul>
<h4 id="5-4-2观察者模式案例"><a href="#5-4-2观察者模式案例" class="headerlink" title="5.4.2观察者模式案例"></a><strong>5.4.2观察者模式案例</strong></h4><p><img src="http://qiniu.orangew.cn/img/wpsB228.tmp.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img src="http://qiniu.orangew.cn/img/wpsB239.tmp.png" alt="img"></td>
</tr>
</tbody></table>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;list&gt;
using namespace std;

&#x2F;&#x2F;抽象观察者
class AbstractObserver&#123;
public:
	virtual void Update() &#x3D; 0;
&#125;;

&#x2F;&#x2F;说悄悄话的同学
class WhisperStudent : public AbstractObserver&#123;
public:
	virtual void Update()&#123;
		cout &lt;&lt; &quot;停止说悄悄话，专心学习...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;抄作业的同学
class CopyHomeWorkdStudent : public AbstractObserver&#123;
public:
	virtual void Update()&#123;
		cout &lt;&lt; &quot;停止抄作业，专心自己写作业...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;玩手机的同学
class PlayTelephoneStudent : public AbstractObserver&#123;
public:
	virtual void Update()&#123;
		cout &lt;&lt; &quot;停止玩手机，专心看书...&quot; &lt;&lt; endl;
	&#125;
&#125;;

&#x2F;&#x2F;抽象通知者 也就是被不好好学习的同学观察的目标
class AbstractInformer&#123;
public:
	virtual void addObserver(AbstractObserver*) &#x3D; 0; &#x2F;&#x2F;增加观察者
	virtual void deleteObserver(AbstractObserver*) &#x3D; 0; &#x2F;&#x2F;删除观察者
	virtual void Notify() &#x3D; 0; &#x2F;&#x2F;有情况通知所有观察者
&#125;;

&#x2F;&#x2F;具体通知者 也就是被观察的目标 班长
class MonitorClass : public AbstractInformer&#123;
public:
	virtual void addObserver(AbstractObserver* observer)&#123;
		m_list.push_back(observer);
	&#125;
	virtual void deleteObserver(AbstractObserver* observer)&#123;
		m_list.remove(observer);
	&#125;
	virtual void Notify()&#123;
		for (list&lt;AbstractObserver*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end(); it ++)&#123;
			(*it)-&gt;Update();
		&#125;
	&#125;
private:
	list&lt;AbstractObserver*&gt; m_list;
&#125;;

void test01()&#123;
	
	&#x2F;&#x2F;三名观察者
	AbstractObserver* stu1 &#x3D; new WhisperStudent;
	AbstractObserver* stu2 &#x3D; new CopyHomeWorkdStudent;
	AbstractObserver* stu3 &#x3D; new PlayTelephoneStudent;

	&#x2F;&#x2F;创建班长
	AbstractInformer* monitor &#x3D; new MonitorClass;

	&#x2F;&#x2F;告诉班长，老师来了那些人需要通知
	monitor-&gt;addObserver(stu1);
	monitor-&gt;addObserver(stu2);
	monitor-&gt;addObserver(stu3);

	cout &lt;&lt; &quot;发生特殊情况... 老师来了... 快通知哪些学生...&quot; &lt;&lt; endl;
	monitor-&gt;Notify();

	cout &lt;&lt; &quot;平日里说悄悄话的这个同学和班长关系不好，班长不想通知他&quot; &lt;&lt; endl;
	monitor-&gt;deleteObserver(stu1);

	cout &lt;&lt; &quot;老师又来了... 班长通知其他人 但是这次不通知说悄悄话的那个同学&quot; &lt;&lt; endl;
	monitor-&gt;Notify();

	&#x2F;&#x2F;释放资源
	delete monitor;
	delete stu3;
	delete stu2;
	delete stu1;
&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-4-3观察者模式练习题"><a href="#5-4-3观察者模式练习题" class="headerlink" title="5.4.3观察者模式练习题"></a><strong>5.4.3观察者模式练习题</strong></h4><ul>
<li>​    江湖中有多个帮派，还有一名无人不知，无事不晓的百晓生。当江湖中发生武林打斗事件，百晓生作为天生的大嘴巴会广播武林消息，每个帮派的门第对于事件的处理方式均不同，同帮派被欺负，要报仇，同帮派欺负别人，叫好。用观察者模式模拟场景。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;list&gt;
using namespace std;

class Infomation;

&#x2F;&#x2F;抽象观察者
class AbstractGang&#123;
public:
	virtual void Update(Infomation*) &#x3D; 0;
	virtual string GetGangName() &#x3D; 0;
&#125;;

&#x2F;&#x2F;江湖消息
class Infomation&#123;
public:
	Infomation(AbstractGang* beat, AbstractGang* beaten)&#123;
		this-&gt;Beat &#x3D; beat;
		this-&gt;Beaten &#x3D; beaten;
	&#125;
	AbstractGang* Beat; &#x2F;&#x2F;打人的帮派
	AbstractGang* Beaten; &#x2F;&#x2F;被打的帮派
&#125;;

&#x2F;&#x2F;华山派坐等百晓生的广播
class HuashanGang : public AbstractGang&#123;
public:
	HuashanGang()&#123;
		m_GangName &#x3D; &quot;华山派&quot;;
	&#125;
	virtual void Update(Infomation* info)&#123;
		if (info-&gt;Beat &#x3D;&#x3D; this &amp;&amp; info-&gt;Beaten !&#x3D; this)&#123;
			cout &lt;&lt; &quot;打死&quot; &lt;&lt; info-&gt;Beaten-&gt;GetGangName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;最厉害!&quot; &lt;&lt; endl;
		&#125;
		else if (info-&gt;Beat !&#x3D; this &amp;&amp; info-&gt;Beaten !&#x3D; this)&#123;
			cout &lt;&lt; this-&gt;GetGangName()  &lt;&lt;&quot;坐看&quot; &lt;&lt; info-&gt;Beat-&gt;GetGangName() &lt;&lt; &quot;和&quot; &lt;&lt; info-&gt;Beaten-&gt;GetGangName() &lt;&lt; &quot;干架!&quot; &lt;&lt; endl;
		&#125;
		else if(info-&gt;Beat !&#x3D; this &amp;&amp; info-&gt;Beaten &#x3D;&#x3D; this)&#123;
			cout &lt;&lt; info-&gt;Beat-&gt;GetGangName() &lt;&lt; &quot;干我们&quot; &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;，我们要报仇!&quot; &lt;&lt; endl;
		&#125;
	&#125;
	virtual string GetGangName()&#123;
		return m_GangName;
	&#125;
private:
	string m_GangName;
&#125;;

&#x2F;&#x2F;昆仑派坐等百晓生的广播
class KunlunGang : public AbstractGang&#123;
public:
	KunlunGang()&#123;
		m_GangName &#x3D; &quot;昆仑派&quot;;
	&#125;
	virtual void Update(Infomation* info)&#123;
		if (info-&gt;Beat &#x3D;&#x3D; this &amp;&amp; info-&gt;Beaten !&#x3D; this)&#123;
			cout &lt;&lt; &quot;打死&quot; &lt;&lt; info-&gt;Beaten-&gt;GetGangName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;最厉害!&quot; &lt;&lt; endl;
		&#125;
		else if (info-&gt;Beat !&#x3D; this &amp;&amp; info-&gt;Beaten !&#x3D; this)&#123;
			cout &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;坐看&quot; &lt;&lt; info-&gt;Beat-&gt;GetGangName() &lt;&lt; &quot;和&quot; &lt;&lt; info-&gt;Beaten-&gt;GetGangName() &lt;&lt; &quot;干架!&quot; &lt;&lt; endl;
		&#125;
		else if (info-&gt;Beat !&#x3D; this &amp;&amp; info-&gt;Beaten &#x3D;&#x3D; this)&#123;
			cout &lt;&lt; info-&gt;Beat-&gt;GetGangName() &lt;&lt; &quot;干我们&quot; &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;，我们要报仇!&quot; &lt;&lt; endl;
		&#125;
	&#125;
	virtual string GetGangName()&#123;
		return m_GangName;
	&#125;
private:
	string m_GangName;
&#125;;

&#x2F;&#x2F;武当派坐等百晓生的广播
class WudangGang : public AbstractGang&#123;
public:
	WudangGang()&#123;
		m_GangName &#x3D; &quot;武当派&quot;;
	&#125;
	virtual void Update(Infomation* info)&#123;
		if (info-&gt;Beat &#x3D;&#x3D; this &amp;&amp; info-&gt;Beaten !&#x3D; this)&#123;
			cout &lt;&lt; &quot;打死&quot; &lt;&lt; info-&gt;Beaten-&gt;GetGangName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;最厉害!&quot; &lt;&lt; endl;
		&#125;
		else if (info-&gt;Beat !&#x3D; this &amp;&amp; info-&gt;Beaten !&#x3D; this)&#123;
			cout &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;坐看&quot; &lt;&lt; info-&gt;Beat-&gt;GetGangName() &lt;&lt; &quot;和&quot; &lt;&lt; info-&gt;Beaten-&gt;GetGangName() &lt;&lt; &quot;干架!&quot; &lt;&lt; endl;
		&#125;
		else if (info-&gt;Beat !&#x3D; this &amp;&amp; info-&gt;Beaten &#x3D;&#x3D; this)&#123;
			cout &lt;&lt; info-&gt;Beat-&gt;GetGangName() &lt;&lt; &quot;干我们&quot; &lt;&lt; this-&gt;GetGangName() &lt;&lt; &quot;，我们要报仇!&quot; &lt;&lt; endl;
		&#125;
	&#125;
	virtual string GetGangName()&#123;
		return m_GangName;
	&#125;
private:
	string m_GangName;
&#125;;

&#x2F;&#x2F;百晓生 - 大嘴巴子
class Baixiaosheng&#123;
public:
	void addGang(AbstractGang* gang)&#123;
		m_list.push_back(gang);
	&#125;
	void setInfomation(Infomation* info)&#123;
		pInfo &#x3D; info;
	&#125;
	void Notify()&#123;
		for (list&lt;AbstractGang*&gt;::iterator it &#x3D; m_list.begin(); it !&#x3D; m_list.end(); it ++)&#123;
			(*it)-&gt;Update(pInfo);
		&#125;
	&#125;
private:
	list&lt;AbstractGang*&gt; m_list;
	Infomation* pInfo;
&#125;;

void test01()&#123;
	
	AbstractGang* wudang &#x3D; new WudangGang; &#x2F;&#x2F;武当派
	AbstractGang* kunlun &#x3D; new KunlunGang; &#x2F;&#x2F;昆仑派
	AbstractGang* huashan &#x3D; new HuashanGang; &#x2F;&#x2F;华山派

	Baixiaosheng* baixiaosheng &#x3D; new Baixiaosheng; &#x2F;&#x2F;百晓生 大嘴巴子
	baixiaosheng-&gt;addGang(wudang);
	baixiaosheng-&gt;addGang(kunlun);
	baixiaosheng-&gt;addGang(huashan);

	Infomation* pInfo &#x3D; new Infomation(wudang, huashan); &#x2F;&#x2F;创建江湖消息  武当打华山
	baixiaosheng-&gt;setInfomation(pInfo); &#x2F;&#x2F;告诉百晓生武当打华山了

	&#x2F;&#x2F;大嘴巴开始向各大门派发消息了
	baixiaosheng-&gt;Notify();

&#125;

int main()&#123;

	test01();

	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include&lt;list&gt;
using namespace std;

&#x2F;&#x2F;抽象的英雄 抽象的观察者
class AbstractHero&#123;
public:
	virtual void Update() &#x3D; 0;
&#125;;


&#x2F;&#x2F;具体英雄  具体观察者
class HeroA :public AbstractHero&#123;
public:
	HeroA()&#123;
		cout &lt;&lt; &quot;英雄A正在撸BOSS ...&quot; &lt;&lt; endl;
	&#125;
	virtual void Update()&#123;
		cout &lt;&lt; &quot;英雄A停止撸,待机状态...&quot; &lt;&lt; endl;
	&#125;
&#125;;

class HeroB :public AbstractHero&#123;
public:
	HeroB()&#123;
		cout &lt;&lt; &quot;英雄B正在撸BOSS ...&quot; &lt;&lt; endl;
	&#125;
	virtual void Update()&#123;
		cout &lt;&lt; &quot;英雄B停止撸,待机状态...&quot; &lt;&lt; endl;
	&#125;
&#125;;

class HeroC :public AbstractHero&#123;
public:
	HeroC()&#123;
		cout &lt;&lt; &quot;英雄C正在撸BOSS ...&quot; &lt;&lt; endl;
	&#125;
	virtual void Update()&#123;
		cout &lt;&lt; &quot;英雄C停止撸,待机状态...&quot; &lt;&lt; endl;
	&#125;
&#125;;

class HeroD :public AbstractHero&#123;
public:
	HeroD()&#123;
		cout &lt;&lt; &quot;英雄D正在撸BOSS ...&quot; &lt;&lt; endl;
	&#125;
	virtual void Update()&#123;
		cout &lt;&lt; &quot;英雄D停止撸,待机状态...&quot; &lt;&lt; endl;
	&#125;
&#125;;

class HeroE :public AbstractHero&#123;
public:
	HeroE()&#123;
		cout &lt;&lt; &quot;英雄E正在撸BOSS ...&quot; &lt;&lt; endl;
	&#125;
	virtual void Update()&#123;
		cout &lt;&lt; &quot;英雄E停止撸,待机状态...&quot; &lt;&lt; endl;
	&#125;
&#125;;


&#x2F;&#x2F;观察目标抽象
class AbstractBoss&#123;
public:
	&#x2F;&#x2F;添加观察者
	virtual void addHero(AbstractHero* hero) &#x3D; 0;
	&#x2F;&#x2F;删除观察者
	virtual void deleteHero(AbstractHero* hero) &#x3D; 0;
	&#x2F;&#x2F;通知所有观察者
	virtual void notify() &#x3D; 0; 
&#125;;


&#x2F;&#x2F;具体的观察者 BOSSA
class BOSSA : public AbstractBoss&#123;
public:
	virtual void addHero(AbstractHero* hero)&#123;
		pHeroList.push_back(hero);
	&#125;
	&#x2F;&#x2F;删除观察者
	virtual void deleteHero(AbstractHero* hero)&#123;
		pHeroList.remove(hero);
	&#125;
	&#x2F;&#x2F;通知所有观察者
	virtual void notify()&#123;
		for (list&lt;AbstractHero*&gt;::iterator it &#x3D; pHeroList.begin(); it !&#x3D; pHeroList.end();it ++)&#123;
			(*it)-&gt;Update();
		&#125;
	&#125;
public:
	list&lt;AbstractHero*&gt; pHeroList;
&#125;;



void test01()&#123;
	

	&#x2F;&#x2F;创建观察者
	AbstractHero* heroA &#x3D; new HeroA;
	AbstractHero* heroB &#x3D; new HeroB;
	AbstractHero* heroC &#x3D; new HeroC;
	AbstractHero* heroD &#x3D; new HeroD;
	AbstractHero* heroE &#x3D; new HeroE;

	&#x2F;&#x2F;创建观察目标
	AbstractBoss* bossA &#x3D; new BOSSA;
	bossA-&gt;addHero(heroA);
	bossA-&gt;addHero(heroB);
	bossA-&gt;addHero(heroC);
	bossA-&gt;addHero(heroD);
	bossA-&gt;addHero(heroE);


	cout &lt;&lt; &quot;heroC阵亡...&quot; &lt;&lt; endl;
	bossA-&gt;deleteHero(heroC);

	cout &lt;&lt; &quot;Boss死了...通知其他英雄停止攻击，抢装备...&quot; &lt;&lt; endl;
	bossA-&gt;notify();

&#125;


int main(void)&#123;
	test01();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="5-4-3观察者模式的优缺点"><a href="#5-4-3观察者模式的优缺点" class="headerlink" title="5.4.3观察者模式的优缺点"></a><strong>5.4.3观察者模式的优缺点</strong></h4><p><strong>优点：</strong></p>
<p>  (1)观察者模式可以实现表示层和数据逻辑层的分离，定义了稳定的消息更新传递机制，并抽象了更新接口，使得可以有各种各样不同的表示层充当具体观察者角色。 </p>
<p> (2)观察者模式在观察目标和观察者之间建立一个抽象的耦合。观察目标只需要维持一个抽象观察者的集合，无须了解其具体观察者。由于观察目标和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。 </p>
<p> (3)观察者模式支持广播通信，观察目标会向所有已注册的观察者对象发送通知，简化了一对多系统设计的难度。  </p>
<p>(4)观察者模式满足“开闭原则”的要求，增加新的具体观察者无须修改原有系统代码，在具体观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便。</p>
<p><strong>缺点：</strong></p>
<p>  (1)如果一个观察目标对象有很多直接和间接观察者，将所有的观察者都通知到会花费很多时间。  </p>
<p>(2)观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>
<h4 id="5-4-4适用场景"><a href="#5-4-4适用场景" class="headerlink" title="5.4.4适用场景"></a><strong>5.4.4适用场景</strong></h4><p>  (1)一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两个方面封装在独立的对象中使它们可以各自独立地改变和复用。  </p>
<p>(2)一个对象的改变将导致一个或多个其他对象也发生改变，而并不知道具体有多少对象将发生改变，也不知道这些对象是谁。  </p>
<p>(3)需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>C++从0到1入门</title>
    <url>/2022/07/08/C-%E4%BB%8E0%E5%88%B01%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541383178746.png" alt="1541383178746"></p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541384366413.png" alt="1541384366413"></p>
<h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541383817248.png" alt="1541383817248"></p>
<p>给C++文件起个名称，然后点击添加即可。</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541384140042.png" alt="1541384140042"></p>
<h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

int main() &#123;

	cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541384818688.png" alt="1541384818688"></p>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;
using namespace std;

int main() &#123;

	&#x2F;&#x2F;变量的定义
	&#x2F;&#x2F;语法：数据类型  变量名 &#x3D; 初始值

	int a &#x3D; 10;

	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul>
</li>
</ol>
<ol start="2">
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、宏常量
#define day 7

int main() &#123;

	cout &lt;&lt; &quot;一周里总共有 &quot; &lt;&lt; day &lt;&lt; &quot; 天&quot; &lt;&lt; endl;
	&#x2F;&#x2F;day &#x3D; 8;  &#x2F;&#x2F;报错，宏常量不可以修改

	&#x2F;&#x2F;2、const修饰变量
	const int month &#x3D; 12;
	cout &lt;&lt; &quot;一年里总共有 &quot; &lt;&lt; month &lt;&lt; &quot; 个月份&quot; &lt;&lt; endl;
	&#x2F;&#x2F;month &#x3D; 24; &#x2F;&#x2F;报错，常量是不可以修改的
	
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>










<h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody></table>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody></table>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	cout &lt;&lt; &quot;short 类型所占内存空间为： &quot; &lt;&lt; sizeof(short) &lt;&lt; endl;

	cout &lt;&lt; &quot;int 类型所占内存空间为： &quot; &lt;&lt; sizeof(int) &lt;&lt; endl;

	cout &lt;&lt; &quot;long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long) &lt;&lt; endl;

	cout &lt;&lt; &quot;long long 类型所占内存空间为： &quot; &lt;&lt; sizeof(long long) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float </li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody></table>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	float f1 &#x3D; 3.14f;
	double d1 &#x3D; 3.14;

	cout &lt;&lt; f1 &lt;&lt; endl;
	cout &lt;&lt; d1&lt;&lt; endl;

	cout &lt;&lt; &quot;float  sizeof &#x3D; &quot; &lt;&lt; sizeof(f1) &lt;&lt; endl;
	cout &lt;&lt; &quot;double sizeof &#x3D; &quot; &lt;&lt; sizeof(d1) &lt;&lt; endl;

	&#x2F;&#x2F;科学计数法
	float f2 &#x3D; 3e2; &#x2F;&#x2F; 3 * 10 ^ 2 
	cout &lt;&lt; &quot;f2 &#x3D; &quot; &lt;&lt; f2 &lt;&lt; endl;

	float f3 &#x3D; 3e-2;  &#x2F;&#x2F; 3 * 0.1 ^ 2
	cout &lt;&lt; &quot;f3 &#x3D; &quot; &lt;&lt; f3 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
</blockquote>
<blockquote>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;
	
	char ch &#x3D; &#39;a&#39;;
	cout &lt;&lt; ch &lt;&lt; endl;
	cout &lt;&lt; sizeof(char) &lt;&lt; endl;

	&#x2F;&#x2F;ch &#x3D; &quot;abcde&quot;; &#x2F;&#x2F;错误，不可以用双引号
	&#x2F;&#x2F;ch &#x3D; &#39;abcde&#39;; &#x2F;&#x2F;错误，单引号内只能引用一个字符

	cout &lt;&lt; (int)ch &lt;&lt; endl;  &#x2F;&#x2F;查看字符a对应的ASCII码
	ch &#x3D; 97; &#x2F;&#x2F;可以直接用ASCII给字符型变量赋值
	cout &lt;&lt; ch &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ASCII码表格：</p>
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>*<em>\\*</em></td>
<td><strong>代表一个反斜线字符”&quot;</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;
	
	
	cout &lt;&lt; &quot;\\&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;\tHello&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;\n&quot; &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>













<h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	char str1[] &#x3D; &quot;hello world&quot;;
	cout &lt;&lt; str1 &lt;&lt; endl;
    
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
<ol>
<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	string str &#x3D; &quot;hello world&quot;;
	cout &lt;&lt; str &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>
</blockquote>
<h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  — 真（本质是1）</li>
<li>false — 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	bool flag &#x3D; true;
	cout &lt;&lt; flag &lt;&lt; endl; &#x2F;&#x2F; 1

	flag &#x3D; false;
	cout &lt;&lt; flag &lt;&lt; endl; &#x2F;&#x2F; 0

	cout &lt;&lt; &quot;size of bool &#x3D; &quot; &lt;&lt; sizeof(bool) &lt;&lt; endl; &#x2F;&#x2F;1
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>















<h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main()&#123;

	&#x2F;&#x2F;整型输入
	int a &#x3D; 0;
	cout &lt;&lt; &quot;请输入整型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; a;
	cout &lt;&lt; a &lt;&lt; endl;

	&#x2F;&#x2F;浮点型输入
	double d &#x3D; 0;
	cout &lt;&lt; &quot;请输入浮点型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; d;
	cout &lt;&lt; d &lt;&lt; endl;

	&#x2F;&#x2F;字符型输入
	char ch &#x3D; 0;
	cout &lt;&lt; &quot;请输入字符型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; ch;
	cout &lt;&lt; ch &lt;&lt; endl;

	&#x2F;&#x2F;字符串型输入
	string str;
	cout &lt;&lt; &quot;请输入字符串型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; str;
	cout &lt;&lt; str &lt;&lt; endl;

	&#x2F;&#x2F;布尔类型输入
	bool flag &#x3D; true;
	cout &lt;&lt; &quot;请输入布尔型变量：&quot; &lt;&lt; endl;
	cin &gt;&gt; flag;
	cout &lt;&lt; flag &lt;&lt; endl;
	system(&quot;pause&quot;);
	return EXIT_SUCCESS;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>













<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody></table>
<h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>
<p>算术运算符包括以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前置递减</td>
<td>a=2; b=–a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后置递减</td>
<td>a=2; b=a–;</td>
<td>a=1; b=2;</td>
</tr>
</tbody></table>
<p><strong>示例1：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;加减乘除
int main() &#123;

	int a1 &#x3D; 10;
	int b1 &#x3D; 3;

	cout &lt;&lt; a1 + b1 &lt;&lt; endl;
	cout &lt;&lt; a1 - b1 &lt;&lt; endl;
	cout &lt;&lt; a1 * b1 &lt;&lt; endl;
	cout &lt;&lt; a1 &#x2F; b1 &lt;&lt; endl;  &#x2F;&#x2F;两个整数相除结果依然是整数

	int a2 &#x3D; 10;
	int b2 &#x3D; 20;
	cout &lt;&lt; a2 &#x2F; b2 &lt;&lt; endl; 

	int a3 &#x3D; 10;
	int b3 &#x3D; 0;
	&#x2F;&#x2F;cout &lt;&lt; a3 &#x2F; b3 &lt;&lt; endl; &#x2F;&#x2F;报错，除数不可以为0


	&#x2F;&#x2F;两个小数可以相除
	double d1 &#x3D; 0.5;
	double d2 &#x3D; 0.25;
	cout &lt;&lt; d1 &#x2F; d2 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;取模
int main() &#123;

	int a1 &#x3D; 10;
	int b1 &#x3D; 3;

	cout &lt;&lt; 10 % 3 &lt;&lt; endl;

	int a2 &#x3D; 10;
	int b2 &#x3D; 20;

	cout &lt;&lt; a2 % b2 &lt;&lt; endl;

	int a3 &#x3D; 10;
	int b3 &#x3D; 0;

	&#x2F;&#x2F;cout &lt;&lt; a3 % b3 &lt;&lt; endl; &#x2F;&#x2F;取模运算时，除数也不能为0

	&#x2F;&#x2F;两个小数不可以取模
	double d1 &#x3D; 3.14;
	double d2 &#x3D; 1.1;

	&#x2F;&#x2F;cout &lt;&lt; d1 % d2 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;递增
int main() &#123;

	&#x2F;&#x2F;后置递增
	int a &#x3D; 10;
	a++; &#x2F;&#x2F;等价于a &#x3D; a + 1
	cout &lt;&lt; a &lt;&lt; endl; &#x2F;&#x2F; 11

	&#x2F;&#x2F;前置递增
	int b &#x3D; 10;
	++b;
	cout &lt;&lt; b &lt;&lt; endl; &#x2F;&#x2F; 11

	&#x2F;&#x2F;区别
	&#x2F;&#x2F;前置递增先对变量进行++，再计算表达式
	int a2 &#x3D; 10;
	int b2 &#x3D; ++a2 * 10;
	cout &lt;&lt; b2 &lt;&lt; endl;

	&#x2F;&#x2F;后置递增先计算表达式，后对变量进行++
	int a3 &#x3D; 10;
	int b3 &#x3D; a3++ * 10;
	cout &lt;&lt; b3 &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody></table>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;赋值运算符

	&#x2F;&#x2F; &#x3D;
	int a &#x3D; 10;
	a &#x3D; 100;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	&#x2F;&#x2F; +&#x3D;
	a &#x3D; 10;
	a +&#x3D; 2; &#x2F;&#x2F; a &#x3D; a + 2;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	&#x2F;&#x2F; -&#x3D;
	a &#x3D; 10;
	a -&#x3D; 2; &#x2F;&#x2F; a &#x3D; a - 2
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	&#x2F;&#x2F; *&#x3D;
	a &#x3D; 10;
	a *&#x3D; 2; &#x2F;&#x2F; a &#x3D; a * 2
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	&#x2F;&#x2F; &#x2F;&#x3D;
	a &#x3D; 10;
	a &#x2F;&#x3D; 2;  &#x2F;&#x2F; a &#x3D; a &#x2F; 2;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	&#x2F;&#x2F; %&#x3D;
	a &#x3D; 10;
	a %&#x3D; 2;  &#x2F;&#x2F; a &#x3D; a % 2;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody></table>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 20;

	cout &lt;&lt; (a &#x3D;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 0 

	cout &lt;&lt; (a !&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 1

	cout &lt;&lt; (a &gt; b) &lt;&lt; endl; &#x2F;&#x2F; 0

	cout &lt;&lt; (a &lt; b) &lt;&lt; endl; &#x2F;&#x2F; 1

	cout &lt;&lt; (a &gt;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 0

	cout &lt;&lt; (a &lt;&#x3D; b) &lt;&lt; endl; &#x2F;&#x2F; 1
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>
</blockquote>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody></table>
<p><strong>示例1：</strong>逻辑非</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;逻辑运算符  --- 非
int main() &#123;

	int a &#x3D; 10;

	cout &lt;&lt; !a &lt;&lt; endl; &#x2F;&#x2F; 0

	cout &lt;&lt; !!a &lt;&lt; endl; &#x2F;&#x2F; 1

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;逻辑运算符  --- 与
int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 10;

	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 1

	a &#x3D; 10;
	b &#x3D; 0;

	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 0 

	a &#x3D; 0;
	b &#x3D; 0;

	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;&#x2F;&#x2F; 0

	system(&quot;pause&quot;);

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;逻辑运算符  --- 或
int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 10;

	cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 1

	a &#x3D; 10;
	b &#x3D; 0;

	cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 1 

	a &#x3D; 0;
	b &#x3D; 0;

	cout &lt;&lt; (a || b) &lt;&lt; endl;&#x2F;&#x2F; 0

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p>
</li>
<li><p>多行格式if语句</p>
</li>
<li><p>多条件的if语句</p>
</li>
</ul>
<ol>
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\clip_image002.png" alt="img"></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;选择结构-单行if语句
	&#x2F;&#x2F;输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印

	int score &#x3D; 0;
	cout &lt;&lt; &quot;请输入一个分数：&quot; &lt;&lt; endl;
	cin &gt;&gt; score;

	cout &lt;&lt; &quot;您输入的分数为： &quot; &lt;&lt; score &lt;&lt; endl;

	&#x2F;&#x2F;if语句
	&#x2F;&#x2F;注意事项，在if判断语句后面，不要加分号
	if (score &gt; 600)
	&#123;
		cout &lt;&lt; &quot;我考上了一本大学！！！&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol start="2">
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\clip_image002-1541662519170.png" alt="img"></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int score &#x3D; 0;

	cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

	cin &gt;&gt; score;

	if (score &gt; 600)
	&#123;
		cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
	&#125;
	else
	&#123;
		cout &lt;&lt; &quot;我未考上一本大学&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<ol start="3">
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\clip_image002-1541662566808.png" alt="img"></p>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">	int main() &#123;

	int score &#x3D; 0;

	cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

	cin &gt;&gt; score;

	if (score &gt; 600)
	&#123;
		cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
	&#125;
	else if (score &gt; 500)
	&#123;
		cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;
	&#125;
	else if (score &gt; 400)
	&#123;
		cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;
	&#125;
	else
	&#123;
		cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;

	int score &#x3D; 0;

	cout &lt;&lt; &quot;请输入考试分数：&quot; &lt;&lt; endl;

	cin &gt;&gt; score;

	if (score &gt; 600)
	&#123;
		cout &lt;&lt; &quot;我考上了一本大学&quot; &lt;&lt; endl;
		if (score &gt; 700)
		&#123;
			cout &lt;&lt; &quot;我考上了北大&quot; &lt;&lt; endl;
		&#125;
		else if (score &gt; 650)
		&#123;
			cout &lt;&lt; &quot;我考上了清华&quot; &lt;&lt; endl;
		&#125;
		else
		&#123;
			cout &lt;&lt; &quot;我考上了人大&quot; &lt;&lt; endl;
		&#125;
		
	&#125;
	else if (score &gt; 500)
	&#123;
		cout &lt;&lt; &quot;我考上了二本大学&quot; &lt;&lt; endl;
	&#125;
	else if (score &gt; 400)
	&#123;
		cout &lt;&lt; &quot;我考上了三本大学&quot; &lt;&lt; endl;
	&#125;
	else
	&#123;
		cout &lt;&lt; &quot;我未考上本科&quot; &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\三只小猪.jpg" alt="三只小猪"></p>
<h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 20;
	int c &#x3D; 0;

	c &#x3D; a &gt; b ? a : b;
	cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;

	&#x2F;&#x2F;C++中三目运算符返回的是变量,可以继续赋值

	(a &gt; b ? a : b) &#x3D; 100;

	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;
	cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式)

&#123;

	case 结果1：执行语句;break;

	case 结果2：执行语句;break;

	...

	default:执行语句;break;

&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;请给电影评分 
	&#x2F;&#x2F;10 ~ 9   经典   
	&#x2F;&#x2F; 8 ~ 7   非常好
	&#x2F;&#x2F; 6 ~ 5   一般
	&#x2F;&#x2F; 5分以下 烂片

	int score &#x3D; 0;
	cout &lt;&lt; &quot;请给电影打分&quot; &lt;&lt; endl;
	cin &gt;&gt; score;

	switch (score)
	&#123;
	case 10:
	case 9:
		cout &lt;&lt; &quot;经典&quot; &lt;&lt; endl;
		break;
	case 8:
		cout &lt;&lt; &quot;非常好&quot; &lt;&lt; endl;
		break;
	case 7:
	case 6:
		cout &lt;&lt; &quot;一般&quot; &lt;&lt; endl;
		break;
	default:
		cout &lt;&lt; &quot;烂片&quot; &lt;&lt; endl;
		break;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
</blockquote>
<blockquote>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
</blockquote>
<blockquote>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\clip_image002-1541668640382.png" alt="img"></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int num &#x3D; 0;
	while (num &lt; 10)
	&#123;
		cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;
		num++;
	&#125;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\猜数字.jpg" alt="猜数字"></p>
<h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\clip_image002-1541671163478.png" alt="img"></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int num &#x3D; 0;

	do
	&#123;
		cout &lt;&lt; num &lt;&lt; endl;
		num++;

	&#125; while (num &lt; 10);
	
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		cout &lt;&lt; i &lt;&lt; endl;
	&#125;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<p><strong>详解：</strong></p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541673704101.png" alt="1541673704101"></p>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
</blockquote>
<blockquote>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\timg.gif" alt="timg"></p>
<h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541676003486.png" alt="1541676003486"></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;外层循环执行1次，内层循环执行1轮
	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		for (int j &#x3D; 0; j &lt; 10; j++)
		&#123;
			cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;
		&#125;
		cout &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>













<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\0006018857256120_b.jpg" alt="0006018857256120_b"></p>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;
	&#x2F;&#x2F;1、在switch 语句中使用break
	cout &lt;&lt; &quot;请选择您挑战副本的难度：&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;1、普通&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;2、中等&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;3、困难&quot; &lt;&lt; endl;

	int num &#x3D; 0;

	cin &gt;&gt; num;

	switch (num)
	&#123;
	case 1:
		cout &lt;&lt; &quot;您选择的是普通难度&quot; &lt;&lt; endl;
		break;
	case 2:
		cout &lt;&lt; &quot;您选择的是中等难度&quot; &lt;&lt; endl;
		break;
	case 3:
		cout &lt;&lt; &quot;您选择的是困难难度&quot; &lt;&lt; endl;
		break;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>示例2：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;
	&#x2F;&#x2F;2、在循环语句中用break
	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		if (i &#x3D;&#x3D; 5)
		&#123;
			break; &#x2F;&#x2F;跳出循环语句
		&#125;
		cout &lt;&lt; i &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>示例3：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;
	&#x2F;&#x2F;在嵌套循环语句中使用break，退出内层循环
	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		for (int j &#x3D; 0; j &lt; 10; j++)
		&#123;
			if (j &#x3D;&#x3D; 5)
			&#123;
				break;
			&#125;
			cout &lt;&lt; &quot;*&quot; &lt;&lt; &quot; &quot;;
		&#125;
		cout &lt;&lt; endl;
	&#125;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>















<h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	for (int i &#x3D; 0; i &lt; 100; i++)
	&#123;
		if (i % 2 &#x3D;&#x3D; 0)
		&#123;
			continue;
		&#125;
		cout &lt;&lt; i &lt;&lt; endl;
	&#125;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	cout &lt;&lt; &quot;1&quot; &lt;&lt; endl;

	goto FLAG;

	cout &lt;&lt; &quot;2&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;3&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;4&quot; &lt;&lt; endl;

	FLAG:

	cout &lt;&lt; &quot;5&quot; &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541748375356.png" alt="1541748375356"></p>
<h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;定义方式1
	&#x2F;&#x2F;数据类型 数组名[元素个数];
	int score[10];

	&#x2F;&#x2F;利用下标赋值
	score[0] &#x3D; 100;
	score[1] &#x3D; 99;
	score[2] &#x3D; 85;

	&#x2F;&#x2F;利用下标输出
	cout &lt;&lt; score[0] &lt;&lt; endl;
	cout &lt;&lt; score[1] &lt;&lt; endl;
	cout &lt;&lt; score[2] &lt;&lt; endl;


	&#x2F;&#x2F;第二种定义方式
	&#x2F;&#x2F;数据类型 数组名[元素个数] &#x3D;  &#123;值1，值2 ，值3 ...&#125;;
	&#x2F;&#x2F;如果&#123;&#125;内不足10个数据，剩余数据用0补全
	int score2[10] &#x3D; &#123; 100, 90,80,70,60,50,40,30,20,10 &#125;;
	
	&#x2F;&#x2F;逐个输出
	&#x2F;&#x2F;cout &lt;&lt; score2[0] &lt;&lt; endl;
	&#x2F;&#x2F;cout &lt;&lt; score2[1] &lt;&lt; endl;

	&#x2F;&#x2F;一个一个输出太麻烦，因此可以利用循环进行输出
	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		cout &lt;&lt; score2[i] &lt;&lt; endl;
	&#125;

	&#x2F;&#x2F;定义方式3
	&#x2F;&#x2F;数据类型 数组名[] &#x3D;  &#123;值1，值2 ，值3 ...&#125;;
	int score3[] &#x3D; &#123; 100,90,80,70,60,50,40,30,20,10 &#125;;

	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		cout &lt;&lt; score3[i] &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
</blockquote>
<blockquote>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;数组名用途
	&#x2F;&#x2F;1、可以获取整个数组占用内存空间大小
	int arr[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;

	cout &lt;&lt; &quot;整个数组所占内存空间为： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;
	cout &lt;&lt; &quot;每个元素所占内存空间为： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;
	cout &lt;&lt; &quot;数组的元素个数为： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;

	&#x2F;&#x2F;2、可以通过数组名获取到数组首地址
	cout &lt;&lt; &quot;数组首地址为： &quot; &lt;&lt; (int)arr &lt;&lt; endl;
	cout &lt;&lt; &quot;数组中第一个元素地址为： &quot; &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;
	cout &lt;&lt; &quot;数组中第二个元素地址为： &quot; &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;

	&#x2F;&#x2F;arr &#x3D; 100; 错误，数组名是常量，因此不可以赋值


	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
</blockquote>
<blockquote>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541905327273.png" alt="1541905327273"></p>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int arr[9] &#x3D; &#123; 4,2,8,0,5,7,1,3,9 &#125;;

	for (int i &#x3D; 0; i &lt; 9 - 1; i++)
	&#123;
		for (int j &#x3D; 0; j &lt; 9 - 1 - i; j++)
		&#123;
			if (arr[j] &gt; arr[j + 1])
			&#123;
				int temp &#x3D; arr[j];
				arr[j] &#x3D; arr[j + 1];
				arr[j + 1] &#x3D; temp;
			&#125;
		&#125;
	&#125;

	for (int i &#x3D; 0; i &lt; 9; i++)
	&#123;
		cout &lt;&lt; arr[i] &lt;&lt; endl;
	&#125;
    
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>
<p><img src="E:\Computer\myblog\hexo\source_posts\C-从0到1入门\1541905559138.png" alt="1541905559138"></p>
<h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;方式1  
	&#x2F;&#x2F;数组类型 数组名 [行数][列数]
	int arr[2][3];
	arr[0][0] &#x3D; 1;
	arr[0][1] &#x3D; 2;
	arr[0][2] &#x3D; 3;
	arr[1][0] &#x3D; 4;
	arr[1][1] &#x3D; 5;
	arr[1][2] &#x3D; 6;

	for (int i &#x3D; 0; i &lt; 2; i++)
	&#123;
		for (int j &#x3D; 0; j &lt; 3; j++)
		&#123;
			cout &lt;&lt; arr[i][j] &lt;&lt; &quot; &quot;;
		&#125;
		cout &lt;&lt; endl;
	&#125;

	&#x2F;&#x2F;方式2 
	&#x2F;&#x2F;数据类型 数组名[行数][列数] &#x3D; &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;
	int arr2[2][3] &#x3D;
	&#123;
		&#123;1,2,3&#125;,
		&#123;4,5,6&#125;
	&#125;;

	&#x2F;&#x2F;方式3
	&#x2F;&#x2F;数据类型 数组名[行数][列数] &#x3D; &#123; 数据1，数据2 ,数据3，数据4  &#125;;
	int arr3[2][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;; 

	&#x2F;&#x2F;方式4 
	&#x2F;&#x2F;数据类型 数组名[][列数] &#x3D; &#123; 数据1，数据2 ,数据3，数据4  &#125;;
	int arr4[][3] &#x3D; &#123; 1,2,3,4,5,6 &#125;;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;二维数组数组名
	int arr[2][3] &#x3D;
	&#123;
		&#123;1,2,3&#125;,
		&#123;4,5,6&#125;
	&#125;;

	cout &lt;&lt; &quot;二维数组大小： &quot; &lt;&lt; sizeof(arr) &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组一行大小： &quot; &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组元素大小： &quot; &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;

	cout &lt;&lt; &quot;二维数组行数： &quot; &lt;&lt; sizeof(arr) &#x2F; sizeof(arr[0]) &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组列数： &quot; &lt;&lt; sizeof(arr[0]) &#x2F; sizeof(arr[0][0]) &lt;&lt; endl;

	&#x2F;&#x2F;地址
	cout &lt;&lt; &quot;二维数组首地址：&quot; &lt;&lt; arr &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组第一行地址：&quot; &lt;&lt; arr[0] &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组第二行地址：&quot; &lt;&lt; arr[1] &lt;&lt; endl;

	cout &lt;&lt; &quot;二维数组第一个元素地址：&quot; &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;
	cout &lt;&lt; &quot;二维数组第二个元素地址：&quot; &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody></table>
<p><strong>参考答案：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int scores[3][3] &#x3D;
	&#123;
		&#123;100,100,100&#125;,
		&#123;90,50,100&#125;,
		&#123;60,70,80&#125;,
	&#125;;

	string names[3] &#x3D; &#123; &quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot; &#125;;

	for (int i &#x3D; 0; i &lt; 3; i++)
	&#123;
		int sum &#x3D; 0;
		for (int j &#x3D; 0; j &lt; 3; j++)
		&#123;
			sum +&#x3D; scores[i][j];
		&#125;
		cout &lt;&lt; names[i] &lt;&lt; &quot;同学总成绩为： &quot; &lt;&lt; sum &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>













<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型 </p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句 </p>
<p>5、return 表达式</p>
<p><strong>语法：</strong> </p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 （参数列表）
&#123;

       函数体语句

       return表达式

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数定义
int add(int num1, int num2)
&#123;
	int sum &#x3D; num1 + num2;
	return sum;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code> 函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数定义
int add(int num1, int num2) &#x2F;&#x2F;定义中的num1,num2称为形式参数，简称形参
&#123;
	int sum &#x3D; num1 + num2;
	return sum;
&#125;

int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 10;
	&#x2F;&#x2F;调用add函数
	int sum &#x3D; add(a, b);&#x2F;&#x2F;调用时的a，b称为实际参数，简称实参
	cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;

	a &#x3D; 100;
	b &#x3D; 100;

	sum &#x3D; add(a, b);
	cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; sum &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap(int num1, int num2)
&#123;
	cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;
	cout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;

	int temp &#x3D; num1;
	num1 &#x3D; num2;
	num2 &#x3D; temp;

	cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;num1 &#x3D; &quot; &lt;&lt; num1 &lt;&lt; endl;
	cout &lt;&lt; &quot;num2 &#x3D; &quot; &lt;&lt; num2 &lt;&lt; endl;

	&#x2F;&#x2F;return ; 当函数声明时候，不需要返回值，可以不写return
&#125;

int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 20;

	swap(a, b);

	cout &lt;&lt; &quot;mian中的 a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;mian中的 b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数常见样式
&#x2F;&#x2F;1、 无参无返
void test01()
&#123;
	&#x2F;&#x2F;void a &#x3D; 10; &#x2F;&#x2F;无类型不可以创建变量,原因无法分配内存
	cout &lt;&lt; &quot;this is test01&quot; &lt;&lt; endl;
	&#x2F;&#x2F;test01(); 函数调用
&#125;

&#x2F;&#x2F;2、 有参无返
void test02(int a)
&#123;
	cout &lt;&lt; &quot;this is test02&quot; &lt;&lt; endl;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;
&#125;

&#x2F;&#x2F;3、无参有返
int test03()
&#123;
	cout &lt;&lt; &quot;this is test03 &quot; &lt;&lt; endl;
	return 10;
&#125;

&#x2F;&#x2F;4、有参有返
int test04(int a, int b)
&#123;
	cout &lt;&lt; &quot;this is test04 &quot; &lt;&lt; endl;
	int sum &#x3D; a + b;
	return sum;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li> 函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;声明可以多次，定义只能一次
&#x2F;&#x2F;声明
int max(int a, int b);
int max(int a, int b);
&#x2F;&#x2F;定义
int max(int a, int b)
&#123;
	return a &gt; b ? a : b;
&#125;

int main() &#123;

	int a &#x3D; 100;
	int b &#x3D; 200;

	cout &lt;&lt; max(a, b) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;swap.h文件
#include&lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;实现两个数字交换的函数声明
void swap(int a, int b);
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;swap.cpp文件
#include &quot;swap.h&quot;

void swap(int a, int b)
&#123;
	int temp &#x3D; a;
	a &#x3D; b;
	b &#x3D; temp;

	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;
	cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;main函数文件
#include &quot;swap.h&quot;
int main() &#123;

	int a &#x3D; 100;
	int b &#x3D; 200;
	swap(a, b);

	system(&quot;pause&quot;);

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>













<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
</li>
<li><p>可以利用指针变量保存地址</p>
</li>
</ul>
<h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;1、指针的定义
	int a &#x3D; 10; &#x2F;&#x2F;定义整型变量a
	
	&#x2F;&#x2F;指针定义语法： 数据类型 * 变量名 ;
	int * p;

	&#x2F;&#x2F;指针变量赋值
	p &#x3D; &amp;a; &#x2F;&#x2F;指针指向变量a的地址
	cout &lt;&lt; &amp;a &lt;&lt; endl; &#x2F;&#x2F;打印数据a的地址
	cout &lt;&lt; p &lt;&lt; endl;  &#x2F;&#x2F;打印指针变量p

	&#x2F;&#x2F;2、指针的使用
	&#x2F;&#x2F;通过*操作指针变量指向的内存
	cout &lt;&lt; &quot;*p &#x3D; &quot; &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
</blockquote>
<blockquote>
<p>总结2：利用指针可以记录地址</p>
</blockquote>
<blockquote>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int a &#x3D; 10;

	int * p;
	p &#x3D; &amp;a; &#x2F;&#x2F;指针指向数据a的地址

	cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;* 解引用
	cout &lt;&lt; sizeof(p) &lt;&lt; endl;
	cout &lt;&lt; sizeof(char *) &lt;&lt; endl;
	cout &lt;&lt; sizeof(float *) &lt;&lt; endl;
	cout &lt;&lt; sizeof(double *) &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;指针变量p指向内存地址编号为0的空间
	int * p &#x3D; NULL;

	&#x2F;&#x2F;访问空指针报错 
	&#x2F;&#x2F;内存编号0 ~255为系统占用内存，不允许用户访问
	cout &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>















<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	&#x2F;&#x2F;指针变量p指向内存地址编号为0x1100的空间
	int * p &#x3D; (int *)0x1100;

	&#x2F;&#x2F;访问野指针报错 
	cout &lt;&lt; *p &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   — 常量指针</li>
<li>const修饰常量   — 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 10;

	&#x2F;&#x2F;const修饰的是指针，指针指向可以改，指针指向的值不可以更改
	const int * p1 &#x3D; &amp;a; 
	p1 &#x3D; &amp;b; &#x2F;&#x2F;正确
	&#x2F;&#x2F;*p1 &#x3D; 100;  报错
	

	&#x2F;&#x2F;const修饰的是常量，指针指向不可以改，指针指向的值可以更改
	int * const p2 &#x3D; &amp;a;
	&#x2F;&#x2F;p2 &#x3D; &amp;b; &#x2F;&#x2F;错误
	*p2 &#x3D; 100; &#x2F;&#x2F;正确

    &#x2F;&#x2F;const既修饰指针又修饰常量
	const int * const p3 &#x3D; &amp;a;
	&#x2F;&#x2F;p3 &#x3D; &amp;b; &#x2F;&#x2F;错误
	&#x2F;&#x2F;*p3 &#x3D; 100; &#x2F;&#x2F;错误

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;

	int arr[] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;

	int * p &#x3D; arr;  &#x2F;&#x2F;指向数组的指针

	cout &lt;&lt; &quot;第一个元素： &quot; &lt;&lt; arr[0] &lt;&lt; endl;
	cout &lt;&lt; &quot;指针访问第一个元素： &quot; &lt;&lt; *p &lt;&lt; endl;

	for (int i &#x3D; 0; i &lt; 10; i++)
	&#123;
		&#x2F;&#x2F;利用指针遍历数组
		cout &lt;&lt; *p &lt;&lt; endl;
		p++;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;值传递
void swap1(int a ,int b)
&#123;
	int temp &#x3D; a;
	a &#x3D; b; 
	b &#x3D; temp;
&#125;
&#x2F;&#x2F;地址传递
void swap2(int * p1, int *p2)
&#123;
	int temp &#x3D; *p1;
	*p1 &#x3D; *p2;
	*p2 &#x3D; temp;
&#125;

int main() &#123;

	int a &#x3D; 10;
	int b &#x3D; 20;
	swap1(a, b); &#x2F;&#x2F; 值传递不会改变实参

	swap2(&amp;a, &amp;b); &#x2F;&#x2F;地址传递会改变实参

	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;

	cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;冒泡排序函数
void bubbleSort(int * arr, int len)  &#x2F;&#x2F;int * arr 也可以写为int arr[]
&#123;
	for (int i &#x3D; 0; i &lt; len - 1; i++)
	&#123;
		for (int j &#x3D; 0; j &lt; len - 1 - i; j++)
		&#123;
			if (arr[j] &gt; arr[j + 1])
			&#123;
				int temp &#x3D; arr[j];
				arr[j] &#x3D; arr[j + 1];
				arr[j + 1] &#x3D; temp;
			&#125;
		&#125;
	&#125;
&#125;

&#x2F;&#x2F;打印数组函数
void printArray(int arr[], int len)
&#123;
	for (int i &#x3D; 0; i &lt; len; i++)
	&#123;
		cout &lt;&lt; arr[i] &lt;&lt; endl;
	&#125;
&#125;

int main() &#123;

	int arr[10] &#x3D; &#123; 4,3,6,9,1,2,10,8,7,5 &#125;;
	int len &#x3D; sizeof(arr) &#x2F; sizeof(int);

	bubbleSort(arr, len);

	printArray(arr, len);

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义
struct student
&#123;
	&#x2F;&#x2F;成员列表
	string name;  &#x2F;&#x2F;姓名
	int age;      &#x2F;&#x2F;年龄
	int score;    &#x2F;&#x2F;分数
&#125;stu3; &#x2F;&#x2F;结构体变量创建方式3 


int main() &#123;

	&#x2F;&#x2F;结构体变量创建方式1
	struct student stu1; &#x2F;&#x2F;struct 关键字可以省略

	stu1.name &#x3D; &quot;张三&quot;;
	stu1.age &#x3D; 18;
	stu1.score &#x3D; 100;
	
	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu1.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu1.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu1.score &lt;&lt; endl;

	&#x2F;&#x2F;结构体变量创建方式2
	struct student stu2 &#x3D; &#123; &quot;李四&quot;,19,60 &#125;;

	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu2.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu2.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu2.score &lt;&lt; endl;


	stu3.name &#x3D; &quot;王五&quot;;
	stu3.age &#x3D; 18;
	stu3.score &#x3D; 80;
	

	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu3.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu3.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu3.score &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
</blockquote>
<blockquote>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
</blockquote>
<blockquote>
<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>
</blockquote>
<h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义
struct student
&#123;
	&#x2F;&#x2F;成员列表
	string name;  &#x2F;&#x2F;姓名
	int age;      &#x2F;&#x2F;年龄
	int score;    &#x2F;&#x2F;分数
&#125;

int main() &#123;
	
	&#x2F;&#x2F;结构体数组
	struct student arr[3]&#x3D;
	&#123;
		&#123;&quot;张三&quot;,18,80 &#125;,
		&#123;&quot;李四&quot;,19,60 &#125;,
		&#123;&quot;王五&quot;,20,70 &#125;
	&#125;;

	for (int i &#x3D; 0; i &lt; 3; i++)
	&#123;
		cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; arr[i].age &lt;&lt; &quot; 分数：&quot; &lt;&lt; arr[i].score &lt;&lt; endl;
	&#125;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>











<h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;结构体定义
struct student
&#123;
	&#x2F;&#x2F;成员列表
	string name;  &#x2F;&#x2F;姓名
	int age;      &#x2F;&#x2F;年龄
	int score;    &#x2F;&#x2F;分数
&#125;;


int main() &#123;
	
	struct student stu &#x3D; &#123; &quot;张三&quot;,18,100, &#125;;
	
	struct student * p &#x3D; &amp;stu;
	
	p-&gt;score &#x3D; 80; &#x2F;&#x2F;指针通过 -&gt; 操作符可以访问成员

	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; p-&gt;score &lt;&lt; endl;
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义
struct student
&#123;
	&#x2F;&#x2F;成员列表
	string name;  &#x2F;&#x2F;姓名
	int age;      &#x2F;&#x2F;年龄
	int score;    &#x2F;&#x2F;分数
&#125;;

&#x2F;&#x2F;教师结构体定义
struct teacher
&#123;
    &#x2F;&#x2F;成员列表
	int id; &#x2F;&#x2F;职工编号
	string name;  &#x2F;&#x2F;教师姓名
	int age;   &#x2F;&#x2F;教师年龄
	struct student stu; &#x2F;&#x2F;子结构体 学生
&#125;;


int main() &#123;

	struct teacher t1;
	t1.id &#x3D; 10000;
	t1.name &#x3D; &quot;老王&quot;;
	t1.age &#x3D; 40;

	t1.stu.name &#x3D; &quot;张三&quot;;
	t1.stu.age &#x3D; 18;
	t1.stu.score &#x3D; 100;

	cout &lt;&lt; &quot;教师 职工编号： &quot; &lt;&lt; t1.id &lt;&lt; &quot; 姓名： &quot; &lt;&lt; t1.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; t1.age &lt;&lt; endl;
	
	cout &lt;&lt; &quot;辅导学员 姓名： &quot; &lt;&lt; t1.stu.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; t1.stu.age &lt;&lt; &quot; 考试分数： &quot; &lt;&lt; t1.stu.score &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义
struct student
&#123;
	&#x2F;&#x2F;成员列表
	string name;  &#x2F;&#x2F;姓名
	int age;      &#x2F;&#x2F;年龄
	int score;    &#x2F;&#x2F;分数
&#125;;

&#x2F;&#x2F;值传递
void printStudent(student stu )
&#123;
	stu.age &#x3D; 28;
	cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;
&#125;

&#x2F;&#x2F;地址传递
void printStudent2(student *stu)
&#123;
	stu-&gt;age &#x3D; 28;
	cout &lt;&lt; &quot;子函数中 姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu-&gt;age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;
&#125;

int main() &#123;

	student stu &#x3D; &#123; &quot;张三&quot;,18,100&#125;;
	&#x2F;&#x2F;值传递
	printStudent(stu);
	cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;

	cout &lt;&lt; endl;

	&#x2F;&#x2F;地址传递
	printStudent2(&amp;stu);
	cout &lt;&lt; &quot;主函数中 姓名：&quot; &lt;&lt; stu.name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; stu.age  &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu.score &lt;&lt; endl;

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生结构体定义
struct student
&#123;
	&#x2F;&#x2F;成员列表
	string name;  &#x2F;&#x2F;姓名
	int age;      &#x2F;&#x2F;年龄
	int score;    &#x2F;&#x2F;分数
&#125;;

&#x2F;&#x2F;const使用场景
void printStudent(const student *stu) &#x2F;&#x2F;加const防止函数体中的误操作
&#123;
	&#x2F;&#x2F;stu-&gt;age &#x3D; 100; &#x2F;&#x2F;操作失败，因为加了const修饰
	cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; stu-&gt;name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; stu-&gt;age &lt;&lt; &quot; 分数：&quot; &lt;&lt; stu-&gt;score &lt;&lt; endl;

&#125;

int main() &#123;

	student stu &#x3D; &#123; &quot;张三&quot;,18,100 &#125;;

	printStudent(&amp;stu);

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Student
&#123;
	string name;
	int score;
&#125;;
struct Teacher
&#123;
	string name;
	Student sArray[5];
&#125;;

void allocateSpace(Teacher tArray[] , int len)
&#123;
	string tName &#x3D; &quot;教师&quot;;
	string sName &#x3D; &quot;学生&quot;;
	string nameSeed &#x3D; &quot;ABCDE&quot;;
	for (int i &#x3D; 0; i &lt; len; i++)
	&#123;
		tArray[i].name &#x3D; tName + nameSeed[i];
		
		for (int j &#x3D; 0; j &lt; 5; j++)
		&#123;
			tArray[i].sArray[j].name &#x3D; sName + nameSeed[j];
			tArray[i].sArray[j].score &#x3D; rand() % 61 + 40;
		&#125;
	&#125;
&#125;

void printTeachers(Teacher tArray[], int len)
&#123;
	for (int i &#x3D; 0; i &lt; len; i++)
	&#123;
		cout &lt;&lt; tArray[i].name &lt;&lt; endl;
		for (int j &#x3D; 0; j &lt; 5; j++)
		&#123;
			cout &lt;&lt; &quot;\t姓名：&quot; &lt;&lt; tArray[i].sArray[j].name &lt;&lt; &quot; 分数：&quot; &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;
		&#125;
	&#125;
&#125;

int main() &#123;

	srand((unsigned int)time(NULL)); &#x2F;&#x2F;随机数种子 头文件 #include &lt;ctime&gt;

	Teacher tArray[3]; &#x2F;&#x2F;老师数组

	int len &#x3D; sizeof(tArray) &#x2F; sizeof(Teacher);

	allocateSpace(tArray, len); &#x2F;&#x2F;创建数据

	printTeachers(tArray, len); &#x2F;&#x2F;打印数据
	
	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,
&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,
&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,
&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,
&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>









<p><strong>示例：</strong></p>
<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;英雄结构体
struct hero
&#123;
	string name;
	int age;
	string sex;
&#125;;
&#x2F;&#x2F;冒泡排序
void bubbleSort(hero arr[] , int len)
&#123;
	for (int i &#x3D; 0; i &lt; len - 1; i++)
	&#123;
		for (int j &#x3D; 0; j &lt; len - 1 - i; j++)
		&#123;
			if (arr[j].age &gt; arr[j + 1].age)
			&#123;
				hero temp &#x3D; arr[j];
				arr[j] &#x3D; arr[j + 1];
				arr[j + 1] &#x3D; temp;
			&#125;
		&#125;
	&#125;
&#125;
&#x2F;&#x2F;打印数组
void printHeros(hero arr[], int len)
&#123;
	for (int i &#x3D; 0; i &lt; len; i++)
	&#123;
		cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; arr[i].name &lt;&lt; &quot; 性别： &quot; &lt;&lt; arr[i].sex &lt;&lt; &quot; 年龄： &quot; &lt;&lt; arr[i].age &lt;&lt; endl;
	&#125;
&#125;

int main() &#123;

	struct hero arr[5] &#x3D;
	&#123;
		&#123;&quot;刘备&quot;,23,&quot;男&quot;&#125;,
		&#123;&quot;关羽&quot;,22,&quot;男&quot;&#125;,
		&#123;&quot;张飞&quot;,20,&quot;男&quot;&#125;,
		&#123;&quot;赵云&quot;,21,&quot;男&quot;&#125;,
		&#123;&quot;貂蝉&quot;,19,&quot;女&quot;&#125;,
	&#125;;

	int len &#x3D; sizeof(arr) &#x2F; sizeof(hero); &#x2F;&#x2F;获取数组元素个数

	bubbleSort(arr, len); &#x2F;&#x2F;排序

	printHeros(arr, len); &#x2F;&#x2F;打印

	system(&quot;pause&quot;);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
</search>
