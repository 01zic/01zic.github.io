<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C基础学习与复习</title>
    <url>/2022/06/23/CNOTE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马C基础教程的资料总结</li>
<li>C语言入门教程100例 <a href="/download/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8F%8A100%E4%BE%8B.chm">点击下载</a></li>
</ul>
<h2 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h2><h3 id="1-C语言概述"><a href="#1-C语言概述" class="headerlink" title="1.C语言概述"></a>1.C语言概述</h3><h4 id="1-不同语言的应用场景"><a href="#1-不同语言的应用场景" class="headerlink" title="1.不同语言的应用场景"></a>1.不同语言的应用场景</h4><pre class="mermaid">graph LR;
不同语言-->嵌入式:C和汇编
不同语言-->Web开发:js,php,asp,jsp
不同语言-->高性能服务:apache,nginx,memcached,redis等等高性能web服务器和数据库都是纯c开发的
不同语言-->分布式应用:java,python的天下
不同语言-->游戏服务器:c,c++,lua脚本
不同语言-->并行计算:java,go,erlang
不同语言-->游戏引擎:c++,脚本
不同语言-->游戏逻辑:脚本
不同语言-->移动开发:java,obj-c,swift
不同语言-->桌面开发:c++,qt+script,c#
不同语言-->操作系统:c
不同语言-->虚拟技术:qemu,kvm,xen都是纯c开发的
不同语言-->数据库:c
不同语言-->编译器:c,c++
不同语言-->大数据:java,python
不同语言-->云存储:java,python</pre>

<h4 id="2-C语言的简洁"><a href="#2-C语言的简洁" class="headerlink" title="2.C语言的简洁"></a>2.C语言的简洁</h4><ul>
<li>32个关键字，9种控制语句，34种运算符</li>
<li><img src="http://qiniu.orangew.cn/img/32%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="32个关键字"></li>
</ul>
<blockquote>
<p>32个关键字:(由系统定义，不能重作其它定义)</p>
<p>auto<br>break<br>case<br>char<br>const<br>continue<br>default<br>do<br>double<br>else<br>enum<br>extern<br>float<br>for<br>goto<br>if<br>int<br>long<br>register<br>return<br>short<br>signed<br>sizeofstatic<br>struct<br>switch<br>typedef<br>unsigned<br>union<br>void<br>volatile<br>while</p>
</blockquote>
<blockquote>
<p>9种控制语句:</p>
<p>if( )<del>else</del></p>
<p>for( )~</p>
<p>while( )~</p>
<p>do~while( )</p>
<p>continue</p>
<p>break</p>
<p>switch</p>
<p>goto</p>
<p>return</p>
</blockquote>
<blockquote>
<p>34种运算符:<br>算术运算符: + - * / % ++ –<br>关系运算符: &lt; &lt;= == &gt; &gt;= !=<br>逻辑运算符: ! &amp;&amp; ||<br>位运算符:  &lt;&lt;  &gt;&gt;  ~ | ^ &amp;<br>赋值运算符: = 及其扩展<br>条件运算符: ?:<br>逗号运算符: ,<br>指针运算符: * &amp;<br>求字节数: sizeof<br>强制类型转换:(类型)<br>分量运算符: . -&gt;<br>下标运算符: [ ]<br>其它:( )</p>
</blockquote>
<h4 id="3-gcc编译C"><a href="#3-gcc编译C" class="headerlink" title="3.gcc编译C"></a>3.<code>gcc</code>编译C</h4><ul>
<li><code>gcc</code>（GNU Compiler Collection，GNU 编译器套件），是由 GNU 开发的编程语言编译器。<code>gcc</code>原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，<code>gcc</code>同样适用于微软的Windows。</li>
<li><code>gcc</code>最初用于编译C语言，随着项目的发展<code>gcc</code>已经成为了能够编译<code>C、C++、Java、Ada、fortran、Object C、Object C++、Go</code>语言的编译器大家族。</li>
<li>编译命令格式</li>
</ul>
<blockquote>
<p><code>gcc</code>  [<code>-option1</code>] … <filename></p>
<p><code>g++</code>  [<code>-option1</code>] … <filename></p>
</blockquote>
<ul>
<li>命令、选项和源文件之间使用空格分隔</li>
<li>一行命令中可以有零个、一个或多个选项</li>
<li>文件名可以包含文件的绝对路径，也可以使用相对路径</li>
<li>如果命令中不包含输出可执行文件的文件名，可执行文件的文件名会自动生成一个默认名，Linux平台为<code>a.out</code>，Windows平台为<code>a.exe</code></li>
<li><code>gcc</code>,<code>g++</code>编译常用选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
<tr>
<td>-E</td>
<td>预处理</td>
</tr>
<tr>
<td>-S</td>
<td>预处理和编译</td>
</tr>
<tr>
<td>-c</td>
<td>预处理、编译和汇编</td>
</tr>
</tbody></table>
<h4 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4.环境配置"></a>4.环境配置</h4><h4 id="5-代码分析"><a href="#5-代码分析" class="headerlink" title="5.代码分析"></a>5.代码分析</h4><ol>
<li>头文件<ul>
<li>#include&lt; &gt; 与 #include “”的区别：<ul>
<li>&lt; &gt; 表示系统直接按系统指定的目录检索</li>
<li>“” 表示系统先在 “” 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</li>
</ul>
</li>
</ul>
</li>
<li>main函数<ul>
<li>一个完整的C语言程序，是由一个、且只能有一个main()函数(又称主函数，必须有)和若干个其他函数结合而成（可选）</li>
<li>main函数是C语言程序的入口，程序是从main函数开始执行。</li>
</ul>
</li>
<li>{} 括号，程序体和代码块<ul>
<li>{}叫代码块，一个代码块内部可以有一条或者多条语句</li>
<li>C语言每句可执行代码都是”<strong>;</strong>“分号结尾</li>
<li>所有的#开头的行，都代表预编译指令，预编译指令行结尾是没有分号的</li>
<li>所有的可执行语句必须是在代码块里面</li>
</ul>
</li>
<li>注释<ul>
<li>//叫行注释，注释的内容编译器是忽略的，注释主要的作用是在代码中加一些说明和解释，这样有利于代码的阅读</li>
<li>/**/叫块注释</li>
<li>块注释是C语言标准的注释方法</li>
<li>行注释是从C++语言借鉴过来的</li>
</ul>
</li>
<li>return语句<ul>
<li>return代表函数执行完毕，返回return代表函数的终止</li>
<li>如果main定义的时候前面是int，那么return后面就需要写一个整数；如果main定义的时候前面是void，那么return后面什么也不需要写</li>
<li>在main函数中return 0代表程序执行成功，return -1代表程序执行失败</li>
<li>int main()和void main()在C语言中是一样的，但C++只接受int main这种定义方式</li>
</ul>
</li>
</ol>
<h4 id="6-system函数"><a href="#6-system函数" class="headerlink" title="6. system函数"></a>6. system函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在已经运行的程序中执行另外一个外部程序
参数：外部可执行程序名字
返回值：
成功：<span class="token number">0</span>
失败：任意数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//system("calc"); //windows平台</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Linux平台, 需要头文件#include &lt;stdlib.h></span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-C语言编译过程"><a href="#7-C语言编译过程" class="headerlink" title="7.C语言编译过程"></a>7.C语言编译过程</h4><ol>
<li>预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</li>
<li>编译：检查语法，将预处理后文件编译生成汇编文件</li>
<li>汇编：将汇编文件生成目标文件(二进制文件)</li>
<li>链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</li>
</ol>
<pre class="mermaid">graph TD;
源代码*.c-->预处理器
头文件*.h-->预处理器
预处理器-->编译器
编译器-->汇编;
汇编-->目标代码*.o
目标代码*.o -->链接器
启动代码-->链接器
库代码-->链接器
链接器-->可执行文件</pre>

<h4 id="8-gcc编译过程"><a href="#8-gcc编译过程" class="headerlink" title="8.gcc编译过程"></a>8.gcc编译过程</h4><ol>
<li>分步编译</li>
</ol>
<blockquote>
<p>预处理：<code>gcc -E hello.c -o hello.i</code></p>
<p>编 译：<code>gcc -S hello.i -o hello.s</code></p>
<p>汇 编：<code>gcc -c hello.s -o hello.o</code></p>
<p>链 接：<code>gcc  hello.o -o hello</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-E</td>
<td>只进行预处理</td>
</tr>
<tr>
<td>-S</td>
<td>只进行预处理和编译</td>
</tr>
<tr>
<td>-c</td>
<td>只进行预处理、编译和汇编</td>
</tr>
<tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>文件后缀</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>.c</td>
<td>源文件</td>
</tr>
<tr>
<td>.i</td>
<td>预处理后的C语言文件</td>
</tr>
<tr>
<td>.s</td>
<td>编译后的汇编文件</td>
</tr>
<tr>
<td>.o</td>
<td>汇编后的目标文件</td>
</tr>
</tbody></table>
<p><img src="http://qiniu.orangew.cn/img/01%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="01编译过程"></p>
<h4 id="9-CPU内部结构和寄存器"><a href="#9-CPU内部结构和寄存器" class="headerlink" title="9.CPU内部结构和寄存器"></a>9.CPU内部结构和寄存器</h4><ol>
<li>64位和32位系统的区别</li>
</ol>
<ul>
<li>寄存器是CPU内部最基本的存储单元</li>
<li>CPU对外是通过总线(地址、控制、数据)来和外部设备交互的，总线的宽度是8位，同时CPU的寄存器也是8位，那么这个CPU就叫8位CPU</li>
<li>如果总线是32位，寄存器也是32位的，那么这个CPU就是32位CPU</li>
<li>有一种CPU内部的寄存器是32位的，但总线是16位，准32为CPU</li>
<li>所有的64位CPU兼容32位的指令，32位要兼容16位的指令，所以在64位的CPU上是可以识别32位的指令</li>
<li>在64位的CPU构架上运行了64位的软件操作系统，那么这个系统是64位</li>
<li>在64位的CPU构架上，运行了32位的软件操作系统，那么这个系统就是32位</li>
<li>64位的软件不能运行在32位的CPU之上</li>
</ul>
<ol start="2">
<li>寄存器名字</li>
</ol>
<table>
<thead>
<tr>
<th>8位</th>
<th>16位</th>
<th>32位</th>
<th>64位</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>AX</td>
<td>EAX</td>
<td>RAX</td>
</tr>
<tr>
<td>B</td>
<td>BX</td>
<td>EBX</td>
<td>RBX</td>
</tr>
<tr>
<td>C</td>
<td>CX</td>
<td>ECX</td>
<td>RCX</td>
</tr>
<tr>
<td>D</td>
<td>DX</td>
<td>EDX</td>
<td>RDX</td>
</tr>
</tbody></table>
<ol start="3">
<li>寄存器、缓存、内存三者之间的关系<ul>
<li>按与CPU远近来分，离得最近的是寄存器，然后缓存(CPU缓存)，最后内存。</li>
<li>CPU计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU&lt;—&gt;寄存器&lt;—&gt;内存，这就是它们之间的信息交换。</li>
<li>那为什么有缓存呢？因为如果经常操作内存中的同一址地的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。</li>
<li>因为从缓存提取的速度远高于内存。当然缓存的价格肯定远远高于内存，不然的话，机器里就没有内存的存在。</li>
<li>由此可以看出，从远近来看：CPU〈—〉寄存器〈—&gt; 缓存 &lt;—&gt; 内存。</li>
</ul>
</li>
</ol>
<h4 id="10-汇编语言"><a href="#10-汇编语言" class="headerlink" title="10.汇编语言"></a>10.汇编语言</h4><ol>
<li>vs中c语言嵌套汇编语言</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义整型变量a, b, c</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	__asm
	<span class="token punctuation">&#123;</span>
		mov a<span class="token punctuation">,</span> <span class="token number">3</span>	<span class="token comment">//3的值放在a对应内存的位置</span>
		mov b<span class="token punctuation">,</span> <span class="token number">4</span>	<span class="token comment">//4的值放在b对应内存的位置</span>
		mov eax<span class="token punctuation">,</span> a	<span class="token comment">//把a内存的值放在eax寄存器</span>
		add eax<span class="token punctuation">,</span> b	<span class="token comment">//eax和b相加，结果放在eax</span>
		mov c<span class="token punctuation">,</span> eax	<span class="token comment">//eax的值放在c中</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把c的值输出</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成功完成</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>反汇编</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义整型变量a, b, c</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把c的值输出</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成功完成</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>设置断点</li>
<li>右键反汇编</li>
<li>根据汇编代码分析程序</li>
</ul>
<h4 id="11-IDE"><a href="#11-IDE" class="headerlink" title="11.IDE"></a>11.IDE</h4><ol>
<li>Qt Creator</li>
<li>Visual Studio<ol>
<li>vs2013不建议使用C的传统函数库scanf,strcpy,sprintf，使用这些函数，会提示C4996错误</li>
</ol>
</li>
</ol>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><h4 id="1-常量与变量"><a href="#1-常量与变量" class="headerlink" title="1.常量与变量"></a>1.常量与变量</h4><ol>
<li>关键字（32个）<ul>
<li>数据类型关键字（12个）<br>char, short,int,long, float, double,unsigned,signed,struct, union, enum, void</li>
<li>控制语句关键字（12个)<br>if,else, switch, case, default<br>for , do, while, break, continue, goto, return</li>
<li>存储类关键字(5个)<br>auto，extern,register，static，const</li>
<li>其他关键字（3个)<br>sizeof，typedef，volatile</li>
</ul>
</li>
<li>数据类型</li>
</ol>
<pre class="mermaid">graph LR;
数据类型-->基本类型
数据类型-->构造类型
数据类型-->指针类型:char*,int*,int**等
基本类型-->整型:int,short,long
基本类型-->字符型:char
基本类型-->浮点型
浮点型-->单精度浮点型:float
浮点型-->双精度浮点型:double
构造类型-->数组类型
构造类型-->结构类型:struct
构造类型-->联合类型:union
构造类型-->枚举类型:enum</pre>

<p>3.常量</p>
<ul>
<li><p>在程序运行过程中，其值不能被改变的量</p>
</li>
<li><p> 常量一般出现在表达式或赋值语句中</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>整型常量</th>
<th>100，200，-100，0</th>
</tr>
</thead>
<tbody><tr>
<td>实型常量</td>
<td>3.14 ， 0.125，-3.123</td>
</tr>
<tr>
<td>字符型常量</td>
<td>‘a’,‘b’,‘1’,‘\n’</td>
</tr>
<tr>
<td>字符串常量</td>
<td>“a”,“ab”，“12356”</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="4">
<li>变量<ul>
<li>在程序运行过程中，其值可以改变</li>
<li>变量在使用前必须先定义，定义变量前必须有相应的数据类型</li>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
<li>变量在编译时为其分配相应的内存空间</li>
<li>可以通过其名字和地址访问相应内存</li>
<li>变量名，变量值，存储单元</li>
</ul>
</li>
<li>声明和定义的区别<ul>
<li>声明变量不需要建立存储空间，如：extern int a;</li>
<li>定义变量需要建立存储空间，如：int b;</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//extern 关键字只做声明，不能做任何定义</span>
	<span class="token comment">//声明一个变量a，a在这里没有建立存储空间</span>
	<span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">//err, 没有空间，就不可以赋值</span>

	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">//定义一个变量b，b的类型为int，b赋值为10</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义：</p>
<ul>
<li><p>int b 它既是声明，同时又是定义</p>
</li>
<li><p>对于 extern b来讲它只是声明不是定义</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">10</span> </span><span class="token comment">//声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>	<span class="token comment">//定义了一个变量，其类型为int，名字叫a</span>

	<span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//定义一个const常量，名为叫b，值为10</span>
	<span class="token comment">//b = 11; //err,常量的值不能改变</span>

	<span class="token comment">//MAX = 100;	//err,常量的值不能改变</span>

	a <span class="token operator">=</span> MAX<span class="token punctuation">;</span><span class="token comment">//将abc的值设置为MAX的值</span>
	a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印变量a的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-整型：int"><a href="#2-整型：int" class="headerlink" title="2.整型：int"></a>2.整型：int</h4><ol>
<li><p>定义和输出</p>
<ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>输出一个有符号的10进制int类型</td>
</tr>
<tr>
<td>%o(字母o)</td>
<td>输出8进制的int类型</td>
</tr>
<tr>
<td>%x</td>
<td>输出16进制的int类型，字母以小写输出</td>
</tr>
<tr>
<td>%X</td>
<td>输出16进制的int类型，字母以大写输出</td>
</tr>
<tr>
<td>%u</td>
<td>输出一个10进制的无符号数</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量a，以10进制方式赋值为123</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0567</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量b，以8进制方式赋值为0567</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xabc</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量c，以16进制方式赋值为0xabc</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"8进制：b = %o\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10进制：b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"16进制：c = %x\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"16进制：c = %X\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10进制：c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span> <span class="token comment">//定义无符号int变量d，以16进制方式赋值</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"有符号方式打印：d = %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无符号方式打印：d = %u\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>输入</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//不要加“\n”</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印a的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>short、int、long、long long</li>
</ol>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
</tr>
</tbody></table>
<ul>
<li>需要注意的是，整型数据在内存中占的字节数与所选择的操作系统有关。虽然 C 语言标准中没有明确规定整型数据的长度，但 long 类型整数的长度不能短于 int 类型， short 类型整数的长度不能长于 int 类型。</li>
<li>当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>整型常量</strong></th>
<th><strong>所需类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>代表int类型</td>
</tr>
<tr>
<td>10l, 10L</td>
<td>代表long类型</td>
</tr>
<tr>
<td>10ll, 10LL</td>
<td>代表long long类型</td>
</tr>
<tr>
<td>10u, 10U</td>
<td>代表unsigned int类型</td>
</tr>
<tr>
<td>10ul, 10UL</td>
<td>代表unsigned long类型</td>
</tr>
<tr>
<td>10ull, 10ULL</td>
<td>代表unsigned long long类型</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th align="left"><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%hd</td>
<td align="left">输出short类型</td>
</tr>
<tr>
<td>%d</td>
<td align="left">输出int类型</td>
</tr>
<tr>
<td>%ld</td>
<td align="left">输出long类型</td>
</tr>
<tr>
<td>%lld</td>
<td align="left">输出long long类型</td>
</tr>
<tr>
<td>%hu</td>
<td align="left">输出unsigned short类型</td>
</tr>
<tr>
<td>%u</td>
<td align="left">输出unsigned int类型</td>
</tr>
<tr>
<td>%lu</td>
<td align="left">输出unsigned long类型</td>
</tr>
<tr>
<td>%llu</td>
<td align="left">输出unsigned long long类型</td>
</tr>
</tbody></table>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">10l</span><span class="token punctuation">;</span> <span class="token comment">//或者10L</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">10ll</span><span class="token punctuation">;</span> <span class="token comment">//或者10LL</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short a = %hd\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long c = %ld\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long d = %lld\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> a2 <span class="token operator">=</span> <span class="token number">20u</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token number">20u</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> c2<span class="token operator">=</span> <span class="token number">20ul</span><span class="token punctuation">;</span> 
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d2 <span class="token operator">=</span> <span class="token number">20ull</span><span class="token punctuation">;</span> 

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned short a = %hu\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned int b = %u\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long c = %lu\n"</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long long d = %llu\n"</span><span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.有符号数和无符号数的区别</p>
<ul>
<li>有符号数是最高位为符号位，0代表正数，1代表负数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">signed</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1089474374</span><span class="token punctuation">;</span> <span class="token comment">//定义有符号整型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为 BF0FF0BA</span>

	<span class="token comment">//B       F      0        F       F     0        B	      A</span>
	<span class="token comment">//1011 1111 0000 1111 1111 0000 1011 1010</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> 符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3236958022</span><span class="token punctuation">;</span> <span class="token comment">//定义无符号整型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为 C0F00F46</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有符号和无符号整型的取值范围</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>取值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>2字节</td>
<td>-32768 到 32767 (-215 ~ 215-1)</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-2147483648 到 2147483647 (-231 ~ 231-1)</td>
</tr>
<tr>
<td>long</td>
<td>4字节</td>
<td>-2147483648 到 2147483647 (-231 ~ 231-1)</td>
</tr>
<tr>
<td>unsigned short</td>
<td>2字节</td>
<td>0 到 65535 (0 ~ 216-1)</td>
</tr>
<tr>
<td>unsigned int</td>
<td>4字节</td>
<td>0 到 4294967295 (0 ~ 232-1)</td>
</tr>
<tr>
<td>unsigned long</td>
<td>4字节</td>
<td>0 到 4294967295 (0 ~ 232-1)</td>
</tr>
</tbody></table>
<h4 id="3-sizeof关键字"><a href="#3-sizeof关键字" class="headerlink" title="3.sizeof关键字"></a>3.sizeof关键字</h4><ul>
<li>sizeof不是函数，所以不需要包含任何头文件，它的功能是计算一个数据类型的大小，单位为字节</li>
<li>sizeof的返回值为size_t</li>
<li>size_t类型在32位操作系统下是unsigned int，是一个无符号的整数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sizeof得到指定值占用内存的大小，单位：字节</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">size_t</span> c <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %u\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用无符号数的方式输出c的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-字符型char"><a href="#4-字符型char" class="headerlink" title="4.字符型char"></a>4.字符型char</h4><ol>
<li>字符变量的定义和输出<ul>
<li>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中。char的本质就是一个1字节大小的整型。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(ch) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch[%%c] = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印字符</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch[%%d] = %d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印‘a’ ASCII的值</span>

	<span class="token keyword">char</span> A <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//97</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %d\n"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//65</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写a转大写A</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大写A转小写a</span>

	ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"空字符：%d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空字符ASCII的值为32</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写a转大写A</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大写A转小写a</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.字符变量的输入</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//不要加“\n”</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印ch的字符</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>ASCII对照表</li>
</ol>
<table>
<thead>
<tr>
<th><strong>十进制代码</strong></th>
<th><strong>十六进制代码</strong></th>
<th><strong>MCS 字符或缩写</strong></th>
<th><strong>DEC 多国字符名</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>ASCII 控制字符</strong> <strong>1</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>NUL</td>
<td>空字符</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>SOH</td>
<td>标题起始 (Ctrl/A)</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>STX</td>
<td>文本起始 (Ctrl/B)</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>ETX</td>
<td>文本结束 (Ctrl/C)</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>EOT</td>
<td>传输结束 (Ctrl/D)</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>ENQ</td>
<td>询问 (Ctrl/E)</td>
</tr>
<tr>
<td>6</td>
<td>6</td>
<td>ACK</td>
<td>认可 (Ctrl/F)</td>
</tr>
<tr>
<td>7</td>
<td>7</td>
<td>BEL</td>
<td>铃 (Ctrl/G)</td>
</tr>
<tr>
<td>8</td>
<td>8</td>
<td>BS</td>
<td>退格 (Ctrl/H)</td>
</tr>
<tr>
<td>9</td>
<td>9</td>
<td>HT</td>
<td>水平制表栏 (Ctrl/I)</td>
</tr>
<tr>
<td>10</td>
<td>0A</td>
<td>LF</td>
<td>换行 (Ctrl/J)</td>
</tr>
<tr>
<td>11</td>
<td>0B</td>
<td>VT</td>
<td>垂直制表栏 (Ctrl/K)</td>
</tr>
<tr>
<td>12</td>
<td>0C</td>
<td>FF</td>
<td>换页 (Ctrl/L)</td>
</tr>
<tr>
<td>13</td>
<td>0D</td>
<td>CR</td>
<td>回车 (Ctrl/M)</td>
</tr>
<tr>
<td>14</td>
<td>0E</td>
<td>SO</td>
<td>移出 (Ctrl/N)</td>
</tr>
<tr>
<td>15</td>
<td>0F</td>
<td>SI</td>
<td>移入 (Ctrl/O)</td>
</tr>
<tr>
<td>16</td>
<td>10</td>
<td>DLE</td>
<td>数据链接丢失 (Ctrl/P)</td>
</tr>
<tr>
<td>17</td>
<td>11</td>
<td>DC1</td>
<td>设备控制 1 (Ctrl/Q)</td>
</tr>
<tr>
<td>18</td>
<td>12</td>
<td>DC2</td>
<td>设备控制 2 (Ctrl/R)</td>
</tr>
<tr>
<td>19</td>
<td>13</td>
<td>DC3</td>
<td>设备控制 3 (Ctrl/S)</td>
</tr>
<tr>
<td>20</td>
<td>14</td>
<td>DC4</td>
<td>设备控制 4 (Ctrl/T)</td>
</tr>
<tr>
<td>21</td>
<td>15</td>
<td>NAK</td>
<td>否定接受 (Ctrl/U)</td>
</tr>
<tr>
<td>22</td>
<td>16</td>
<td>SYN</td>
<td>同步闲置符 (Ctrl/V)</td>
</tr>
<tr>
<td>23</td>
<td>17</td>
<td>ETB</td>
<td>传输块结束 (Ctrl/W)</td>
</tr>
<tr>
<td>24</td>
<td>18</td>
<td>CAN</td>
<td>取消 (Ctrl/X)</td>
</tr>
<tr>
<td>25</td>
<td>19</td>
<td>EM</td>
<td>媒体结束 (Ctrl/Y)</td>
</tr>
<tr>
<td>26</td>
<td>1A</td>
<td>SUB</td>
<td>替换 (Ctrl/Z)</td>
</tr>
<tr>
<td>27</td>
<td>1B</td>
<td>ESC</td>
<td>换码符</td>
</tr>
<tr>
<td>28</td>
<td>1C</td>
<td>FS</td>
<td>文件分隔符</td>
</tr>
<tr>
<td>29</td>
<td>1D</td>
<td>GS</td>
<td>组分隔符</td>
</tr>
<tr>
<td>30</td>
<td>1E</td>
<td>RS</td>
<td>记录分隔符</td>
</tr>
<tr>
<td>31</td>
<td>1F</td>
<td>US</td>
<td>单位分隔符</td>
</tr>
<tr>
<td><strong>ASCII 特殊和数字字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>20</td>
<td>SP</td>
<td>空格</td>
</tr>
<tr>
<td>33</td>
<td>21</td>
<td>!</td>
<td>感叹号</td>
</tr>
<tr>
<td>34</td>
<td>22</td>
<td>“</td>
<td>引号 (双引号)</td>
</tr>
<tr>
<td>35</td>
<td>23</td>
<td>#</td>
<td>数字符号</td>
</tr>
<tr>
<td>36</td>
<td>24</td>
<td>$</td>
<td>美元符</td>
</tr>
<tr>
<td>37</td>
<td>25</td>
<td>%</td>
<td>百分号</td>
</tr>
<tr>
<td>38</td>
<td>26</td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>39</td>
<td>27</td>
<td>‘</td>
<td>省略号 (单引号)</td>
</tr>
<tr>
<td>40</td>
<td>28</td>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>41</td>
<td>29</td>
<td>)</td>
<td>右圆括号</td>
</tr>
<tr>
<td>42</td>
<td>2A</td>
<td>*</td>
<td>星号</td>
</tr>
<tr>
<td>43</td>
<td>2B</td>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>44</td>
<td>2C</td>
<td>,</td>
<td>逗号</td>
</tr>
<tr>
<td>45</td>
<td>2D</td>
<td>–</td>
<td>连字号或减号</td>
</tr>
<tr>
<td>46</td>
<td>2E</td>
<td>.</td>
<td>句点或小数点</td>
</tr>
<tr>
<td>47</td>
<td>2F</td>
<td>/</td>
<td>斜杠</td>
</tr>
<tr>
<td>48</td>
<td>30</td>
<td>0</td>
<td>零</td>
</tr>
<tr>
<td>49</td>
<td>31</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td>32</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>51</td>
<td>33</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>52</td>
<td>34</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>53</td>
<td>35</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>54</td>
<td>36</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>55</td>
<td>37</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>56</td>
<td>38</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>57</td>
<td>39</td>
<td>9</td>
<td>9</td>
</tr>
<tr>
<td>58</td>
<td>3A</td>
<td>:</td>
<td>冒号</td>
</tr>
<tr>
<td>59</td>
<td>3B</td>
<td>;</td>
<td>分号</td>
</tr>
<tr>
<td>60</td>
<td>3C</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>61</td>
<td>3D</td>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>62</td>
<td>3E</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>63</td>
<td>3F</td>
<td>?</td>
<td>问号</td>
</tr>
<tr>
<td><strong>ASCII 字母字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>40</td>
<td>@</td>
<td>商业 at 符号</td>
</tr>
<tr>
<td>65</td>
<td>41</td>
<td>A</td>
<td>大写字母 A</td>
</tr>
<tr>
<td>66</td>
<td>42</td>
<td>B</td>
<td>大写字母 B</td>
</tr>
<tr>
<td>67</td>
<td>43</td>
<td>C</td>
<td>大写字母 C</td>
</tr>
<tr>
<td>68</td>
<td>44</td>
<td>D</td>
<td>大写字母 D</td>
</tr>
<tr>
<td>69</td>
<td>45</td>
<td>E</td>
<td>大写字母 E</td>
</tr>
<tr>
<td>70</td>
<td>46</td>
<td>F</td>
<td>大写字母 F</td>
</tr>
<tr>
<td>71</td>
<td>47</td>
<td>G</td>
<td>大写字母 G</td>
</tr>
<tr>
<td>72</td>
<td>48</td>
<td>H</td>
<td>大写字母 H</td>
</tr>
<tr>
<td>73</td>
<td>49</td>
<td>I</td>
<td>大写字母 I</td>
</tr>
<tr>
<td>74</td>
<td>4A</td>
<td>J</td>
<td>大写字母 J</td>
</tr>
<tr>
<td>75</td>
<td>4B</td>
<td>K</td>
<td>大写字母 K</td>
</tr>
<tr>
<td>76</td>
<td>4C</td>
<td>L</td>
<td>大写字母 L</td>
</tr>
<tr>
<td>77</td>
<td>4D</td>
<td>M</td>
<td>大写字母 M</td>
</tr>
<tr>
<td>78</td>
<td>4E</td>
<td>N</td>
<td>大写字母 N</td>
</tr>
<tr>
<td>79</td>
<td>4F</td>
<td>O</td>
<td>大写字母 O</td>
</tr>
<tr>
<td>80</td>
<td>50</td>
<td>P</td>
<td>大写字母 P</td>
</tr>
<tr>
<td>81</td>
<td>51</td>
<td>Q</td>
<td>大写字母 Q</td>
</tr>
<tr>
<td>82</td>
<td>52</td>
<td>R</td>
<td>大写字母 R</td>
</tr>
<tr>
<td>83</td>
<td>53</td>
<td>S</td>
<td>大写字母 S</td>
</tr>
<tr>
<td>84</td>
<td>54</td>
<td>T</td>
<td>大写字母 T</td>
</tr>
<tr>
<td>85</td>
<td>55</td>
<td>U</td>
<td>大写字母 U</td>
</tr>
<tr>
<td>86</td>
<td>56</td>
<td>V</td>
<td>大写字母 V</td>
</tr>
<tr>
<td>87</td>
<td>57</td>
<td>W</td>
<td>大写字母 W</td>
</tr>
<tr>
<td>88</td>
<td>58</td>
<td>X</td>
<td>大写字母 X</td>
</tr>
<tr>
<td>89</td>
<td>59</td>
<td>Y</td>
<td>大写字母 Y</td>
</tr>
<tr>
<td>90</td>
<td>5A</td>
<td>Z</td>
<td>大写字母 Z</td>
</tr>
<tr>
<td>91</td>
<td>5B</td>
<td>[</td>
<td>左中括号</td>
</tr>
<tr>
<td>92</td>
<td>5C</td>
<td>\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>93</td>
<td>5D</td>
<td>]</td>
<td>右中括号</td>
</tr>
<tr>
<td>94</td>
<td>5E</td>
<td>^</td>
<td>音调符号</td>
</tr>
<tr>
<td>95</td>
<td>5F</td>
<td>_</td>
<td>下划线</td>
</tr>
<tr>
<td>96</td>
<td>60</td>
<td>`</td>
<td>重音符</td>
</tr>
<tr>
<td>97</td>
<td>61</td>
<td>a</td>
<td>小写字母 a</td>
</tr>
<tr>
<td>98</td>
<td>62</td>
<td>b</td>
<td>小写字母 b</td>
</tr>
<tr>
<td>99</td>
<td>63</td>
<td>c</td>
<td>小写字母 c</td>
</tr>
<tr>
<td>100</td>
<td>64</td>
<td>d</td>
<td>小写字母 d</td>
</tr>
<tr>
<td>101</td>
<td>65</td>
<td>e</td>
<td>小写字母 e</td>
</tr>
<tr>
<td>102</td>
<td>66</td>
<td>f</td>
<td>小写字母 f</td>
</tr>
<tr>
<td>103</td>
<td>67</td>
<td>g</td>
<td>小写字母 g</td>
</tr>
<tr>
<td>104</td>
<td>68</td>
<td>h</td>
<td>小写字母 h</td>
</tr>
<tr>
<td>105</td>
<td>69</td>
<td>i</td>
<td>小写字母 i</td>
</tr>
<tr>
<td>106</td>
<td>6A</td>
<td>j</td>
<td>小写字母 j</td>
</tr>
<tr>
<td>107</td>
<td>6B</td>
<td>k</td>
<td>小写字母 k</td>
</tr>
<tr>
<td>108</td>
<td>6C</td>
<td>l</td>
<td>小写字母 l</td>
</tr>
<tr>
<td>109</td>
<td>6D</td>
<td>m</td>
<td>小写字母 m</td>
</tr>
<tr>
<td>110</td>
<td>6E</td>
<td>n</td>
<td>小写字母 n</td>
</tr>
<tr>
<td>111</td>
<td>6F</td>
<td>o</td>
<td>小写字母 o</td>
</tr>
<tr>
<td>112</td>
<td>70</td>
<td>p</td>
<td>小写字母 p</td>
</tr>
<tr>
<td>113</td>
<td>71</td>
<td>q</td>
<td>小写字母 q</td>
</tr>
<tr>
<td>114</td>
<td>72</td>
<td>r</td>
<td>小写字母 r</td>
</tr>
<tr>
<td>115</td>
<td>73</td>
<td>s</td>
<td>小写字母 s</td>
</tr>
<tr>
<td>116</td>
<td>74</td>
<td>t</td>
<td>小写字母 t</td>
</tr>
<tr>
<td>117</td>
<td>75</td>
<td>u</td>
<td>小写字母 u</td>
</tr>
<tr>
<td>118</td>
<td>76</td>
<td>v</td>
<td>小写字母 v</td>
</tr>
<tr>
<td>119</td>
<td>77</td>
<td>w</td>
<td>小写字母 w</td>
</tr>
<tr>
<td>120</td>
<td>78</td>
<td>x</td>
<td>小写字母 x</td>
</tr>
<tr>
<td>121</td>
<td>79</td>
<td>y</td>
<td>小写字母 y</td>
</tr>
<tr>
<td>122</td>
<td>7A</td>
<td>z</td>
<td>小写字母 z</td>
</tr>
<tr>
<td>123</td>
<td>7B</td>
<td>{</td>
<td>左大括号</td>
</tr>
<tr>
<td>124</td>
<td>7C</td>
<td>|</td>
<td>垂直线</td>
</tr>
<tr>
<td>125</td>
<td>7D</td>
<td>}</td>
<td>右大括号 (ALTMODE)</td>
</tr>
<tr>
<td>126</td>
<td>7E</td>
<td>~</td>
<td>代字号 (ALTMODE)</td>
</tr>
<tr>
<td>127</td>
<td>7F</td>
<td>DEL</td>
<td>擦掉 (DELETE)</td>
</tr>
<tr>
<td><strong>控制字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>128</td>
<td>80</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>129</td>
<td>81</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>130</td>
<td>82</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>131</td>
<td>83</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>132</td>
<td>84</td>
<td>IND</td>
<td>索引</td>
</tr>
<tr>
<td>133</td>
<td>85</td>
<td>NEL</td>
<td>下一行</td>
</tr>
<tr>
<td>134</td>
<td>86</td>
<td>SSA</td>
<td>被选区域起始</td>
</tr>
<tr>
<td>135</td>
<td>87</td>
<td>ESA</td>
<td>被选区域结束</td>
</tr>
<tr>
<td>136</td>
<td>88</td>
<td>HTS</td>
<td>水平制表符集</td>
</tr>
<tr>
<td>137</td>
<td>89</td>
<td>HTJ</td>
<td>对齐的水平制表符集</td>
</tr>
<tr>
<td>138</td>
<td>8A</td>
<td>VTS</td>
<td>垂直制表符集</td>
</tr>
<tr>
<td>139</td>
<td>8B</td>
<td>PLD</td>
<td>部分行向下</td>
</tr>
<tr>
<td>140</td>
<td>8C</td>
<td>PLU</td>
<td>部分行向上</td>
</tr>
<tr>
<td>141</td>
<td>8D</td>
<td>RI</td>
<td>反向索引</td>
</tr>
<tr>
<td>142</td>
<td>8E</td>
<td>SS2</td>
<td>单移 2</td>
</tr>
<tr>
<td>143</td>
<td>8F</td>
<td>SS3</td>
<td>单移 3</td>
</tr>
<tr>
<td>144</td>
<td>90</td>
<td>DCS</td>
<td>设备控制字符串</td>
</tr>
<tr>
<td>145</td>
<td>91</td>
<td>PU1</td>
<td>专用 1</td>
</tr>
<tr>
<td>146</td>
<td>92</td>
<td>PU2</td>
<td>专用 2</td>
</tr>
<tr>
<td>147</td>
<td>93</td>
<td>STS</td>
<td>设置传输状态</td>
</tr>
<tr>
<td>148</td>
<td>94</td>
<td>CCH</td>
<td>取消字符</td>
</tr>
<tr>
<td>149</td>
<td>95</td>
<td>MW</td>
<td>消息等待</td>
</tr>
<tr>
<td>150</td>
<td>96</td>
<td>SPA</td>
<td>保护区起始</td>
</tr>
<tr>
<td>151</td>
<td>97</td>
<td>EPA</td>
<td>保护区结束</td>
</tr>
<tr>
<td>152</td>
<td>98</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>153</td>
<td>99</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>154</td>
<td>9A</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>155</td>
<td>9B</td>
<td>CSI</td>
<td>控制序列引导符</td>
</tr>
<tr>
<td>156</td>
<td>9C</td>
<td>ST</td>
<td>字符串终止符</td>
</tr>
<tr>
<td>157</td>
<td>9D</td>
<td>OSC</td>
<td>操作系统命令</td>
</tr>
<tr>
<td>158</td>
<td>9E</td>
<td>PM</td>
<td>秘密消息</td>
</tr>
<tr>
<td>159</td>
<td>9F</td>
<td>APC</td>
<td>应用程序</td>
</tr>
<tr>
<td><strong>其他字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>160</td>
<td>A0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>161</td>
<td>A1</td>
<td>¡</td>
<td>反向感叹号</td>
</tr>
<tr>
<td>162</td>
<td>A2</td>
<td>¢</td>
<td>分币符</td>
</tr>
<tr>
<td>163</td>
<td>A3</td>
<td>£</td>
<td>英磅符</td>
</tr>
<tr>
<td>164</td>
<td>A4</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>165</td>
<td>A5</td>
<td>¥</td>
<td>人民币符</td>
</tr>
<tr>
<td>166</td>
<td>A6</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>167</td>
<td>A7</td>
<td>§</td>
<td>章节符</td>
</tr>
<tr>
<td>168</td>
<td>A8</td>
<td>¤</td>
<td>通用货币符号 2</td>
</tr>
<tr>
<td>169</td>
<td>A9</td>
<td>©</td>
<td>版权符号</td>
</tr>
<tr>
<td>170</td>
<td>AA</td>
<td>ª</td>
<td>阴性顺序指示符</td>
</tr>
<tr>
<td>171</td>
<td>AB</td>
<td>«</td>
<td>左角引号</td>
</tr>
<tr>
<td>172</td>
<td>AC</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>173</td>
<td>AD</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>174</td>
<td>AE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>175</td>
<td>AF</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>176</td>
<td>B0</td>
<td>°</td>
<td>温度符</td>
</tr>
<tr>
<td>177</td>
<td>B1</td>
<td>±</td>
<td>加/减号</td>
</tr>
<tr>
<td>178</td>
<td>B2</td>
<td>²</td>
<td>上标 2</td>
</tr>
<tr>
<td>179</td>
<td>B3</td>
<td>³</td>
<td>上标 3</td>
</tr>
<tr>
<td>180</td>
<td>B4</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>181</td>
<td>B5</td>
<td>µ</td>
<td>微符</td>
</tr>
<tr>
<td>182</td>
<td>B6</td>
<td>¶</td>
<td>段落符，pilcrow</td>
</tr>
<tr>
<td>183</td>
<td>B7</td>
<td>·</td>
<td>中点</td>
</tr>
<tr>
<td>184</td>
<td>B8</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>185</td>
<td>B9</td>
<td>¹</td>
<td>上标 1</td>
</tr>
<tr>
<td>186</td>
<td>BA</td>
<td>º</td>
<td>阳性顺序指示符</td>
</tr>
<tr>
<td>187</td>
<td>BB</td>
<td>»</td>
<td>右角引号</td>
</tr>
<tr>
<td>188</td>
<td>BC</td>
<td>¼</td>
<td>分数四分之一</td>
</tr>
<tr>
<td>189</td>
<td>BD</td>
<td>½</td>
<td>分数二分之一</td>
</tr>
<tr>
<td>190</td>
<td>BE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>191</td>
<td>BF</td>
<td>¿</td>
<td>反向问号</td>
</tr>
<tr>
<td>192</td>
<td>C0</td>
<td>À</td>
<td>带重音符的大写字母 A</td>
</tr>
<tr>
<td>193</td>
<td>C1</td>
<td>Á</td>
<td>带尖锐重音的大写字母 A</td>
</tr>
<tr>
<td>194</td>
<td>C2</td>
<td>Â</td>
<td>带音调符号的大写字母 A</td>
</tr>
<tr>
<td>195</td>
<td>C3</td>
<td>Ã</td>
<td>带代字号的大写字母 A</td>
</tr>
<tr>
<td>196</td>
<td>C4</td>
<td>Ä</td>
<td>带元音变音 (分音符号) 的大写字母 A</td>
</tr>
<tr>
<td>197</td>
<td>C5</td>
<td>Å</td>
<td>带铃声的大写字母 A</td>
</tr>
<tr>
<td>198</td>
<td>C6</td>
<td>Æ</td>
<td>大写字母 AE 双重元音</td>
</tr>
<tr>
<td>199</td>
<td>C7</td>
<td>Ç</td>
<td>带变音符号的大写字母 C</td>
</tr>
<tr>
<td>200</td>
<td>C8</td>
<td>È</td>
<td>带重音符的大写字母 E</td>
</tr>
<tr>
<td>201</td>
<td>C9</td>
<td>É</td>
<td>带尖锐重音的大写字母 E</td>
</tr>
<tr>
<td>202</td>
<td>CA</td>
<td>Ê</td>
<td>带音调符号的大写字母 E</td>
</tr>
<tr>
<td>203</td>
<td>CB</td>
<td>Ë</td>
<td>带元音变音 (分音符号) 的大写字母 E</td>
</tr>
<tr>
<td>204</td>
<td>CC</td>
<td>Ì</td>
<td>带重音符的大写字母 I</td>
</tr>
<tr>
<td>205</td>
<td>CD</td>
<td>Í</td>
<td>带尖锐重音的大写字母 I</td>
</tr>
<tr>
<td>206</td>
<td>CE</td>
<td>Î</td>
<td>带音调符号的大写字母 I</td>
</tr>
<tr>
<td>207</td>
<td>CF</td>
<td>Ï</td>
<td>带元音变音 (分音符号) 的大写字母 I</td>
</tr>
<tr>
<td>208</td>
<td>D0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>209</td>
<td>D1</td>
<td>Ñ</td>
<td>带代字号的大写字母 N</td>
</tr>
<tr>
<td>210</td>
<td>D2</td>
<td>Ò</td>
<td>带重音符的大写字母 O</td>
</tr>
<tr>
<td>211</td>
<td>D3</td>
<td>Ó</td>
<td>带尖锐重音的大写字母 O</td>
</tr>
<tr>
<td>212</td>
<td>D4</td>
<td>Ô</td>
<td>带音调符号的大写字母 O</td>
</tr>
<tr>
<td>213</td>
<td>D5</td>
<td>Õ</td>
<td>带代字号的大写字母 O</td>
</tr>
<tr>
<td>214</td>
<td>D6</td>
<td>Ö</td>
<td>带元音变音 (分音符号) 的大写字母 O</td>
</tr>
<tr>
<td>215</td>
<td>D7</td>
<td>OE</td>
<td>大写字母 OE 连字 2</td>
</tr>
<tr>
<td>216</td>
<td>D8</td>
<td>Ø</td>
<td>带斜杠的大写字母 O</td>
</tr>
<tr>
<td>217</td>
<td>D9</td>
<td>Ù</td>
<td>带重音符的大写字母 U</td>
</tr>
<tr>
<td>218</td>
<td>DA</td>
<td>Ú</td>
<td>带尖锐重音的大写字母 U</td>
</tr>
<tr>
<td>219</td>
<td>DB</td>
<td>Û</td>
<td>带音调符号的大写字母 U</td>
</tr>
<tr>
<td>220</td>
<td>DC</td>
<td>Ü</td>
<td>带元音变音 (分音符号) 的大写字母 U</td>
</tr>
<tr>
<td>221</td>
<td>DD</td>
<td>Y</td>
<td>带元音变音 (分音符号) 的大写字母 Y</td>
</tr>
<tr>
<td>222</td>
<td>DE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>223</td>
<td>DF</td>
<td>ß</td>
<td>德语高调小写字母 s</td>
</tr>
<tr>
<td>224</td>
<td>E0</td>
<td>à</td>
<td>带重音符的小写字母 a</td>
</tr>
<tr>
<td>225</td>
<td>E1</td>
<td>á</td>
<td>带尖锐重音的小写字母 a</td>
</tr>
<tr>
<td>226</td>
<td>E2</td>
<td>â</td>
<td>带音调符号的小写字母 a</td>
</tr>
<tr>
<td>227</td>
<td>E3</td>
<td>ã</td>
<td>带代字号的小写字母 a</td>
</tr>
<tr>
<td>228</td>
<td>E4</td>
<td>ä</td>
<td>带元音变音 (分音符号) 的小写字母 a</td>
</tr>
<tr>
<td>229</td>
<td>E5</td>
<td>å</td>
<td>带铃声的小写字母 a</td>
</tr>
<tr>
<td>230</td>
<td>E6</td>
<td>æ</td>
<td>小写字母 ae 双重元音</td>
</tr>
<tr>
<td>231</td>
<td>E7</td>
<td>ç</td>
<td>带变音符号的小写字母 c</td>
</tr>
<tr>
<td>232</td>
<td>E8</td>
<td>è</td>
<td>带重音符的小写字母 e</td>
</tr>
<tr>
<td>233</td>
<td>E9</td>
<td>é</td>
<td>带尖锐重音的小写字母 e</td>
</tr>
<tr>
<td>234</td>
<td>EA</td>
<td>ê</td>
<td>带音调符号的小写字母 e</td>
</tr>
<tr>
<td>235</td>
<td>EB</td>
<td>ë</td>
<td>带元音变音 (分音符号) 的小写字母 e</td>
</tr>
<tr>
<td>236</td>
<td>EC</td>
<td>ì</td>
<td>带重音符的小写字母 i</td>
</tr>
<tr>
<td>237</td>
<td>ED</td>
<td>í</td>
<td>带尖锐重音的小写字母 i</td>
</tr>
<tr>
<td>238</td>
<td>EE</td>
<td>î</td>
<td>带音调符号的小写字母 i</td>
</tr>
<tr>
<td>239</td>
<td>EF</td>
<td>ï</td>
<td>带元音变音 (分音符号) 的小写字母 i</td>
</tr>
<tr>
<td>240</td>
<td>F0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>241</td>
<td>F1</td>
<td>ñ</td>
<td>带代字号的小写字母 n</td>
</tr>
<tr>
<td>242</td>
<td>F2</td>
<td>ò</td>
<td>带重音符的小写字母 o</td>
</tr>
<tr>
<td>243</td>
<td>F3</td>
<td>ó</td>
<td>带尖锐重音的小写字母 o</td>
</tr>
<tr>
<td>244</td>
<td>F4</td>
<td>ô</td>
<td>带音调符号的小写字母 o</td>
</tr>
<tr>
<td>245</td>
<td>F5</td>
<td>õ</td>
<td>带代字号的小写字母 o</td>
</tr>
<tr>
<td>246</td>
<td>F6</td>
<td>ö</td>
<td>带元音变音 (分音符号) 的小写字母 o</td>
</tr>
<tr>
<td>247</td>
<td>F7</td>
<td>oe</td>
<td>小写字母 oe 连字 2</td>
</tr>
<tr>
<td>248</td>
<td>F8</td>
<td>ø</td>
<td>带斜杠的小写字母 o</td>
</tr>
<tr>
<td>249</td>
<td>F9</td>
<td>ù</td>
<td>带重音符的小写字母 u</td>
</tr>
<tr>
<td>250</td>
<td>FA</td>
<td>ú</td>
<td>带尖锐重音的小写字母 u</td>
</tr>
<tr>
<td>251</td>
<td>FB</td>
<td>û</td>
<td>带音调符号的小写字母 u</td>
</tr>
<tr>
<td>252</td>
<td>FC</td>
<td>ü</td>
<td>带元音变音 (分音符号) 的小写字母 u</td>
</tr>
<tr>
<td>253</td>
<td>FD</td>
<td>ÿ</td>
<td>带元音变音 (分音符号) 的小写字母 y 2</td>
</tr>
<tr>
<td>254</td>
<td>FE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>255</td>
<td>FF</td>
<td></td>
<td>[保留] 2</td>
</tr>
</tbody></table>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令。</li>
</ul>
<p>4.转义字符</p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII码值（十进制）</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td>\n</td>
<td>换行(LF) ，将当前位置移到下一行开头</td>
<td>010</td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表(HT) （跳到下一个TAB位置）</td>
<td>009</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>\</td>
<td>代表一个反斜线字符”&quot;</td>
<td>092</td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<h4 id="5-浮点型（float-double）"><a href="#5-浮点型（float-double）" class="headerlink" title="5.浮点型（float,double）"></a>5.浮点型（float,double）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//传统方式赋值</span>
	<span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span> <span class="token comment">//或3.14F</span>
	<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %lf\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//科学法赋值</span>
	a <span class="token operator">=</span> <span class="token number">3.2e3f</span><span class="token punctuation">;</span> <span class="token comment">//3.2*1000 = 3200，e可以写E</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a1 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">100e-3f</span><span class="token punctuation">;</span> <span class="token comment">//100*0.001 = 0.1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a2 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3.1415926f</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a3 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为3.141593</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-进制"><a href="#6-进制" class="headerlink" title="6.进制"></a>6.进制</h4><ul>
<li><p>进制也就是进位制，是人们规定的一种进位方法。 对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制</strong></th>
<th><strong>二进制</strong></th>
<th><strong>八进制</strong></th>
<th><strong>十六进制</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>10</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>11</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>100</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>101</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>110</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>111</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>1000</td>
<td>10</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
<td>11</td>
<td>9</td>
</tr>
<tr>
<td>10</td>
<td>1010</td>
<td>12</td>
<td>A</td>
</tr>
<tr>
<td>11</td>
<td>1011</td>
<td>13</td>
<td>B</td>
</tr>
<tr>
<td>12</td>
<td>1100</td>
<td>14</td>
<td>C</td>
</tr>
<tr>
<td>13</td>
<td>1101</td>
<td>15</td>
<td>D</td>
</tr>
<tr>
<td>14</td>
<td>1110</td>
<td>16</td>
<td>E</td>
</tr>
<tr>
<td>15</td>
<td>1111</td>
<td>17</td>
<td>F</td>
</tr>
<tr>
<td>16</td>
<td>10000</td>
<td>20</td>
<td>10</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>C项目学习——BuildYourOwnLisp</title>
    <url>/2022/06/22/throughLispLearnC/</url>
    <content><![CDATA[<h2 id="第零章-·-关于"><a href="#第零章-·-关于" class="headerlink" title="第零章 · 关于"></a>第零章 · 关于</h2><ul>
<li><a href="http://buildyourownlisp.com/">阅读地址</a></li>
<li><a href="https://github.com/orangeduck/BuildYourOwnLisp">项目主页</a></li>
</ul>
<h2 id="第一章-·-介绍"><a href="#第一章-·-介绍" class="headerlink" title="第一章 · 介绍"></a>第一章 · 介绍</h2><ul>
<li>没啥</li>
</ul>
<h2 id="第二章-·-安装"><a href="#第二章-·-安装" class="headerlink" title="第二章 · 安装"></a>第二章 · 安装</h2><h3 id="1-代码编辑器"><a href="#1-代码编辑器" class="headerlink" title="1. 代码编辑器"></a>1. 代码编辑器</h3><ul>
<li>windows notepad++</li>
</ul>
<h3 id="2-编译器"><a href="#2-编译器" class="headerlink" title="2. 编译器"></a>2. 编译器</h3><ul>
<li><a href="https://sourceforge.net/projects/mingw/">MinGW</a></li>
<li>配置系统环境<ul>
<li>系统环境新建 MinGW C:\MinGW</li>
<li>Path C:\MinGW\bin</li>
</ul>
</li>
</ul>
<h3 id="3-测试c编译器"><a href="#3-测试c编译器" class="headerlink" title="3. 测试c编译器"></a>3. 测试c编译器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-Hello-World"><a href="#4-Hello-World" class="headerlink" title="4. Hello World"></a>4. Hello World</h3><ul>
<li>新建hello_world.c文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> <span class="token comment">//头文件 标准输入输出库</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出到命令行</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结束main函数并返回值0，0表示程序正常退出，没有发生错误</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-编译"><a href="#5-编译" class="headerlink" title="5. 编译"></a>5. 编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall hello_world.c -o hello_world
hello_world
//产生可执行文件 hello_world 在cmd中执行 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="6-文档"><a href="#6-文档" class="headerlink" title="6. 文档"></a>6. 文档</h3><ul>
<li><a href="https://en.cppreference.com/w/c">C在线文档</a></li>
</ul>
<h2 id="第三章-·-基础"><a href="#第三章-·-基础" class="headerlink" title="第三章 · 基础"></a>第三章 · 基础</h2><h3 id="1-程序"><a href="#1-程序" class="headerlink" title="1. 程序"></a>1. 程序</h3><ul>
<li>程序由函数定义和类型定义组成</li>
<li>所有程序从main函数开始执行</li>
</ul>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><h3 id="3-函数声明"><a href="#3-函数声明" class="headerlink" title="3. 函数声明"></a>3. 函数声明</h3><h3 id="4-结构体声明"><a href="#4-结构体声明" class="headerlink" title="4. 结构体声明"></a>4. 结构体声明</h3><h3 id="5-指针"><a href="#5-指针" class="headerlink" title="5. 指针"></a>5. 指针</h3><ul>
<li>char** ：char 类型的指针的指针 </li>
</ul>
<h3 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6. 字符串"></a>6. 字符串</h3><ul>
<li>char*:字符串</li>
</ul>
<h3 id="7-条件分支"><a href="#7-条件分支" class="headerlink" title="7. 条件分支"></a>7. 条件分支</h3><ul>
<li>if</li>
<li>if…else</li>
<li>||</li>
<li>&amp;&amp;</li>
</ul>
<h3 id="8-循环"><a href="#8-循环" class="headerlink" title="8. 循环"></a>8. 循环</h3><ul>
<li>while</li>
<li>for(;;)</li>
<li>do…while</li>
</ul>
<h2 id="第四章-·-交互"><a href="#第四章-·-交互" class="headerlink" title="第四章 · 交互"></a>第四章 · 交互</h2><h3 id="1-读取-求值-输出"><a href="#1-读取-求值-输出" class="headerlink" title="1. 读取-求值-输出"></a>1. 读取-求值-输出</h3><ul>
<li>REPL<ul>
<li><em>read-evaluate-print loop</em> (读取-求值-输出循环)</li>
</ul>
</li>
</ul>
<h3 id="2-交互提示"><a href="#2-交互提示" class="headerlink" title="2. 交互提示"></a>2. 交互提示</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token comment">/* Declare a buffer for user input of size 2048*/</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">/* Print Version and Exit Information */</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* In a never ending loop */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">/* Output our prompt */</span>
        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"lispy>"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">/* Read a line of user input of maximum size 2048 */</span>
        <span class="token function">fgets</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">/* Echo input back to user */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No you're a %s"</span><span class="token punctuation">,</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h3><pre class="line-numbers language-none"><code class="language-none">gcc -std&#x3D;c99 -Wall prompt.c -o prompt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-运行prompt"><a href="#4-运行prompt" class="headerlink" title="4. 运行prompt"></a>4. 运行prompt</h3><h3 id="5-预处理器"><a href="#5-预处理器" class="headerlink" title="5. 预处理器"></a>5. 预处理器</h3><ul>
<li>在windows、linux和mac上都可以运行</li>
<li>感觉很强</li>
<li>不同的平台下头文件不一样</li>
<li>用一个readline函数内 输入读取到缓存中 缓存中的内容读取到新建的字符串 返回字符串</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">/* If we are compiling on Windows compile these functions */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/* Fake readline function */</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Fake add_history function */</span>
<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">/* Otherwise include the editline headers */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span> <span class="token comment">// 译注：如果是Mac系统，不需要包含history.h头文件。</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">/* 译注
上段#else中的代码可以改得更通用一些：
#else
#ifdef __linux__
#include &lt;editline/readline.h>
#include &lt;editline/history.h>
#endif

#ifdef __MACH__
#include &lt;editline/readline.h>
#endif
#endif
*/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Now in either case readline will be correctly defined */</span>
    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No you're a %s\n"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第五章-·-编程语言"><a href="#第五章-·-编程语言" class="headerlink" title="第五章 · 编程语言"></a>第五章 · 编程语言</h2><h3 id="1-什么是编程语言？"><a href="#1-什么是编程语言？" class="headerlink" title="1.什么是编程语言？"></a>1.什么是编程语言？</h3><ul>
<li>自然语言都是建立在递归和重复的子结构之上的</li>
<li>需要一个语法解析器，判断用户输入是否合法</li>
<li>使用一个叫mpc的库来完成这个工作</li>
</ul>
<h3 id="2-解析器组合子"><a href="#2-解析器组合子" class="headerlink" title="2.解析器组合子"></a>2.解析器组合子</h3><ul>
<li><a href="https://github.com/orangeduck/mpc">mpc</a>是原作者编写的一个解析器组合子(Parser Combinators)库</li>
<li>使用这个库为任何语言编写语法解析器</li>
<li>简化了工作</li>
<li>仅编写高层的抽象语法规则</li>
</ul>
<h3 id="3-编写语法规则"><a href="#3-编写语法规则" class="headerlink" title="3.编写语法规则"></a>3.编写语法规则</h3><ul>
<li>解析器类型 mpc_parser_t*</li>
<li>mpc_or函数产生一个解析器 </li>
<li>mpc_sym将字符串转化为一个语句</li>
<li>mpc_and函数返回的解析器可接受的语句必须是各个语句按照顺序出现</li>
<li>mpcf_strfold和free指定了各个语句的组织及删除方式</li>
<li>mpc_many表示0到多个短语组成的逻辑关系</li>
<li>例子</li>
<li>定义好解析器Adjective None来定义短语Phrase</li>
<li>0到多个Phrase定义Doge语言</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Build a parser 'Adjective' to recognize descriptions */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Adjective <span class="token operator">=</span> <span class="token function">mpc_or</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> 
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"wow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"many"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"so"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"such"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Build a parser 'Noun' to recognize things */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Noun <span class="token operator">=</span> <span class="token function">mpc_or</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"lisp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Phrase <span class="token operator">=</span> <span class="token function">mpc_and</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> mpcf_strfold<span class="token punctuation">,</span> 
    Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Doge <span class="token operator">=</span> <span class="token function">mpc_many</span><span class="token punctuation">(</span>mpcf_strfold<span class="token punctuation">,</span> Phrase<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Do some parsing here... */</span>

  <span class="token function">mpc_delete</span><span class="token punctuation">(</span>Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-更加自然的语法规则"><a href="#4-更加自然的语法规则" class="headerlink" title="4.更加自然的语法规则"></a>4.更加自然的语法规则</h3><ul>
<li><p>使用mpc_new函数定义语法规则的名字</p>
</li>
<li><p>使用mpca_lang函数具体定义这些语法规则</p>
</li>
<li><p><code>mpca_lang</code> 函数的第一个参数是操作标记，在这里我们使用默认选项。第二个参数是 C 语言的一个长字符串。这个字符串中定义了具体的语法。它包含一系列的递归规则。每个规则分为两部分，用冒号 <code>:</code> 隔开，冒号左边是规则的名字，右边是规则的定义，使用 <code>;</code> 表示规则结束。</p>
</li>
<li><table>
<thead>
<tr>
<th>语法表示</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“ab”</td>
<td>字符串ab</td>
</tr>
<tr>
<td>‘a’</td>
<td>字符a</td>
</tr>
<tr>
<td>‘a’ ‘b’</td>
<td>先有一个字符a，后紧跟一个字符b</td>
</tr>
<tr>
<td>‘a’|’b’</td>
<td>有字符a或者b</td>
</tr>
<tr>
<td>‘a’*</td>
<td>要求有0个或多个字符a</td>
</tr>
<tr>
<td>‘a’+</td>
<td>要求有1个或多个字符a</td>
</tr>
<tr>
<td><abba></td>
<td>要求满足名为 <code>abba</code> 定义的语法规则</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Adjective <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"adjective"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Noun      <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"noun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Phrase    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"phrase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Doge      <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"doge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                           \
      adjective : \"wow\" | \"many\"            \
                |  \"so\" | \"such\";           \
      noun      : \"lisp\" | \"language\"       \
                | \"book\" | \"build\" | \"c\"; \
      phrase    : &lt;adjective> &lt;noun>;           \
      doge      : &lt;phrase>*;                    \
    "</span><span class="token punctuation">,</span>
    Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> Phrase<span class="token punctuation">,</span> Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Do some parsing here... */</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> Phrase<span class="token punctuation">,</span> Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="第六章-·-语法分析"><a href="#第六章-·-语法分析" class="headerlink" title="第六章 · 语法分析"></a>第六章 · 语法分析</h2><h3 id="1-波兰表达式（polish-notation）"><a href="#1-波兰表达式（polish-notation）" class="headerlink" title="1. 波兰表达式（polish notation）"></a>1. 波兰表达式（polish notation）</h3><ul>
<li><p>实现一个简单的语法解析器</p>
</li>
<li><p>polish notation 是一种数学标记语言 运算符在操作数的前面</p>
</li>
<li><p>波兰表达式总是以操作符开头，后面跟着操作数或其他的包裹在圆括号中的表达式。</p>
</li>
<li><p>“程序(<code>Program</code>)是由一个操作符(<code>Operator</code>)加上一个或多个表达式(<code>Expression</code>)组成的”，而 “表达式(<code>Expression</code>)可以是一个数字，或者是包裹在圆括号中的一个操作符(<code>Operator</code>)加上一个或多个表达式(<code>Expression</code>)”</p>
</li>
<li><p>完整描述</p>
</li>
<li><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>程序(<code>Program</code>)</td>
<td><em>the start of input</em>, an <code>Operator</code>, one or more <code>Expression</code>, and <em>the end of input</em>.</td>
</tr>
<tr>
<td>表达式(Expression)</td>
<td>either a <code>Number</code> <em>or</em> <code>&#39;(&#39;</code>, an <code>Operator</code>, one or more <code>Expression</code>, and an <code>&#39;)&#39;</code>.</td>
</tr>
<tr>
<td>操作符(Operator)</td>
<td><code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, or <code>&#39;/&#39;</code>.</td>
</tr>
<tr>
<td>数字(<code>Number</code>)</td>
<td>an optional <code>-</code>, and one or more characters between <code>0</code> and <code>9</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-正则表达式（Regular-Expressions）"><a href="#2-正则表达式（Regular-Expressions）" class="headerlink" title="2.正则表达式（Regular Expressions）"></a>2.正则表达式（Regular Expressions）</h3><ul>
<li><table>
<thead>
<tr>
<th>语法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>Any character is required.</td>
</tr>
<tr>
<td>a</td>
<td>The character <code>a</code> is required.</td>
</tr>
<tr>
<td>[abcdef]</td>
<td>Any character in the set <code>abcdef</code> is required.</td>
</tr>
<tr>
<td>[a-f]</td>
<td>Any character in the range <code>a</code> to <code>f</code> is required.</td>
</tr>
<tr>
<td>a?</td>
<td>The character <code>a</code> is optional.</td>
</tr>
<tr>
<td>a*</td>
<td>Zero or more of the character <code>a</code> are required.</td>
</tr>
<tr>
<td>a+</td>
<td>One or more of the character <code>a</code> are required.</td>
</tr>
<tr>
<td>^</td>
<td>The start of input is required.</td>
</tr>
<tr>
<td>$</td>
<td>The end of input is required.</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://learncodethehardway.org/">教程</a></p>
</li>
</ul>
<h3 id="3-安装mpc"><a href="#3-安装mpc" class="headerlink" title="3.安装mpc"></a>3.安装mpc</h3><ul>
<li>从<a href="https://github.com/orangeduck/mpc">mpc项目</a>主页中下载、mpc.h<code>和</code>mpc.c</li>
<li>第四章parsing.c</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing.c mpc.c -o parsing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>C语言中。尖括号用来包含系统头文件如 <code>stdio.h</code>，双引号用来包含其他的头文件如 <code>mpc.h</code></li>
</ul>
<h3 id="4-Polish-Notation-Grammar"><a href="#4-Polish-Notation-Grammar" class="headerlink" title="4.Polish Notation Grammar"></a>4.Polish Notation Grammar</h3><ul>
<li>以下代码放在parsing.c的main函数的开头</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Some Parsers */</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr     <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Define them with the following Language */</span>
<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                     \
    number   : /-?[0-9]+/ ;                             \
    operator : '+' | '-' | '*' | '/' ;                  \
    expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
    lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>将使用的解析器删除，将以下代码放在return的前面</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-解析用户的输入"><a href="#5-解析用户的输入" class="headerlink" title="5.解析用户的输入"></a>5.解析用户的输入</h3><ul>
<li>修改parsing.c中的while循环内容</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Attempt to Parse the user Input */</span>
<span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* On Success Print the AST */</span>
  <span class="token function">mpc_ast_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Otherwise Print the Error */</span>
  <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>调用了 <code>mpc_parse</code> 函数，并将 <code>Lispy</code> 解析器和用户输入 <code>input</code> 作为参数。它将解析的结果保存到 <code>&amp;r</code> 中，如果解析成功，返回值为 <code>1</code>，失败为 <code>0</code>。</li>
<li>解析成功时会产生一个内部结构，并保存到 <code>r</code> 的 <code>output</code> 字段中。我们可以使用 <code>mpc_ast_print</code> 将这个结构打印出来，使用 <code>mpc_ast_delete</code> 将其删除。</li>
<li>解析失败时则会将错误信息保存在 <code>r</code> 的 <code>error</code> 字段中。我们可以使用 <code>mpc_err_print</code> 将这个结构打印出来，使用 <code>mpc_err_delete</code> 将其删除。</li>
<li>重新编译</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing.c mpc.c -o parsing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li>parsing.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Create Some Parsers */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr     <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Define them with the following Language */</span>
  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Attempt to parse the user input */</span>
    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* On success print and delete the AST */</span>
      <span class="token function">mpc_ast_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* Otherwise print and delete the Error */</span>
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Undefine and delete our parsers */</span>
  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><ul>
<li>到这里应该是完成了表达式的解析</li>
</ul>
<h2 id="第七章-·-计算"><a href="#第七章-·-计算" class="headerlink" title="第七章 · 计算"></a>第七章 · 计算</h2><h3 id="1-树型结构"><a href="#1-树型结构" class="headerlink" title="1.树型结构"></a>1.树型结构</h3><ul>
<li>可以读取输入，解析并得到表达式的内部结构</li>
<li>需要对表达式的内部结构进行计算求值</li>
<li>内部结构：抽象语法树(Abstract Syntax Tree，简称 AST)——表示用户输入的表达式结构</li>
<li>操作数和操作符等需要被处理的实际数据都位于叶子节点上</li>
<li>而非叶子节点上则包含了遍历和求值的信息</li>
<li>在 <code>mpc.h</code> 中，可以找到 <code>mpc_ast_t</code> 类型的定义——解析表达式得到的数据结构</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mpc_ast_t</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> tag<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> contents<span class="token punctuation">;</span>
  <span class="token class-name">mpc_state_t</span> state<span class="token punctuation">;</span>
  <span class="token keyword">int</span> children_num<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mpc_ast_t</span><span class="token operator">*</span><span class="token operator">*</span> children<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">mpc_ast_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>tag</code> 字段。在打印这个树形结构时，<code>tag</code> 就是在节点内容之前的信息，它表示了解析这个节点时所用到的所有规则。例如：<code>expr|number|regex</code>。知道创建节点时所匹配到的规则</li>
<li><code>contents</code> 字段，它包含了节点中具体的内容，例如 <code>&#39;*&#39;</code>、<code>&#39;(&#39;</code>、<code>&#39;5&#39;</code>。对于表示分支的非叶子节点，这个字段为空。而对于叶子节点，则包含了操作数或操作符的字符串形式。</li>
<li><code>state</code>。这里面包含了解析器发现这个节点时所处的状态，例如行数和列数等信息。</li>
<li>两个字段 <code>children_num</code> 和 <code>children</code> 帮助我们来遍历抽象语法树。前一个字段告诉我们有多少个孩子节点，后一个字段是包含这些节点的数组。</li>
<li><code>children</code> 字段的类型是 <code>mpc_ast_t**</code>。这是一个二重指针类型,它是孩子节点的列表。</li>
<li><code>children</code> 使用数组的语法，在其后使用 <code>[x]</code> 来获取某个下标的值。比如，可以用 <code>children[0]</code> 来获取第一个孩子节点。</li>
<li><code>mpc_ast_t*</code> 是指向结构体的指针类型，所以获取其字段的语法有些许不同。需要使用 <code>-&gt;</code> 符号</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Load AST from output */</span>
<span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> a <span class="token operator">=</span> r<span class="token punctuation">.</span>output<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tag: %s\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Contents: %s\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of children: %i\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>children_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Get First Child */</span>
<span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> c0 <span class="token operator">=</span> a<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Tag: %s\n"</span><span class="token punctuation">,</span> c0<span class="token operator">-></span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Contents: %s\n"</span><span class="token punctuation">,</span> c0<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Number of children: %i\n"</span><span class="token punctuation">,</span>
  c0<span class="token operator">-></span>children_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h3><ul>
<li>树形结构是自身重复的。树的每个孩子节点都是树，每个孩子节点的孩子节点也是树，以此类推。正如编程语言一样，树形结构也是递归和重复的。显要想编写函数处理所有可能的情况，就必须要保证函数可以处理任意深度。可以使用递归函数的天生优势来轻松地处理这种重复自身的结构。</li>
<li>递归得到所有子节点的值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">number_of_nodes</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>children_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>children_num <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token function">number_of_nodes</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-求值"><a href="#3-求值" class="headerlink" title="3.求值"></a>3.求值</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lispy<span class="token operator">></span> * <span class="token number">10</span> <span class="token punctuation">(</span>+ <span class="token number">1</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token operator">></span>
  regex
  operator<span class="token operator">|</span>char:1:1 <span class="token string">'*'</span>
  <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:3 <span class="token string">'10'</span>
  <span class="token function">expr</span><span class="token operator">|</span><span class="token operator">></span>
    char:1:6 <span class="token string">'('</span>
    operator<span class="token operator">|</span>char:1:7 <span class="token string">'+'</span>
    <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:9 <span class="token string">'1'</span>
    <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:11 <span class="token string">'51'</span>
    char:1:13 <span class="token string">')'</span>
  regex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p>有 <code>number</code> 标签的节点一定是一个数字，并且没有孩子节点。可以直接将其转换为一个数字。这将是递归函数中的基本情况。</p>
</li>
<li><p>如果一个节点有 <code>expr</code> 标签，但没有 <code>number</code> 标签，需要看他的第二个孩子节点是什么操作符(第一个孩子节点永远是 <code>(</code> 字符)。然后我们需要使用这个操作符来对后面的孩子节点进行求值。当然，也不包括最后的 <code>)</code> 节点。</p>
</li>
<li><p>C 语言中 <code>long</code> 类型(长整形)保存计算的结果</p>
</li>
<li><p>为了检测节点的类型，或是获得节点中保存的数值，会用到节点中的 <code>tag</code> 和 <code>contents</code> 字段。这些字段都是字符串类型的，所以需要用到一些辅助性的库函数：</p>
</li>
<li><table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>atoi</td>
<td>Converts a <code>char*</code> to a <code>int</code>.</td>
</tr>
<tr>
<td>strcmp</td>
<td>Takes as input two <code>char*</code> and if they are equal it returns <code>0</code>.</td>
</tr>
<tr>
<td>strstr</td>
<td>Takes as input two <code>char*</code> and returns a pointer to the location of the second in the first, or <code>0</code> if the second is not a sub-string of the first.</td>
</tr>
</tbody></table>
</li>
<li><p>可以使用 <code>strcmp</code> 来检查应该使用什么操作符，并使用 <code>strstr</code> 来检测 <code>tag</code> 中是否含有某个字段。</p>
</li>
<li><p>递归求值函数</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If tagged as number return it directly. */</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* The operator is always second child. */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>

  <span class="token comment">/* We store the third child in `x` */</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Iterate the remaining children and combining. */</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>eval_op函数定义</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Use operator string to see which operation to perform */</span>
<span class="token keyword">long</span> <span class="token function">eval_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-打印"><a href="#4-打印" class="headerlink" title="4.打印"></a>4.打印</h3><ul>
<li>打印求值结果</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>进行基本的数学运算</li>
</ul>
<h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h3><ul>
<li>evaluation.c</li>
<li>重新编译运行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing003.c mpc.c -o parsing003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Use operator string to see which operation to perform */</span>
<span class="token keyword">long</span> <span class="token function">eval_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">long</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If tagged as number return it directly. */</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* The operator is always second child. */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>

  <span class="token comment">/* We store the third child in `x` */</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Iterate the remaining children and combining. */</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

      <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第八章-·-错误处理"><a href="#第八章-·-错误处理" class="headerlink" title="第八章 · 错误处理"></a>第八章 · 错误处理</h2><h3 id="1-异常退出"><a href="#1-异常退出" class="headerlink" title="1 异常退出"></a>1 异常退出</h3><ul>
<li>gdb</li>
</ul>
<h3 id="2-List-Value"><a href="#2-List-Value" class="headerlink" title="2. List Value"></a>2. List Value</h3><ul>
<li>需要能表示这两种结果的数据结构。简单起见，我们使用结构体来表示，并使用 <code>type</code> 字段来告诉我们当前哪个字段是有意义的</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Declare New lval Struct */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3. 枚举"></a>3. 枚举</h3><ul>
<li><code>lval</code> 的 <code>type</code> 和 <code>err</code> 字段的类型都是 <code>int</code></li>
<li>如果 <code>type</code> 为 0，那么此结构体表示一个<em>数字</em>。</li>
<li>如果 <code>type</code> 为 1，那么此结构体表示一个<em>错误</em>。</li>
<li>使用枚举 表明数字的含义</li>
<li>type字段声明枚举值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Enumeration of Possible lval Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_ERR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>error字段声明枚举值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Enumeration of Possible Error Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LERR_DIV_ZERO<span class="token punctuation">,</span> LERR_BAD_OP<span class="token punctuation">,</span> LERR_BAD_NUM <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="4-Lisp-Value函数"><a href="#4-Lisp-Value函数" class="headerlink" title="4.Lisp Value函数"></a>4.Lisp Value函数</h3><ul>
<li>用两个函数创建新的实例</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create a new number type lval */</span>
lval <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Create a new error type lval */</span>
lval <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>err <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>用switch来进行打印</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Print an "lval" */</span>
<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* In the case the type is a number print it */</span>
    <span class="token comment">/* Then 'break' out of the switch. */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* In the case the type is an error */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      <span class="token comment">/* Check what type of error it is and print it */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_DIV_ZERO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_OP<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Operator!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_NUM<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" followed by a newline */</span>
<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-求值"><a href="#5-求值" class="headerlink" title="5.求值"></a>5.求值</h3><ul>
<li>现在知道了 <code>lval</code> 类型的使用方法，需要用它来替换掉之前使用的 <code>long</code> 类型</li>
<li>这不仅仅是简单地将 <code>long</code> 替换为 <code>lval</code>，还需要修改函数使其能正确处理<em>数字</em>或是<em>错误</em>作为输入的情况。</li>
<li>在 <code>eval_op</code> 函数中，如果检测到错误，函数应该立即返回，当且仅当两个操作数都为数字类型时才做计算。另外，对于本章开头的除数为零的错误，也应该返回错误信息</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval <span class="token function">eval_op</span><span class="token punctuation">(</span>lval x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> lval y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If either value is an error return it */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise do maths on the number values */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">+</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">-</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">*</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* If second operand is zero return error */</span>
    <span class="token keyword">return</span> y<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">0</span> 
      <span class="token operator">?</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_DIV_ZERO<span class="token punctuation">)</span> 
      <span class="token operator">:</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">/</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_OP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>eval</code> 函数也需要小小地修整一下，为数字转换部分增加一点错误处理代码</li>
<li>新代码中，选用 <code>strtol</code> 函数进行字符串到数字的转换，因为可以通过检测 <code>errno</code> 变量确定是否转换成功。这无疑比使用 <code>atoi</code> 函数更为明智。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if there is some error in conversion */</span>
    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>  
  lval x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用新定义的打印函数：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">lval result &#x3D; eval(r.output);
lval_println(result);
mpc_ast_delete(r.output);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>尝试运行新程序，确保除数为零时不会崩溃了：）</li>
</ul>
<h3 id="6-参考-1"><a href="#6-参考-1" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li>error_handing.c</li>
<li>重新编译，执行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing004.c mpc.c -o parsing004<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Create Enumeration of Possible Error Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LERR_DIV_ZERO<span class="token punctuation">,</span> LERR_BAD_OP<span class="token punctuation">,</span> LERR_BAD_NUM <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Create Enumeration of Possible lval Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_ERR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Declare New lval Struct */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

<span class="token comment">/* Create a new number type lval */</span>
lval <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Create a new error type lval */</span>
lval <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>err <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" */</span>
<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* In the case the type is a number print it */</span>
    <span class="token comment">/* Then 'break' out of the switch. */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* In the case the type is an error */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      <span class="token comment">/* Check what type of error it is and print it */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_DIV_ZERO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_OP<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Operator!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_NUM<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" followed by a newline */</span>
<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

lval <span class="token function">eval_op</span><span class="token punctuation">(</span>lval x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> lval y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If either value is an error return it */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise do maths on the number values */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">+</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">-</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">*</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* If second operand is zero return error */</span>
    <span class="token keyword">return</span> y<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">0</span> 
      <span class="token operator">?</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_DIV_ZERO<span class="token punctuation">)</span> 
      <span class="token operator">:</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">/</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_OP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if there is some error in conversion */</span>
    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>  
  lval x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-收获"><a href="#7-收获" class="headerlink" title="7.收获"></a>7.收获</h3><ul>
<li>结构体中用num和error这两个int字段表示正确和错误的情况，并用type这个int字段来表示当前哪个字段有意义</li>
<li>用enum枚举来表示type和error这两个字段不同的情况，将数字含义具体化</li>
<li>用switch来判断type或error这两个字段的各种情况进行打印输出</li>
</ul>
<h2 id="第九章-·-S-表达式"><a href="#第九章-·-S-表达式" class="headerlink" title="第九章 · S-表达式"></a>第九章 · S-表达式</h2><h3 id="1-List列表"><a href="#1-List列表" class="headerlink" title="1.List列表"></a>1.List列表</h3><ul>
<li>Lisp 程序代码与数据的形式完全相同，这使得它非常强大，能完成许多其他语言不能完成的事情。为了拥有这个强大的特性，需要将求值过程分为读取并存储输入、对输入进行求值两个过程。</li>
<li>花时间去更改程序内部的工作方式，在软件开发中，这被叫做<strong>重构</strong>。重构可能对于当前的程序运行结果并没有太大的影响，但因为工作方式的优化，在后面的开发中更加省心。</li>
<li>为了存储输入，我们需要创建一个内部列表结构，能够递归地表示数字、操作符号以及其他的列表。在 Lisp 中，这个结构被称为 S-表达式(Symbolic Expression)。我们将扩展 <code>lval</code> 结构来表示它。S-表达式求值也是典型的 Lisp 式过程：首先取列表第一个元素为操作符，然后遍历所有剩下的元素，将它们作为操作数。</li>
</ul>
<h3 id="2-指针（讲解地非常nice）"><a href="#2-指针（讲解地非常nice）" class="headerlink" title="2.指针（讲解地非常nice）"></a>2.指针（讲解地非常nice）</h3><ul>
<li>在 C 语言中，要表示列表，就必须正确的使用指针。</li>
<li>C 语言函数的参数<strong>全部</strong>是通过值传递的。也就是说，传递给函数的实际是实参的拷贝。对于 <code>int</code>、<code>long</code>、<code>char</code>等系统类型以及用户自定义的结构体都是成立的。这种方式适用于绝大多数情况，但也会偶尔出现问题。一种常见的情况是，如果我们有一个巨大结构体需要作为参数传递，则每次调用函数，就会对实参进行一次拷贝，这无疑是对性能和内存的浪费。</li>
<li>另外一个问题是，结构体的大小终究是有限的，无论多大，也只能是个固定的大小。而如果我们想向函数传递一组数据，而且数据的总数还是不固定的，结构体就明显的无能为力了。</li>
<li>为了解决这个问题，C 语言的开发者们想出了一个聪明的办法。他们把内存想象成一个巨大的字节数组，每个字节都可以拥有一个全局的索引值。</li>
<li>在这种情况下，计算机中的所有数据，包括当前运行的程序中的结构体、变量都有相应的索引值与其对应(数据的开始字节的索引作为整个数据的索引)。所以，除了将数据本身拷贝到函数参数，我们还可以只拷贝数据的索引值。在函数内部则可以根据索引值找到需要的数据本身(我们将这个索引值称为<em>地址</em>，存储地址的变量称为<em>指针</em>)。使用指针，函数可以修改指定位置的内存而无需拷贝。</li>
<li>因为计算机内存的大小是固定的，表示一个地址所需要的字节数也是固定的。但是地址指向的内存的字节数是可以变化的。这就意味着，我们可以创建一个大小可变的数据结构，并将其指针传入函数，对其进行读取及修改。</li>
<li>所以，所谓的指针也仅仅是一个数字而已。是内存中的一块数据的开始字节的索引值。指针的类型用来提示程序员和编译器指针指向的是一块什么样的数据，占多少个字节等。</li>
<li>指针类型是在现有类型的后面加一个星号 <code>*</code> 组成</li>
<li>要创建指针，我们就需要获取数据的地址。C 语言提供了取地址符(<code>&amp;</code>)来获取某个数据的地址。</li>
<li>为了获取指针所指向的地址的数据值(称为<em>解引用</em>)，我们需要在指针左边使用 <code>*</code> 操作符。要获取结构体指针的某个字段，需要使用 <code>-&gt;</code> 操作符</li>
</ul>
<h3 id="3-栈-Stack-和堆-Heap"><a href="#3-栈-Stack-和堆-Heap" class="headerlink" title="3.栈(Stack)和堆(Heap)"></a>3.栈(Stack)和堆(Heap)</h3><ol>
<li>栈<ul>
<li>栈是程序赖以生存的地方，所有的临时变量和数据结构都保存于其中，可以读取及编辑。每次调用一个新的函数，就会有一块新的栈区压入，并在其中存放函数内的临时变量、传入的实参的拷贝以及其它的一些信息。当函数运行完毕，这块栈区就会被弹出并回收，供其他函数使用。</li>
</ul>
</li>
<li>堆<ul>
<li>堆占据另一部分内存，主要用来存放长生命周期期的数据。堆中的数据必须手动申请和释放。申请内存使用 <code>malloc</code> 函数。这个函数接受一个数字作为要申请的字节数，返回申请好的内存块的指针。</li>
<li>当使用完毕申请的内存，我们还需要将其释放，只要将 <code>malloc</code> 函数返回的指针传给 <code>free</code> 函数即可。</li>
<li>堆比栈的使用难度要大一些，因为它要求程序员手动调用 <code>free</code> 函数释放内存，而且还要正确调用。如果不释放，程序就有可能不断申请新的内存，而不释放旧的，导致内存越用越多。这也被称为<em>内存泄漏</em>。避免这种情况发生的一个简单有效的办法就是，针对每一个 <code>malloc</code> 函数调用，都有且只有一个 <code>free</code> 函数与之对应。这某种程度上就能保证程序能正确处理堆内存的使用。</li>
</ul>
</li>
</ol>
<h3 id="4-解析表达式"><a href="#4-解析表达式" class="headerlink" title="4.解析表达式"></a>4.解析表达式</h3><ul>
<li>S-表达式的语法非常简单。只是小括号之间包含一组表达式而已。而这些表达式可以是数字、操作符或是其他的 S-表达式。只需修改一下之前写的就可以了。另外，我们还需把 <code>operator</code> 规则重命名为 <code>symbol</code>。为之后添加更多的操作符以及变量、函数等做准备。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                          \
    number : /-?[0-9]+/ ;                    \
    symbol : '+' | '-' | '*' | '/' ;         \
    sexpr  : '(' &lt;expr>* ')' ;               \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> ; \
    lispy  : /^/ &lt;expr>* /$/ ;               \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>退出前要清理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-表达式结构"><a href="#5-表达式结构" class="headerlink" title="5.表达式结构"></a>5.表达式结构</h3><ul>
<li>需要让 <code>lval</code> 能够存储 S-表达式。这意味着我们还要能存储符号(Symbols)和数字。我们向枚举中添加两个新的类型。<code>LVAL_SYM</code> 表示操作符类型，例如 <code>+</code> 等，<code>LVAL_SEXPR</code> 表示 S-表达式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>S-表达式是一个可变长度的列表。</li>
<li>不能创建可变长度的结构体，所以只能使用指针来表示它。为 <code>lval</code> 结构体创建一个 <code>cell</code> 字段，指向一个存放 <code>lval*</code> 列表的区域。所以 <code>cell</code> 的类型就应该是 <code>lval**</code>。指向 <code>lval*</code> 的指针。还需要知道 <code>cell</code> 列表中的元素个数，所以创建了 <code>count</code> 字段。</li>
<li>字符串来表示符号(Symbols)，另外我们还增加了另一个字符串用来存储错误信息。也就是说现在 <code>lval</code> 可以存储更加具体的错误信息了，而不只是一个错误代码，这使得我们的错误报告系统更加灵活好用。我们也可以删除掉之前写的错误枚举了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token comment">/* Error and Symbol types have some string data */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token comment">/* Count and Pointer to a list of "lval*" */</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-构造函数和析构函数"><a href="#6-构造函数和析构函数" class="headerlink" title="6.构造函数和析构函数"></a>6.构造函数和析构函数</h3><ul>
<li>我们可以重写 <code>lval</code> 的构造函数，使其返回 <code>lval</code> 的指针，而不是其本身。这样做会使得对 <code>lval</code> 变量进行跟踪更加简单。为此，我们需要用到 <code>malloc</code> 库函数以及 <code>sizeof</code> 操作符为 <code>lval</code> 结构体在堆上申请足够大的内存区域，然后使用 <code>-&gt;</code> 操作符填充结构体中的相关字段。</li>
<li>当我们构造一个 <code>lval</code> 时，它的某些指针字段可能会包含其他的在堆上申请的内存，所以我们应该小心行事。当某个 <code>lval</code> 完成使命之后，我们不仅需要删除它本身所指向的堆内存，还要删除它的字段所指向的堆内存。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Number lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Error lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Symbol lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A pointer to a new empty Sexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>NULL</code> 是一个指向内存地址 0 的特殊常量。按照惯例，它通常被用来表示空值或无数据。使用 <code>NULL</code> 来表示虽然有一个数据指针，但它目前还没有指向任何内容。</li>
</ul>
<blockquote>
<h4 id="为什么要使用-strlen-s-1？"><a href="#为什么要使用-strlen-s-1？" class="headerlink" title="为什么要使用 strlen(s) + 1？"></a>为什么要使用 <code>strlen(s) + 1</code>？</h4><p>在 C 语言中，字符串是以空字符做为终止标记的。所以，C 语言字符串的最后一个字符一定是 <code>\0</code>。请确保所有的字符串都是按照这个约定来存储的，不然程序就会因为莫名其妙的错误退出。<code>strlen</code> 函数返回的是字符串的实际长度(所以不包括结尾的 <code>\0</code> 终止符)。所以为了保证有足够的空间存储所有字符，我们需要在额外 +1。</p>
</blockquote>
<ul>
<li>一个定制的函数来删除 <code>lval*</code>。这个函数应该调用 <code>free</code> 函数来释放本身所指向的由 <code>malloc</code> 函数所申请的内存。但更重要的是，它应该根据自身的类型，释放所有它的字段指向的内存。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Do nothing special for number type */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* For Err or Sym free the string data */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Free the memory allocated for the "lval" struct itself */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-读取表达式"><a href="#7-读取表达式" class="headerlink" title="7.读取表达式"></a>7.读取表达式</h3><ul>
<li>首先我们会读取整个程序，并构造一个 <code>lval*</code> 来表示它，然后我们对这个 <code>lval*</code> 进行遍历求值来得到程序的运行结果。第一阶段负责把抽象语法树(abstract syntax tree)转换为一个 S-表达式，第二阶段则根据我们已由的 Lisp 规则对 S-表达式进行遍历求值。</li>
<li>第一步：递归的查看语法分析树中的每个节点，并根据节点的 <code>tag</code> 和 <code>contents</code> 字段构造出不同类型的 <code>lval*</code>。</li>
<li>如果给定节点的被标记为 <code>number</code> 或 <code>symbol</code>，则我们可以调用对应的构造函数直接返回一个 <code>lval*</code>。如果给定的节点被标记为 <code>root</code> 或 <code>sexpr</code>，则我们应该构造一个空的 S-表达式类型的 <code>lval*</code>，并逐一将它的子节点加入。</li>
<li>为了更加方便的像一个 S-表达式中添加元素，我们可以创建一个函数 <code>lval_add</code>，这个函数将表达式的子表达式计数加一，然后使用 <code>realloc</code> 函数为 <code>v-&gt;cell</code> 字段重新扩大申请内存，用于存储刚刚加入的子表达式 <code>lval* x</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span>
    <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If Symbol or Number return conversion to that type */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If root (>) or sexpr then create empty list */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Fill this list with any valid expression contained within */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="八、打印表达式"><a href="#八、打印表达式" class="headerlink" title="八、打印表达式"></a>八、打印表达式</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Print Value contained within */</span>
    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Don't print trailing space if last element */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>lval_expr_print</code> 函数内部调用了 <code>lval_print</code> 函数，<code>lval_print</code> 内部又调用了 <code>lval_expr_print</code>。似乎是没有办法解决依赖性的。C 语言提供了<em>前置声明</em>来解决这个问题。前置声明只定义了函数的形式，而没有函数体(译者注：前置声明就是告诉编译器：“我保证有这个函数，你放心调用就是了”)。它允许其他函数调用它，而具体的函数定义则在后面。函数声明只要将函数定义的函数体换成 <code>;</code> 即可。在我们的程序中，应该将 <code>void lval_print(lval* v);</code> 语句放在一个比 <code>lval_expr_print</code> 函数靠前的地方。</p>
</blockquote>
<ul>
<li>在主循环中，将求值部分移除，替换为新写就的读取和打印函数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lispy<span class="token operator">></span> + <span class="token number">2</span> <span class="token number">2</span>
<span class="token punctuation">(</span>+ <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span>
lispy<span class="token operator">></span> + <span class="token number">2</span> <span class="token punctuation">(</span>* <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>* <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>+ <span class="token number">2</span> <span class="token punctuation">(</span>* <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>* <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">))</span>
lispy<span class="token operator">></span> *     <span class="token number">55</span>     <span class="token number">101</span>  <span class="token punctuation">(</span>+ <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>* <span class="token number">55</span> <span class="token number">101</span> <span class="token punctuation">(</span>+ <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">))</span>
lispy<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="9-表达式求值"><a href="#9-表达式求值" class="headerlink" title="9.表达式求值"></a>9.表达式求值</h3><ul>
<li>可以把求值函数想象成某种转换器－－它读取 <code>lval*</code> 作为输入，通过某种方式将其转化为新的 <code>lval*</code> 并输出。</li>
<li>在有些时候，求值函数不对输入做任何修改，原封不动的将其返回；有些时候，它会对输入的做一些改动；而在大多数情况下，它会将输入的 <code>lval*</code> 删除，返回完全不同的东西。如果要返回新的东西，一定要记得将原有的作为输入的 <code>lval*</code> 删除。</li>
<li>对于 S-表达式，我们首先遍历它所有的子节点，如果子节点有任何错误，我们就使用稍后定义的函数 <code>lval_take</code> 将遇到的第一个错误返回。</li>
<li>对于没有子节点的 S-表达式直接将其返回就可以了，这是为了处理空表达式 <code>&#123;&#125;</code> 的情况。另外，我们还需要检查只有一个子节点的表达式，例如 <code>&#123;5&#125;</code>，这种情况我们应该将其包含的表达式返回。</li>
<li>如果以上情况都不成立，那我们就知道这是一个合法的表达式，有个多于一个的子节点。对于此种情况，我们使用稍后定义的函数 <code>lval_pop</code> 将第一个元素从表达式中分离开来，然后检查确保它是一个 <code>symbol</code>。然后根据它的具体类型，将它和参数一起传入 <code>builtin_op</code> 函数计算求值。如果它不是 <code>symbol</code>，我们就将它以及传进来的其它参数删除，然后返回一个错误。</li>
<li>对于其它的非 S-表达式类型，我们就直接将其返回。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">lval* lval_eval_sexpr(lval* v) &#123;

  &#x2F;* Evaluate Children *&#x2F;
  for (int i &#x3D; 0; i &lt; v-&gt;count; i++) &#123;
    v-&gt;cell[i] &#x3D; lval_eval(v-&gt;cell[i]);
  &#125;

  &#x2F;* Error Checking *&#x2F;
  for (int i &#x3D; 0; i &lt; v-&gt;count; i++) &#123;
    if (v-&gt;cell[i]-&gt;type &#x3D;&#x3D; LVAL_ERR) &#123; return lval_take(v, i); &#125;
  &#125;

  &#x2F;* Empty Expression *&#x2F;
  if (v-&gt;count &#x3D;&#x3D; 0) &#123; return v; &#125;

  &#x2F;* Single Expression *&#x2F;
  if (v-&gt;count &#x3D;&#x3D; 1) &#123; return lval_take(v, 0); &#125;

  &#x2F;* Ensure First Element is Symbol *&#x2F;
  lval* f &#x3D; lval_pop(v, 0);
  if (f-&gt;type !&#x3D; LVAL_SYM) &#123;
    lval_del(f); lval_del(v);
    return lval_err(&quot;S-expression Does not start with symbol!&quot;);
  &#125;

  &#x2F;* Call builtin with operator *&#x2F;
  lval* result &#x3D; builtin_op(v, f-&gt;sym);
  lval_del(f);
  return result;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Evaluate Sexpressions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">/* All other lval types remain the same */</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>lval_pop</code> 和 <code>lval_take</code>。这两个都是用于操作 <code>lval</code> 类型的通用型函数</li>
<li><code>lval_pop</code> 函数将所操作的 S-表达式的第 <code>i</code> 个元素取出，并将在其后面的元素向前移动填补空缺，使得这个 S-表达式不再包含这个元素。然后将取出的元素返回。需要注意的是，这个函数并不会将这个 S- 表达式删除。它只是从中取出某个元素，剩下的元素都保持原样。这意味着这两部分最终都需要在某个地方使用 <code>lval_del</code> 函数删除。</li>
<li><code>lval_take</code> 和 <code>lval_pop</code> 函数类似，不过它将取出元素之后剩下的列表删除了。它利用了 <code>lval_pop</code> 函数并做了一点小小的改变，却使得我们的代码可读性更高了一些。所以，不同于 <code>lval_pop</code>，你只需负责使用 <code>lval_del</code> 删除取出的元素即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Find the item at "i" */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/* Shift memory after the item at "i" over the top */</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Decrease the count of items in the list */</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

  <span class="token comment">/* Reallocate the memory used */</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们还需要定义求值函数 <code>builtin_op</code>，它和我们在之前章节定义的 <code>eval_op</code> 函数类似，改成了接受一个 <code>lval*</code> 来代表一系列的参数。该函数应该对参数做更加严格的检查，如果有任何参数不是数字类型的 <code>lval*</code>，都应该返回一个错误。</li>
<li>首先，它确保所有的输入参数的类型都为数字。然后将第一个数字弹出开始计算。如果后面没有其它的子表达式，并且操作符为减号时，它会对第一个数字进行取反操作。这确保了类似于 (- 5) 这种表达式能够正确工作。</li>
<li>如果还有更多的参数，它就不断地从列表中取出，将其和之前的计算结果一起进行相应的数学运算。如果做除法时遇到被除数为零的情况，就将临时变量 x 和 y 以及参数列表删除，并返回一个错误。</li>
<li>如果没有错误，参数列表最终会被删除，并返回一个新的表达式。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Ensure all arguments are numbers */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Pop the first element */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* If no arguments and sub then perform unary negation */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* While there are still elements remaining */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Pop the next element */</span>
    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>求值函数就完成了。我们只需要再次更新一下 main 函数，在其打印表达式之前，先将输入经由求值函数处理即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="10-参考"><a href="#10-参考" class="headerlink" title="10.参考"></a>10.参考</h3><ul>
<li>s_expressions.c</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall s_expressions.c mpc.c -o s_expressions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Add SYM and SEXPR as possible lval types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token comment">/* Error and Symbol types have some string data */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token comment">/* Count and Pointer to a list of "lval*"; */</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

<span class="token comment">/* Construct a pointer to a new Number lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Construct a pointer to a new Error lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Construct a pointer to a new Symbol lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A pointer to a new empty Sexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Do nothing special for number type */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* For Err or Sym free the string data */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Free the memory allocated for the "lval" struct itself */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Find the item at "i" */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/* Shift memory after the item at "i" over the top */</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Decrease the count of items in the list */</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

  <span class="token comment">/* Reallocate the memory used */</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Print Value contained within */</span>
    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Don't print trailing space if last element */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Ensure all arguments are numbers */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Pop the first element */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* If no arguments and sub then perform unary negation */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* While there are still elements remaining */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Pop the next element */</span>
    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Perform operation */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Delete element now finished with */</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Delete input expression and return result */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Evaluate Children */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Error Checking */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Empty Expression */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Single Expression */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Ensure First Element is Symbol */</span>
  lval<span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_SYM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"S-expression Does not start with symbol."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Call builtin with operator */</span>
  lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Evaluate Sexpressions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">/* All other lval types remain the same */</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span>
    <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If Symbol or Number return conversion to that type */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If root (>) or sexpr then create empty list */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Fill this list with any valid expression contained within */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                          \
      number : /-?[0-9]+/ ;                    \
      symbol : '+' | '-' | '*' | '/' ;         \
      sexpr  : '(' &lt;expr>* ')' ;               \
      expr   : &lt;number> | &lt;symbol> | &lt;sexpr> ; \
      lispy  : /^/ &lt;expr>* /$/ ;               \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十章-·-Q表达式"><a href="#第十章-·-Q表达式" class="headerlink" title="第十章 · Q表达式"></a>第十章 · Q表达式</h2><h3 id="1-添加特性"><a href="#1-添加特性" class="headerlink" title="1.添加特性"></a>1.添加特性</h3><ul>
<li><p>这个模式也是给一个编程语言添加新特性的典型方式。它包含一系列的步骤来从无到有的实现某个特性。下表详细地说明了本章所要引入的 Q-表达式的具体实现步骤。</p>
</li>
<li><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Syntax</strong></td>
<td>Add new rule to the language grammar for this feature.</td>
</tr>
<tr>
<td><strong>Representation</strong></td>
<td>Add new data type variation to represent this feature.</td>
</tr>
<tr>
<td><strong>Parsing</strong></td>
<td>Add new functions for reading this feature from the <em>abstract syntax tree</em>.</td>
</tr>
<tr>
<td><strong>Semantics</strong></td>
<td>Add new functions for evaluating and manipulating this feature.</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-Q-表达式"><a href="#2-Q-表达式" class="headerlink" title="2.Q-表达式"></a>2.Q-表达式</h3><ul>
<li>新的 Lisp 值类型，叫做 Q-表达式。</li>
<li>它的英文全称为 <em>quoted expression</em>，跟 S-表达式一样，也是 Lisp 表达式的一种，但它不受标准 Lisp 求值机制的作用。也就是说，当受到函数的作用时，Q-表达式不会被求值，而是保持原样。这个特性让 Q-表达式有着广泛的应用。我们可以用它来存储和管理其他的 Lisp 值类型，例如数字、符号或 S-表达式等。</li>
<li>在添加 Q-表达式之后，我们还需要定义一系列的操作来管理它。类似于数学操作，这些操作定义了 Q-表达式具体的行为。</li>
<li>Q- 表达式的语法和 S-表达式非常相似，唯一的不同是 Q-表达式包裹在大括号 <code>&#123;&#125;</code> 中，而非 S-表达式的小括号 <code>()</code>，Q-表达式的语法规则如下所示。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Qexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                    \
    number : /-?[0-9]+/ ;                              \
    symbol : '+' | '-' | '*' | '/' ;                   \
    sexpr  : '(' &lt;expr>* ')' ;                         \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                         \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ; \
    lispy  : /^/ &lt;expr>* /$/ ;                         \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>同步更新清理函数 <code>mpc_cleanup</code> 来处理我们新添加的规则。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-读取Q-表达式"><a href="#3-读取Q-表达式" class="headerlink" title="3.读取Q-表达式"></a>3.读取Q-表达式</h3><ul>
<li>由于 Q-表达式和 S-表达式的形式基本一致，所以它们内部实现也大致是相同的。我们考虑重用 S-表达式的数据结构来表示 Q-表达式，在此之前需要向枚举中添加一个单独的类型。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>编写构造函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A pointer to a new empty Qexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Q-表达式的打印和删除逻辑也和 S-表达式别无二致，我们只需照葫芦画瓢，在相应的函数中添加对应的逻辑即可，具体如下所示。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Qexpr or Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>经过这些简单的变化之后，我们就可以更新读取函数 <code>lval_read</code>，使其可以正确读取 Q-表达式了。因为 Q-表达式重用了所有 S-表达式的数据类型，所以我们也自然可以重用所有 S-表达式的函数，例如 <code>lval_add</code>。</li>
<li>因此，为了能够读取 Q-表达式，我们只需在抽象语法树中检测并创建空的 S-表达式的地方添加一个新的情况即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>同时在<code>lval_read</code>中添加一下代码识别花括号:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-内建函数"><a href="#4-内建函数" class="headerlink" title="4.内建函数"></a>4.内建函数</h3><ul>
<li>已经可以读取Q-表达式了，但它仍无任何用处。接下来我们将构建一些函数来操纵Q-表达式。</li>
<li>这些操作符将作用于我们的列表类型，所以设计要尽可能简洁。我们可以先定义一些简单的操作符，再以它们为基础来构建更复杂的，这样就可以不用添加额外的C代码。以下操作符将可以满足本书内容的需要：<ul>
<li><code>list</code> 接收一个或者多个参数，返回一个包含所有参数的Q-表达式</li>
<li><code>head</code> 接受一个Q-表达式，返回一个包含其第一个元素的Q-表达式</li>
<li><code>tail</code> 接受一个Q-表达式，返回一个除首元素外的Q-表达式</li>
<li><code>join</code> 接受一个或者多个Q-表达式，返回一个将其连在一起的Q-表达式</li>
<li><code>eval</code> 接受一个Q-表达式，将其看做一个S-表达式，并运行</li>
</ul>
</li>
<li>这些新的操作符也需要加入到<code>symbol</code>中。然后我们可以试着定义这些操作符的行为</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                        \
    number : /-?[0-9]+/ ;                                  \
    symbol : \"list\" | \"head\" | \"tail\"                \
           | \"join\" | \"eval\" | '+' | '-' | '*' | '/' ; \
    sexpr  : '(' &lt;expr>* ')' ;                             \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                             \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ;     \
    lispy  : /^/ &lt;expr>* /$/ ;                             \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-首次尝试"><a href="#5-首次尝试" class="headerlink" title="5.首次尝试"></a>5.首次尝试</h3><ul>
<li>我们的内建函数应该和上章的<code>buildin_op</code>接口一致。也就是说所有的参数都先转换为S-表达式，同时要注意使用后释放内存。函数的返回值将是一个新的<code>lval*</code>。</li>
<li>实现Q-表达式的<code>head</code>和<code>tail</code>的功能并不难。我们可以使用已有的S-表达式函数，比如<code>lval_take</code>和<code>lval_pop</code>。同时我们也要对错误的输入进行异常处理。</li>
<li>我们先从<code>head</code>和<code>tail</code>入手。它们在某些条件下是不能执行的。首先要保证输入的参数只有一个，并且类型为Q-表达式。其次这个输入的Q-表达式不能为空。</li>
<li><code>head</code>函数可以重复执行<code>pop</code>并<code>delete</code>在第二个列表元素（index 1）上，直到列表为空。</li>
<li><code>tail</code>函数更简单。只需要<code>pop</code>并<code>delete</code>第一个列表元素（index 0），剩余元素组成的列表则为我们所需要的。按此思路我们可以将代码实现如下：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Check Error Conditions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_QEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed incorrect types!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise take first argument */</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Delete all elements that are not head and return */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Check Error Conditions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_QEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed incorrect types!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Take first argument */</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Delete first element and return */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-宏"><a href="#6-宏" class="headerlink" title="6.宏"></a>6.宏</h3><ul>
<li><code>head</code>和<code>tail</code>能够实现所需要的功能，但是代码难懂且长。有大段的代码是进行错误处理，使得真正的实现部分不那么明显。要解决这个问题，我们可以使用C语言的宏。</li>
<li>宏是预处理指令。（译注：它用来将一个标识符(宏名)定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。程序编译之前，编译的时候所有的宏名都会被定义的字符串替换，这便是宏替换）。它的功能非常强大（译注：甚至自成一门语言，参看宏编程），我们这里用其来简化代码。</li>
<li>宏的工作原理是定义一些参数，将这些参数复制到特定的格式（译注：宏定义）中。通过修改宏定义或者参数，宏可以生成我们想要的代码。其实我们在前面已经见过宏的定义方式，就是以<code>#define</code>为开头的代码片段。</li>
<li>这里我们定义一个<code>LASSERT</code>宏来帮助处理异常。通常宏名都是全大写，这样能够和C函数名区分开来。我们的宏有三个参数<code>args</code>，<code>cond</code>和<code>err</code>。宏名定义好后，我们可以来定义如何利用这三个参数来生成代码。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LASSERT</span><span class="token expression"><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cond<span class="token punctuation">,</span> err<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="7-Head-amp-Tail"><a href="#7-Head-amp-Tail" class="headerlink" title="7.Head&amp;Tail"></a>7.Head&amp;Tail</h3><ul>
<li>新的<code>head</code>和<code>tail</code>函数定义如下。可以明显的看到在使用宏后，代码更清晰了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="8-List-amp-Eval"><a href="#8-List-amp-Eval" class="headerlink" title="8.List&amp;Eval"></a>8.List&amp;Eval</h3><ul>
<li><code>list</code>函数比较简单。它只需将输入的一个或多个S-表达式转化为一个Q-表达式。</li>
<li><code>eval</code>函数更像是转化。它将一个Q-表达式转化为S-表达式，然后使用<code>lval_eval</code>运行。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="9-Join"><a href="#9-Join" class="headerlink" title="9.Join"></a>9.Join</h3><ul>
<li>它需要多个参数，其结构看起来更像先前定义的<code>builtin_op</code>。首先确保所有的参数都是Q-表达式，然后将它们拼接起来。所以我们需要定义<code>lval_join</code>函数，它将<code>y</code>中元素依次弹出并添加进<code>x</code>中，然后将<code>y</code>删除，返回<code>x</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
      <span class="token string">"Function 'join' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> x<span class="token punctuation">,</span> lval<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* For each cell in 'y' add it to 'x' */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Delete the empty 'y' and return 'x' */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-索引函数"><a href="#10-索引函数" class="headerlink" title="10.索引函数"></a>10.索引函数</h3><ul>
<li>我们所有的内建函数都已定义。现在需要一个函数，根据提供的<code>symbol</code>来调用相应的方法。这里我们可以用<code>strcmp</code>和<code>strstr</code>来实现。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"join"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"+-/*"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Unknown Function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>同时修改早先<code>lval_eval_sexpr</code>函数来调用新的<code>buildin</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Call builtin with operator */</span>
lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>现在我们已经全面支持Q-表达式了。编译并运行最新的代码，试试新定义的操作符吧。现在我们可以将S-表达式加在Q-表达式中。这表明我们可以将代码看做是数据。这是Lisp语言不同于其它语言所特有的。</li>
</ul>
<h3 id="11-参考"><a href="#11-参考" class="headerlink" title="11.参考"></a>11.参考</h3><ul>
<li>q_expressions.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Add QEXPR as possible lval type */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A pointer to a new empty Qexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Qexpr or Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> x<span class="token punctuation">,</span> lval<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LASSERT</span><span class="token expression"><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cond<span class="token punctuation">,</span> err<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed &#123;&#125;."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed &#123;&#125;."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
      <span class="token string">"Function 'join' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"join"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"+-/*"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Unknown Function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_SYM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"S-expression Does not start with symbol."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Call builtin with operator */</span>
  lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Qexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                    \
      number : /-?[0-9]+/ ;                              \
      symbol : \"list\" | \"head\" | \"tail\" | \"eval\" \
             | \"join\" | '+' | '-' | '*' | '/' ;        \
      sexpr  : '(' &lt;expr>* ')' ;                         \
      qexpr  : '&#123;' &lt;expr>* '&#125;' ;                         \
      expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ; \
      lispy  : /^/ &lt;expr>* /$/ ;                         \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十一章-·-变量"><a href="#第十一章-·-变量" class="headerlink" title="第十一章 · 变量"></a>第十一章 · 变量</h2><h3 id="1-不变性"><a href="#1-不变性" class="headerlink" title="1. 不变性"></a>1. 不变性</h3><ul>
<li>变量是一种命名值得方式。它们为一个值指定一个名称，然后在需要得时候获得该值的副本</li>
<li>为了允许命名值，需要创建一个存储程序中所有命名内容的名称和值的结构。我们称之为环境。</li>
<li>当我们开始一个新的交互式提示时，我们希望创建一个新的环境来配合它，在这个环境中，每个新的输入位都会被评估。然后我们可以在编程时存储和调用变量。</li>
</ul>
<blockquote>
<p>当我们为新事物重新命名时会发生什么？这不是易变性吗？在我们的Lisp中，当我们重新分配一个名称时，我们将删除旧的关联并创建一个新的关联。这给人一种错觉，即指定给该名称的对象已经更改，并且是可变的，但事实上，我们已经删除了旧对象，并将其指定为新对象。这与C不同，在C中，我们确实可以更改指针指向的数据或存储在结构中的数据，而无需删除它并创建新的数据。</p>
</blockquote>
<h3 id="2-符号语法"><a href="#2-符号语法" class="headerlink" title="2.符号语法"></a>2.符号语法</h3><ul>
<li>允许各种可能的符号输入。正则表达式</li>
<li>C中的变量的名称是非常严格的</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token operator">+</span>\\<span class="token operator">-</span><span class="token operator">*</span>\\<span class="token operator">/</span>\\\\<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">!</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>反斜杠来转义，两个反斜杠表示单个反斜杠</li>
<li>This rule lets symbols be any of the normal C identifier characters<code>a-zA-Z0-9_</code>the arithmetic operator characters<code>+\\-*\\/</code>the backslash character<code>\\\\</code>the comparison operator characters<code>=&lt;&gt;!</code>or an ampersands<code>&amp;</code>. This will give us all the flexibility we need for defining new and existing symbols.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                     \
    number : /-?[0-9]+/ ;                               \
    symbol : /[a-zA-Z0-9_+\\-*\\/\\\\=&lt;>!&amp;]+/ ;         \
    sexpr  : '(' &lt;expr>* ')' ;                          \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                          \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ;  \
    lispy  : /^/ &lt;expr>* /$/ ;                          \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-函数指针"><a href="#3-函数指针" class="headerlink" title="3.函数指针"></a>3.函数指针</h3><ul>
<li><p>一旦我们引入变量，符号将不再在我们的语言中表示函数，而是代表一个名称，以便我们查看环境并从中获得一些新的值。</p>
</li>
<li><p>因此，我们需要一个新的值来表示语言中的函数，一旦遇到一个内置符号，我们就可以返回该值。要创建这种新类型的值，我们将使用一种称为函数指针的东西。</p>
</li>
<li><p>函数指针是C的一个重要特性，它允许您存储和传递指向函数的指针。编辑这些指针指向的数据是没有意义的。相反，我们使用它们来调用它们指向的函数，就像它是一个普通函数一样。</p>
</li>
<li><p>与普通指针一样，函数指针也有一些与之相关的类型。此类型指定指向的函数的类型，而不是指向的数据的类型。这可以让编译器计算出它是否被正确调用。</p>
</li>
<li><p>In the previous chapter our builtin functions took a <code>lval*</code> as input and returned a <code>lval*</code> as output. In this chapter our builtin functions will take an extra pointer to the environment <code>lenv*</code> as input. We can declare a new function pointer type called <code>lbuiltin</code>, for this type of function, like this.</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> lval<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>lbuiltin<span class="token punctuation">)</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span><span class="token punctuation">,</span> lval<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><strong>Why is that syntax so odd?</strong></p>
<p>In some places the syntax of C can look particularly weird. It can help if we understand exactly why the syntax is like this. Let us de-construct the syntax in the example above part by part.</p>
<p>First the <code>typedef</code>. This can be put before any standard variable declaration. It results in the name of the variable, being declared a new type, matching what would be the inferred type of that variable. This is why in the above declaration what looks like the function name becomes the new type name.</p>
<p>Next all those <code>*</code>. Pointer types in C are actually meant to be written with the star <code>*</code> on the left hand side of the variable name, not the right hand side of the type <code>int *x;</code>. This is because C type syntax works by a kind of inference. Instead of reading <em>“Create a new <code>int</code> pointer <code>x</code>“</em>. It is meant to read <em>“Create a new variable <code>x</code> where to dereference <code>x</code> results in an <code>int</code>.”</em> Therefore <code>x</code> is inferred to be a pointer to an <code>int</code>.</p>
<p>This idea is extended to function pointers. We can read the above declaration as follows. <em>“To get an <code>lval\*</code> we dereference <code>lbuiltin</code> and call it with a <code>lenv\*</code> and a <code>lval\*</code>.”</em> Therefore <code>lbuiltin</code> must be a function pointer that takes an <code>lenv*</code> and a <code>lval*</code> and returns a <code>lval*</code>.</p>
</blockquote>
<h3 id="4-循环类型"><a href="#4-循环类型" class="headerlink" title="4.循环类型"></a>4.循环类型</h3><ul>
<li><code>lbuiltin</code>类型引用<code>lval</code>类型和<code>lenv</code>类型。这意味着应该首先在源文件中声明它们。</li>
<li>但我们想在<code>lval</code>结构中创建一个<code>lbuiltin</code>字段，以便创建函数值。因此，我们的<code>lbuiltin</code>声明必须先于<code>lval</code>声明。这导致了所谓的循环类型依赖，其中两种类型相互依赖。</li>
<li>我们以前在函数相互依赖的情况下遇到过这个问题。解决方案是创建一个转发声明，该声明声明了一个函数，但将函数体留空。</li>
<li>在C中，我们可以对类型执行完全相同的操作。首先，我们声明两个没有主体的结构类型。其次，我们将这些名称键入<code>lval</code>和<code>lenv</code>。然后我们可以定义<code>lbuiltin</code>函数指针类型。最后，我们可以定义<code>lval</code>结构体。现在我们所有的类型问题都解决了，编译器不会再抱怨了</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Forward Declarations */</span>

<span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">lenv</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> lval<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lenv</span> lenv<span class="token punctuation">;</span>

<span class="token comment">/* Lisp Value */</span>

<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span>   LVAL_SYM<span class="token punctuation">,</span>
       LVAL_FUN<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> lval<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>lbuiltin<span class="token punctuation">)</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span><span class="token punctuation">,</span> lval<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>

  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  lbuiltin fun<span class="token punctuation">;</span>

  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  lval<span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-函数类型"><a href="#5-函数类型" class="headerlink" title="5.函数类型"></a>5.函数类型</h3><ul>
<li>添加了一个新的<code>lval</code>类型和枚举<code>LVAL_FUN</code>，要更新所有工作在<code>lvals</code>上的相关函数，以正确处理此更新。在大多数情况下，这只意味着在switch语句中插入新的case。我们可以从为这种类型创建一个新的构造函数开始。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_fun</span><span class="token punctuation">(</span>lbuiltin func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_FUN<span class="token punctuation">;</span>
  v<span class="token operator">-></span>fun <span class="token operator">=</span> func<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>On <strong>deletion</strong> we don’t need to do anything special for function pointers.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>On <strong>printing</strong> we can just print out a nominal string.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;function>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>我们还将添加一个用于复制<code>lval</code>的新函数。当我们把东西放进环境中或从环境中取出东西时，这会很有用。对于数字和函数，我们可以直接复制相关字段。对于字符串，我们需要使用<code>malloc</code>和<code>strcpy</code>进行复制。要复制列表，我们需要分配正确的空间量，然后分别复制每个元素。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> v<span class="token operator">-></span>type<span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Copy Functions and Numbers Directly */</span>
    <span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span> x<span class="token operator">-></span>fun <span class="token operator">=</span> v<span class="token operator">-></span>fun<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> x<span class="token operator">-></span>num <span class="token operator">=</span> v<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy Strings using malloc and strcpy */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      x<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">strcpy</span><span class="token punctuation">(</span>x<span class="token operator">-></span>err<span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>
      x<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">strcpy</span><span class="token punctuation">(</span>x<span class="token operator">-></span>sym<span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy Lists by copying each sub-expression */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
      x<span class="token operator">-></span>count <span class="token operator">=</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span>
      x<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-环境"><a href="#6-环境" class="headerlink" title="6.环境"></a>6.环境</h3><ul>
<li>我们的环境结构必须对名称和值之间的关系列表进行编码。有很多方法可以构建一个可以做这类事情的结构。我们将寻求最简单、可行的方法。这是使用两个长度相等的列表。一个是<code>lval*</code>列表，另一个是<code>char*</code>列表。一个列表中的每个条目在另一个列表中的相同位置都有一个对应的条目。我们已经向前声明了我们的<code>lenv</code>结构，所以我们可以如下定义它。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">lenv</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> syms<span class="token punctuation">;</span>
  lval<span class="token operator">*</span><span class="token operator">*</span> vals<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们需要一些函数来创建和删除此结构。这些都很简单。创建会初始化结构字段，而删除会迭代两个列表中的项目，并删除或释放它们。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lenv<span class="token operator">*</span> <span class="token function">lenv_new</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lenv<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lenv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>vals <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lenv_del</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们可以创建两个函数，要么从环境中获取值，要么将值放入其中。</li>
<li>为了从环境中获得一个值，我们循环环境中的所有项，并检查给定的符号是否与任何存储的字符串匹配。如果找到匹配项，则可以返回存储值的副本。如果没有找到匹配项，我们应该返回一个错误。</li>
<li>将新变量放入环境的函数稍微复杂一些。首先，我们要检查是否已经存在同名的变量。如果是这种情况，我们应该用新值替换它的值。为此，我们在环境中循环所有现有变量并检查它们的名称。如果找到匹配项，我们将删除存储在该位置的值，并将输入值的副本存储在该位置。</li>
<li>如果找不到具有该名称的现有值，我们需要分配更多空间将其放入。为此，我们可以使用<code>realloc</code>，并在新分配的位置存储<code>lval</code>及其名称的副本。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lenv_get</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">,</span> lval<span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Iterate over all items in environment */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if the stored string matches the symbol string */</span>
    <span class="token comment">/* If it does, return a copy of the value */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/* If no symbol found return error */</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"unbound symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lenv_put</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">,</span> lval<span class="token operator">*</span> k<span class="token punctuation">,</span> lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Iterate over all items in environment */</span>
  <span class="token comment">/* This is to see if variable already exists */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* If variable is found delete item at that position */</span>
    <span class="token comment">/* And replace with variable supplied by user */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If no existing entry found allocate space for new entry */</span>
  e<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>vals <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Copy contents of lval and symbol string into new location */</span>
  e<span class="token operator">-></span>vals<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>k<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-变量评估"><a href="#7-变量评估" class="headerlink" title="7.变量评估"></a>7.变量评估</h3><ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>c/c++项目学习</category>
      </categories>
      <tags>
        <tag>c/c++项目学习</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到gitub或gitee</title>
    <url>/2022/06/21/hexo_git/</url>
    <content><![CDATA[<h2 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h2><ol>
<li>安装gitl</li>
<li>安装node.js</li>
<li>安装hexo<ul>
<li><a href="https://hexo.io/zh-cn/docs/">官方文档</a></li>
</ul>
</li>
</ol>
<h2 id="二、本地运行"><a href="#二、本地运行" class="headerlink" title="二、本地运行"></a>二、本地运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//git窗口
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span> //进入blog所在文件夹
hexo init   //初始化
<span class="token function">npm</span> <span class="token function">install</span> //安装依赖
hexo g //构建
hexo s //本地测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h2><ol>
<li><p>github中搜索主题并下载压缩包</p>
</li>
<li><p>在hexo的theme中解压压缩包</p>
</li>
<li><p>修改theme下的配置文件_config.yml</p>
<ul>
<li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">参考</a>非常详细</li>
</ul>
</li>
<li><p>重新本地运行</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><ol>
<li>安装git提交插件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>生成密钥添加到Github并测试Git</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name
<span class="token function">git</span> config user.email
<span class="token function">git</span> config --global user.name <span class="token string">"name"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"email"</span>
<span class="token function">ssh</span> -keygen -t rsa -C <span class="token string">"email"</span>
<span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">ls</span> 
<span class="token function">vim</span> id_rsa.pub
copy
在github的setting的ssh key中粘贴
       
查询：https://ipaddress.com/website/github.com的ipv4地址
添加 C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System32<span class="token punctuation">\</span>drivers<span class="token punctuation">\</span>etc<span class="token punctuation">\</span>hosts
<span class="token number">140.82</span>.112.4 github.com
       
<span class="token function">git</span> <span class="token function">bash</span>
<span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改hexo的配置文件_config.yml</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:
   type: <span class="token string">'git'</span>
   repo: git@github.com:01zic/01zic.github.io.git
   branch:main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>部署到github(git bash)</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="五、可能的小问题"><a href="#五、可能的小问题" class="headerlink" title="五、可能的小问题"></a>五、可能的小问题</h2><ol>
<li>git连接失败的解决方案<ol>
<li>换网，校园网不一定好使</li>
<li>查询：<a href="https://ipaddress.com/website/github.com">github的ipv4地址</a><br>添加：C:\Windows\System32\drivers\etc\hosts -&gt; 140.82.112.4 github.com</li>
<li>ssh公钥配置，重新配置</li>
</ol>
</li>
<li>github页面代码块的错乱问题<ul>
<li>代码块前面不要有任何东西 </li>
<li>例如无序列表或者有序列表之类的东西</li>
<li>直接将代码块置顶，前面不留空格</li>
</ul>
</li>
</ol>
<h2 id="六、七牛云图床的配置"><a href="#六、七牛云图床的配置" class="headerlink" title="六、七牛云图床的配置"></a>六、七牛云图床的配置</h2><ol>
<li>七牛云登录后，对象存储里面新建空间，配置加速域名，用备案过的域名的二级域名</li>
<li>到腾讯云DNS解析的地方添加解析记录，qiniu CNAME CNAME记录值（七牛云提供）</li>
<li>AK SK 域名 存储区域</li>
</ol>
<h2 id="七、配置mermaid"><a href="#七、配置mermaid" class="headerlink" title="七、配置mermaid"></a>七、配置mermaid</h2><ul>
<li><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">直接参考github链接</a>（我搞的时候一直有问题）<ol>
<li>安装插件</li>
<li>修改配置文件</li>
<li>js文件修改</li>
</ol>
</li>
<li><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">mermaid-github文档</a></li>
</ul>
<h2 id="八、hexo中添加本地文件下载"><a href="#八、hexo中添加本地文件下载" class="headerlink" title="八、hexo中添加本地文件下载"></a>八、hexo中添加本地文件下载</h2><ul>
<li>调整程序配置文件_config.yml 里的post_asset_folder:这个选项设置为True</li>
<li>在source下创建/download文件夹，先把文件xxx.xls/doc（或者其他）复制到这个文件夹</li>
<li> 最后在xxxx.md中想引入下载链接时，只需要在xxxx.md中按照markdown的格式引入即可：</li>
</ul>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">xx文件 <span class="token url">[<span class="token content">点击下载</span>](<span class="token url">/download/xx.xx</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="九、换NEXT主题"><a href="#九、换NEXT主题" class="headerlink" title="九、换NEXT主题"></a>九、换NEXT主题</h2><ul>
<li>因为mermaid配置太折磨人了</li>
<li><a href="https://github.com/theme-next/awesome-next">next主题的相关插件</a></li>
<li><a href="https://blog.csdn.net/Sky_True/article/details/104435997/">别人的完整配置</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
</search>
