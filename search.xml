<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build Your Own Text Editor</title>
    <url>/2022/06/28/Build_Your_Own_Text_Editor/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>构建你自己的文本编辑器</li>
<li><a href="https://viewsourcecode.org/snaptoken/kilo/index.html">学习的开源的项目地址</a></li>
<li>在linux环境编译运行</li>
</ul>
<h2 id="第一章-安装"><a href="#第一章-安装" class="headerlink" title="第一章 安装"></a>第一章 安装</h2><ol>
<li>安装一个C编译器</li>
<li>main()函数介绍</li>
<li>使用make来编译</li>
</ol>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">kilo</span><span class="token punctuation">:</span> kilo.c
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> kilo.c -o kilo -Wall -Wextra -pedantic -std<span class="token operator">=</span>c99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="第二章-进入原始模式"><a href="#第二章-进入原始模式" class="headerlink" title="第二章 进入原始模式"></a>第二章 进入原始模式</h2><ul>
<li>kilo.c文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//read()从标准输入中读取1个字节的字符到变量c中</span>
<span class="token comment">//read()函数的返回值是成功读取的字节数，当返回值为0表示文件末尾</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">Include<span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">></span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>press q to quit</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//输入q退出</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>turn off echoing</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//echo 在规范模式下可以在终端输出用户键入的字符</span>
<span class="token comment">//但是在原始模式不太好，所以要关掉它</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token comment">//开启原始模式</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw<span class="token punctuation">;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>退出时禁用原始模式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭规范模式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//逐字节读取输入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>显示按键</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//iscntrl()来自&lt;ctype.h></span>
<span class="token comment">/*iscntrl()测试字符是否为控制字符。控制字符是我们不想打印到屏/幕上的不可打印字符。ASCII码0-31都是控制字符，127也是控制字符。ASCII码32-126都是可打印的。
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭<code>Ctrl-C</code>和<code>Ctrl-Z</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//关闭退出和回退信号</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭<code>Ctrl-S</code>和<code>Ctrl-Q</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Ctrl-S停止数据传输到终端</span>
<span class="token comment">//Ctrl-Q暂停数据传输</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭<code>Ctrl-V</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>修复<code>Ctrl-M</code></li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Ctrl-M和Enter都是13</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ICRNL <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关闭输出处理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ICRNL <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关掉其他信号</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>暂停read()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//设定读取超时</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>错误处理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">perror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcgetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>小结</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token comment">/*** data ***/</span>

<span class="token keyword">struct</span> <span class="token class-name">termios</span> orig_termios<span class="token punctuation">;</span>

<span class="token comment">/*** terminal ***/</span>

<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">perror</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>orig_termios<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcgetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>disableRawMode<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">termios</span> raw <span class="token operator">=</span> orig_termios<span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_iflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>BRKINT <span class="token operator">|</span> ICRNL <span class="token operator">|</span> INPCK <span class="token operator">|</span> ISTRIP <span class="token operator">|</span> IXON<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_oflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>OPOST<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cflag <span class="token operator">|=</span> <span class="token punctuation">(</span>CS8<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>ECHO <span class="token operator">|</span> ICANON <span class="token operator">|</span> IEXTEN <span class="token operator">|</span> ISIG<span class="token punctuation">)</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  raw<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSAFLUSH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>raw<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"tcsetattr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*** init ***/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第三章-原始输入和输出"><a href="#第三章-原始输入和输出" class="headerlink" title="第三章 原始输入和输出"></a>第三章 原始输入和输出</h2><h3 id="按Ctrl-Q退出"><a href="#按Ctrl-Q退出" class="headerlink" title="按Ctrl-Q退出"></a>按<code>Ctrl-Q</code>退出</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token comment">/*** defines ***/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CTRL_KEY</span><span class="token expression"><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1f</span><span class="token punctuation">)</span></span></span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token comment">/*** init ***/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscntrl</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d ('%c')\r\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token function">CTRL_KEY</span><span class="token punctuation">(</span><span class="token char">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>这个<code>CTRL_KEY</code>宏按位与字符的值相加<code> 00011111</code></li>
<li>（在C语言中，通常使用十六进制指定位掩码，因为<code>Cdoesn</code>没有二进制字面值，而一旦习惯了十六进制，它会更加简洁易读。）换句话说，它将字符的高位3位设置为<code>0</code>. 这反映了<code>Ctrl</code>键按键在终端中的作用：它会从你按下的任何键中去除第5位和第6位<code>Ctrl</code>键，然后发送。（按照惯例，位编号从0开始。）ASCII字符集似乎是故意这样设计的。<h3 id="重构键盘输入"><a href="#重构键盘输入" class="headerlink" title="重构键盘输入"></a>重构键盘输入</h3></li>
<li>创建一个用于低级按键读取的函数，以及另一个将按键映射到编辑器操作的函数。此时我们也将停止打印按键。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token comment">/*** defines ***/</span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token function">editorReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> nread<span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EAGAIN<span class="token punctuation">)</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** input ***/</span>
<span class="token keyword">void</span> <span class="token function">editorProcessKeypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">editorReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token function">CTRL_KEY</span><span class="token punctuation">(</span><span class="token char">'q'</span><span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** init ***/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">editorProcessKeypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>editorReadKey()</code>的工作是等待一次按键，然后返回。稍后，我们将扩展此函数来处理转义序列，这涉及到读取多个表示单个按键的字节，如箭头键的情况。</li>
<li><code>editorProcessKeypress()</code>等待按键，然后处理它。稍后，它将映射各种Ctrl键组合键和其他特殊键到不同的编辑器功能，并将任何字母数字和其他可打印键的字符插入正在编辑的文本中。</li>
<li><code>editorReadKey()</code>属于<code>/***终端***/</code>部分是因为它处理低电平终端输入，而<code>editorProcessKeypress()</code>属于新的<code>/***输入***/</code>因为它在更高的级别处理映射keysto编辑器函数。</li>
</ul>
<h3 id="清除屏幕"><a href="#清除屏幕" class="headerlink" title="清除屏幕"></a>清除屏幕</h3><ul>
<li>我们将在每次按键后将编辑器的用户界面呈现到屏幕上。让我们从清理屏幕开始。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token comment">/*** defines ***/</span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">disableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token function">editorReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span>
<span class="token comment">/*** output ***/</span>
<span class="token keyword">void</span> <span class="token function">editorRefreshScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"\x1b[2J"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** input ***/</span>
<span class="token comment">/*** init ***/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">enableRawMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">editorRefreshScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">editorProcessKeypress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>4意味着4个字节输出到终端，第一个字节是<code>\x1b型</code>，它是转义字符，或者<code>27</code>索引的。（试着记住<code>\x1b型</code>，我们将经常使用它。）其他三个字节是<code>[2J</code> .</p>
</li>
<li><p>我们正在写一个<em>转义序列</em>到终点站。转义序列总是从转义字符开始(<code>27</code>)后面跟着一个<code> [</code>性格。Escapesequences指示终端执行各种文本格式化任务，例如对文本进行着色、在屏幕上四处移动光标以及清除部分屏幕。</p>
</li>
<li><p>我们正在使用<code>J</code>命令(<a href="http://vt100.net/docs/vt100-ug/chapter3.html#ED">在显示中擦除</a>)清除屏幕。转义序列命令接受位于命令之前的参数。在这种情况下，论点是<code>2</code>，表示要清除整个屏幕。<code>&lt;esc&gt;[1J</code>会将屏幕清除到光标所在的位置，并且<code>&lt;esc&gt;[0J</code>将清除屏幕从光标到屏幕末尾。也，<code> zero</code>的默认参数<code>J</code>，所以只是<code>&lt;esc&gt;[J</code>它本身也会将屏幕从光标一直清除到最后。</p>
</li>
<li><p>对于我们的文本编辑器，我们将主要使用<a href="https://en.wikipedia.org/wiki/VT100">VT100型</a>转义序列，被现代终端仿真器广泛支持。见<a href="http://vt100.net/docs/vt100-ug/chapter3.html">VT100用户指南</a>每个转义序列的完整文档。</p>
<p>如果我们想支持最大数量的终端，我们可以使用<a href="https://en.wikipedia.org/wiki/Ncurses"> 课程</a>库，它使用<a href="https://en.wikipedia.org/wiki/Terminfo"> 终点站</a>数据库来计算终端的容量以及该终端使用的转义序列。</p>
</li>
</ul>
<h3 id="重新定位光标"><a href="#重新定位光标" class="headerlink" title="重新定位光标"></a>重新定位光标</h3><ul>
<li>你可能会注意到<code>&lt;esc&gt;[2J</code>命令将光标留在屏幕底部。让我们重新定位它在左上角，这样我们就可以从上到下绘制编辑器界面了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** includes ***/</span>
<span class="token comment">/*** defines ***/</span>
<span class="token comment">/*** data ***/</span>
<span class="token comment">/*** terminal ***/</span>
<span class="token comment">/*** output ***/</span>
<span class="token keyword">void</span> <span class="token function">editorRefreshScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"\x1b[2J"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> <span class="token string">"\x1b[H"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*** input ***/</span>
<span class="token comment">/*** init ***/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>这个转义序列只是<code>3</code>字节长，并使用<code>H</code>命令(<a href="http://vt100.net/docs/vt100-ug/chapter3.html#CUP">光标位置</a>)地形定位光标。这个<code>H</code>命令实际上有两个参数：行号和光标所在的列号。因此，如果您有一个80×24大小的终端，并且您希望光标位于屏幕的中心，您可以使用命令<code>&lt;esc&gt;[12;40H</code>. （多个参数之间用<code>;</code>字符。）的默认参数<code>H</code>两者碰巧都是<code>1</code>，所以我们可以省略这两个参数，它将光标定位在第一行和第一列，就像我们发送<code>&lt;esc&gt;[1;1H</code>命令。（行和列从开始编号<code>1</code>，不是<code> zero</code> .)</li>
</ul>
<h3 id="退出时清除屏幕"><a href="#退出时清除屏幕" class="headerlink" title="退出时清除屏幕"></a>退出时清除屏幕</h3><ul>
<li>当程序退出时，让我们清除屏幕并重新定位光标。如果在渲染屏幕的过程中出现错误，我们不希望在屏幕上留下一堆垃圾，也不希望在光标恰好位于该点的任何位置打印错误。</li>
</ul>
<pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;*** includes ***&#x2F;
&#x2F;*** defines ***&#x2F;
&#x2F;*** data ***&#x2F;
&#x2F;*** terminal ***&#x2F;
void die(const char *s) &#123;
  write(STDOUT_FILENO, &quot;\x1b[2J&quot;, 4);
  write(STDOUT_FILENO, &quot;\x1b[H&quot;, 3);
  perror(s);
  exit(1);
&#125;
void disableRawMode() &#123; … &#125;
void enableRawMode() &#123; … &#125;
char editorReadKey() &#123; … &#125;
&#x2F;*** output ***&#x2F;
&#x2F;*** input ***&#x2F;
void editorProcessKeypress() &#123;
  char c &#x3D; editorReadKey();
  switch (c) &#123;
    case CTRL_KEY(&#39;q&#39;):
      write(STDOUT_FILENO, &quot;\x1b[2J&quot;, 4);
      write(STDOUT_FILENO, &quot;\x1b[H&quot;, 3);
      exit(0);
      break;
  &#125;
&#125;
&#x2F;*** init ***&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>We have two exit points we want to clear the screen at:<code>die()</code>, and when theuser pressesCtrl-Qto quit.</li>
<li>We could use<code>atexit()</code>to clear the screen when our program exits, but thenthe error message printed by<code>die()</code>would get erased right after printing it.</li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础</title>
    <url>/2022/07/03/C-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>C++基础课程</li>
<li><img src="http://qiniu.orangew.cn/img/%E5%B0%B1%E4%B8%9A%E7%8F%ADC++%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png" alt="就业班C++基础课程大纲"></li>
</ul>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><ul>
<li>应用领域<ul>
<li>如果项目中,既要求效率又要建模和高度抽像,那就选择c++吧。</li>
</ul>
</li>
<li>系统层软件开发<ul>
<li>C++的语言本身的高效</li>
</ul>
</li>
<li>服务器程序开发<ul>
<li>面向对象，具有较强的抽象和建模能力</li>
</ul>
</li>
<li>游戏，网络，分布式，云计算<ul>
<li>效率和建模</li>
</ul>
</li>
<li>科学计算</li>
</ul>
<h2 id="C-对C语言的加强"><a href="#C-对C语言的加强" class="headerlink" title="C++对C语言的加强"></a>C++对C语言的加强</h2><h3 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h3><h4 id="C-命名空间基本常识"><a href="#C-命名空间基本常识" class="headerlink" title="C++命名空间基本常识"></a>C++命名空间基本常识</h4><ul>
<li><p>所谓namespace，是指标识符的各种可见范围。C++标准程序库中的所有标识符都被定义于一个名为std的namespace中。</p>
</li>
<li><p>一 : <iostream>和&lt;iostream.h&gt;格式不一样，前者没有后缀，实际上，在你的编译器include文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。后缀为.h的头文件c++标准已经明确提出不支持了，早些的实现将标准库功能定义在全局空间里，声明在带.h后缀的头文件里，c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h。因此，</p>
<ol>
<li>当使用&lt;iostream.h&gt;时，相当于在c中调用库函数，使用的是全局命名空间，也就是早期的c++实现;</li>
<li>当使用<iostream>的时候，该头文件没有定义全局命名空间，必须使用namespace std;这样才能正确使用cout。</li>
</ol>
</li>
<li><p>二︰由于namespace的概念，使用C++标准程序库的任何标识符时，可以有三种选择:</p>
<ol>
<li><p>直接指定标识符。例如std:ostream而不是ostream。完整语句如</p>
<ul>
<li><code>std:: cout &lt;&lt; std ::hex &lt;&lt; 3.4 &lt;&lt; std::endl;</code></li>
</ul>
</li>
<li><p>使用using关键字</p>
<ul>
<li><code>using std::cout;using std::endl;using std::cin;</code></li>
<li>以上程序可以写成</li>
<li><code>cout&lt;&lt;std::hex&lt;&lt;3.4&lt;&lt;endl;</code></li>
</ul>
</li>
<li><p>最方便的就是使用using namespace std;例如: using namespace std;这样命名空间std内定义的所有标识符都有效（曝光）。就好像它们被声明为全局变量一样。那么以上语句可以如下写: <code>cout &lt;&lt;hex &lt;&lt; 3.4 &lt;&lt; endl;</code>因为标准库非常的庞大，所以程序员在选择的类的名称或函数名时就很有可能和标准库中的某个名字相同。所以为了避免这种情况所造成的名字冲突，就把标准库中的一切都被放在名字空间std中。但这又会带来了一个新问题。无数原有的C++代码都依赖于使用了多年的伪标准库中的功能，他们都是在全局空间下的。所以就有了&lt;iostream.h&gt;和<iostream>等等这样的头文件，一个是为了兼容以前的C++代码，一个是为了支持新的标准。命名空间std封装的是标准程序库的名称，标准程序库为了和以前的头文件区别，一般不加”.h”</p>
</li>
</ol>
</li>
</ul>
<h4 id="C-命名空间定义以及使用方法"><a href="#C-命名空间定义以及使用方法" class="headerlink" title="C++命名空间定义以及使用方法"></a>C++命名空间定义以及使用方法</h4><ul>
<li>在C++中，名称( name )可以是符号常量、变量、宏、函数、结构、枚举、类和对象等等。为了避免，在大规模程序的设计中，以及在程序员使用各种各样的C++库时，这些标识符的命名发生冲突。</li>
<li>标准C++引入了关键字namespace(命名空间/名字空间/名称空间/名域)，可以更好地控制标识符的作用域。</li>
<li>std是c++标准命名空间，c++标准程序库中的所有标识符都被定义在std中，比如标准库中的类iostream、vector等都定义在该命名空间中，使用时要加上using声明(using namespace std)或using指示(如std::string、std:vector<int>).</li>
</ul>
<blockquote>
<p>C中的命名空间<br>在C语言中只有一个全局作用域<br>C语言中所有的全局标识符共享同一个作用域标识符之间可能发生冲突</p>
<p>C++中的命名空间<br>命名空间将全局作用域分成不同的部分<br>不同命名空间中的标识符可以同名而不会发生冲突命名空间可以相互嵌套<br>全局作用域也叫默认命名空间</p>
</blockquote>
<ul>
<li>C++命名空间的定义</li>
<li><code>namespace name&#123;...&#125;</code></li>
<li>C++命名空间的使用<ul>
<li>使用整个命名空间:using namespace name;</li>
<li>使用命名空间中的变量: using name::variable;</li>
<li>使用默认命名空间中的变量: ::variable</li>
<li>默认情况下可以直接使用默认命名空间中的所有标识符</li>
</ul>
</li>
</ul>
<h4 id="C-命名空间编程实践"><a href="#C-命名空间编程实践" class="headerlink" title="C++命名空间编程实践"></a>C++命名空间编程实践</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;stdio.h&gt;
namespace NameSpaceA&#123;
    int a&#x3D;0;
&#125;
namespace NameSpaceB&#123;
    int a&#x3D;1;
    namespace NameSpaceC&#123;
        struct Teacher&#123;
            char name[10];
            int age;
        &#125;;
    &#125;
&#125;
int main()&#123;
    using namespace NameSpaceA;
    using NameSpaceB::NameSpaceC::Teacher;
    printf(&quot;a&#x3D; %d\n&quot;,a);
    printf(&quot;a&#x3D; %d\n&quot;,NameSpaceB::a);
    NameSpaceB::NameSpaceC::Teacher t2;
    Teacher t1&#x3D;&#123;&quot;aaa&quot;,3&#125;;
    printf(&quot;t1.name&#x3D; %s\n&quot;,t1.name);
    printf(&quot;t1.age&#x3D; %d\n&quot;,t1.age);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ol>
<li>当使用<iostream>的时候，该头文件没有定义全局命名空间，必须使用namespace std ;这样才能正确使用cout。若不引入using namespace std ,需要这样做。std::cout</li>
<li>C++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h</li>
<li>C++命名空间的定义:namespace name {…}</li>
<li>using namespace NameSpaceA;</li>
<li>namespace定义可嵌套。</li>
</ol>
<h3 id="实用性增强"><a href="#实用性增强" class="headerlink" title="实用性增强"></a>实用性增强</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;c语言中的变量都必须在作用域开始的位置定义!!
&#x2F;&#x2F;C++中更强调语言的“实用性”，所有的变量都可以在需要使用时再定义。
int main(void)
int i &#x3D; 0;
cout &lt;&lt; &quot;i &#x3D; &quot; &lt;&lt;i &lt;&lt;endl;
int k;
k &#x3D; 4;
cout &lt;&lt; &quot;k &#x3D; &quot; &lt;&lt;k &lt;&lt;endl;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="变量检测增强"><a href="#变量检测增强" class="headerlink" title="变量检测增强"></a>变量检测增强</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
在c语言中，重复定义多个同名的全局变量是合法的在C++中，不允许定义多个同名的全局变量
C语言中多个同名的全局变量最终会被链接到全局数据区的同一个地址空间上
int g_var;
int g_var &#x3D; 1;
C++直接拒绝这种二义性的做法。
*&#x2F;
#include &lt;iostream&gt;
int g_var;
int g_var &#x3D; 1;
int main(int argc, char *argv[])
&#123;
printf( &quot;g_var &#x3D; %d\n&quot;, g_var);
    return 0;
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220703105256.png" alt="20220703105256"></p>
<h3 id="struct-类型增强"><a href="#struct-类型增强" class="headerlink" title="struct 类型增强"></a>struct 类型增强</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
c语言的struct定义了一组变量的集合，c编译器并不认为这是一种新的类型C++中的struct是一个新类型的定义声明
*&#x2F;
#include &lt;iostream&gt;
struct student&#123;
char name[100];
int age;
&#125;;
int main(int argc,char *argv[])&#123;
student s1 &#x3D; &#123;&quot;wang&quot;,1&#125;;
Student s2 &#x3D; &#123;&quot;wang2&quot;,2&#125;;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="C-中所有变量和函数都必须有类型"><a href="#C-中所有变量和函数都必须有类型" class="headerlink" title="C++中所有变量和函数都必须有类型"></a>C++中所有变量和函数都必须有类型</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
&#x2F;*
C++中所有的变量和函数都必须有类型c语言中的默认类型在C++中是不合法的
函数f的返回值是什么类型，参数又是什么类型?函数g可以接受多少个参数?
*&#x2F;
&#x2F;&#x2F;更换成.cpp试试
f(i)
&#123;
	printf( &quot;i &#x3D; %d \n&quot;, i);
&#125;
g()&#123;
return 5;
&#125;
int main(int argc, char *argv[])&#123;
f(10);
printf(&quot;g() &#x3D; %d\n&quot;, g(1，2，3，4，5));
getchar();
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在C语言中<br>int f()﹔表示返回值为int ，接受任意参数的函数</p>
<p>int ((void);表示返回值为int的无参函数</p>
<p>在C++中<br>intf( );和int f(void)具有相同的意义，都表示返回值为int的无参函数</p>
<p>C++更加强调类型，任意的程序元素都必须显示指明类型</p>
</blockquote>
<h3 id="新增bool类型关键字"><a href="#新增bool类型关键字" class="headerlink" title="新增bool类型关键字"></a>新增bool类型关键字</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
C++中的布尔类型
C++在C语言的基本类型系统之上增加了boolC++中的bool可取的值只有true和false理论上bool只占用一个字节，
如果多个bool变量定义在一起，可能会各占一个bit，这取决于编译器的实现
true代表真值，编译器内部用1来表示
false代表非真值，编译器内部用o来表示
bool类型只有true(非e)和false (0)两个值
C++编译器会在赋值时将非o值转换为true，0值转换为false*&#x2F;
#include &lt;iostream&gt;
using namespace std;
int main(int argc,char *argv[])&#123;
int a;
bool b &#x3D; true;
printf( &quot;b &#x3D; %d, sizeof(b) &#x3D; %d \n&quot;, b, sizeof(b));
b &#x3D; 4;
a &#x3D; b;
printf( &quot;a &#x3D; %d, b &#x3D; %d\n&quot;, a,b);
b &#x3D; -4;
a &#x3D; b;
printf( &quot;a &#x3D; %d， b &#x3D; %d \n&quot;, a,b);
a &#x3D; 10;
b &#x3D; a;
printf( &quot;a &#x3D; %d， b &#x3D; %d\n&quot;, a,b);
b &#x3D; 0;
printf( &quot;b &#x3D; %d \n&quot;, b);
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="三目运算符功能增强"><a href="#三目运算符功能增强" class="headerlink" title="三目运算符功能增强"></a>三目运算符功能增强</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
using namespace std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">//返回一个最小数并且给最小数赋值成30</span>
<span class="token comment">//三目运算符是一个表达式，表达式不可能做左值( a &lt; b ? a : b ) = 30;</span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1 )C语言返回变量的值</p>
<p>​    C++语言是返回变量本身</p>
<p>​    C语言中的三目运算符返回的是变量值，不能作为左值使用</p>
<p>​    C++中的三目运算符可直接返回变量本身，因此可以出现在程序的任何地<br>方<br>2）注意:三目运算符可能返回的值中如果有一个是常量值，则不能作为左值使用<br>​    ( a&lt; b ? 1 : b )= 30;</p>
<p>3)C语言如何支持类似C++的持性呢?</p>
<p>​    当左值的条件:要有内存空间;</p>
<p>​    C++编译器帮助程序员取了一个地址而已</p>
</blockquote>
<h3 id="const增强"><a href="#const增强" class="headerlink" title="const增强"></a>const增强</h3><h4 id="const基础知识"><a href="#const基础知识" class="headerlink" title="const基础知识"></a>const基础知识</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
int main(void)
&#123;
&#x2F;&#x2F; const 定义常量---&gt; const意味只读
const int a;
int const b;
&#x2F;第一个第二个意思一样代表一个常整形数
const int *c ;
&#x2F;&#x2F;第三个c是一个指向常整形数的指针(所指向的内存数据不能被修改，但是本身可以修改)
int *const d;
&#x2F;第四个d 常指针（指针变量不能被修改，但是它所指向内存空间可以被修改)
const int *const e ;
&#x2F;&#x2F;第五个e一个指向常整形的常指针（指针和它所指向的内存空间，均不能被修改)
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>合理的利用const的好处，<br>1指针做面数参数，可以有效的提高代码可读性，减少bug ;</p>
<p>2清楚的分清参数的输入和输出特性</p>
</blockquote>
<ul>
<li><code>int setTeacher_err( const Teacher *p)</code></li>
<li>Const修改形参的时候，在利用形参不能修改指针所向的内存空间</li>
</ul>
<h4 id="C语言中的“冒牌货”"><a href="#C语言中的“冒牌货”" class="headerlink" title="C语言中的“冒牌货”"></a>C语言中的“冒牌货”</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"a===>%d a===>%p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"a===>%d a===>%p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220703111635.png" alt="20220703111635"></p>
<h4 id="const-和-define的相同"><a href="#const-和-define的相同" class="headerlink" title="const 和#define的相同"></a>const 和#define的相同</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;&#x2F;#define N 10
int main()
&#123;
	const int a &#x3D; 1;
    const int b &#x3D; 2;
	int array[a + b] &#x3D; &#123;0&#125;;
    int i &#x3D; 0;
	for(i &#x3D; 0; i &lt; (a+b); i++)&#123;
	printf( &quot;array[%d] &#x3D; %d\n&quot;, i, array[i]);
&#125;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C++中的const修饰的，是一个真正的常量，而不是c中变量（只读)。在const修饰的常量编译期间，就已经确定下来了</li>
</ul>
<h4 id="const和-define的区别"><a href="#const和-define的区别" class="headerlink" title="const和#define的区别"></a>const和#define的区别</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
void fun1()
&#123;
#define a 10
const int b &#x3D; 20;
&#125;
void fun2()&#123;
printf( &quot;a &#x3D; %d\n&quot;, a);
    &#x2F;&#x2F; printf( &quot;b &#x3D; %d \n&quot;, b);
&#125;
int main()&#123;
	fun1();
    fun2();
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C++中的const常量类似于宏定义</li>
<li><code>const int c = 5; #define c 5</code></li>
<li>C++中的const常量与宏定义不同</li>
<li><strong>const常量是由编译器</strong>处理的，提供类型检查和作用域检查</li>
<li><strong>宏定义由预处理器处理</strong>，单纯的文本替换</li>
</ul>
<blockquote>
<p>C语言中的const变量<br>C语言中const变量是只读变量，有自己的存储空间</p>
<p>C+＋中的const常量<br>    可能分配存储空间,也可能不分配存储空间<br>    当const常量为全局，并且需要在其它文件中使用，会分配存储空间当使用&amp;操    作符，取const常量的地址时，会分配存储空间<br>    当const int &amp;a = 10; const修饰引用时，也会分配存储空间</p>
</blockquote>
<h3 id="真正的枚举"><a href="#真正的枚举" class="headerlink" title="真正的枚举"></a>真正的枚举</h3><ul>
<li>c语言中枚举本质就是整型,枚举变量可以用任意整型赋值。而c++中枚举变量,只能用被枚举出来的元素初始化。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
enum season &#123;SPR, SUM,AUT ,WIN&#125;;
int main()
&#123;
enum season s &#x3D; SPR;
&#x2F;&#x2F;s &#x3D; 0;l&#x2F;error，但是C语言可以通过s &#x3D; SUM;
    cout &lt;&lt; &quot;s&#x3D; &quot; &lt;&lt; s &lt;&lt;endl;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-对C语言的拓展"><a href="#C-对C语言的拓展" class="headerlink" title="C++对C语言的拓展"></a>C++对C语言的拓展</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><ul>
<li>变量名实质上是一段连续存储空间的别名，是一个标号(门牌号)</li>
<li>通过变量来申请并命名内存空间.</li>
<li>通过变量的名字可以使用存储空间.</li>
</ul>
<h4 id="引用的概念"><a href="#引用的概念" class="headerlink" title="引用的概念"></a>引用的概念</h4><ul>
<li>变量名，本身是一段内存的引用，即别名(alias).引用可以看作一个已定义变量的别名。</li>
<li>引用的语法：Type &amp;name =var;</li>
<li>用法如下</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
	int a &#x3D; 10; &#x2F;&#x2F;c编译器分配4个字节内存，a内存空间的别名
	int &amp;b &#x3D; a; &#x2F;&#x2F;b就是a的别名
	a &#x3D; 11; &#x2F;&#x2F;直接赋值
	&#123;
		int *p &#x3D; &amp;a;
		*p &#x3D; 12;
		cout &lt;&lt; a &lt;&lt;endl;
	&#125;
	b &#x3D; 14;
	cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt;a &lt;&lt; &quot;, b &#x3D; &quot; &lt;&lt; b &lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ol>
<li>引用没有定义,是一种关系型声明。声明它和原有某一变量(实体)的关系。故而类型与原类型保持一致,且不分配内存。与被引用的变量有相同的地址。</li>
<li>声明的时候必须初始化,一经声明,不可变更。</li>
<li>可对引用,再次引用。多次引用的结果,是某一变量具有多个别名。</li>
<li>&amp;符号前有数据类型时,是引用。其它皆为取地址。</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(void)&#123;
int a,b;
int &amp;r &#x3D; a;
int &amp;r &#x3D; b; &#x2F;&#x2F;错误,不可更改原有的引用关系
float &amp;rr &#x3D; b;&#x2F;&#x2F;错误,引用类型不匹配 cout&lt;&lt;&amp;a&lt;&lt;&amp;r&lt;&lt;endl;&#x2F;&#x2F;变量与引用具有相&gt;同的地址。
int &amp;ra &#x3D; r;&#x2F;&#x2F;可对引用更次引用,表示a变量有两个别名,分别是r和 ra
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="引用作为函数参数"><a href="#引用作为函数参数" class="headerlink" title="引用作为函数参数"></a>引用作为函数参数</h4><ul>
<li>普通引用在声明时必须用其它的变量进行初始化，引用作为函数参数声明时不进行初始化。 </li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Teacher
&#123;
	char name[ 64];
    int age ;
&#125;;
void printfT(Teacher *pT)&#123;
cout&lt;&lt; pT-&gt;age &lt;&lt;endl;
&#125;
&#x2F;&#x2F;pT是t1的别名,相当于修改了t1
void printfT2(Teacher &amp;pT)&#123;
pT.age &#x3D; 33;
cout&lt;&lt;pT.age&lt;&lt;endl;
&#125;
&#x2F;&#x2F;pT和t1的是两个不同的变量
void printfT3(Teacher pT)&#123;
cout&lt;&lt;pT.age&lt;&lt;endl;
pT.age &#x3D; 45;&#x2F;&#x2F;只会修改pT变量,不会修改t1变量
&#125;
int main(void)&#123;
Teacher t1;
t1.age &#x3D; 35;
printfT(&amp;t1);
printfT2(t1); &#x2F;&#x2F;pT是t1的别名
printf( &quot;t1.age: %d \n&quot;, t1.age); &#x2F;&#x2F;33
printfT3(t1) ;&#x2F;&#x2F; pT是形参,t1 copy一份数据给pT
printf( &quot;t1.age:%d \n&quot;, t1.age); &#x2F;&#x2F;33
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="引用的意义"><a href="#引用的意义" class="headerlink" title="引用的意义"></a>引用的意义</h4><ul>
<li>引用作为其它变量的别名而存在，因此在一些场合可以代替指针</li>
<li>引用相对于指针来说具有更好的可读性和实用性</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//无法实现两数据的交换</span>
<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开辟了两个指针空间实现交换</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
void swap( int &amp;a, int &amp;b)&#123;
	int tmp;
	tmp &#x3D; a; 
    	a &#x3D; b;
    	b &#x3D; tmp;
&#125;
int main()&#123;
	int a &#x3D; 3,b &#x3D; 5;
	cout&lt;&lt; &quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    	swap(a,b);
	cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>C++中引入引用后,可以用引用解决的问题。避免用指针来解决。</li>
</ul>
<h4 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
int main()
&#123;
int a &#x3D; 10;
int &amp;b &#x3D; a; &#x2F;&#x2F;注意:单独定义的引用时，必须初始化。
b &#x3D; 11;
printf( &quot;a:%d \n&quot;, a) ;
printf(&quot;b:%d \n&quot;, b);
printf( &quot;&amp;a : %p\n&quot;, &amp;a);
printf(&quot;&amp;b: %p\n&quot;,&amp;b);
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>思考一：C++编译器定义引用后，背后做了什么</li>
<li>思考二：普通引用有自己的空间吗？</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
struct Teacher &#123;
int &amp;a;
int &amp;b;
&#125;;
int main()&#123;
printf(&quot;sizeof(Teacher) %d\n&quot;, sizeof( Teacher));
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>引用在C++中的内部实现是一个常指针<ul>
<li><code>Type&amp; name&lt;===&gt;Type* const name</code></li>
</ul>
</li>
<li>C++编译器在编译过程中使用常指针作为引用的内部实现，因此引用所占用的空间大小与指针相同。</li>
<li>从使用的角度，引用会让人误会其只是一个别名，没有自己的存储空间。这是C++为了实用性而做出的细节隐藏。</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func(int &amp;a)&#123;
a &#x3D; 5;
&#125;
void func(int *const a)&#123;
a &#x3D; 5;
&#125;
int main()i
int x &#x3D; 10;func(x);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>间接赋值的3各必要条件<br>1定义两个变量(一个实参一个形参)</p>
<p>2建立关联实参取地址传给形参</p>
<p>3 * p形参去间接的修改实参的值</p>
</blockquote>
<ul>
<li>引用在实现上，只不过是把∶间接赋值成立的三个条件的后两步和二为一.当实参传给形参引用的时候，只不过是c++编译器帮我们程序员手工取了一个实参地址，传给了形参引用（常量指针)。</li>
</ul>
<h4 id="引用作为函数的返回值（引用当左值）"><a href="#引用作为函数的返回值（引用当左值）" class="headerlink" title="引用作为函数的返回值（引用当左值）"></a>引用作为函数的返回值（引用当左值）</h4><blockquote>
<p>当函数返回值为引用时，<br>若返回栈变量:<br>不能成为其它引用的初始值（不能作为左值使用)</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">include &lt;iostream&gt;
using namespace std;
int getA1()
&#123;
	int a;
    a &#x3D; 10;
    return a;
&#125;
int&amp; getA2()&#123;
	int a;
    a &#x3D; 10;
    return a;
&#125;
int main(void)&#123;
int a1 &#x3D; 0;
    int a2 &#x3D; 0;
&#x2F;&#x2F;值拷贝
a1 &#x3D; getA1();
&#x2F;&#x2F;将一个引用赋给一个变量，会有拷贝动作
&#x2F;&#x2F;理解:编译器类似做了如下隐藏操作，a2 &#x3D; *(getA2())
a2 &#x3D; getA2();
&#x2F;&#x2F;将一个引用赋给另一个引用作为初始值，由于是栈的引用，内存非法
int &amp;a3 &#x3D; getA2();
cout &lt;&lt;&quot;a1 &#x3D; &quot; &lt;&lt;a1&lt;&lt;endl;
cout &lt;&lt;&quot;a2 &#x3D; &quot; &lt;&lt;a2&lt;&lt;endl;
cout &lt;&lt;&quot;a3 &#x3D; &quot; &lt;&lt;a3&lt;&lt;endl;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>当函数返回值为引用时，</p>
<p>若返回静态变量或全局变量</p>
<p>可以成为其他引用的初始值（可作为右值使用，也可作为左值使用)</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int getA1()
&#123;
static int a;
a &#x3D; 10;
return a;
&#125;
int&amp; getA2()&#123;
static int a;
a &#x3D; 10;
return a;
&#125;
int main(void)&#123;
int a1 &#x3D; 0;int a2 &#x3D; 0;
&#x2F;&#x2F;值拷贝
a1 &#x3D; getA1();
&#x2F;&#x2F;将一个引用赋给一个变量，会有拷贝动作
&#x2F;&#x2F;理解︰编译器类似做了如下隐藏操作，a2 &#x3D; *(getA2())
a2 &#x3D; getA2();
&#x2F;&#x2F;将一个引用赋给另一个引用作为初始值，由于是静态区域，内存合法
int &amp;a3 &#x3D; getA2();
cout &lt;&lt;&quot;a1 &#x3D; &quot; &lt;&lt;a1&lt;&lt;endl;
    cout &lt;&lt;&quot;a2 &#x3D; &quot; &lt;&lt;a2&lt;&lt;endl;
    cout &lt;&lt;&quot;a3 &#x3D; &quot; &lt;&lt;a3&lt;&lt;endl;
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>引用作为函数返回值，</p>
<p>如果返回值为引用可以当左值，</p>
<p>如果返回值为普通变量不可以当左值。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;函数当左值
&#x2F;&#x2F;返回变量的值
int func1()&#123;
static int a1 &#x3D; 10;
    return a1;
&#125;
&#x2F;&#x2F;返回变量本身，
int&amp; func2()&#123;
static int a2 &#x3D; 10;
    return a2;
&#125;
int main(void)&#123;
&#x2F;&#x2F;函数当右值
int c1 &#x3D; func1();
cout &lt;&lt; &quot;c1 &#x3D; &quot; &lt;&lt; c1 &lt;&lt;endl;
int c2 &#x3D; func2();&#x2F;&#x2F;函数返回值是一个引用,并且当右值
    cout &lt;&lt; &quot;c2 &#x3D; &quot; &lt;&lt; c2 &lt;&lt;endl;
&#x2F;&#x2F;函数当左值
&#x2F;&#x2F;func1() &#x3D; 100;l &#x2F;&#x2F; error
    func2() &#x3D; 100;
&#x2F;&#x2F;函数返回值是一个引用,并且当左值
c2 &#x3D; func2();
cout &lt;&lt; &quot;c2 &#x3D; &quot; &lt;&lt; c2 &lt;&lt;endl;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="指针引用"><a href="#指针引用" class="headerlink" title="指针引用"></a>指针引用</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Teacher
&#123;
char name[64];
    int age ;
&#125;;
&#x2F;&#x2F;在被调用函数获取资源
int getTeacher(Teacher **p)&#123;
	Teacher *tmp &#x3D;NULL;
    if (p &#x3D;&#x3D; NULL)&#123;return -1;&#125;
	tmp &#x3D; (Teacher *)malloc ( sizeof( Teacher) );
    if (tmp &#x3D;&#x3D;NULL)&#123;return -2;&#125;
	tmp-&gt;age &#x3D; 33;
&#x2F;&#x2F;p是实参的地址 *实参的地址去间接的修改实参的值
	*p &#x3D; tmp;
	return 0;
&#125;
&#x2F;&#x2F;指针的引用做函数参数
int getTeacher2(Teacher*&amp;myp)&#123;
&#x2F;&#x2F;给myp赋值相当于给main函数中的pT1赋值
	myp &#x3D; (Teacher * )malloc ( sizeof(Teacher));
    	if (myp &#x3D;&#x3D; NULL)&#123;return -1;&#125;
	myp-&gt;age &#x3D; 36;
	return 0;
&#125;
void FreeTeacher(Teacher *pT1)&#123;
if (pT1 &#x3D;&#x3D; NULL)&#123;
return ;&#125;
free(pT1);
&#125;
int main(void)&#123;
Teacher *pT1 &#x3D; NULL;
&#x2F;&#x2F;1 c语言中的二级指针
    getTeacher(&amp;pT1);
cout&lt;&lt; &quot;age: &quot;&lt;&lt;pT1-&gt;age&lt;&lt;endl;
    FreeTeacher(pT1);
&#x2F;&#x2F;2 c++中的引用(指针的引用)
&#x2F;&#x2F;引用的本质间接赋值后2个条件让c++编译器帮我们程序员做了。
getTeacher2(pT1);
cout&lt;&lt; &quot;age: &quot;&lt;&lt;pT1-&gt;age&lt;&lt;endl;
FreeTeacher(pT1);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const引用"><a href="#const引用" class="headerlink" title="const引用"></a>const引用</h4><ul>
<li>const引用有较多使用。它可以防止对象的值被随意修改。因而具有一些特性。</li>
<li>const 对象的引用必须是const的,将普通引用绑定到const对象是不合法的。这个原因比较简单。既然对象是const的,表示不能被修改,引用当然也不能修改,必须使用const引用。实际上，const int a=1;int &amp;b=a;这种写法是不合法的,编译不过。</li>
<li>const引用可使用相关类型的对象(常量,非同类型的变量或表达式)初始化。这个是const引用与普通引用最大的区别。const int &amp;a=2;是合法的。double x=3.14;const int &amp;b=a;也是合法的。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
&#x2F;&#x2F;普通引用
int a &#x3D; 10;
int &amp;b &#x3D; a;
cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt;endl;
&#x2F;&#x2F;常引用
int x &#x3D; 20;
const int &amp;y &#x3D; x;&#x2F;&#x2F;常引用是限制变量为只读不能通过y去修改x了
&#x2F;&#x2F;y &#x3D; 21;&#x2F;&#x2F; error
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const引用的原理"><a href="#const引用的原理" class="headerlink" title="const引用的原理"></a>const引用的原理</h4><ul>
<li>const 引用的目的是,禁止通过修改引用值来改变被引用的对象。const引用的初始化特性较为微妙,可通过如下代码说明:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double val &#x3D; 3.14;
const int &amp;ref &#x3D; val;
double &amp; ref2 &#x3D; val;
cout&lt;&lt;ref&lt;&lt;&quot; &quot;&lt;&lt;ref2&lt;&lt;endl;
val &#x3D; 4.14;
cout&lt;&lt;ref&lt;&lt;&quot; &quot;&lt;&lt;ref2&lt;&lt;endl;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>上述输出结果为3 3.14和3 4.14。因为ref是const的,在初始化的过程中已经给定值,不允许修改。而被引用的对象是val,是非const的,所以val的修改并未影响ref的值,而ref2的值发生了相应的改变。</li>
<li>那么,为什么非const的引用不能使用相关类型初始化呢?实际上,const引用使用相关类型对象初始化时发生了如下过程:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int temp &#x3D; val;
const int &amp;ref &#x3D; temp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>如果ref 不是const的,那么改变ref值,修改的是temp,而不是val。期望对ref的赋值会修改val的程序员会发现val实际并未修改。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int main(void)
&#123;
&#x2F;&#x2F;1&gt;用变量初始化 常引用
    int x1 &#x3D; 30;
const int &amp;y1 &#x3D; x1;&#x2F;&#x2F;用x1变量去初始化 常引用
&#x2F;&#x2F;2&gt;用字面量初始化常量引用
const int a &#x3D; 40;&#x2F;&#x2F;c++编译器把a放在符号表中
&#x2F;&#x2F;int &amp;m &#x3D; 41; &#x2F;&#x2F;error ，普通引用引用一个字面量请问字面量有没有内存地址
const int &amp;m &#x3D; 43;&#x2F;&#x2F;c++编译器会分配内存空间
				&#x2F;&#x2F;int temp &#x3D; 43
				&#x2F;&#x2F;const int &amp;m &#x3D; temp;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Teacher
&#123;
	char name[64];
    int age ;
&#125;;
void printTeacher( const Teacher &amp;myt)&#123;
&#x2F;&#x2F;常引用让实参变量拥有只读属性&#x2F;&#x2F; myt.age &#x3D; 33;
printf(&quot;myt.age: %d \n&quot;, myt.age);
&#125;
int main( void)&#123;
Teacher t1;
t1.age &#x3D; 36;
printTeacher(t1);
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结论:<br>1 ) const int &amp; e 相当于const int * const e</p>
<p>2）普通引用相当于int *const e</p>
<p>3）当使用常量（字面量）对const引用进行初始化时，C++编译器会为常量值分配空间，并将引用名作为这段空间的别名</p>
<p>4）使用字面量对const引用初始化后，将生成一个只读变量</p>
</blockquote>
<h3 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h3><ul>
<li>c语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去,避免了函数调用的开销。但是由于宏函数的处理发生在预处理阶段,缺失了语法检测和有可能带来的语意差错。</li>
</ul>
<h4 id="内联函数基本概念"><a href="#内联函数基本概念" class="headerlink" title="内联函数基本概念"></a>内联函数基本概念</h4><ul>
<li>C++提供了inline关键字，实现了真正的内嵌</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
inline void func( int a)&#123;
a &#x3D; 20;
cout &lt;&lt; a &lt;&lt;endl;
&#125;
int main(void)&#123;
func(10);&#x2F;*
&#x2F;编译器将内联函数的函数体直接展开&#123;
a &#x3D; 20;
cout &lt;&lt; a &lt;&lt;endl;
&#125;
*&#x2F;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>特点<ol>
<li>内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直接忽略内联请求。</li>
<li>C++编译器直接将函数体插入在函数调用的地方。</li>
<li>内联函数<strong>没有普通函数调用时的额外开销</strong>(压栈，跳转，返回)。</li>
<li>内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型等）。</li>
<li><strong>内联函数由编译器处理</strong>，<strong>直接将编译后的函数体插入调用的地方</strong>，<strong>宏代码片段由预处理器处理</strong>，进行简单的文本替换，没有任何编译过程。</li>
<li>C++中内联编译的限制︰<ul>
<li>不能存在任何形式的循环语句</li>
<li>不能存在过多的条件判断语句</li>
<li>函数体不能过于庞大</li>
<li>不能对函数进行取址操作</li>
<li>函数内联声明必须在调用语句之前</li>
</ul>
</li>
<li>编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优势只是省去了函数调用时压栈，跳转和返回的开销。因此，<strong>当函数体的执行开销远大于压栈，跳转和返回所用的开销时，那么内联将无意义</strong>。</li>
</ol>
</li>
</ul>
<h4 id="内联函数VS宏函数"><a href="#内联函数VS宏函数" class="headerlink" title="内联函数VS宏函数"></a>内联函数VS宏函数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string.h&gt;
using namespace std;
#if 0
优点:内嵌代码,辟免压栈与出栈的开销
缺点:代码替换,易使生成代码体积变大,易产生逻辑错误。
#endif
#define SQR(x)((×)*(x))
#if 0
优点:高度抽象,避免重复开发
缺点:压栈与出栈,带来开销#endif
inline int sqr(int x)&#123;
return x*x;
&#125;
int main()&#123;
int i&#x3D;0;
    while(i&lt;5)&#123;
&#x2F;&#x2F;printf( &quot;%d\n&quot; ,SQR( i++));
        printf( &quot;%d \n&quot;,sqr(i++) );
&#125;
return ;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="内联函数总结"><a href="#内联函数总结" class="headerlink" title="内联函数总结"></a>内联函数总结</h4><blockquote>
<p>优点:避免调用时的额外开销(入栈与出栈操作)<br>代价:由于内联面数的函数体在代码段中会出现多个“副本”,因此会增加代码段的空间。</p>
<p>本质:以牺牲代码段空间为代价,提高程序的运行时间的效率。</p>
<p>适用场景:函数体很“小”,且被“频繁”调用。</p>
</blockquote>
<h3 id="默认参数和占位参数"><a href="#默认参数和占位参数" class="headerlink" title="默认参数和占位参数"></a>默认参数和占位参数</h3><ul>
<li>通常情况下,函数在调用时,形参从实参那里取得值。对于多次调用用一函数同一实参时,C++给出了更简单的处理办法。给形参以默认值,这样就不用从实参那里取值了。</li>
</ul>
<h4 id="单个默认参数"><a href="#单个默认参数" class="headerlink" title="单个默认参数"></a>单个默认参数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;1若你填写参数,使用你填写的,不填写默认void myPrint(int x &#x3D; 3)
&#123;
cout&lt;&lt;&quot;x : “&lt;&lt;x&lt;&lt; endl;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多个默认参数"><a href="#多个默认参数" class="headerlink" title="多个默认参数"></a>多个默认参数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;2在默认参数规则，如果默认参数出现，那么右边的都必须有默认参数float volume(float length，float weight &#x3D; 4,float high &#x3D; 5)&#123;
return length*weight*high;
&#125;
int main()i
float v &#x3D; volume( 10);
float v1 &#x3D; volume(10,20);
float v2 &#x3D; volume(10,20,30);
cout&lt;&lt;v&lt;&lt;endl;
cout&lt;&lt;v1&lt;&lt;endl;
cout&lt;&lt;v2&lt;&lt;endl;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="默认参数规则"><a href="#默认参数规则" class="headerlink" title="默认参数规则"></a>默认参数规则</h4><ul>
<li>只有参数列表后面部分的参数才可以提供默认参数值</li>
<li>一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参数都必须使用默认参数值</li>
</ul>
<h4 id="占位参数"><a href="#占位参数" class="headerlink" title="占位参数"></a>占位参数</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;*
函数占位参数
占位参数只有参数类型声明，而没有参数名声明一般情况下，在函数体内部无法使用占位参数*&#x2F;
int func( int a, int b, int)&#123;
return a + b;
&#125;
int main()&#123;
func(1，2); &#x2F;&#x2F;error,必须把最后一个占位参数补上。
&#x2F;&#x2F;好悲剧的语法-_-!
printf( &quot;func(1，2，3) &#x3D; %d\n&quot;, func(1，2，3));
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
&#x2F;*
可以将占位参数与默认参数结合起来使用意义
为以后程序的扩展留下线索
兼容C语言程序中可能出现的不规范写法*&#x2F;
&#x2F;&#x2F;C++可以声明占位符参数，占位符参数一般用于程序扩展和对c代码的兼容
int func2(int a, int b, int &#x3D; 0)
&#123;
return a + b;
&#125;
int main()&#123;
&#x2F;&#x2F;如果默认参数和占位参数在一起，都能调用起来func2(1，2);
func2(1，2，3);
return 0;
&#125;
&#x2F;*
结论:如果默认参数和占位参数在一起，都能调用起来*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul>
<li>函数重载(Function Overload)∶用同一个函数名定义不同的函数，当函数名和不同的参数搭配时函数的含义不同。</li>
</ul>
<h4 id="函数重载规则"><a href="#函数重载规则" class="headerlink" title="函数重载规则"></a>函数重载规则</h4><blockquote>
<p>1.函数名相同</p>
<p>2.参数个数不同，参数的类型不同，参数的顺序不同，均可以构成重载</p>
<p>3.返回值类型不同则不可以构成重重</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func(int a); &#x2F;&#x2F; ok
void func(char a); &#x2F;&#x2F;ok
void func( char a,int b); &#x2F;&#x2F; ok
void func(int a, char b); &#x2F;&#x2F;ok
char func(int a); &#x2F;&#x2F;与第一个函数有冲突<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="调用准则"><a href="#调用准则" class="headerlink" title="调用准则"></a>调用准则</h4><blockquote>
<p>1.严格匹配，找到则调用</p>
<p>2.通过隐式转换寻求一个匹配，找到则调用</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
void print( double a)&#123;
cout&lt;&lt;a&lt;&lt;endl;
&#125;
void print(int a)&#123;
cout&lt;&lt;a&lt;&lt;endl;
&#125;
int main()&#123;
print(1); &#x2F;&#x2F;print(int)
print(1.1); &#x2F;&#x2F;print(double)
print(&#39;a&#39;); &#x2F;&#x2F;print(int)
print(1.11f); &#x2F;&#x2F;print( double)
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>编译器调用重载函数的准则:<ol>
<li>将所有同名函数作为候选者</li>
<li>尝试寻找可行的候选函数</li>
<li>精确匹配实参</li>
<li>通过默认参数能够匹配实参</li>
<li>通过默认类型转换匹配实参</li>
<li>匹配失败</li>
<li>最终寻找到的可行候选函数不唯一，则出现二义性，编译失败。</li>
<li>无法匹配所有候选者，函数未定义，编译失败。</li>
</ol>
</li>
</ul>
<h4 id="重载的底层实现"><a href="#重载的底层实现" class="headerlink" title="重载的底层实现"></a>重载的底层实现</h4><ul>
<li>C++利用name mangling(倾轧)技术,来改名函数名,区分参数不同的同名函数。</li>
<li>实现原理:用vcifl d表示 void char int float long double及其引用。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func( char a) ;
&#x2F;&#x2F;func_c(char a)
void func(char a, int b, double c); 
&#x2F;&#x2F;func_cid(char a, int b, double c)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数重载与函数默认参数"><a href="#函数重载与函数默认参数" class="headerlink" title="函数重载与函数默认参数"></a>函数重载与函数默认参数</h4><ul>
<li>一个函数,不能既作重载,又作默认参数的函数。当你少写一个参数时,系统无法确认是重载还是默认参数。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
int func(int a, int b, int c &#x3D; 0)&#123;
return a * b * c;
&#125;
int func(int a, int b)&#123;
return a + b;
&#125;
int func(int a)&#123;
return a;
&#125;
int main()&#123;
int c &#x3D; 0;
c &#x3D; func(1，2); &#x2F;&#x2F;error．存在二义性，调用失败，编译不能通过
printf(&quot;c &#x3D; %d\n&quot;， c);
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数重载与函数指针相结合"><a href="#函数重载与函数指针相结合" class="headerlink" title="函数重载与函数指针相结合"></a>函数重载与函数指针相结合</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*
函数重载与函数指针
当使用重载函数名对函数指针进行赋值时
根据重载规则挑选与函数指针参数列表一致的候选者严格匹配候选者的函数类型与函数指针的函数类型*&#x2F;
#include &lt;iostream&gt;
using namespace std;
int func(int x)&#x2F;&#x2F;int(int a)
&#123;
return x;
&#125;
int func(int a, int b)&#123;
return a + b;
&#125;
int func( const char* s)&#123;
return strlen(s);
&#125;
typedef int(*PFUNC)(int a); &#x2F;&#x2F;int(*)(int a)
typedef int(*PFUNC2)(int a， int b); &#x2F;&#x2F;int(*)(int a， int b)
int main()
&#123;
int c &#x3D; 0;
PFUNC p &#x3D; func;
c &#x3D; p(1);
printf( &quot;c &#x3D; %d\n&quot;,c);
PFUNC2 p2 &#x3D; func;
c &#x3D; p2(1，2);
printf(&quot;c &#x3D; %d\n&quot;,c);
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数指针基本语法"><a href="#函数指针基本语法" class="headerlink" title="函数指针基本语法"></a>函数指针基本语法</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;方法一:
&#x2F;&#x2F;声明一个函数类型
typedef void (myTypeFunc)(int a,int b);
&#x2F;&#x2F;定义一个函数指针
myTypeFunc *myfuncp &#x3D; NULL;&#x2F;&#x2F;定义一个函数指针这个指针指向函数的入口地址
&#x2F;&#x2F;方法二:
&#x2F;&#x2F;声明一个函数指针类型
typedef void (*myPTypeFunc)(int a,int b) ;&#x2F;&#x2F;声明了一个指针的数据类型
&#x2F;&#x2F;定义一个函数指针
myPTypeFunc fp &#x3D; NULL;&#x2F;&#x2F;通过函数指针类型定义了一个函数指针，
&#x2F;&#x2F;方法三:
&#x2F;&#x2F;定义一个函数指针变量
void (*myVarPFunc)(int a, int b);
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="函数重载总结"><a href="#函数重载总结" class="headerlink" title="函数重载总结"></a>函数重载总结</h4><blockquote>
<p>重载函数在本质上是相互独立的不同函数。</p>
<p>函数的函数类型是不同的</p>
<p>函数返回值不能作为函数重载的依据</p>
<p>函数重载是由函数名和参数列表决定的。</p>
</blockquote>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><h4 id="成员变量与成员函数"><a href="#成员变量与成员函数" class="headerlink" title="成员变量与成员函数"></a>成员变量与成员函数</h4><h3 id="封装与访问控制"><a href="#封装与访问控制" class="headerlink" title="封装与访问控制"></a>封装与访问控制</h3><h4 id="从struct说起"><a href="#从struct说起" class="headerlink" title="从struct说起"></a>从struct说起</h4><ul>
<li>当单一变量无法完成描述需求的时候,结构体类型解决了这一问题。可以将多个类型打包成一体,形成新的类型。这是c语言中封装的概念。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
struct Date
&#123;
int year;
int month;
int day;
&#125;;
void init(Date &amp;d)&#123;
cout&lt;&lt; &quot;year,month,day : &quot;&lt;&lt;endl;
cin&gt;&gt;d.year&gt;&gt;d.month&gt;&gt;d.day;
&#125;
void print(Date &amp; d)&#123;
cout&lt;&lt;&quot;year month day&quot; &lt;&lt;endl;
cout&lt;&lt;d.year&lt;&lt;&quot; : &quot;&lt;&lt;d.month&lt;&lt;&quot; : &quot;&lt;&lt;d.day&lt;&lt;endl;
    
bool isLeapYear(Date &amp; d)
&#123;
if((d.year%4&#x3D;&#x3D;0&amp;&amp; d.year%100 !&#x3D; 0)||d.year%400 &#x3D;&#x3D; 0)
	return true;
else
	return false;
&#125;
int main()
Date d;
init(d);
print(d);
if(isLeapYear(d))
cout&lt;&lt;&quot;leap year&quot;&lt;&lt;endl;
else
cout&lt;&lt; &quot;not leap year&quot;&lt;&lt;endl;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>对C语言中结构体的操作，都是通过外部函数来实现的。比如</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void init(Date &amp;d) ;
void print(Date &amp; d);
bool isLeapYear(Date &amp; d);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="封装的访问属性"><a href="#封装的访问属性" class="headerlink" title="封装的访问属性"></a>封装的访问属性</h4><ul>
<li>struct 中所有行为和属性都是public的(默认)。</li>
<li>C++中的class可以指定行为和属性的访问方式。</li>
<li>封装,可以达到,对内开放数据,对外屏蔽数据,对外提供接口。达到了信息隐蔽的功能。</li>
<li>比如我们用struct封装的类,即知其接口,又可以直接访问其内部数据,这样却没有达到信息隐蔽的功效。而class则提供了这样的功能,屏蔽内部数据,对外开放接口。</li>
</ul>
<h4 id="用class去封装带行为的类"><a href="#用class去封装带行为的类" class="headerlink" title="用class去封装带行为的类"></a>用class去封装带行为的类</h4><ul>
<li>class封装的本质,在于将数据和行为,绑定在一起然后能过对象来完成操作。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
using namespaec std;
class Date&#123;
    public:
    void init(Data &amp;d);
    void print(Data &amp;d);
    bool isLeapYear(Date &amp;d);
    private:
    int year;
    int month;
    int day;
&#125;;
void Data::init(Data &amp;d)&#123;
    cout&lt;&lt;&quot;year,month,day:&quot;&lt;&lt;endl;
    cin&gt;&gt;d.year&gt;&gt;d.month&gt;&gt;d.day;
&#125;
void Date::print(Date &amp; d)&#123;
cout&lt;&lt;&quot;year month day&quot;&lt;&lt;endl;
cout&lt;&lt;d.year&lt;&lt;&quot; : &quot;&lt;&lt;d.month&lt;&lt; &quot; : &quot;&lt;&lt;d.day&lt;&lt;endl;
&#125;
bool Date::isLeapYear(Date &amp; d)&#123;
if((d.year%4&#x3D;&#x3D; &amp;&amp; d.year%100 !&#x3D; 0)||d.year%400 &#x3D;&#x3D; 0)
	return true;
else
	return false;
&#125;
int main()&#123;
Date d;
d.init(d);
d.print(d);
if(d.isLeapYear(d))
cout&lt;&lt; &quot;leap year&quot;&lt;&lt;endl;
	else
cout&lt;&lt; &quot;not leap year&quot;&lt;&lt;endl;
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Date类访问自己的成员,可以不需要传引用的方式</li>
<li>封装有2层含义(把属性和方法进行封装对属性和方法进行访问控制)</li>
<li>Public修饰成员变量和成员函数可以在类的内部和类的外部被访问。Private修饰成员变量和成员函数只能在类的内部被访问。</li>
</ul>
<blockquote>
<p>struct和class关键字区别</p>
<p>在用struct定义类时，所有成员的默认属性为public</p>
<p>在用class定义类时，所有成员的默认属性为private</p>
</blockquote>
<h3 id="面向对象编程案例练习"><a href="#面向对象编程案例练习" class="headerlink" title="面向对象编程案例练习"></a>面向对象编程案例练习</h3><h4 id="求圆的周长和面积"><a href="#求圆的周长和面积" class="headerlink" title="求圆的周长和面积"></a>求圆的周长和面积</h4><blockquote>
<p>数据描述:<br>                半径，周长，面积均用实型数表示<br>数据处理:<br>                输入半径r ;</p>
<p>​                计算周长= 2 * Π * r ;</p>
<p>​                计算面积=Π * r^2 ;</p>
<p>​                输出半径，周长，面积;</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;不用结构化
&#x2F;&#x2F;count the girth and area of circle
#include &lt;iostream&gt;
using namespace std;
int main ( void)
&#123;
double r, girth，area ;
const double PI &#x3D; 3.1415 ;
cout &lt;&lt; &quot;Please input radius : \n&quot; ;&#x2F;&#x2F;操作符重载
cin &gt;&gt; r ; &#x2F;&#x2F;输入
girth &#x3D; 2 *PI * r ;
area &#x3D; PI* r * r ;
cout &lt;&lt; &quot;radius &#x3D; &quot; &lt;&lt; r &lt;&lt; endl ;
cout &lt;&lt; &quot;girth &#x3D; &quot; &lt;&lt; girth &lt;&lt; endl ;
cout &lt;&lt; &quot;area &#x3D; &quot; &lt;&lt; area &lt;&lt; endl ;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;用面向对象的方法
#include&lt;iostream&gt;
using namespace std;
class Circle
&#123;
private:
	double radius ; &#x2F;&#x2F;成员变量
public : &#x2F;&#x2F;类的访问控制
	void set_Radius( double r )&#123;
	radius &#x3D; r;&#125;&#x2F;&#x2F;成员函数
	double Get_Radius()&#123;
	return radius;&#125;&#x2F;&#x2F;通过成员函数设置成员变量
    double Get_Girth()&#123;
	return2 *3.14f *radius;&#125;&#x2F;&#x2F;通过成员函数获取成员变量
	double Get_Area()&#123;
	return3.14f *radius *radius;
    &#125;
&#125;;
int main(void)
    &#123;
Circle A，B ; &#x2F;&#x2F;用类定义对象
A.Set_Radius( 6.23 ) ;&#x2F;&#x2F;类的调用
	cout &lt;&lt; &quot;A.Radius &#x3D; &quot; &lt;&lt; A.Get_Radius() &lt;&lt; endl ;
    cout &lt;&lt; &quot;A.Girth &#x3D; &quot; &lt;&lt;A.Get_Girth() &lt;&lt; endl ;
    cout &lt;&lt; &quot;A.Area &#x3D; &quot; &lt;&lt; A.Get_Area() &lt;&lt; endl ;
    B.Set_Radius( 10.5 ) ;
	cout &lt;&lt; &quot;B.radius &#x3D; &quot; &lt;&lt; B.Get_Radius() &lt;&lt; endl ;
    cout &lt;&lt;&quot;B.Girth&#x3D;&quot; &lt;&lt; B.Get_Girth( ) &lt;&lt; endl ;
	cout &lt;&lt;&quot;B.Area &#x3D; &quot; &lt;&lt;B.Get_Area() &lt;&lt; endl ;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="C语言和C-语言的关系"><a href="#C语言和C-语言的关系" class="headerlink" title="C语言和C++语言的关系"></a>C语言和C++语言的关系</h4><ul>
<li><p><img src="E:\Computer\myblog\hexo\source_posts\C-基础\20220703184846-16568453665731.png" alt="20220703184846"></p>
</li>
<li><p>C语言实在实践过程中逐步完善起来的</p>
</li>
</ul>
<blockquote>
<p>没有深思熟虑的设计过程</p>
<p>使用时存在很多“灰色地带”</p>
<p>残留量过多低级语言的特征</p>
<p>直接利用指针进行内存操作</p>
</blockquote>
<ul>
<li>C语言+面向对象方法论===&gt;Objective C/C++</li>
</ul>
<blockquote>
<p>C语言和C++并不是对立的竞争关系<br>C++是C语言的加强，是一种更好的C语言<br>C++是以C语言为基础的，并且完全兼容C语言的特性</p>
</blockquote>
<ul>
<li>学习C++并不会影响原有的C语言知识，相反会根据加深对C的认知;</li>
<li>学习C++可以接触到更多的软件设计方法，并带来更多的机会。</li>
<li>C++是一种更强大的C，通过学习C++能够掌握更多的软件设计方法.</li>
<li>C++是Java/C#/D等现代开发语言的基础，学习C++后能够快速掌握这些语言.</li>
<li>C++是各大知名软件企业挑选人才的标准之一.</li>
</ul>
<h4 id="综合面向对象案例分析"><a href="#综合面向对象案例分析" class="headerlink" title="综合面向对象案例分析"></a>综合面向对象案例分析</h4><blockquote>
<p>面向对象练习1</p>
<p>设计立方体类(cube)，求出立方体的面积和体积</p>
<p>求两个立方体，是否相等（全局面数和成员面数）</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
using namespace std;

&#x2F;&#x2F;立方体类
class Cube
&#123;
public:
	void setABC(int a, int b, int c)
	&#123;
		m_a &#x3D; a;
		m_b &#x3D; b;
		m_c &#x3D; c;
	&#125;
	int getArea()
	&#123;
		return (m_a*m_b) * 2 + (m_a*m_c) * 2 + (m_b*m_c) * 2;
	&#125;

	int getVolume()
	&#123;
		return (m_a*m_b*m_c);
	&#125;

	int getA()
	&#123;
		return m_a;
	&#125;

	int getB()
	&#123;
		return m_b;
	&#125;

	int getC()
	&#123;
		return m_c;
	&#125;

	&#x2F;&#x2F;同类之间无私处
	bool judgeCube(Cube &amp;another)
	&#123;
		if (m_a &#x3D;&#x3D; another.m_a &amp;&amp;
			m_b &#x3D;&#x3D; another.getB() &amp;&amp;
			m_c &#x3D;&#x3D; another.getC()) &#123;
			return true;
		&#125;
		else &#123;
			return false;
		&#125;
	&#125;
private:
	int m_a;
	int m_b;
	int m_c;
&#125;;

&#x2F;&#x2F;全局函数
bool judgeCube(Cube &amp;c1, Cube &amp;c2)
&#123;
	if (c1.getA() &#x3D;&#x3D; c2.getA() &amp;&amp;
		c1.getB() &#x3D;&#x3D; c2.getB() &amp;&amp;
		c1.getC() &#x3D;&#x3D; c2.getC()) &#123;
		return true;
	&#125;
	else &#123;
		return false;
	&#125;
&#125;

int main(void)
&#123;
	Cube c1;
	c1.setABC(10, 20, 30);

	Cube c2;
	c2.setABC(10, 20, 30);

	cout &lt;&lt; &quot;c1 的体积是&quot; &lt;&lt; c1.getVolume() &lt;&lt; endl;
	cout &lt;&lt; &quot;c1 的面积是&quot; &lt;&lt; c1.getArea() &lt;&lt; endl;

	if (judgeCube(c1, c2) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;相等&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;不相等&quot; &lt;&lt; endl;
	&#125;
	cout &lt;&lt; &quot; ------ &quot; &lt;&lt; endl;

	if (c1.judgeCube(c2) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;相等&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;不相等&quot; &lt;&lt; endl;
	&#125;


	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>面向对象练习2<br>设计一个圆形类（AdvCircle)，和一个点类（ Point)，</p>
<p>计算点在圆内部还是圆外部:</p>
<p>求点和圆的关系(圆内和圆外)</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;

&#x2F;&#x2F;点类
class Point
&#123;
public:
	void setXY(int x, int y)
	&#123;
		m_x &#x3D; x;
		m_y &#x3D; y;
	&#125;

	int getX()
	&#123;
		return m_x;
	&#125;

	int getY()
	&#123;
		return m_y;
	&#125;
private:
	int m_x;
	int m_y;
&#125;;

&#x2F;&#x2F;圆类
class Circle
&#123;
public:
	void setXY(int x, int y)
	&#123;
		x0 &#x3D; x;
		y0 &#x3D; y;
	&#125;

	void setR(int r)
	&#123;
		m_r &#x3D; r;
	&#125;

	&#x2F;&#x2F;提供一个判断点是否在圆内
	&#x2F;&#x2F;true 在内部
	&#x2F;&#x2F;false 在外部
	bool judgePoint(Point &amp;p)
	&#123;
		int dd;

		dd &#x3D; (p.getX() - x0)*(p.getX() - x0) + (p.getY() - y0)*(p.getY() - y0);

		if (dd &gt; m_r*m_r) &#123;
			return false;
		&#125;
		else &#123;
			return true;
		&#125;
	&#125;


private:
	int x0;
	int y0;
	int m_r;
&#125;;

int main(void)
&#123;
	Circle c;
	c.setXY(2, 2);
	c.setR(4);

	Point p;
	p.setXY(8, 8);

	if (c.judgePoint(p) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;圆的内部&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;圆的外部&quot; &lt;&lt; endl;
	&#125;



	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>面向对象练习3<br>对于第二个案例，类的声明和类的实现分开</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;Circle.h
#pragma once
#include &quot;Point.h&quot;

class Circle
&#123;
public:
	void setXY(int x, int y);

	void setR(int r);

	&#x2F;&#x2F;提供一个判断点是否在圆内
	&#x2F;&#x2F;true 在内部
	&#x2F;&#x2F;false 在外部
	bool judgePoint(Point &amp;p);

private:
	int x0;
	int y0;
	int m_r;
&#125;;

&#x2F;&#x2F;Circle.cpp
#include &quot;Circle.h&quot;

void Circle::setXY(int x, int y)
&#123;
	x0 &#x3D; x;
	y0 &#x3D; y;
&#125;

void Circle::setR(int r)
&#123;
	m_r &#x3D; r;
&#125;

&#x2F;&#x2F;提供一个判断点是否在圆内
&#x2F;&#x2F;true 在内部
&#x2F;&#x2F;false 在外部
bool Circle::judgePoint(Point &amp;p)
&#123;
	int dd;

	dd &#x3D; (p.getX() - x0)*(p.getX() - x0) + (p.getY() - y0)*(p.getY() - y0);

	if (dd &gt; m_r*m_r) &#123;
		return false;
	&#125;
	else &#123;
		return true;
	&#125;
&#125;

&#x2F;&#x2F;Point.h
#pragma once


class Point
&#123;
public:
	void setXY(int x, int y);

	int getX();

	int getY();
private:
	int m_x;
	int m_y;
&#125;;

&#x2F;&#x2F;Point.cpp
#include &quot;Point.h&quot;


void Point::setXY(int x, int y)
&#123;
	m_x &#x3D; x;
	m_y &#x3D; y;
&#125;

int  Point::getX()
&#123;
	return m_x;
&#125;

int Point::getY()
&#123;
	return m_y;
&#125;

&#x2F;&#x2F;main.cpp
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;Circle.h&quot;
#include &quot;Point.h&quot;

using namespace std;

int main(void)
&#123;
	Circle c;
	c.setR(4);
	c.setXY(2, 2);

	Point p;
	p.setXY(8, 8);

	if (c.judgePoint(p) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;nei&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;wai&quot; &lt;&lt; endl;
	&#125;
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>判断两个圆是否相交</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

&#x2F;&#x2F;点类
class Point
&#123;
public:
	void setXY(int x, int y)
	&#123;
		m_x &#x3D; x;
		m_y &#x3D; y;
	&#125;


	&#x2F;&#x2F;计算两点距离的方法
	double pointDistance(Point &amp;another)
	&#123;
		int d_x &#x3D; m_x - another.m_x;
		int d_y &#x3D; m_y - another.m_y;

		double dis &#x3D; sqrt(d_x*d_x + d_y*d_y);

		return dis;
	&#125;
private:
	int m_x;
	int m_y;
&#125;;

class Circle
&#123;
public:
	void setR(int r)
	&#123;
		m_r &#x3D; r;
	&#125;

	void setXY(int x, int y)
	&#123;
		p0.setXY(x, y);
	&#125;

	&#x2F;&#x2F;判断圆是否跟我相交
	bool isIntersection(Circle &amp;another)
	&#123;
		&#x2F;&#x2F;两个半径之和
		int rr &#x3D; m_r + another.m_r;
		&#x2F;&#x2F;两圆心之间距离
		double dis &#x3D; p0.pointDistance(another.p0);

		if (dis &lt;&#x3D; rr) &#123;
			&#x2F;&#x2F;相交
			return true;
		&#125;
		else &#123;
			return false;
		&#125;
	&#125;
private:
	int m_r;
	Point p0;
&#125;;

int main(void)
&#123;
	Circle c1, c2;

	int x, y, r;

	cout &lt;&lt; &quot;请输入第一个圆的半径&quot; &lt;&lt; endl;
	cin &gt;&gt; r;
	c1.setR(r);
	cout &lt;&lt; &quot;请输入第一个圆的x&quot; &lt;&lt; endl;
	cin &gt;&gt; x;
	cout &lt;&lt; &quot;请输入第一个圆的y&quot; &lt;&lt; endl;
	cin &gt;&gt; y;
	c1.setXY(x, y);


	cout &lt;&lt; &quot;请输入第2个圆的半径&quot; &lt;&lt; endl;
	cin &gt;&gt; r;
	c2.setR(r);
	cout &lt;&lt; &quot;请输入第2个圆的x&quot; &lt;&lt; endl;
	cin &gt;&gt; x;
	cout &lt;&lt; &quot;请输入第2个圆的y&quot; &lt;&lt; endl;
	cin &gt;&gt; y;
	c2.setXY(x, y);

	if (c1.isIntersection(c2) &#x3D;&#x3D; true) &#123;
		cout &lt;&lt; &quot;相交&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;不想交&quot; &lt;&lt; endl;
	&#125;

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="对象的构造和析构"><a href="#对象的构造和析构" class="headerlink" title="对象的构造和析构"></a>对象的构造和析构</h3><h4 id="如果没有构造函数"><a href="#如果没有构造函数" class="headerlink" title="如果没有构造函数"></a>如果没有构造函数</h4><ul>
<li>如果不用构造函数初始化，该怎么办︰<ul>
<li>为每个类都提供一个public的initialize函数;</li>
<li>对象创建后立即调用initialize函数进行初始化。</li>
</ul>
</li>
<li>缺点<ul>
<li>initialize只是一个普通的函数，必须显示的调用</li>
<li>一旦由于失误的原因，对象没有初始化，那么结果将是不确定的没有初始化的对象，其内部成员变量的值是不定的。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
public:
void init(int a, int b)&#123;
	m_a &#x3D; a;
	m_b &#x3D; b;
&#125;
private:
	int m_a;
    int m_b;
&#125;;
int main(void)&#123;
Test t1;
int a &#x3D; 10;int b &#x3D; 20;
t1.init(a, b);
Test tArray[3];
&#x2F;&#x2F;手动调用显示初始化函数
tArray[0].init(0，0);
tArray[1].init(0，0);
tArray[2].init(0，0);
Test t21;
&#x2F;&#x2F;手动调用显示初始化函数
    t21.init(0，0);
Test t22;
&#x2F;&#x2F;手动调用显示初始化函数
    t22.init(0，0);
Test t23;
&#x2F;&#x2F;手动调用显示初始化函数
    t23.init(0，0);
&#x2F;&#x2F;在这种场景之下显示的初始化方案显得很蹩脚
    Test tArray2[3] &#x3D; &#123;t21，t22,t23&#125;;
&#x2F;&#x2F;在这种场景之下,满足不了,编程需要
Test tArray3[1999] &#x3D; &#123;t21,t22,t23&#125;;
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>所以C++对类提供了一个给对象的初始化方案，就是构造函数。</li>
</ul>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul>
<li>定义<ul>
<li>C++中的类可以定义与类名相同的特殊成员函数，这种与类名相同的成员函数叫做构造函数.</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class类名&#123;
	类名(形式参数)&#123;
	构造体
	&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
    A(形参)&#123;
        
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>调用<ul>
<li>自动调用∶一般情况下C++编译器会自动调用构造函数.</li>
<li>手动调用∶在一些情况下则需要手工调用构造函数.</li>
</ul>
</li>
</ul>
<h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><ul>
<li>定义<ul>
<li>C++中的类可以定义一个特殊的成员函数清理对象，这个特殊的成员函数叫做析构函数.</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class类名&#123;
~类名()&#123;析构体&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
	~A()&#123;
	
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>规则:<br>1对象销毁时,自动调用。完成销毁的善后工作。</p>
<p>2无返值,与类名同。无参。不可以重载与默认参数</p>
</blockquote>
<ul>
<li>析构函数的作用,并不是删除对象,而在对象销毁前完成的一些清理工作。</li>
</ul>
<h4 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Test&#123;
public:
&#x2F;&#x2F;无参数构造函数
    Test()&#123;
        ;
    &#125;
&#x2F;&#x2F;带参数的构造函数
    Test(int a, int b)&#123;
        ;
    &#125;
&#x2F;&#x2F;赋值构造函数
	Test(const Test &amp;obj)
    &#123;
        ;
    &#125;
	private:
	int a;int b;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无参构造函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
	public:
&#x2F;&#x2F;无参数构造函数
    Test()
    &#123;
		a &#x3D; 0;b &#x3D; 0;
		cout &lt;&lt;&quot;Test()无参构造函数执行&quot;&lt;&lt;endl;
    &#125;
	private:
	int a;int b;
&#125;;
int main(void)&#123;
	Test t;&#x2F;&#x2F;调用无参构造函数
    return 0;
    &#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有参数构造函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
private:
int a;
public:
&#x2F;&#x2F;带参数的构造函数
    Test(int a)
    &#123;
        cout &lt;&lt;&quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt;endl;
	&#125;
	Test( int a, int b)&#123;
		cout &lt;&lt;&quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; &quot;, b &#x3D; &quot; &lt;&lt; b &lt;&lt;endl;
	&#125;
&#125;;
int main()&#123;
Test t1(10);
&#x2F;&#x2F;调用有参构造函数Test( int a)
Test t2(10,20);
&#x2F;&#x2F;调用有参构造函数Test(int a, int b)
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>拷贝构造函数<ul>
<li>由己存在的对象,创建新对象。也就是说新对象,不由构造器来构造,而是由拷贝构造器来完成。拷贝构造器的格式是固定的。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class类名
&#123;
	类名(const类名&amp; another)
	&#123;
		拷贝构造体
	&#125;
&#125;
class A&#123;
    A(const A&amp; another)&#123;
        
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用拷贝构造函数的几种场合</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
	public:
		Test()&#x2F;&#x2F;无参构造函数&#123;
			cout&lt;&lt;&quot;我是无参构造函数，被调用了&quot;&lt;&lt;endl;
		&#125;
		Test(int a)l&#x2F;&#x2F;带参数的构造函数&#123;
			m_a &#x3D; a;
		&#125;
		Test(const Test &amp;another_obj)&#x2F;&#x2F;拷贝构造函数&#123;
		cout&lt;&lt;&quot;我也是构造函数，我是通过另外一个对象，来初始化我自己&quot;&lt;&lt;endl;
		m_a &#x3D; another_obj.m_a;
		&#125;
		~Test()&#123;
		cout&lt;&lt;&quot;我是析构函数，自动被调用了&quot;&lt;&lt;endl;
		&#125;
		void printT()&#123;
		cout &lt;&lt; &quot;m_a &#x3D; &quot; &lt;&lt;m_a &lt;&lt;endl;
		&#125;
	private:
		int m_a;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;拷贝构造函数的第一个应用场景
int main()&#123;
	Test t2&#x3D;t1;&#x2F;&#x2F;用对象t1来初始化对象t2
	t2.printT();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//拷贝构造函数的第二个应用场景</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    Test <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Test <span class="token function">t2</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t2<span class="token punctuation">.</span><span class="token function">printT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;拷贝构造函数的第三个应用场景
#include&lt;iostream&gt;
using namespace std;
class Location&#123;
    public:
    &#x2F;&#x2F;带参数的构造函数
    Location(int xx&#x3D;0,int yy&#x3D;0)&#123;
        X&#x3D;xx;
        Y&#x3D;yy;
        cout&lt;&lt;&quot;Constructor Object.&quot;&lt;&lt;endl;
    &#125;
    &#x2F;&#x2F;copy构造函数 完成对象的初始化
    Location(const Location &amp;obj)&#123;
        X&#x3D;obj.X;
        Y&#x3D;obj.Y;
        cout&lt;&lt;&quot;Copy Constructor.&quot;&lt;&lt;endl;
    &#125;
    ~Location()&#123;
        cout&lt;&lt;X&lt;&lt;&quot;,&quot;&lt;&lt;Y&lt;&lt;&quot;Obejct destroyed.&quot;&lt;&lt;endl;
    &#125;
    int GetX()&#123;
        return X;
    &#125;
    int GetY()&#123;
        return Y;
    &#125;
    
   private:
    	int X;
    	int Y;
&#125;;
void func(Location p)&#x2F;&#x2F;会执行p &#x3D; b 的操作，p会调用copy构造函数进行初始化
&#123;
    cout &lt;&lt;&quot;func begin&quot; &lt;&lt;endl;
	cout&lt;&lt;p.GetX( )&lt;&lt;endl;
	cout &lt;&lt;&quot;func end&quot; &lt;&lt;endl;
&#125;
void test()&#123;
	Location a(1,2); &#x2F;&#x2F;对象a 调用带参数的构造函数进行初始化
    Location b &#x3D; a;&#x2F;&#x2F;对象b 调用copy构造函数进行初始化
    cout &lt;&lt;&quot;----&quot; &lt;&lt;endl;
	func(b);
	&#x2F;&#x2F; b实参取初始化形参p,会调用copy构造函数
&#125;
int main(void)&#123;
	test();
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Location
&#123;
    public:
	&#x2F;&#x2F;带参数的构造函数
	Location( int xx &#x3D; 0 , int yy &#x3D; 0 )&#123;
		X&#x3D; xx ;Y &#x3D; yy ;
		cout &lt;&lt; &quot;Constructor Object.&quot; &lt;&lt;endl;
	&#125;
    &#x2F;&#x2F; copy构造函数完成对象的初始化
	Location( const Location &amp; obj) &#x2F;&#x2F; copy构造函数
    &#123;
		x &#x3D; obj.X;
        Y &#x3D; obj.Y;	
		cout &lt;&lt;&quot;Copy Constructor.&quot; &lt;&lt;endl;
	&#125;
	~Location()&#123;
		cout &lt;&lt; X &lt;&lt; &quot;,&quot; &lt;&lt; Y &lt;&lt; &quot; object destroyed.&quot; &lt;&lt; endl ;
	&#125;
	int Getx () &#123;
		return x;
	&#125;
	int GetY ) &#123;
		return Y;
	&#125;
	private :
	int X;
    int Y;
&#125;;
&#x2F;&#x2F;g函数返回一个元素
&#x2F;&#x2F;结论1 ∶函数的返回值是一个元素（复杂类型的)，返回的是一个新的匿名对象(所以会调用匿名对象类的copy构造函数)
&#x2F;&#x2F;
&#x2F;&#x2F;结论2:有关匿名对象的去和留
&#x2F;&#x2F;如果用匿名对象初始化另外一个同类型的对象，匿名对象转成有名对象
&#x2F;&#x2F;如果用匿名对象赋值给另外一个同类型的对象，匿名对象被析构
&#x2F;&#x2F;
&#x2F;&#x2F;设计编译器的大牛们:
&#x2F;&#x2F;我就给你返回一个新对象(没有名字匿名对象)
Location g()&#123;
	Location temp(1，2);
    return temp;
&#125;
void test1()&#123;
g();
&#125;
void test2()&#123;
&#x2F;&#x2F;用匿名对象初始化m 此时c++编译器直接把匿名对转成m;(扶正）从匿名转成有名字了m
&#x2F;&#x2F;就是将这个匿名对象起了名字m,他们都是同一个对象
Location m &#x3D; g();
printf(&quot;匿名对象,被扶正,不会析构掉\n&quot; );
    cout&lt;&lt;m.GetX()&lt;&lt;endl; 
&#125;
void test3()&#123;
&#x2F;&#x2F;用匿名对象赋值给m2后，匿名对象被析构
    Location m2(1，2);
	m2 &#x3D; g();
	printf(&quot;因为用匿名对象&#x3D;给m2，匿名对象,被析构\n&quot;);
    cout&lt;&lt;m2.GetX( )&lt;&lt;endl;
&#125;
int main(void)&#123;
	test1();
    test2();
    test3();
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>默认构造函数<ul>
<li>默认无参构造函数<ul>
<li>当类中没有定义构造函数时，编译器默认提供一个无参构造函数，并且其函数体为空</li>
</ul>
</li>
<li>默认拷贝构造函数<ul>
<li>当类中没有定义拷贝构造函数时，编译器默认提供一个默认拷贝构造函数，简单的进行成员变量的值复制</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="构造函数规则"><a href="#构造函数规则" class="headerlink" title="构造函数规则"></a>构造函数规则</h4><blockquote>
<p>规则:<br>1系统提供默认的拷贝构造器。一经实现,不复存在。</p>
<p>2系统提供的时等位拷贝,也就是所谓的浅浅的拷贝。</p>
<p>3要实现深拷贝,必须要自定义。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
&#x2F;&#x2F;当类中定义了拷贝构造函数时，c++编译器不会提供无参数构造函数
&#x2F;&#x2F;当类中定义了有参数构造函数是,c++编译器不会提供无参数构造函数
&#x2F;&#x2F;在定义类时，只要你写了构造函数,则必须要用
class Test
&#123;
public:
	Test(const Test&amp; obj) &#x2F;&#x2F;copy构造函数作用:用一个对象初始化另外一个对象
    &#123;
		a &#x3D; obj.a + 100;b &#x3D; obj.b + 100;
	&#125;
#if	0
	Test()
    &#123;
	&#125;
#endif
	void printT()&#123;
	cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot;b: &quot;&lt;&lt;b&lt;&lt; endl;&#125;
	private:
		int a;
    	int b;
&#125;;
int main( void)&#123;
	Test t1; &#x2F;&#x2F;error，没有合适的构造函数
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><ul>
<li>系统提供默认的拷贝构造器,一经定义不再提供。但系统提供的默认拷贝构造器是等位拷贝,也就是通常意义上的浅拷贝。如果类中包含的数据元素全部在栈上,浅拷贝也可以满足需求的。但如果堆上的数据,则会发生多次析构行为。</li>
<li><img src="http://qiniu.orangew.cn/img/20220703213915.png" alt="20220703213915" style="zoom:33%;" /></li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Name
&#123;
	public:
		Name ( const char *myp)&#123;
		m_len &#x3D; strlen(myp);
		m_p &#x3D;(char *) malloc(m_len + 1); &#x2F;&#x2F;
   		strcpy(m_p, myp);
	&#125;
&#x2F;&#x2F; Name obj2 &#x3D; obj1;
&#x2F;&#x2F;解决方案:手工的编写拷贝构造函数使用深copy
    	Name( const Name&amp; obj1)
		&#123;
			m_len &#x3D; obj1.m_len;
			m_p &#x3D; (char * )malloc(m_len + 1);
        	strcpy(m_p,obj1.m_p);
		&#125;
		~Name()&#123;
		if (m_p !&#x3D; NULL)&#123;
			free(m_p);
            m_p &#x3D; NULL;
            m_len &#x3D; 0;
		&#125;
	&#125;
    private:
		char *m_p ;
    	int m_len;
&#125;;
&#x2F;&#x2F;对象析构的时候出现coredump
void test()&#123;
	Name obj1( &quot;abcdefg&quot; );
	Name obj2 &#x3D; obj1;&#x2F;&#x2F;C++编译器提供的默认的copy构造函数惇浅拷贝
    Name obj3(&quot;abc&quot; );
&#x2F;&#x2F;obj3 &#x3D; obj2;&#x2F;&#x2F;当执行&#x3D;操作的时候，C++编译器也是使用的默认拷贝构造函数，也是浅拷贝
&#125;
int main(void)&#123;
test();return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="构造函数初始化列表"><a href="#构造函数初始化列表" class="headerlink" title="构造函数初始化列表"></a>构造函数初始化列表</h4><ul>
<li>如果我们有一个类成员，它本身是一个类或者是一个结构，而且这个成员它只有一个带参数的构造函数，没有默认构造函数。这时要对这个类成员进行初始化，就必须调用这个类成员的带参数的构造函数，</li>
<li>如果没有初始化列表，那么他将无法完成第一步，就会报错。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class A &#123;
	public:
	A(int a) &#123;
	m_a &#x3D; a;
&#125;
	private:
	int m_a;
&#125;;
class B &#123;
    public:
	B(int b) &#123;
	m_b &#x3D; b;
&#125;
	private:
	int m_b;
	A obja; &#x2F;&#x2F;当A的对象是B类的一个成员的时候，在初始化B对象的时候，
	&#x2F;&#x2F;无法给B分配空间，因为无法初始化A类对象
&#125;;
int main( void)&#123;
A obja(10);
B objb(20) ; &#x2F;&#x2F; error,
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class ABC&#123;
public:
	ABC( int a, int b, int c)&#123;
		this-&gt;a &#x3D; a;
        this-&gt;b &#x3D; b;
        this-&gt;c &#x3D; c;
		printf( &quot;a: %d ,b: %d , c: %d \n&quot;, a, b, c);
        printf( &quot;ABC construct ..\n&quot; );
&#125;
	~ABC()&#123;
		printf( &quot;a: %d ,b: %d , c: %d \n&quot;, a, b,c);
        printf( &quot;~ABC() ..\n&quot; );
&#125;
	private:
		int a;
    	int b;
    	int c;
&#125;;
class MyD&#123;
public:
	MyD():abc1(1,2,3),abc2(4,5,6),m(100)&#123;
	cout&lt;&lt;&quot;MyD()&quot;&lt;&lt;endl;&#125;
    ~MyD()&#123;
	cout&lt;&lt;&quot;~MyD()&quot;&lt;&lt;endl;
	&#125;
private:
	ABC abc1;
    ABC abc2;
    const int m;
&#125;;
int main()&#123;
	MyD myD;
    return 0;
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当类成员中含有一个const对象时，或者是一个引用时，他们也必须要通过成员初始化列表进行初始化，因为这两种对象要在声明后马上初始化，而在构造函数中，做的是对他们的赋值，这样是不被允许的。</li>
<li>初始化列表中的初始化顺序与声明顺序有关,与前后赋值顺序无关。</li>
</ul>
<h4 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h4><ul>
<li>分析下列代码构造器和析构器的执行顺序</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include	 &lt;iostream&gt;
using namespace	std;

class	ABCD
&#123;
public:
	ABCD(int	a, int	b, int	c)
	&#123;
		_a &#x3D; a;
		_b &#x3D; b;
		_c &#x3D; c;
		printf(&quot;ABCD()	construct,	a: %d,b: %d,c: %d		 \n&quot;, _a, _b, _c);
	&#125;
	~ABCD()
	&#123;
		printf(&quot;~ABCD()	construct,a: %d,b: %d,c: %d		 \n&quot;, _a, _b, _c);
	&#125;
	int	getA()
	&#123;
		return	_a;
	&#125;
private:
	int	_a;
	int	_b;
	int	_c;
&#125;;

class	MyE
&#123;
public:

	MyE() :abcd1(1, 2, 3), abcd2(4, 5, 6), m(100)
	&#123;
		cout &lt;&lt; &quot;MyE()&quot; &lt;&lt; endl;
	&#125;
	~MyE()
	&#123;
		cout &lt;&lt; &quot;~MyE()&quot; &lt;&lt; endl;
	&#125;

	MyE(const	MyE	&amp;	obj) :abcd1(7, 8, 9), abcd2(10, 11, 12), m(100)
	&#123;
		printf(&quot;MyD(const	MyD	&amp;	obj) \n&quot;);
	&#125;
public:
	ABCD	abcd1;	 &#x2F;&#x2F;c++编译器不知道如何构造abc1
	ABCD	abcd2;
	const int	m;
&#125;;

int	doThing(MyE	mye1)&#x2F;&#x2F;mye1.拷贝构造(main::myE)
&#123;
	printf(&quot;doThing()	mye1.abc1.a: %d \n&quot;, mye1.abcd1.getA());
	return 0;
&#125;
int	run()
&#123;
	MyE	myE;
	doThing(myE);
	return 0;
&#125;

int	run2()
&#123;
	printf(&quot;run2	start.. \n&quot;);
	&#x2F;&#x2F;ABCD(400, 500, 600);	 &#x2F;&#x2F;临时对象的⽣命周期		
	ABCD	abcd	&#x3D;	ABCD(100,	200,	300);
	printf(&quot;run2	end\n&quot;);
	return 0;
&#125;

int	main(void)
&#123;
	run2();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>构造函数再调用构造函数，分析以下代码结果</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include	 &lt;iostream&gt;
using namespace	std;

&#x2F;&#x2F;构造中调⽤构造是危险的⾏为
class	MyTest
&#123;
public:
	MyTest(int	a, int	b, int	c)
	&#123;
		_a &#x3D; a;
		_b &#x3D; b;
		_c &#x3D; c;
	&#125;
	MyTest(int	a, int	b)
	&#123;
		_a &#x3D; a;
		_b &#x3D; b;
		MyTest(a, b, 100);&#x2F;&#x2F;创建一个匿名对象	
		&#x2F;&#x2F;
	&#125;
	~MyTest()
	&#123;
		printf(&quot;MyTest~: %d,	 %d,	 %d\n&quot;, _a, _b, _c);
	&#125;
	int	getC()
	&#123;
		return	_c;
	&#125;
	void	setC(int	val)
	&#123;
		_c &#x3D; val;
	&#125;

private:
	int	_a;
	int	_b;
	int	_c;
&#125;;

int	main()
&#123;
	MyTest	t1(1, 2);
	printf(&quot;c: %d\n&quot;, t1.getC());	 &#x2F;&#x2F;请问c的值是？
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220703221844.png" alt="20220703221844"></p>
<h3 id="对象动态建立和释放new和delete"><a href="#对象动态建立和释放new和delete" class="headerlink" title="对象动态建立和释放new和delete"></a>对象动态建立和释放new和delete</h3><ul>
<li>在软件开发过程中，常常需要动态地分配和撤销内存空间，例如对动态链表中结点的插入与删除。在C语言中是利用库函数malloc和free来分配和撤销内存空间的。C++提供了较简便而功能较强的运算符new和delete来取代malloc和free函数。</li>
<li>new和delete是运算符，不是函数，因此执行效率高。</li>
<li>虽然为了与c语言兼容，C++仍保留malloc和free函数，但建议用户不用malloc和free函数，而用new和delete运算符。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">new int;
&#x2F;&#x2F;开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)
new int(100);
&#x2F;&#x2F;开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址
new char[10];
&#x2F;&#x2F;开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址
new int[5][4];
&#x2F;&#x2F;开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址
float *p&#x3D;new float (3.14159);
&#x2F;&#x2F;开辟一个存放单精度数的空间，并指定该实数的初值为&#x2F;&#x2F;3.14159，将返回的该空间的地址赋给指针变量p
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>​    new运算符动态分配堆内存<br>​    使用形式:</p>
<p>​    指针变量=new类型(常量) ;<br>​    指针变量=new类型[表达式];<br>​    作用:从堆分配一块“类型”大小的存储空间,返回首地址</p>
<p>​    其中:“常量”是初始化值，可缺省<br>​    创建数组对象时，不能为对象指定初始值</p>
<p>​    delete运算符释放已分配的内存空间<br>​    使用形式:<br>​    delete 指针变量﹔</p>
<p>​    delete[]指针变量﹔<br>​    其中:“指针变量”必须是一个new返回的指针</p>
</blockquote>
<ul>
<li>用new分配数组空间时不能指定初值。如果由于内存不足等原因而无法正常分配空间，则new会返回一个空指针NULL，用户可以根据该指针的值判断分配空间是否成功。</li>
</ul>
<blockquote>
<p>malloc不会调用类的构造函数,而new会调用类的构造函数</p>
<p>Free不会调用类的析构函数，而delete会调用类的析构函数</p>
</blockquote>
<h3 id="静态成员变量和成员函数"><a href="#静态成员变量和成员函数" class="headerlink" title="静态成员变量和成员函数"></a>静态成员变量和成员函数</h3><ul>
<li>在C++中,静态成员是属于整个类的而不是某个对象,静态成员变量只存储一份供所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实现多个对象之间的数据共享不会破坏隐藏的原则,保证了安全性还可以节省内存。</li>
<li>类的静态成员,属于类,也属于对象,但终归属于类。</li>
</ul>
<h4 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h4><blockquote>
<p>//声明<br>static数据类型成员变量; //在类的内部<br>//初始化<br>数据类型类名::静态数据成员=初值;//在类的外部<br>//调用<br>类名::静态数据成员类对象.静态数据成员</p>
</blockquote>
<blockquote>
<p>案例：生成一个Box类，要求所在Box的高度height一致</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Box
&#123;
	public:
		Box(int 1, int w) : length( l),width(w) &#123;
		&#125;
	int volume()&#123;
		return length * width * height;
	&#125;
	static int height;
    int length;
	int width;
&#125;;
int Box::height &#x3D; 5;
int main()
&#123;
&#x2F;&#x2F;cout&lt;&lt;sizeof( Box )&lt;&lt;endl;
    &#x2F;&#x2F;Box b(2,3);
&#x2F;&#x2F;cout&lt;&lt;sizeof(b)&lt;&lt;endl;
cout&lt;&lt;Box::height&lt;&lt;endl;
Box b(1,1);
cout&lt;&lt;b.height&lt;&lt;endl;
cout&lt;&lt;b.volume( )&lt;&lt;endl;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1,static成员变量实现了同类对象间信息共享。</p>
<p>2.static成员类外存储,求类大小,并不包含在内。</p>
<p>3.static成员是命名空间属于类的全局变量,存储在data 区。</p>
<p>4,static成员只能类外初始化。</p>
<p>5,可以通过类名访问(无对象生成时亦可),也可以通过对象访问。</p>
</blockquote>
<h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><blockquote>
<p>//声明<br>static函数声明<br>//调用<br>类名::函数调用</p>
<p>类对象.函数调用</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class student
&#123;
public:
Student(int n,int a,float s) :num(n),age(a),score(s)&#123;&#125;
    void total()&#123;
		count++;
		sum +&#x3D; score;
	&#125;
	static float average();
private:
	int num;
    int age;
	float score;
	static float sum;
    static int count;
&#125;;
float Student:: sum &#x3D; 0;
int Student:: count &#x3D; 0;
float Student::average() &#123;
return sum&#x2F; count;
&#125;
int main()
Sudent stu[3]&#x3D; &#123;
	Sudent(1001,14,70),
    Sudent(1002,15,34),
    Sudent(1003,16,90)&#125;;
for(int i&#x3D;0 i&lt;3; i++) &#123;
	stu[i].total();
&#125;
cout&lt;&lt;Student::average()&lt;&lt;endl;
return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>静态成员函数的意义,不在于信息共享,数据沟通,而在于管理静态数据成员，完成对静态数据成员的封装。</li>
<li>静态成员函数只能访问静态数据成员。原因:非静态成员函数,在调用时this指针被当作参数传进。而静态成员函数属于类,而不属于对象,没有 this指针。</li>
</ul>
<h3 id="编译器对属性和方法的处理机制"><a href="#编译器对属性和方法的处理机制" class="headerlink" title="编译器对属性和方法的处理机制"></a>编译器对属性和方法的处理机制</h3><h4 id="静态成员占多大"><a href="#静态成员占多大" class="headerlink" title="静态成员占多大"></a>静态成员占多大</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class c1
&#123;
	public:
	int i; &#x2F;&#x2F;4
    int j;&#x2F;&#x2F;4
    int k;l&#x2F;4
&#125;; &#x2F;&#x2F;12
class C2&#123;
	public:
		int i;
    	int j;
    	int k;
	static int m;	&#x2F;&#x2F;4
	public:
	int getk() const &#123; return k; &#125;&#x2F;&#x2F; 4
    void setk( int val) &#123;k &#x3D; val; &#125;&#x2F;&#x2F;4
&#125;;
struct s1&#123;
	int i;
    int j;
    int k;; &#x2F;&#x2F;12
struct s2&#123;
	int i;
    int j;
    int k;
	static int m;
&#125;; &#x2F;&#x2F;12?
int main()&#123;
	cout &lt;&lt; &quot;c1: &quot; &lt;&lt; sizeof(C1) &lt;&lt;endl;
    cout &lt;&lt;&quot;c1: &quot; &lt;&lt; sizeof(C2) &lt;&lt;endl;
	cout &lt;&lt;&quot;c1:&quot; &lt;&lt; sizeof(S1) &lt;&lt;endl;
	cout &lt;&lt;&quot;c1: &quot; &lt;&lt; sizeof(S2) &lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="处理机制"><a href="#处理机制" class="headerlink" title="处理机制"></a>处理机制</h4><ul>
<li>C++类对象中的成员变量和成员函数是分开存储的</li>
<li>成员变量︰<ul>
<li>普通成员变量∶存储于对象中，与struct变量有相同的内存布局和字节对齐方式</li>
<li>静态成员变量∶存储于全局数据区中</li>
</ul>
</li>
<li>成员函数:存储于代码段中。</li>
<li>C++编译器对类的成员的内部处理机制类似如下</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
&#125;
using namespace std;
class Test&#123;
    private:
    int ml;
    public:
    Test(int i):ml(i)&#123;&#125;
    int getI()&#123;
        return ml;
    &#125;
    static void Print()&#123;
        printf(&quot;This is class Test.\n&quot;);
    &#125;
&#125;;
int main()&#123;
Test a(10);
a.getI();
Test::Print();
a.Print();
&#125;

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;
    struct Test&#123;
        int ml;
    &#125;;
	void Test_initialize(Test * pThis,int i)&#123;
        pThis-&gt;ml&#x3D;i;
    &#125;
	int Test_getI(Test*pThis)&#123;
        return pThis-&gt;ml;
    &#125;
	void Test_Print()&#123;
        printf(&quot;This is class Test.\n&quot;);
    &#125;
		Test a;
		Test_initialize(&amp;a,10);
		Test_getI(&amp;a);
		Test_Print();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>1、C++类对象中的成员变量和成员函数是分开存储的。C语言中的内存四区模型仍然有效!</p>
<p>2、C++中类的普通成员函数都隐式包含一个指向当前对象的this指针。</p>
<p>3、静态成员函数、成员变量属于类</p>
<p>4、静态成员函数与普通成员函数的区别</p>
<p>静态成员函数不包含指向具体对象的指针</p>
<p>普通成员函数包含一个指向具体对象的指针</p>
</blockquote>
<h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h4><ul>
<li>成员函数隐含定义this指针接受调用对象的地址</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void setXY(int a,int b)&#123;x&#x3D;a;y&#x3D;b;&#125;
void setXY(simple * const this,int a,int b)&#123;this-&gt;x&#x3D;a;this-&gt;y&#x3D;b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test
&#123;
	public:
	Test(int a, int b) &#x2F;&#x2F;---&gt; Test(Test *this,int a, int b)
    &#123;
	this-&gt;a &#x3D; a;
    this-&gt; b &#x3D; b;
    &#125;
void printT()&#123;
cout&lt;&lt; &quot;a: &quot; &lt;&lt;a &lt;&lt;endl;
cout&lt;&lt; &quot;b: &quot; &lt;&lt; this-&gt;b &lt;&lt;endl;
&#125;
	protected:
    private:
	int a;
    int b;
&#125;;
int main(void)&#123;
	Test t1(1，2);&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&gt; Test(&amp;t1，1，2);
    t1.printT();&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&gt; printT(&amp;t1)
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>(1)︰若类成员函数的形参和类的属性，名字相同，通过this指针来解决。</p>
<p>(2)︰类的成员函数可通过const修饰。</p>
</blockquote>
<h4 id="全局函数与成员函数"><a href="#全局函数与成员函数" class="headerlink" title="全局函数与成员函数"></a>全局函数与成员函数</h4><ol>
<li>把全局函数转化成成员函数，通过this指针隐藏左操作数<br><code>Test add(Test &amp;t1,Test &amp;t2)===》Test add(Test &amp;t2)</code></li>
<li>把成员函数转换成全局函数，多了一个参数<br><code>void printAB()===》void printAB(Test *pthis)</code></li>
<li>函数返回元素和返回引用</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Test&amp; add(Test &amp;t2)&#x2F;&#x2F;*this &#x2F;&#x2F;函数返回引用
&#123;
	this-&gt;a &#x3D; this-&gt;a + t2.getA();
    this-&gt;b &#x3D; this-&gt;b + t2.getB();
	return *this; &#x2F;&#x2F;*操作让this指针回到元素状态
&#125;
Test add2(Test &amp;t2)&#x2F;&#x2F;*this &#x2F;&#x2F;函数返回元素
&#123;
	&#x2F;&#x2F;t3是局部变量
	Test t3(this-&gt;a+t2.getA(),this-&gt;b+t2.getB()) ;
    return t3;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="强化练习"><a href="#强化练习" class="headerlink" title="强化练习"></a>强化练习</h3><blockquote>
<p>某商店经销一种货物。货物购进和卖出时以箱为单位，各箱的重量不一样，因此，商店需要记录目前库存的总重量。现在用C++模拟商店货物购进和卖出的情况。</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;


using namespace std;


class Goods
&#123;
public:
	Goods()
	&#123;
		weight &#x3D; 0;
		next &#x3D; NULL;
		cout &lt;&lt; &quot;创建了一个重量为&quot; &lt;&lt; weight &lt;&lt; &quot;的货物&quot; &lt;&lt; endl;
	&#125;

	Goods(int w) &#123;
		&#x2F;&#x2F;需要创建一个w的货物，并且仓库加上这个重量
		weight &#x3D; w;
		next &#x3D; NULL;
		total_weight +&#x3D; w;
		cout &lt;&lt; &quot;创建了一个重量为&quot; &lt;&lt; weight &lt;&lt; &quot;的货物&quot; &lt;&lt; endl;
	&#125;

	~Goods() &#123;
		&#x2F;&#x2F;仓库减少这个货物的重量
		cout &lt;&lt; &quot;删除了一箱重量是&quot; &lt;&lt; weight &lt;&lt; &quot;的货物&quot; &lt;&lt; endl;
		total_weight -&#x3D; weight;
	&#125;


	static int get_total_weight()
	&#123;
		return total_weight;
	&#125;

	Goods *next;
private:
	int weight;&#x2F;&#x2F;重量
	static int total_weight;&#x2F;&#x2F;仓库的总重量
&#125;;

int Goods::total_weight &#x3D; 0;


void buy(Goods * &amp;head, int w)
&#123;
	&#x2F;&#x2F;创建一个货物 重量是w
	Goods *new_goods &#x3D; new Goods(w);

	if (head &#x3D;&#x3D; NULL) &#123;
		head &#x3D; new_goods;
	&#125;
	else &#123;
		new_goods-&gt;next &#x3D; head;
		head &#x3D; new_goods;
	&#125;

&#125;

void sale(Goods * &amp;head)
&#123;
	if (head &#x3D;&#x3D; NULL) &#123;
		cout &lt;&lt; &quot;仓库中已经没有货物了。。&quot; &lt;&lt; endl;
		return;
	&#125;

	Goods *temp &#x3D; head;
	head &#x3D; head-&gt;next;

	delete temp;
	cout &lt;&lt; &quot;saled.&quot; &lt;&lt; endl;
&#125;



int main(void)
&#123;
	int choice &#x3D; 0;
	Goods *head &#x3D; NULL;
	int w;

	do &#123;
		cout &lt;&lt; &quot;1 进货&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;2 出货&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;0 退出&quot; &lt;&lt; endl;

		cin &gt;&gt; choice;
		switch (choice)
		&#123;
		case 1:
			&#x2F;&#x2F;进货
			cout &lt;&lt; &quot;请输出要创建货物的重量&quot; &lt;&lt; endl;
			cin &gt;&gt; w;
			buy(head, w);
			break;
		case 2:
			&#x2F;&#x2F;出货
			sale(head);
			break;
		case 0:
			&#x2F;&#x2F;退出
			return 0;
		default:
			break;
		&#125;

		cout &lt;&lt; &quot;当前仓库的总重量是&quot;&lt;&lt;Goods::get_total_weight() &lt;&lt; endl;

	&#125; while (1);
	
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>数组类封装<br>目标︰解决实际问题，训练构造函敬、copy构造函数等，</p>
<p>为操作符重载做准备</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;MyArray.h
#pragma once
#include &lt;iostream&gt;

using namespace std;

class MyArray
&#123;
public:
	MyArray();
	MyArray(int len);
	MyArray(const MyArray &amp;another);
	~MyArray();

	void setData(int index, int data);
	int getData(int index);
	int getLen();

	void operator&#x3D;(const MyArray&amp; another);
private:
	int len;
	int *space;
&#125;;

&#x2F;&#x2F;MyArray.c

#include &quot;MyArray.h&quot;

MyArray::MyArray()
&#123;
	cout &lt;&lt; &quot;MyArray()...&quot; &lt;&lt; endl;
	this-&gt;len &#x3D; 0;
	this-&gt;space &#x3D; NULL;
&#125;

MyArray::MyArray(int len)
&#123;
	if (len &lt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; 0;
		return;
	&#125;
	else &#123;
		this-&gt;len &#x3D; len;

		&#x2F;&#x2F;给space开辟空间
		this-&gt;space &#x3D; new int[this-&gt;len];
		cout &lt;&lt; &quot;MyArray::MyArray(int len) ...&quot; &lt;&lt; endl;
	&#125;
&#125;
MyArray::MyArray(const MyArray &amp;another)
&#123;
	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::MyArray(const MyArray &amp;another) ...&quot; &lt;&lt; endl;

	&#125;
&#125;
MyArray::~MyArray()
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		delete[]this-&gt;space;
		this-&gt;space &#x3D; NULL;
		len &#x3D; 0;
		cout &lt;&lt; &quot;MyArray::~MyArray() ...&quot; &lt;&lt; endl;
	&#125;
&#125;

void MyArray::setData(int index, int data)
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		this-&gt;space[index] &#x3D; data;
	&#125;
&#125;
int MyArray::getData(int index)
&#123;
	return this-&gt;space[index];
&#125;
int MyArray::getLen()
&#123;
	return this-&gt;len;
&#125;

void MyArray::operator&#x3D;(const MyArray&amp; another)
&#123;
	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::operator&#x3D;(const MyArray&amp; another) ...&quot; &lt;&lt; endl;

	&#125;
&#125;

&#x2F;&#x2F;main.c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;MyArray.h&quot;

using namespace std;

int main(void)
&#123;

	MyArray array1(10);&#x2F;&#x2F;开辟10元素的数组

	&#x2F;&#x2F;赋值操作
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		array1.setData(i, i + 10);
	&#125;

	cout &lt;&lt; &quot;--------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;array1:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		cout &lt;&lt; array1.getData(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;

	MyArray array2 &#x3D; array1;
	cout &lt;&lt; &quot;array2:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array2.getLen(); i++) &#123;
		cout &lt;&lt; array2.getData(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;
	
	MyArray array3;
	array3 &#x3D; array1;


	cout &lt;&lt; &quot;array3:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array3.getLen(); i++) &#123;
		cout &lt;&lt; array3.getData(i) &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><ul>
<li>采用类的机制后实现了数据的隐藏与封装,类的数据成员一般定义为私有成员,成员函数一般定义为公有的,依此提供类与外界间的通信接口。但是,有时需要定义一些函数这些函数不是类的一部分,但又需要频繁地访问类的数据成员,这时可以将这些函数定义为该函数的友元函数。除了友元函数外,还有友元类,两者统称为友元。友元的作用是提高了程序的运行效率(即减少了类型检查和安全性检查等都需要时间开销),但它破坏了类的封装性和隐藏性,使得非成员函数可以访问类的私有成员。</li>
<li>友元可以是一个函数,该函数被称为友元函数;友元也可以是一个类,该类被称为友元类。</li>
<li>同类对象间无私处</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">MyString::MyString( const MyString &amp; other)&#123;
	int len &#x3D; strlen(other._str);
    this-&gt;_str &#x3D; new char[ len+1];
    strcpy(this-&gt;_str,other._str);
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>异类对象间有友元</li>
</ul>
<h4 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h4><ul>
<li>友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外的普通函数它不属于任何类,但需要在类的定义中加以声明,声明时只需在友元的名称前加上关键字friend,其格式如下:</li>
<li>friend 类型 函数名(形式参数);</li>
<li>全局函数作友元函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;\
#include&lt;cmath&gt;
using namespace std;
class Point&#123;
	public:
	Point( double xx, double yy)&#123;
	x &#x3D; xx;
    y &#x3D; yy;
    &#125;
	void Getxy();
	friend double Distance(Point &amp;a,Point &amp;b);
	private:
	double x,y;
&#125;;
void Point::Getxy()&#123;
cout &lt;&lt; &quot;(&quot; &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; &quot;)&quot;&lt;&lt; endl;
&#125;
double Distance(Point &amp;a，Point &amp;b)&#123;
	double dx &#x3D; a.x - b.x;
    double dy &#x3D; a.y - b.y;
return sqrt( dx*dx + dy*dy ) ;
&#125;
int main(void)
&#123;
Point p1(3.0，4.0)，p2(6.0，8.0);p1.Getxy();
p2.Getxy();
double d &#x3D; Distance(p1，p2);
cout &lt;&lt; &quot;Distance is &quot; &lt;&lt; d &lt;&lt; endl;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>类成员函数作友元函数</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cmath&gt;
using namespace std;
class Point;
&#x2F;&#x2F;前向声明,是一种不完全型声明,即只需提供类名(无需提供类实现)即可。仅可用于声明指针和引用。
class ManagerPoint&#123;
	public:
		double Distance(Point &amp;a，Point &amp;b);
&#125;;
class Point&#123;
	public:
		Point( double xx,double yy)&#123;
		x &#x3D; xx;y &#x3D; yy;&#125;
		void Getxy();
	friend double ManagerPgint::Distanse(Point 8a,Point &amp;b);
    private:
		double x,y;
&#125;;
void Point::Getxy()&#123;
cout &lt;&lt; “(”&lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; &quot;)&quot;&lt;&lt; endl;
&#125;
double ManagerPoint::Distance(Point &amp;a，Point &amp;b) &#123;
double dx &#x3D; a.x - b.x;
double dy &#x3D; a.y - b.y;
return sqrt( dx*dx + dy*dy);
&#125;
int main(void)&#123;
Point p1(3.0，4.0),p2(6.0，8.0);
    p1.Getxy();
	p2.Getxy();
	ManagerPoint mp;
	float d &#x3D; mp.Distance(p1,p2);
	cout &lt;&lt; &quot;Distance is &quot; &lt;&lt; d&lt;&lt; endl;
	return 0;
&#125;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="友元对象"><a href="#友元对象" class="headerlink" title="友元对象"></a>友元对象</h4><ul>
<li>友元类的所有成员函数都是另一个类的友元函数,都可以访问另一个类中的隐藏信息(包括私有成员和保护成员)。</li>
<li>当希望一个类可以存取另一个类的私有成员时,可以将该类声明为另一类的友元类。定义友元类的语句格式如下:</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">friend class 类名;
其中:friend 和 class是关键字,类名必须是程序中的一个已定义过的类。例如,以下语句说明类B是类A的友元类:
class A
&#123;
	public:
	friend class B;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>经过以上说明后,类B的所有成员函数都是类A的友元函数,能存取类A的私有成员和保护成员</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
	public:
	inline void Test()&#123;
	&#125;
    private:
	int x,y; 
    friend class B;
&#125;
class B&#123;
	public:
	inline void Test()
    	&#123;
		A a;
		printf( &quot;x&#x3D;%d , y&#x3D;%d&quot;.a.x,a.y );
		&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="论友元"><a href="#论友元" class="headerlink" title="论友元"></a>论友元</h4><ul>
<li>声明位置<ul>
<li>友元声明以关键字<code>friend</code>开始,它只能出现在类定义中。因为友元不是授权类的成员,所以它不受其所在类的声明区域<code>public private</code>和<code>protected</code>的影响。通常我们选择把所有友元声明组织在一起并放在类头之后.</li>
</ul>
</li>
<li>友元的利弊<ul>
<li>友元不是类成员,但是它可以访问类中的私有成员。友元的作用在于提高程序的运行效率,但是,它破坏了类的封装性和隐藏性,使得非成员函数可以访问类的私有成员。不过,类的访问权限确实在某些应用场合显得有些呆板,从而容忍了友元这一特别语法现象。</li>
</ul>
</li>
<li>注意事项<ul>
<li>友元关系不能被继承。</li>
<li>友元关系是单向的,不具有交换性。若类B是类A的友元,类A不一定是类B的友元,要看在类中是否有相应的声明。</li>
<li>友元关系不具有传递性。若类B是类A的友元,类C是B的友元,类C不一定是类A的友元,同样要看类中是否有相应的声明。</li>
</ul>
</li>
</ul>
<h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><ul>
<li>所谓重载，就是重新赋予新的含义。函数重载就是对一个已有的函数赋予新的含义，使之实现新功能，因此，一个函数名就可以用来代表不同功能的函数，也就是”一名多用”。</li>
<li>运算符也可以重载。实际上，我们已经在不知不觉之中使用了运算符重载。例如，大家都已习惯于用加法运算符”+”对整数、单精度数和双精度数进行加法运算，如5+8，5.8+3.67等，其实计算机对整数、单精度数和双精度数的加法操作过程是很不相同的，但由于C++已经对运算符”+”进行了重载，所以就能适用于int, float, doUble类型的运算。</li>
<li>又如”&lt;&lt;”是C++的位运算中的位移运算符（左移)，但在输出操作中又是与流对象cout配合使用的流插入运算符，”&gt;&gt;“也是位移运算符(右移），但在输入操作中又是与流对象cin配合使用的流提取运算符。这就是运算符重载<br>(operator overloading)。C++系统对”&lt;&lt;“和”&gt;&gt;“进行了重载，用户在不同的场合下使用它们时，作用是不同的。对”&lt;&lt;“和”&gt;&gt;“的重载处理是放在头文件stream中的。因此，如果要在程序中用”&lt;&lt;”和”&gt;&gt;”作流插入运算符和流提取运算符，必须在本文件模块中包含头文件stream(当然还应当包括”using namespace std”)。现在要讨论的问题是∶用户能否根据自己的需要对C++已提供的运算符进行重载，赋予它们新的含义，使之一名多用.</li>
<li>运算符重载的本质是函数重载。</li>
<li>重载函数的一般格式如下:</li>
</ul>
<blockquote>
<p>函数类型 operator 运算符名称(形参表列){<br>重载实体;<br>}</p>
</blockquote>
<ul>
<li>operator 运算符名称在一起构成了新的函数名。比如</li>
<li><code>const Complex operator+( const Complex &amp;c1,const Complex &amp;c2);</code></li>
<li>我们会说,operator+重载了重载了运算符+。</li>
</ul>
<h4 id="友元重载"><a href="#友元重载" class="headerlink" title="友元重载"></a>友元重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
	public:
	Complex(float x&#x3D;0，float y&#x3D;0) :_x(x),_y(y)&#123;&#125;
	void dis() &#123;
	cout&lt;&lt;&quot; ( &quot;&lt;&lt;_x&lt;&lt;&quot; , &quot;&lt;&lt;_y&lt;&lt; &quot;)&quot;&lt;&lt;endl;
&#125;
friend const Complex operator+(const Complex &amp;c1,const Complex &amp;c2);
    	private:
	float _x;
    float _y;
&#125;;
const Complex operator+(const Complex &amp;c1,const Complex &amp;c2) &#123;
return Complex(c1._x + c2._x,c1._y + c2._y);
&#125;
int main() &#123;
	complex c1(2,3);
    complex c2(3,4);
	c1.dis();
    c2.dis();
	complex c3 &#x3D; c1+c2;
&#x2F;&#x2F; Complex c3 &#x3D; operator+(c1,c2);
    c3.dis();
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="成员重载"><a href="#成员重载" class="headerlink" title="成员重载"></a>成员重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
	public:
	Complex( float x&#x3D;0,float y&#x3D;0):_x(×),_y(y)&#123;&#125;
    void dis() &#123;
	cout&lt;&lt;&quot;(&quot;&lt;&lt;_x&lt;&lt;&quot; ,&quot;&lt;&lt;_y&lt;&lt;&quot;)&quot;&lt;&lt;endl;
	&#125;
	friend const Complex operator+(const Complex &amp;c1,const Complex &amp;c2);
	const complex operator+( const Complex &amp;another);
	private:
	float _x;
    float _y ;
&#125;;
	const Complex operator+(const Complex &amp;c1,const Complex &amp;c2)&#123;
	cout&lt;&lt;&quot;友元函数重载&quot;&lt;&lt;endl;
	return Complex(c1._x +c2._x,c1._y + c2._y);
&#125;
	const Complex Complex::operator+( const Complex &amp; another)&#123;
	cout&lt;&lt;&quot;成员函数重载&quot;&lt;&lt;endl;
	return Complex(this-&gt;_x + another._x,this-&gt;_y + another._y);
&#125;
int main( )&#123;
	complex c1(2,3);
    complex c2(3,4);
    c1.dis();
	c2.dis();
    &#x2F;&#x2F; Complex c3 &#x3D; c1+c2;
	&#x2F;&#x2F; complex c3 &#x3D; operator+(c1,c2);complex c3 &#x3D; c1+c2;
	c3.dis();
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h4><ol>
<li><p>C++不允许用户自己定义新的运算符,只能对已有的C++运算符进行重载。</p>
</li>
<li><p>C+＋允许重载的运算符</p>
<blockquote>
<p>new new[] delete delete[] + - * / % ^ &amp; | ~ ! = &lt;  &gt;  += -=  *= /= %=</p>
<p>^= &amp;= |= &lt;&lt; &gt;&gt; &lt;&lt;= &gt;&gt;= == != &lt;= &gt;= &amp;&amp; || ++ – , -&gt;* -&gt; () []</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>不能重载的运算符只有五个。</p>
<blockquote>
<p>? :    .    ::   sizeof   .* </p>
</blockquote>
</li>
</ul>
<ol start="3">
<li>重载不能改变运算符运算对象(即操作数)的个数。<ul>
<li>如,关系运算符“&gt;”和“&lt;”等是双目运算符,重载后仍为双目运算符,需要两个参数。运算符”+“,”-“，”*“,”&amp;“等既可以作为单目运算符,也可以作为双目运算符,可以分别将它们重载为单目运算符或双目运算符。</li>
</ul>
</li>
<li>重载不能改变运算符的优先级别。<ul>
<li>例如”*“和”/“优先级高于”＋“和”-“,不论怎样进行重载,各运算符之间的优先级不会改变。有时在程序中希望改变某运算符的优先级,也只能使用加括号的方法强制改变重载运算符的运算顺序。</li>
</ul>
</li>
<li>重载不能改变运算符的结合性。<ul>
<li>如,复制运算符”=“是右结合性(自右至左),重载后仍为右结合性。</li>
</ul>
</li>
<li>重载运算符的函数不能有默认的参数<ul>
<li>重载运算符的函数不能有默认的参数</li>
</ul>
</li>
<li>重载的运算符必须和用户定义的自定义类型的对象一起使用,其参数至少应有一个是类对象(或类对象的引用)。<ul>
<li>也就是说,参数不能全部是C++的标准类型,以防止用户修改用于标准类型数据成员的运算符的性质,如下面这样是不对的:</li>
<li>代码如下:</li>
<li><code>int operator + (int a,int b)&#123;return(a-b); &#125;</code></li>
<li>原来运算符+的作用是对两个数相加,现在企图通过重载使它的作用改为两个数相减。如果允许这样重载的话,如果有表达式4+3,它的结果是7还是1呢?显然,这是绝对要禁止的。</li>
</ul>
</li>
<li>用于类对象的运算符一般必须重载,但有两个例外,运算符”=“和运算符”&amp;“不必用户重载。<ul>
<li>复制运算符”=“可以用于每一个类对象,可以用它在同类对象之间相互赋值。因为系统已为每一个新声明的类重载了一个赋值运算符,它的作用是逐个复制类中的数据成员地址运算符&amp;也不必重载,它能返回类对象在内存中的起始地址。</li>
</ul>
</li>
<li>应当使重载运算符的功能类似于该运算符作用于标准类型数据时候时所实现的功能。</li>
<li>运算符重载函数可以是类的成员函数,也可以是类的友元函数,还可以是既非类的成员函数也不是友元函数的普通函数</li>
</ol>
<h4 id="双目运算符重载"><a href="#双目运算符重载" class="headerlink" title="双目运算符重载"></a>双目运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
public:
	Complex(float x&#x3D;0,float y&#x3D;0) :_x(x),_y(y)&#123;&#125;
void dis()
&#123;
cout&lt;&lt;&quot;(&quot;&lt;&lt;_x&lt;&lt;&quot;, &quot;&lt;&lt;_y&lt;&lt;&quot; )&quot;&lt;&lt;endl;
&#125;
Complex&amp; operator+&#x3D;( const Complex &amp;c)
&#123;
this-&gt;_x+&#x3D; c._x; this-&gt;_y +&#x3D; c._y ;
    return *this;
&#125;
private:
	float _x;
	float _y;
&#125;;
int main()&#123;
	&#x2F;&#x2F; int a&#x3D;10,b&#x3D;20,c&#x3D;30;
    &#x2F;&#x2F; a+&#x3D;b;
	&#x2F;&#x2F;b+&#x3D;C;
    &#x2F;&#x2F;cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;
    &#x2F;&#x2F;complex a1( 10,0),b1(20,0), c1(30,0);
    &#x2F;&#x2F;此时的+&#x3D;重载函数返回void
    &#x2F;&#x2F; a1 +&#x3D; b1;
    &#x2F;&#x2F; b1 +&#x3D; c1;l &#x2F; a1.dis();&#x2F;&#x2F; b1.dis();&#x2F; c1.dis();
    &#x2F;&#x2F; --------------------
    &#x2F;&#x2F;int a&#x3D;10, b&#x3D;20,c&#x3D;30;
    &#x2F;&#x2F;a+&#x3D;b+&#x3D;c;
    &#x2F;&#x2F;cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt;&quot;b &#x3D; &quot;&lt;b&lt;&lt;endl;
    &#x2F;&#x2F; cout&lt;&lt; &quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;
    &#x2F;&#x2F; complex a1(10,0),b1(20,0), c1(30,0);
    &#x2F;&#x2F;此时重载函数+&#x3D;返回的是Complex 
    &#x2F;&#x2F; a1+&#x3D;b1+&#x3D;c1;
    &#x2F;&#x2F; a1.dis();
    &#x2F;&#x2F; b1.dis();
    &#x2F;&#x2F; c1.dis();
    &#x2F;&#x2F; -------------------------------
    int a &#x3D; 10, b &#x3D; 20,c &#x3D; 30;
    (a +&#x3D; b) +&#x3D; c;
    cout&lt;&lt;&quot;a &#x3D; &quot;&lt;&lt;a&lt;&lt;endl;
    cout&lt;&lt;&quot;b &#x3D; &quot;&lt;&lt;b&lt;&lt;endl;
    cout&lt;&lt;&quot;c &#x3D; &quot;&lt;&lt;c&lt;&lt;endl;
    Complex a1(10,0),b1(20,0), c1(30,0);
    &#x2F;&#x2F;此时重载函数+&#x3D;返回的是Complex &amp;
    &#x2F;&#x2F;一定要注意在连等式中,返回引用和返回对象的区别
    (a1 +&#x3D; b1) +&#x3D; c1;
	a1.dis();
	b1.dis();
    c1.dis();
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="单目运算符重载"><a href="#单目运算符重载" class="headerlink" title="单目运算符重载"></a>单目运算符重载</h4><ul>
<li>不可以被重载的操作符</li>
</ul>
<blockquote>
<p>.    .*   ::   ?:</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;前++
#include &lt;iostream&gt;
using namespace std;
class Complex
&#123;
	public:
	Complex(float x&#x3D;0,float y&#x3D;0):_x(x),_y(y)&#123;&#125;
	void dis()
    &#123;
	cout&lt;&lt;&quot;( &quot;&lt;&lt;_x&lt;&lt;&quot;, &quot;&lt;&lt;_y&lt;&lt;&quot;)&quot;&lt;&lt;endl;
    &#125;
	friend Complex &amp; operator++(Complex&amp; c);
    private:
		float _x;
    	float _y;
&#125;;
	Complex &amp; operator++(Complex&amp; c)&#123;
		c._x++;
       	c._y++;
		return c;
&#125;
int main()
&#123;
	int n &#x3D; 10;
	cout&lt;&lt;n&lt;&lt;endl;&#x2F;&#x2F;10
    cout&lt;&lt;++n&lt;&lt;endl;&#x2F;&#x2F;11
	cout&lt;&lt;n&lt;&lt;endl;&#x2F;&#x2F;11
	cout&lt;&lt;++++n&lt;&lt;endl;&#x2F;&#x2F;13
    cout&lt;&lt;n&lt;&lt;endl;
	
	Complex c( 10,10);
    	c.dis();&#x2F;&#x2F;10 10
	Complex c2&#x3D;++c;
	c2.dis( );	&#x2F;&#x2F;11 11
	c.dis();&#x2F;&#x2F;11 11
	c2 &#x3D; ++++c;
	c2.dis();&#x2F;&#x2F;13 13
	c.dis();&#x2F;&#x2F;13 13
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;后++
#include &lt;iostream&gt;
using namespace std;
class Complex&#123;
public:
Complex(float x&#x3D;0,float y&#x3D;0):_x(x),_y(y)&#123;&#125;
void dis()
&#123;
cout&lt;&lt;&quot;( &quot;&lt;&lt;_x&lt;&lt;&quot;, &quot;&lt;&lt;_y&lt;&lt;&quot;) &quot;&lt;&lt;endl;
&#125;
#if 0
const Complex operator++(int)&#123;
	Complex t &#x3D; *this;
    _x++;
    _y++;
return t;
&#125;
#endif
	friend const Complex operator++(Complex &amp;c ,int);
    private:
	float _x;
    float y ;
&#125;;
const Complex operator++(Complex &amp;c,int)
	Complex t(c._x,c._y); 
	c._x++;
	c._y++;
	return t;
&#125;
int main()&#123;
	int n &#x3D; 10;
    cout&lt;&lt;n&lt;&lt;endl;
&#x2F;&#x2F;10
	cout&lt;&lt;n++&lt;&lt;endl;
&#x2F;&#x2F;10
	cout&lt;&lt;n&lt;&lt;endl;
&#x2F;&#x2F;11
&#x2F;&#x2F;cout&lt;&lt;n++++&lt;&lt;endl;&#x2F;&#x2F;13后++表达式不能连用
    cout&lt;&lt;n&lt;&lt;endl; &#x2F;&#x2F;11
	Complex c(10);
	c.dis();
	Complex c2 &#x3D;C++;
    c2.dis();
	c.dis();
&#x2F;&#x2F;c2 &#x3D; C++十+;&#x2F;&#x2F; c2.dis();
    c.dis();
return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="输入输出运算符重载"><a href="#输入输出运算符重载" class="headerlink" title="输入输出运算符重载"></a>输入输出运算符重载</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">istream &amp; operator&gt;&gt;(istream &amp;,自定义类&amp;);
ostream &amp; operator&lt;&lt;(ostream &amp;,自定义类&amp;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>通过友元函数来实现，避免修改C++的标准库</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Complex &#123;
public:
	Complex(float x&#x3D;0，float y&#x3D;0):_×(×),_y(y)&#123;&#125;
	void dis() &#123;
	cout&lt;&lt; &quot; ( &quot;&lt;&lt;_x&lt;&lt;&quot; , &quot;&lt;&lt;_y&lt;&lt;&quot;) &quot;&lt;&lt;endl;&#125;
	friend ostream &amp; operator&lt;&lt;(ostream &amp;os, const Complex &amp; c);
    friend istream &amp; operator&gt;&gt;(istream &amp;is，Complex &amp;c);
private:
	float _x;
    float _y;&#125;;
ostream &amp; operator&lt;&lt;(ostream &amp;os,const Complex &amp; c)
&#123;
	os&lt;&lt;&quot;( &quot;&lt;&lt;c._x&lt;&lt;&quot;,&quot;&lt;&lt;c._y&lt;&lt;&quot;)&quot;;
    return os;
&#125;
istream &amp; operator&gt;&gt;(istream &amp;is, Complex &amp;c)&#123;
is&gt;&gt;c._x&gt;&gt;c._y;
    return is;
&#125;
int main()&#123;
	Complex c(2,3);
    cout&lt;&lt;c&lt;&lt;endl;cin&gt;&gt;c;
	cout&lt;&lt;c&lt;&lt;endl;
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="友元还是成员"><a href="#友元还是成员" class="headerlink" title="友元还是成员"></a>友元还是成员</h4><ul>
<li>假设,我们有类Sender类和Mail类,实现发送邮件的功能。sender&lt;&lt; mail;</li>
<li>sender左操作数,决定了operator&lt;&lt;为Sender的成员函数,而mail决定了operator&lt;&lt;要作Mail类的友员。</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Mail;
class Sender&#123;
	public:
	Sender(string s):_addr(s)&#123;&#125;
	Sender&amp; operator&lt;&lt;( const Mail &amp; mail);&#x2F;&#x2F;成员
	private:
	string _addr;
&#125;;
class Maili&#123;
	public:
Mail(string _t,string _c ):_title(_t),_content(_c)&#123;&#125;
    friend Sender&amp; Sender::operator&lt;&lt;(const Mail &amp; mail);
    private:
	string _title;
    string _content;&#125;;
Sender&amp; Sender::operator&lt;&lt; ( const Mail &amp; mail)
cout&lt;&lt; &quot;Address: &quot;&lt;&lt;_addr&lt;&lt;endl;
cout&lt;&lt;&quot;Title : &quot;&lt;&lt;mail._title&lt;&lt;endl;
cout&lt;&lt;&quot;Content: &quot;&lt;&lt;mail._content&lt;&lt;endl;
return *this;
&#125;
int main( )
Sender sender( &quot;danbing_at@gmail.com&quot; );
Mail mail( &quot;note&quot; , &quot;meeting at 3:00 pm&quot; ) ;
Mail mail2( &quot;tour&quot; , &quot;One night in beijing&quot; );
sender&lt;&lt;mail&lt;&lt;mail2;
return 0;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>结论:<br>1,一个操作符的左右操作数不一定是相同类型的对象,这就涉及到将该操作符函数定义为谁的友元,谁的成员问题。<br>2,一个操作符函数,被声明为哪个类的成员,取决于该函数的调用对象(通常是左操作数)。<br>3,一个操作符函数,被声明为哪个类的友员,取决于该函数的参数对象(通常是右操作数)。</p>
</blockquote>
<h4 id="运算符重载提高"><a href="#运算符重载提高" class="headerlink" title="运算符重载提高"></a>运算符重载提高</h4><ol>
<li>赋值运算符重载（operator=)<ul>
<li>用一个己有对象,给另外一个己有对象赋值。两个对象均己创建结束后,发生的赋值行为。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">类名&#123;
	类名&amp; operator&#x3D;(const 类名&amp; 源对象）拷贝体
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;
	A&amp; operator&#x3D;( const A&amp; another)&#123;
		&#x2F;&#x2F;函数体
		return *this;
	&#125;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>规则<br>1系统提供默认的赋值运算符重载,一经实现,不复存在。</p>
<p>2系统提供的也是等位拷贝,也就浅拷贝,一个内存泄漏,重析构。</p>
<p>3要实再深深的赋值,必须自定义。</p>
<p>4自定义面临的问题有三个:</p>
<p>​        1,自赋值</p>
<p>​        2,内存泄漏</p>
<p>​        3,重析构。</p>
<p>5返回引用,且不能用const 修饰。其目的是实现连等式。</p>
</blockquote>
<ol start="2">
<li>数组下标运算符（operator[]）</li>
</ol>
<blockquote>
<p>类型 类   : :  operator[] (  类 型  ) ;</p>
</blockquote>
<blockquote>
<p>设×是类×的一个对象，则表达式<br>x [ y ]可被解释为x. operator [] ( y )</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int &amp; operator[](int i)&#123;return v[i];&#125;&#x2F;&#x2F;返回元素的引用 this-&gt;v[i]
a[2]&#x3D;12;&#x2F;&#x2F;返回引用的函数调用作左值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>自定义一个数组类要有&lt;&lt; &gt;&gt;操作符重载</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;MyArray.h
#pragma once
#include &lt;iostream&gt;

using namespace std;

class MyArray
&#123;
public:
	MyArray();
	MyArray(int len);
	MyArray(const MyArray &amp;another);
	~MyArray();

	void setData(int index, int data);
	int getData(int index);
	int getLen() const ;

	MyArray&amp; operator&#x3D;(const MyArray&amp; another);

	int &amp; operator[](int index) const;

	friend ostream &amp;operator&lt;&lt;(ostream &amp;os,const MyArray &amp;array);
	friend istream &amp;operator&gt;&gt;(istream &amp;is, MyArray &amp;array);

	friend bool operator&#x3D;&#x3D;(MyArray &amp;array1, MyArray &amp;array2);
	bool operator!&#x3D;(MyArray &amp;another);
private:
	int len;
	int *space;
&#125;;

&#x2F;&#x2F;MyArray.cpp
#include &quot;MyArray.h&quot;


MyArray::MyArray()
&#123;
	cout &lt;&lt; &quot;MyArray()...&quot; &lt;&lt; endl;
	this-&gt;len &#x3D; 0;
	this-&gt;space &#x3D; NULL;
&#125;

MyArray::MyArray(int len)
&#123;
	if (len &lt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; 0;
		return;
	&#125;
	else &#123;
		this-&gt;len &#x3D; len;

		&#x2F;&#x2F;给space开辟空间
		this-&gt;space &#x3D; new int[this-&gt;len];
		cout &lt;&lt; &quot;MyArray::MyArray(int len) ...&quot; &lt;&lt; endl;
	&#125;
&#125;
MyArray::MyArray(const MyArray &amp;another)
&#123;
	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::MyArray(const MyArray &amp;another) ...&quot; &lt;&lt; endl;

	&#125;
&#125;
MyArray::~MyArray()
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		delete[]this-&gt;space;
		this-&gt;space &#x3D; NULL;
		len &#x3D; 0;
		cout &lt;&lt; &quot;MyArray::~MyArray() ...&quot; &lt;&lt; endl;
	&#125;
&#125;

void MyArray::setData(int index, int data)
&#123;
	if (this-&gt;space !&#x3D; NULL) &#123;
		this-&gt;space[index] &#x3D; data;
	&#125;
&#125;
int MyArray::getData(int index)
&#123;
	return this-&gt;space[index];
&#125;
int MyArray::getLen() const
&#123;
	return this-&gt;len;
&#125;

MyArray&amp;  MyArray::operator&#x3D;(const MyArray&amp; another)
&#123;
	if (this &#x3D;&#x3D; &amp;another) &#123;
		return *this;
	&#125;

	if (this-&gt;space !&#x3D; NULL) &#123;
		delete[]this-&gt;space;
		this-&gt;space &#x3D; NULL; 
		this-&gt;len &#x3D; 0;
	&#125;

	if (another.len &gt;&#x3D; 0) &#123;
		this-&gt;len &#x3D; another.len;

		&#x2F;&#x2F;深拷贝
		this-&gt;space &#x3D; new int[this-&gt;len];
		for (int i &#x3D; 0; i &lt; this-&gt;len; i++) &#123;
			this-&gt;space[i] &#x3D; another.space[i];
		&#125;
		cout &lt;&lt; &quot;MyArray::operator&#x3D;(const MyArray&amp; another) ...&quot; &lt;&lt; endl;

	&#125;

	return *this;
&#125;

int &amp; MyArray::operator[](int index) const
&#123;
	return this-&gt;space[index];
&#125;


ostream &amp;operator&lt;&lt;(ostream &amp;os,const MyArray &amp;array)
&#123;
	os &lt;&lt; &quot;遍历整个数组 &quot; &lt;&lt; endl;
	&#x2F;&#x2F;array.getLen(); &#x2F;&#x2F;getLen(&amp;array);
	for (int i &#x3D; 0; i &lt; array.getLen(); i++) &#123;
		os &lt;&lt; array[i] &lt;&lt;&quot; &quot;;&#x2F;&#x2F;array.operator[]( i)
	&#125;

	os &lt;&lt; &quot;调用的&lt;&lt;操作符重载&quot; &lt;&lt; endl;

	return os;
&#125;

istream &amp;operator&gt;&gt;(istream &amp;is, MyArray &amp;array)
&#123;
	cout &lt;&lt; &quot;请输入&quot; &lt;&lt; array.getLen() &lt;&lt; &quot;个数&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array.getLen(); i++) &#123;
		cin &gt;&gt; array[i];
	&#125;
	return is;
&#125;


bool operator&#x3D;&#x3D;(MyArray &amp;array1, MyArray &amp;array2)
&#123;
	if (array1.len !&#x3D; array2.len) &#123;
		return false;
	&#125;

	for (int i &#x3D; 0; i &lt; array1.len; i++) &#123;
		if (array1.space[i] !&#x3D; array2.space[i]) &#123;
			return false;
		&#125;
	&#125;

	return true;
&#125;
bool MyArray::operator!&#x3D;(MyArray &amp;another)
&#123;
	return !(*this &#x3D;&#x3D; another);
&#125;

&#x2F;&#x2F;main.cpp
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &quot;MyArray.h&quot;

using namespace std;



int main(void)
&#123;

 MyArray array1(10);&#x2F;&#x2F;开辟10元素的数组

	&#x2F;&#x2F;赋值操作
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		&#x2F;&#x2F;array1.setData(i, i + 10);
		array1[i] &#x3D; i + 10;&#x2F;&#x2F;space[1] &#x3D; 1+10
	&#125;

	cout &lt;&lt; &quot;--------&quot; &lt;&lt; endl;

	cout &lt;&lt; &quot;array1:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; 10; i++) &#123;
		cout &lt;&lt; array1[i] &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;

	MyArray array2 &#x3D; array1;
	cout &lt;&lt; &quot;array2:&quot; &lt;&lt; endl;
	for (int i &#x3D; 0; i &lt; array2.getLen(); i++) &#123;
		cout &lt;&lt; array2[i] &lt;&lt; &quot; &quot;;
	&#125;
	cout &lt;&lt; endl;
	

	cout &lt;&lt; &quot; ------------&quot; &lt;&lt; endl;
	MyArray array3(5);

	cin &gt;&gt; array3;


	cout &lt;&lt; &quot;array3:&quot; &lt;&lt; endl;
	cout &lt;&lt; array3 &lt;&lt; endl;
	cout &lt;&lt; endl;

	
	if (array3 !&#x3D; array1)  &#123;
		cout &lt;&lt; &quot;不相等&quot; &lt;&lt; endl;
	&#125;
	else &#123;
		cout &lt;&lt; &quot;相等 &quot; &lt;&lt; endl;
	&#125;

	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<ol start="3">
<li>函数调用符号（operator())<ul>
<li>把类对象像函数名一样使用。</li>
<li>仿函数(functor),就是使一个类的使用看上去象一个函数。其实现就是类中实现一个operator(),这个类就有了类似函数的行为,就是一个仿函数类了。</li>
</ul>
</li>
</ol>
<blockquote>
<p>class类名{<br>返值类型 operator()(参数类型)  函数体<br>}</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Sqr
&#123;
	public:
		int operator()(int i)&#123;
			return i*i;
		&#125;
		double operator ()(double d)&#123;
			return d*d;
		&#125;
&#125;;
int main()&#123;
	Sqr sqr;
	int i &#x3D; sqr(4);
	double d &#x3D; sqr(5.5);
	cout&lt;&lt;i&lt;&lt;endl;
	cout&lt;&lt;d&lt;&lt;endl;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>不可重载&amp;&amp;和||操作符</li>
</ol>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
using namespace std;
class Test&#123;
	public:
	Test( int i &#x3D; 0)&#123;
	this-&gt;i &#x3D; i;
	&#125;
	Test operator+ ( const Test&amp; obj)&#123;
		cout&lt;&lt;&quot;执行+号重载函数&quot;&lt;&lt;endl;
        Test ret;
		ret.i &#x3D; i + obj.i;
        return ret;
&#125;
	bool operator&amp;&amp;( const Test&amp; obj)&#123;
		cout&lt;&lt;&quot;执行&amp;&amp;重载函数&quot;&lt;&lt;endl;
        return i &amp;&amp; obj.i;
&#125;
	private:
    int i;
&#125;;
int main()&#123;
	int a1 &#x3D; 0;
    int a2 &#x3D; 1;
	cout&lt;&lt;&quot;注意:&amp;&amp;操作符的结合顺序是从左向右&quot;&lt;&lt;endl;
    if( a1 &amp;&amp; (a1 + a2) )
    &#123;
	cout&lt;&lt;&quot;有一个是假，则不在执行下一个表达式的计算&quot;&lt;&lt;endl;
	&#125;
	Test t1(0);
    Test t2(1);
	if ( t1 &amp;&amp;(t1 + t2) )&#123;
&#x2F;&#x2F;t1 &amp;&amp; t1.operator(t2)
&#x2F;&#x2F; t1.operator&amp;&amp;(t1.operator+(t2))
	cout&lt;&lt;&quot;两个函数都被执行了，而且是先执行了+&quot;&lt;&lt;endl;
&#125;
return 0
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>C+＋如果重载&amp;&amp;或||将无法实现短路规则</p>
</blockquote>
<blockquote>
<p>实现一个字符串类</p>
<p>构造函数要求：</p>
<p>MyString a;</p>
<p>MyString a(“dddd”);</p>
<p>MyString b = a;</p>
<p>常用的操作符</p>
<p>&lt;&lt;    &gt;&gt;   !=    ==   &gt;  &lt;=  []</p>
</blockquote>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;MyString.h
#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
using namespace std;

class MyString
&#123;
public:
	MyString();
	&#x2F;&#x2F;MyString(int len); &#x2F;&#x2F;创建一个长度是len的string对象
	MyString(const char *str);
	MyString(const MyString &amp;another);
	~MyString();

	&#x2F;&#x2F;重载操作符[]
	char &amp;operator[](int index);



	&#x2F;&#x2F;重载操作符&gt;&gt;
	friend istream &amp; operator&gt;&gt;(istream &amp;is, MyString &amp;s);

	&#x2F;&#x2F;重载&#x3D;操作符
	MyString &amp; operator&#x3D;(const MyString &amp;another);

	&#x2F;&#x2F;重载&#x3D;&#x3D;操作符

	&#x2F;&#x2F;重载!&#x3D;操作符


	&#x2F;&#x2F;重载+操作符
	MyString operator+(MyString &amp;another);


	&#x2F;&#x2F;重载操作符&lt;&lt;
	friend ostream &amp; operator&lt;&lt;(ostream &amp;os, MyString&amp;s);

private:
	int len;
	char *str;
&#125;;

&#x2F;&#x2F;MyString.cpp
#include &quot;MyString.h&quot;


MyString::MyString()
&#123;
	this-&gt;len &#x3D; 0;
	this-&gt;str &#x3D;NULL;
&#125;

MyString::MyString(const char *str)
&#123;
	if (str &#x3D;&#x3D; NULL) &#123;
		this-&gt;len &#x3D; 0;
		this-&gt;str &#x3D; new char[0 + 1];
		strcpy(this-&gt;str, &quot;&quot;);
	&#125;
	else &#123;
		int len &#x3D; strlen(str);
		this-&gt;len &#x3D; len;

		this-&gt;str &#x3D; new char[len + 1];
		strcpy(this-&gt;str, str);
	&#125;
&#125;

&#x2F;&#x2F;初始化时候被调用的
MyString::MyString(const MyString &amp;another)
&#123;
	this-&gt;len &#x3D; another.len;
	this-&gt;str &#x3D; new char[this-&gt;len + 1];
	strcpy(this-&gt;str, another.str);
&#125;



MyString::~MyString()
&#123;
	if (this-&gt;str !&#x3D; NULL) &#123;
		cout &lt;&lt; this-&gt;str &lt;&lt; &quot;执行了析构函数&quot; &lt;&lt; endl;
		delete this-&gt;str;
		this-&gt;str &#x3D; NULL; 
		this-&gt;len &#x3D; 0;
	&#125;
&#125;

char &amp; MyString::operator[](int index)
&#123;
	return this-&gt;str[index];
&#125;

MyString &amp;  MyString::operator&#x3D;(const MyString &amp;another)
&#123;
	if (this &#x3D;&#x3D; &amp;another) &#123;
		return *this;
	&#125;

	if (this-&gt;str !&#x3D; NULL) &#123;
		delete[] this-&gt;str;
		this-&gt;str &#x3D; NULL;
		this-&gt;len &#x3D; 0;
	&#125;

	this-&gt;len &#x3D; another.len;
	this-&gt;str &#x3D; new char[this-&gt;len + 1];
	strcpy(this-&gt;str, another.str);

	return *this;
&#125;

ostream &amp; operator&lt;&lt;(ostream &amp;os, MyString&amp;s)
&#123;
	os &lt;&lt; s.str;
	return os;
&#125;

istream &amp; operator&gt;&gt;(istream &amp;is, MyString &amp;s)
&#123;
	&#x2F;&#x2F;1 将s之前的字符串释放掉
	if (s.str !&#x3D; NULL) &#123;
		delete[] s.str;
		s.str &#x3D; NULL;
		s.len &#x3D; 0;
	&#125;

	&#x2F;&#x2F;2 通过cin添加新的字符串
	char temp_str[4096] &#x3D; &#123; 0 &#125;;
	cin &gt;&gt; temp_str;

	int len &#x3D; strlen(temp_str);
	s.str &#x3D; new char[len + 1];
	strcpy(s.str, temp_str);
	s.len &#x3D; len;

	return is;
&#125;

MyString MyString::operator+(MyString &amp;another)
&#123;
	MyString temp;

	int len &#x3D; this-&gt;len + another.len;

	temp.len &#x3D; len;

	temp.str &#x3D; new char[len + 1];
	memset(temp.str, 0, len + 1);
	strcat(temp.str, this-&gt;str);
	strcat(temp.str, another.str);

	return temp;
&#125;
&#x2F;&#x2F;main.c
#define _CRT_SECURE_NO_WARNINGS
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &quot;MyString.h&quot;

using namespace std;

int main(void)
&#123;
	string s1;
	MyString s1(&quot;abc&quot;);
	MyString s2(&quot;123&quot;);

	&#x2F;&#x2F;cout &lt;&lt; s1 + s2 &lt;&lt; endl;

	cout &lt;&lt; s1 &lt;&lt; endl;
	cout &lt;&lt; s2 &lt;&lt; endl;


#if 0
	MyString s1(&quot;abc&quot;);
	MyString s2(s1);
	MyString s3 &#x3D; &quot;123&quot;;


	cout &lt;&lt; s1 &lt;&lt; endl;
	cout &lt;&lt; s2 &lt;&lt; endl;

	s1[1] &#x3D; &#39;x&#39;;

	cout &lt;&lt; s1 &lt;&lt; endl;

	s1 &#x3D; s3;

	cout &lt;&lt; s1 &lt;&lt; endl;

#endif
	return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="解引用与智能指针"><a href="#解引用与智能指针" class="headerlink" title="解引用与智能指针"></a>解引用与智能指针</h4><ul>
<li>常规意义上讲,new或是malloc出来的堆上的空间,都需要手动delete和free的。但在其它高级语言中,只需申请无需释放的功能是存在的。</li>
<li>c++中也提供了这样的机制。我们先来探究一下实现原理。</li>
<li>常规</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void foo()&#123;
A*p &#x3D; new A;
&#x2F;&#x2F;do something
delete p;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>智能指针</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;
class A&#123;
    public:
		A() &#123;
			cout&lt;&lt;&quot;A constructor&quot;&lt;&lt;endl;
			&#125;
		~A() &#123;
			cout&lt;&lt;&quot;A destructor&quot;&lt;&lt;endl;
			&#125;
		void dis() &#123;
			cout &lt;&lt;&quot;class A&#39;s dis() &quot; &lt;&lt;endl;
		&#125;
&#125;;
int main()&#123;
&#x2F;&#x2F;使用智能指针auto_ptr 
    auto_ptr&lt;A&gt; p (new A);
	p-&gt;dis();
	return 0;
&#125;

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>自定义智能指针</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;memory&gt;
using namespace std;
class A
&#123;
	public:
		A()&#123;
		cout&lt;&lt;&quot;A constructor&quot;&lt;&lt;endl;
		&#125;
		~A()&#123;
		cout&lt;&lt;&quot;A destructor&quot;&lt;&lt;endl;
		&#125;
		void dis()&#123;
		cout&lt;&lt; &quot;in class A&#39;s dis&quot;&lt;&lt;endl;
		&#125;
&#125;;
class PMA&#123;
	public:
		PMA(A *p) :_p(p)&#123;&#125;
		~PMA()&#123;
		delete _p;
		&#125;
		A&amp; operator*()&#123;
		return *_p;
		&#125;
		A*operator-&gt;()&#123;
		return _p;
&#125;
		private:
		A*_p;
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Your Own Text Editor</title>
    <url>/2022/07/01/C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马教程资料总结</li>
</ul>
<h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><ul>
<li>dynamicArray.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//动态数组结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> pAddr<span class="token punctuation">;</span> <span class="token comment">//维护在堆区真实数组指针</span>

	<span class="token keyword">int</span> m_capacity<span class="token punctuation">;</span> <span class="token comment">//数组容量</span>

	<span class="token keyword">int</span> m_size<span class="token punctuation">;</span> <span class="token comment">//数组大小</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token comment">//初始化数组</span>
<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> <span class="token function">init_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//插入功能</span>
<span class="token keyword">void</span> <span class="token function">insert_dynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//遍历数组</span>
<span class="token keyword">void</span> <span class="token function">foreach_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>myForeach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//删除数组中元素  -- 按照指定位置进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//删除数组中的元素  --- 按照值来进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByValue_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//销毁数组</span>
<span class="token keyword">void</span> <span class="token function">destroy_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>dybamicArray,c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dynamicArray.h"</span></span>


<span class="token comment">//初始化数组</span>
<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> <span class="token function">init_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//判断内存是否申请成功</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>  <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//设置容量</span>
	array<span class="token operator">-></span>m_capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
	<span class="token comment">//设置大小</span>
	array<span class="token operator">-></span>m_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//维护在堆区数组的指针</span>
	array<span class="token operator">-></span>pAddr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>array<span class="token operator">-></span>m_capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//插入功能</span>
<span class="token keyword">void</span> <span class="token function">insert_dynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> array<span class="token operator">-></span>m_size<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//无效的位置  进行尾插</span>
		pos <span class="token operator">=</span> array<span class="token operator">-></span>m_size<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先判断是否已经 满载 ，如果满载了  动态开辟</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token operator">-></span>m_size <span class="token operator">>=</span> array<span class="token operator">-></span>m_capacity<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//1、申请一个更大的内存空间</span>
		<span class="token keyword">int</span> newCapacity <span class="token operator">=</span> array<span class="token operator">-></span>m_capacity <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>

		<span class="token comment">//2、创建新空间</span>
		<span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span> newSpace <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//3、将原有数据 拷贝到新空间下</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>newSpace<span class="token punctuation">,</span> array<span class="token operator">-></span>pAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>array<span class="token operator">-></span>m_capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//4、释放原有空间</span>
		<span class="token function">free</span><span class="token punctuation">(</span>array<span class="token operator">-></span>pAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//5、更改指针指向</span>
		array<span class="token operator">-></span>pAddr <span class="token operator">=</span> newSpace<span class="token punctuation">;</span>
		<span class="token comment">//6、更新新容量大小</span>
		array<span class="token operator">-></span>m_capacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">//插入新数据元素</span>
	<span class="token comment">//从最后一个位置开始 依次移动数据  后移</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> pos<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//将新元素插入到指定位置</span>
	array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>

	<span class="token comment">//更新大小</span>
	array<span class="token operator">-></span>m_size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//遍历数组</span>
<span class="token keyword">void</span> <span class="token function">foreach_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>myForeach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myForeach <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token operator">-></span>m_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">myForeach</span><span class="token punctuation">(</span>array<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除数组中元素  -- 按照指定位置进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> arr<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//无效的位置 直接return</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从pos位置开始  到数组尾  数据进行前移</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		arr<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	arr<span class="token operator">-></span>m_size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除数组中的元素  --- 按照值来进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByValue_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token operator">-></span>m_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">myCompare</span><span class="token punctuation">(</span>arr<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁数组</span>
<span class="token keyword">void</span> <span class="token function">destroy_DynamicArray</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token operator">-></span>pAddr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token operator">-></span>pAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
		arr<span class="token operator">-></span>pAddr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	arr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//链表结点</span>
<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//指针域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//链表结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">LList</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> pHeader<span class="token punctuation">;</span> <span class="token comment">//头节点</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span> <span class="token comment">//链表长度</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkList<span class="token punctuation">;</span>

<span class="token comment">//初始化链表</span>
LinkList <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>myList <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//初始化链表结构体</span>
	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	myList<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> myList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//插入结点</span>
<span class="token keyword">void</span> <span class="token function">insert_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span><span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span>myList<span class="token operator">-></span>m_Size<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//无效位置进行尾插</span>
		pos <span class="token operator">=</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//创建临时节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//通过循环 找到 插入位置的前驱节点</span>

	<span class="token comment">//创建出新节点</span>
	 <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 newNode<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
	 newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	
	 <span class="token comment">//将新节点 插入到 链表中</span>
	 newNode<span class="token operator">-></span>next <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	 pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>

	 myList<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//更新链表的长度</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历链表</span>
<span class="token keyword">void</span> <span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>LinkList list <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>myPrint<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//找到第一个有数据的节点</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">myPrint</span><span class="token punctuation">(</span>pCurrent<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//删除结点 -- 按位置 进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span>myList<span class="token operator">-></span>m_Size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//找到删除节点的前驱节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token comment">//缓存中 待删除的节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pDel <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//建立关系</span>
	pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> pDel<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//释放掉待删除的节点</span>
	<span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pDel <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//更新链表长度</span>
	myList<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//删除节点  --- 按值进行删除</span>
<span class="token keyword">void</span> <span class="token function">removeByValue_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>myCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token comment">//创建两个辅助指针变量</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pPrev <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> pPrev<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//if (pCurrent->data == data) 交给用户进行比对</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">myCompare</span><span class="token punctuation">(</span>pCurrent<span class="token operator">-></span>data<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//更改指针指向</span>
			pPrev<span class="token operator">-></span>next <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>

			<span class="token comment">//释放掉要删除的节点</span>
			<span class="token function">free</span><span class="token punctuation">(</span>pCurrent<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pCurrent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

			myList<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>

			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//将两个辅助指针 后移</span>
		pPrev <span class="token operator">=</span> pCurrent<span class="token punctuation">;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//清空链表</span>
<span class="token keyword">void</span> <span class="token function">clear_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span>myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//先记住待删除节点的后继节点</span>
		<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pNext <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>pCurrent<span class="token punctuation">)</span><span class="token punctuation">;</span>
		pCurrent <span class="token operator">=</span> pNext<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	myList<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回链表长度</span>
<span class="token keyword">int</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁链表</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">clear_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>











<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">myPrintPerson</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名： %s 年龄: %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">myCompare</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> data1<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span> data2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> data1<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p2 <span class="token operator">=</span> data2<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>p1<span class="token operator">-></span>name<span class="token punctuation">,</span> p2<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p1<span class="token operator">-></span>age <span class="token operator">==</span> p2<span class="token operator">-></span>age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化链表</span>
	LinkList list <span class="token operator">=</span> <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//插入数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"亚瑟"</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"王昭君"</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token number">38</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张飞"</span><span class="token punctuation">,</span> <span class="token number">19</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"宫本"</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//  张飞  关羽 王昭君 赵云 亚瑟  宫本</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//删除赵云</span>
	<span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//删除关羽</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">removeByValue_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> myCompare<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//清空链表</span>
	<span class="token function">clear_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表的长度为：%d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> myPrintPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//销毁链表</span>
	<span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单向链表-企业级版本"><a href="#单向链表-企业级版本" class="headerlink" title="单向链表-企业级版本"></a>单向链表-企业级版本</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//只维护指针域</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">LList</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> pHeader<span class="token punctuation">;</span> <span class="token comment">//链表头节点</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span> <span class="token comment">//链表长度</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkList<span class="token punctuation">;</span>
<span class="token comment">//初始化链表</span>
LinkList <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>myList <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	myList<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 

	<span class="token keyword">return</span> myList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//插入链表</span>
<span class="token keyword">void</span> <span class="token function">insert_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> mylist <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span>mylist<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pos <span class="token operator">=</span> mylist<span class="token operator">-></span>m_Size<span class="token punctuation">;</span> <span class="token comment">// 无效位置 进行尾插</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//将用户的数据 前4个字节转为 LinkNode类型</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> myNode <span class="token operator">=</span> data<span class="token punctuation">;</span>

	<span class="token comment">//找到插入数据的前驱节点位置</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>mylist<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//更改指针的指向</span>
	myNode<span class="token operator">-></span>next <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> myNode<span class="token punctuation">;</span>

	<span class="token comment">//更新链表长度</span>
	mylist<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历链表</span>
<span class="token keyword">void</span> <span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>LinkList list <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>myForeach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> node <span class="token operator">=</span> myList<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//第一个有数据的节点</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">myForeach</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
		node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除链表  按位置删除</span>
<span class="token keyword">void</span> <span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>LinkList list<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LList</span> <span class="token operator">*</span> myList <span class="token operator">=</span> list<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">></span> myList<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//找到删除位置的前驱节点位置</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pCurrent <span class="token operator">=</span> <span class="token operator">&amp;</span>myList<span class="token operator">-></span>pHeader<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		pCurrent <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//记录待删除的节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> pDel <span class="token operator">=</span> pCurrent<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//更改指针的指向</span>
	pCurrent<span class="token operator">-></span>next <span class="token operator">=</span> pDel<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//free(pDel); //我们链表中是不维护数据域的，写了free反而会出错</span>

	<span class="token comment">//更新链表长度</span>
	myList<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁链表</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>LinkList list <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>






<span class="token comment">//测试</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> node<span class="token punctuation">;</span> <span class="token comment">// 约定好的前四个字节给底层链表使用</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printPerson</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> p <span class="token operator">=</span> data<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名: %s 年龄: %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化</span>
	LinkList mylist <span class="token operator">=</span> <span class="token function">init_LinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//准备出数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insert_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// ccc ddd bbb aaa  eee</span>

	<span class="token comment">//遍历链表</span>
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> printPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//测试删除链表</span>
	<span class="token function">removeByPos_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">foreach_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> printPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//struct Person p = &#123; "aaa", 10 &#125;;</span>

	<span class="token comment">//removeByValue_LinkList(mylist, &amp;p , myCompare);</span>

	<span class="token function">destroy_LinkList</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h3><ul>
<li>seqStack.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>


<span class="token comment">//#define  MAX 1024</span>
<span class="token comment">////栈的结构体</span>
<span class="token comment">//struct SStack</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	void * data[MAX]; //数组</span>
<span class="token comment">//</span>
<span class="token comment">//	//栈的元素个数</span>
<span class="token comment">//	int m_Size;</span>
<span class="token comment">//&#125;;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>seqStack.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token comment">//栈的结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">SStack</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//数组</span>

	<span class="token comment">//栈的元素个数</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//清空数组中的每个元素</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

	stack<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//判断是否已经栈满 ,如果满了 不可以再入栈了</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> MAX<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">//入栈  尾插</span>

	myStack<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//更新栈大小</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//如果是空栈 不执行出栈</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//执行出栈</span>
	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//更新栈的大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token comment">//如果是空栈   返回 NULL</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//返回假 代表不是空栈</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>


<span class="token comment">//#define  MAX 1024</span>
<span class="token comment">////栈的结构体</span>
<span class="token comment">//struct SStack</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	void * data[MAX]; //数组</span>
<span class="token comment">//</span>
<span class="token comment">//	//栈的元素个数</span>
<span class="token comment">//	int m_Size;</span>
<span class="token comment">//&#125;;</span>
<span class="token comment">//</span>
<span class="token comment">//typedef void * seqStack;</span>
<span class="token comment">//</span>
<span class="token comment">////初始化栈</span>
<span class="token comment">//seqStack init_SeqStack()</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	struct SStack * stack = malloc(sizeof(struct SStack));</span>
<span class="token comment">//</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return NULL;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//清空数组中的每个元素</span>
<span class="token comment">//	memset(stack->data, 0, sizeof(void*)*MAX);</span>
<span class="token comment">//</span>
<span class="token comment">//	stack->m_Size = 0;</span>
<span class="token comment">//</span>
<span class="token comment">//	return stack;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">////入栈</span>
<span class="token comment">//void push_SeqStack( seqStack stack, void * data)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	if (data == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//判断是否已经栈满 ,如果满了 不可以再入栈了</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//	if (myStack->m_Size == MAX)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	myStack->data[myStack->m_Size] = data; //入栈  尾插</span>
<span class="token comment">//</span>
<span class="token comment">//	myStack->m_Size++; //更新栈大小</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">////出栈</span>
<span class="token comment">//void pop_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//如果是空栈 不执行出栈</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//	if (myStack->m_Size &lt;= 0)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	//执行出栈</span>
<span class="token comment">//	myStack->data[myStack->m_Size - 1] = NULL;</span>
<span class="token comment">//	//更新栈的大小</span>
<span class="token comment">//	myStack->m_Size--;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">////获取栈顶元素</span>
<span class="token comment">//void * top_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return NULL;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//</span>
<span class="token comment">//	//如果是空栈   返回 NULL</span>
<span class="token comment">//	if (myStack->m_Size == 0)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return NULL;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	return myStack->data[myStack->m_Size - 1];</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">////栈的大小</span>
<span class="token comment">//int size_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return -1;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//</span>
<span class="token comment">//	return myStack->m_Size;</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">////判断栈是否为空</span>
<span class="token comment">//int isEmpty_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return -1; //真</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	struct SStack * myStack = stack;</span>
<span class="token comment">//	if (myStack->m_Size &lt;= 0)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return 1; //真</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	return  0; //返回假 代表不是空栈</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//</span>
<span class="token comment">////销毁栈</span>
<span class="token comment">//void destroy_SeqStack(seqStack stack)</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//</span>
<span class="token comment">//	if (stack == NULL)</span>
<span class="token comment">//	&#123;</span>
<span class="token comment">//		return;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//</span>
<span class="token comment">//	free(stack);</span>
<span class="token comment">//	stack = NULL;</span>
<span class="token comment">//&#125;</span>


<span class="token comment">//测试</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token comment">//准备出数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//初始化栈</span>
	seqStack stack <span class="token operator">=</span> <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//入栈</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token comment">//如果栈不为空  进行访问栈顶元素，并且出栈</span>
	<span class="token punctuation">&#123;</span>
	    <span class="token keyword">struct</span> <span class="token class-name">Person</span>  <span class="token operator">*</span> pTop <span class="token operator">=</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//栈顶元素</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈顶元素 姓名： %s  年龄：  %d\n"</span><span class="token punctuation">,</span> pTop<span class="token operator">-></span>name<span class="token punctuation">,</span> pTop<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出栈</span>
		<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//栈的大小</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈的大小为：%d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁栈</span>
	<span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">StackNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//只维护指针域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//链式的栈结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">LStack</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> pHeader<span class="token punctuation">;</span> <span class="token comment">//头节点</span>

	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span> <span class="token comment">//栈的大小</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
LinkStack <span class="token function">init_LinkStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span> myStack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	myStack<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> myStack<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_LinkStack</span><span class="token punctuation">(</span> LinkStack  stack <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//入栈 就是 头插</span>

	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token comment">//拿到用户数据的前四个字节</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> myNode <span class="token operator">=</span> data<span class="token punctuation">;</span>


	<span class="token comment">//插入节点</span>
	myNode<span class="token operator">-></span>next <span class="token operator">=</span> myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
	myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> myNode<span class="token punctuation">;</span>

	<span class="token comment">//更新栈的大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_LinkStack</span><span class="token punctuation">(</span> LinkStack stack <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token comment">//如果是空栈   不出栈了</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//保存第一个有数据的节点  栈顶元素</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> pFirst <span class="token operator">=</span> myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

	myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next <span class="token operator">=</span> pFirst<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//更新链表长度  栈大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>pHeader<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//将第一个有数据的节点返回就可以了</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//返回栈大小</span>
<span class="token keyword">int</span> <span class="token function">size_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myStack<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//判断是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">LStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkStack</span><span class="token punctuation">(</span>LinkStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token comment">//测试</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">StackNode</span> node<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token comment">//准备出数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//初始化栈</span>
	LinkStack stack <span class="token operator">=</span> <span class="token function">init_LinkStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//入栈</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isEmpty_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//如果栈不为空  进行访问栈顶元素，并且出栈</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span>  <span class="token operator">*</span> pTop <span class="token operator">=</span> <span class="token function">top_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//栈顶元素</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈顶元素 姓名： %s  年龄：  %d\n"</span><span class="token punctuation">,</span> pTop<span class="token operator">-></span>name<span class="token punctuation">,</span> pTop<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出栈</span>
		<span class="token function">pop_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//栈的大小</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">size_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈的大小为：%d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁栈</span>
	<span class="token function">destroy_LinkStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>

<span class="token comment">/*
从第一个字符开始扫描
当遇见普通字符时忽略，
当遇见左括号时压入栈中
当遇见右括号时从栈中弹出栈顶符号，并进行匹配
匹配成功：继续读入下一个字符
匹配失败：立即停止，并报错
结束：
成功: 所有字符扫描完毕，且栈为空
失败：匹配失败或所有字符扫描完毕但栈非空
*/</span>

<span class="token comment">//判断字符是否是左括号</span>
<span class="token keyword">int</span> <span class="token function">IsLeft</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//判断字符是否是右括号</span>
<span class="token keyword">int</span> <span class="token function">IsRight</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printError</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> errMsg<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误的信息：%s\n"</span><span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//计算打印空格数量</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> pos <span class="token operator">-</span> str<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">"5+5*(6)+9/3*1-(1+3("</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> str<span class="token punctuation">;</span>

	<span class="token comment">//初始化栈</span>
	seqStack stack  <span class="token operator">=</span>  <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//如果是左括号  入栈</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsLeft</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//如果是右括号  弹出栈中的栈顶元素</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsRight</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//如果栈的元素个数>0 说明 可以匹配</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//弹出栈顶元素</span>
				<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span> <span class="token comment">//空栈  匹配失败</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printError</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"右括号没有匹配到左括号"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//判断栈是否为空栈</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printError</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"左括号没有匹配到右括号"</span><span class="token punctuation">,</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//弹出栈顶元素</span>
		<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//销毁栈</span>
	<span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="队列-顺序存储"><a href="#队列-顺序存储" class="headerlink" title="队列-顺序存储"></a>队列-顺序存储</h3><ul>
<li>seqQueue.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dynamicArray.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1024</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqQueue<span class="token punctuation">;</span>

<span class="token comment">//初始化队列</span>
seqQueue <span class="token function">init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//入队</span>
<span class="token keyword">void</span> <span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出队</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队头元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">front_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队尾元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">back_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队伍大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>seqQueue.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqQueue.h"</span></span>

<span class="token comment">//初始化队列</span>
seqQueue <span class="token function">init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> arr <span class="token operator">=</span>  <span class="token function">init_DynamicArray</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//入队</span>
<span class="token keyword">void</span> <span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myQueue<span class="token operator">-></span>m_size <span class="token operator">>=</span> MAX<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//入队 === 尾插</span>
	<span class="token function">insert_dynamicArray</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">,</span> myQueue<span class="token operator">-></span>m_size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//出队</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>myQueue<span class="token operator">-></span>m_size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">removeByPos_DynamicArray</span><span class="token punctuation">(</span>myQueue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//返回队头元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">front_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>

	<span class="token keyword">return</span> myQueue<span class="token operator">-></span>pAddr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//返回队尾元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">back_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myQueue<span class="token operator">-></span>pAddr<span class="token punctuation">[</span>myQueue<span class="token operator">-></span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//返回队伍大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">struct</span> <span class="token class-name">dynamicArray</span> <span class="token operator">*</span> myQueue <span class="token operator">=</span> queue<span class="token punctuation">;</span>
	<span class="token keyword">return</span> myQueue<span class="token operator">-></span>m_size<span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqQueue</span><span class="token punctuation">(</span>seqQueue queue<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">destroy_DynamicArray</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqQueue.h"</span></span>

<span class="token comment">//测试队列</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化队列</span>
	seqQueue queue <span class="token operator">=</span> <span class="token function">init_SeqQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//准备数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//入队</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取队头元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pFront <span class="token operator">=</span> <span class="token function">front_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队头元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pFront<span class="token operator">-></span>name<span class="token punctuation">,</span> pFront<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取队尾</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pBack <span class="token operator">=</span> <span class="token function">back_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队尾元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pBack<span class="token operator">-></span>name<span class="token punctuation">,</span> pBack<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出队</span>
		<span class="token function">pop_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队伍大小为： %d\n"</span><span class="token punctuation">,</span> <span class="token function">size_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁</span>
	<span class="token function">destroy_SeqQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="队列-链式存储"><a href="#队列-链式存储" class="headerlink" title="队列-链式存储"></a>队列-链式存储</h3><ul>
<li>linkQueue.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>


<span class="token comment">//链表节点</span>
<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment">//只维护指针域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//队列结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">LQueue</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//头节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> pHeader<span class="token punctuation">;</span>

	<span class="token comment">//队列大小</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>

	<span class="token comment">//维护尾节点的指针</span>
	<span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> pTail<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> LinkQueue<span class="token punctuation">;</span>

<span class="token comment">//初始化队列</span>
LinkQueue <span class="token function">init_LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//入队</span>
<span class="token keyword">void</span> <span class="token function">push_LinkQueue</span><span class="token punctuation">(</span> LinkQueue queue<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出队</span>
<span class="token keyword">void</span> <span class="token function">pop_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队头</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">front_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队尾</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">back_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回队伍大小</span>
<span class="token keyword">int</span> <span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//销毁</span>
<span class="token keyword">void</span> <span class="token function">destroy_LinkQueue</span><span class="token punctuation">(</span>LinkQueue queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>linkQueue.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linkQueue.h"</span></span>


<span class="token comment">//测试队列</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> node<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化队列</span>
	LinkQueue queue <span class="token operator">=</span> <span class="token function">init_LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//准备数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//入队</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取队头元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pFront <span class="token operator">=</span> <span class="token function">front_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队头元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pFront<span class="token operator">-></span>name<span class="token punctuation">,</span> pFront<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取队尾</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pBack <span class="token operator">=</span> <span class="token function">back_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队尾元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pBack<span class="token operator">-></span>name<span class="token punctuation">,</span> pBack<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出队</span>
		<span class="token function">pop_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"::::队伍大小为： %d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁</span>
	<span class="token function">destroy_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"linkQueue.h"</span></span>


<span class="token comment">//测试队列</span>
<span class="token keyword">struct</span> <span class="token class-name">Person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> node<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始化队列</span>
	LinkQueue queue <span class="token operator">=</span> <span class="token function">init_LinkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//准备数据</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">//入队</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">push_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取队头元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pFront <span class="token operator">=</span> <span class="token function">front_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队头元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pFront<span class="token operator">-></span>name<span class="token punctuation">,</span> pFront<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//获取队尾</span>
		<span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token operator">*</span> pBack <span class="token operator">=</span> <span class="token function">back_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队尾元素--- 姓名： %s  年龄： %d\n"</span><span class="token punctuation">,</span> pBack<span class="token operator">-></span>name<span class="token punctuation">,</span> pBack<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//出队</span>
		<span class="token function">pop_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"::::队伍大小为： %d\n"</span><span class="token punctuation">,</span> <span class="token function">size_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//销毁</span>
	<span class="token function">destroy_LinkQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild<span class="token punctuation">;</span> <span class="token comment">//左孩子节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild<span class="token punctuation">;</span> <span class="token comment">//右孩子节点</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//递归遍历函数</span>
<span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先序遍历  先根 再左  再右</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">recursion</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeA <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeD <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeE <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeF <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeG <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'G'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeH <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//建立结点之间的关系</span>

	nodeA<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeB<span class="token punctuation">;</span>
	nodeA<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeF<span class="token punctuation">;</span>

	nodeB<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeC<span class="token punctuation">;</span>

	nodeC<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeD<span class="token punctuation">;</span>
	nodeC<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeE<span class="token punctuation">;</span>

	nodeF<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeG<span class="token punctuation">;</span>
	
	nodeG<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeH<span class="token punctuation">;</span>

	<span class="token comment">//递归遍历</span>
	<span class="token function">recursion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的编程"><a href="#二叉树的编程" class="headerlink" title="二叉树的编程"></a>二叉树的编程</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild<span class="token punctuation">;</span> <span class="token comment">//左孩子节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild<span class="token punctuation">;</span> <span class="token comment">//右孩子节点</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//统计叶子数量</span>
<span class="token keyword">void</span> <span class="token function">calculateLeafNum</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//递归的结束条件</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>lChild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>rChild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token punctuation">(</span><span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">calculateLeafNum</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">calculateLeafNum</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//求出左子树的高度 </span>
	<span class="token keyword">int</span> lHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> rHeight <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//取左子树 和 右子树中最大值 +1 </span>
	<span class="token keyword">int</span> height <span class="token operator">=</span> lHeight <span class="token operator">></span> rHeight <span class="token operator">?</span> lHeight <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> rHeight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>


	<span class="token keyword">return</span> height<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先拷贝 左子树 </span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild <span class="token operator">=</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//再拷贝 右子树</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild <span class="token operator">=</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//创建新节点 </span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	newNode<span class="token operator">-></span>lChild <span class="token operator">=</span> lChild<span class="token punctuation">;</span>
	newNode<span class="token operator">-></span>rChild <span class="token operator">=</span> rChild<span class="token punctuation">;</span>

	newNode<span class="token operator">-></span>ch <span class="token operator">=</span> root<span class="token operator">-></span>ch<span class="token punctuation">;</span>

	<span class="token comment">//返回给用户</span>
	<span class="token keyword">return</span> newNode<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>


<span class="token comment">//遍历树</span>
<span class="token keyword">void</span> <span class="token function">showBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> root<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">showBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">showBinaryTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//释放树</span>
<span class="token keyword">void</span> <span class="token function">freeTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先释放左子树 </span>
	<span class="token function">freeTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//再释放右子树</span>
	<span class="token function">freeTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 被释放了\n"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//释放根节点</span>
	<span class="token function">free</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeA <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeD <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeE <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeF <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeG <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'G'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeH <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//建立结点之间的关系</span>

	nodeA<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeB<span class="token punctuation">;</span>
	nodeA<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeF<span class="token punctuation">;</span>

	nodeB<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeC<span class="token punctuation">;</span>

	nodeC<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeD<span class="token punctuation">;</span>
	nodeC<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeE<span class="token punctuation">;</span>

	nodeF<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeG<span class="token punctuation">;</span>

	nodeG<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeH<span class="token punctuation">;</span>

	<span class="token comment">//1、求树中的叶子的数量</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">calculateLeafNum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"叶子的数量为:%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//2、求树的高度/深度</span>
	<span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getTreeHeight</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"树的高度为: %d\n"</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//3、拷贝二叉树</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> newTree <span class="token operator">=</span> <span class="token function">copyBinaryTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">showBinaryTree</span><span class="token punctuation">(</span>newTree<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//4、释放二叉树</span>
	<span class="token function">freeTree</span><span class="token punctuation">(</span>newTree<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二叉树的非递归遍历"><a href="#二叉树的非递归遍历" class="headerlink" title="二叉树的非递归遍历"></a>二叉树的非递归遍历</h3><ul>
<li>seqStack.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span>  <span class="token expression">once</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>


<span class="token comment">//#define  MAX 1024</span>
<span class="token comment">////栈的结构体</span>
<span class="token comment">//struct SStack</span>
<span class="token comment">//&#123;</span>
<span class="token comment">//	void * data[MAX]; //数组</span>
<span class="token comment">//</span>
<span class="token comment">//	//栈的元素个数</span>
<span class="token comment">//	int m_Size;</span>
<span class="token comment">//&#125;;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>seqStack.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token comment">//栈的结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">SStack</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//数组</span>

	<span class="token comment">//栈的元素个数</span>
	<span class="token keyword">int</span> m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span> seqStack<span class="token punctuation">;</span>

<span class="token comment">//初始化栈</span>
seqStack <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">SStack</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//清空数组中的每个元素</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

	stack<span class="token operator">-></span>m_Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> stack<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//入栈</span>
<span class="token keyword">void</span> <span class="token function">push_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//判断是否已经栈满 ,如果满了 不可以再入栈了</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> MAX<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">//入栈  尾插</span>

	myStack<span class="token operator">-></span>m_Size<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//更新栈大小</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//出栈</span>
<span class="token keyword">void</span> <span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//如果是空栈 不执行出栈</span>
	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//执行出栈</span>
	myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//更新栈的大小</span>
	myStack<span class="token operator">-></span>m_Size<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//获取栈顶元素</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token comment">//如果是空栈   返回 NULL</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>data<span class="token punctuation">[</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//栈的大小</span>
<span class="token keyword">int</span> <span class="token function">size_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>

	<span class="token keyword">return</span> myStack<span class="token operator">-></span>m_Size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//判断栈是否为空</span>
<span class="token keyword">int</span> <span class="token function">isEmpty_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">struct</span> <span class="token class-name">SStack</span> <span class="token operator">*</span> myStack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>myStack<span class="token operator">-></span>m_Size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//真</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//返回假 代表不是空栈</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//销毁栈</span>
<span class="token keyword">void</span> <span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>seqStack stack<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	stack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>遍历</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"seqStack.h"</span></span>
<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span> <span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> lChild<span class="token punctuation">;</span> <span class="token comment">//左孩子节点</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> rChild<span class="token punctuation">;</span> <span class="token comment">//右孩子节点</span>
	<span class="token comment">//标示</span>
	<span class="token keyword">int</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">/*
	1、将根节点 压入栈中
	2、只要 栈size> 0  执行循环
		2.1 拿出栈顶元素
		2.2 如果栈顶元素的标志位 真    直接输出  执行下一次循环
		2.3 如果不是真 该flag的标志位真
		2.4 将  右子节点  和 左子节点  和 根 入栈
		2.5 执行下一次循环
*/</span>

<span class="token keyword">void</span> <span class="token function">nonRecursion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> root<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//初始栈</span>
	seqStack myStack <span class="token operator">=</span> <span class="token function">init_SeqStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">size_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//获取栈顶元素</span>
		<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> <span class="token operator">*</span> topNode <span class="token operator">=</span> <span class="token function">top_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//弹出栈顶</span>
		<span class="token function">pop_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//如果栈顶元素的标志位 真    直接输出  执行下一次循环</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>topNode<span class="token operator">-></span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> topNode<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//如果不是真 该flag的标志位真</span>
		topNode<span class="token operator">-></span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token comment">//将  右子节点  和 左子节点  和 根 入栈</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>topNode<span class="token operator">-></span>rChild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span> topNode<span class="token operator">-></span>rChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> 

		<span class="token keyword">if</span> <span class="token punctuation">(</span>topNode<span class="token operator">-></span>lChild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span> topNode<span class="token operator">-></span>lChild<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token function">push_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">,</span>topNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//栈销毁掉</span>
	<span class="token function">destroy_SeqStack</span><span class="token punctuation">(</span>myStack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	myStack <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeA <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeD <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeE <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'E'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeF <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeG <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'G'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">BinaryNode</span> nodeH <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//建立结点之间的关系</span>

	nodeA<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeB<span class="token punctuation">;</span>
	nodeA<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeF<span class="token punctuation">;</span>

	nodeB<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeC<span class="token punctuation">;</span>

	nodeC<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeD<span class="token punctuation">;</span>
	nodeC<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeE<span class="token punctuation">;</span>

	nodeF<span class="token punctuation">.</span>rChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeG<span class="token punctuation">;</span>

	nodeG<span class="token punctuation">.</span>lChild <span class="token operator">=</span> <span class="token operator">&amp;</span>nodeH<span class="token punctuation">;</span>

	<span class="token comment">//执行非递归遍历</span>
	<span class="token function">nonRecursion</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodeA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//从小到大</span>
<span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//利用temp保存当前 i号位置的数据值</span>
			<span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//数据进行后移</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token comment">//将j+1 的位置数据 赋值为 temp</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

	
	<span class="token comment">//打印数组</span>
	<span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到gitub或gitee</title>
    <url>/2022/06/21/hexo_git/</url>
    <content><![CDATA[<h2 id="一、配置环境"><a href="#一、配置环境" class="headerlink" title="一、配置环境"></a>一、配置环境</h2><ol>
<li>安装git</li>
<li>安装node.js</li>
<li>安装hexo<ul>
<li><a href="https://hexo.io/zh-cn/docs/">官方文档</a></li>
</ul>
</li>
</ol>
<h2 id="二、本地运行"><a href="#二、本地运行" class="headerlink" title="二、本地运行"></a>二、本地运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//git窗口
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span> //进入blog所在文件夹
hexo init   //初始化
<span class="token function">npm</span> <span class="token function">install</span> //安装依赖
hexo g //构建
hexo s //本地测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h2><ol>
<li><p>github中搜索主题并下载压缩包</p>
</li>
<li><p>在hexo的theme中解压压缩包</p>
</li>
<li><p>修改theme下的配置文件_config.yml</p>
<ul>
<li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">参考</a>非常详细</li>
</ul>
</li>
<li><p>重新本地运行</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="四、部署到github"><a href="#四、部署到github" class="headerlink" title="四、部署到github"></a>四、部署到github</h2><ol>
<li>安装git提交插件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>生成密钥添加到Github并测试Git</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name
<span class="token function">git</span> config user.email
<span class="token function">git</span> config --global user.name <span class="token string">"name"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"email"</span>
<span class="token function">ssh</span> -keygen -t rsa -C <span class="token string">"email"</span>
<span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">ls</span> 
<span class="token function">vim</span> id_rsa.pub
copy
在github的setting的ssh key中粘贴
       
！！！！！！！！！！！！！每次关机后这个文件里面内容会被清除，需要重新手动添加
！！！！！！！！！！！！！否则会报连接拒绝的错误
查询：https://ipaddress.com/website/github.com的ipv4地址
添加 C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>System32<span class="token punctuation">\</span>drivers<span class="token punctuation">\</span>etc<span class="token punctuation">\</span>hosts
	<span class="token number">140.82</span>.112.4 github.com
       
<span class="token function">git</span> <span class="token function">bash</span>
<span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>修改hexo的配置文件_config.yml</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:
   type: <span class="token string">'git'</span>
   repo: git@github.com:01zic/01zic.github.io.git
   branch:main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>部署到github(git bash)</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="五、可能的小问题"><a href="#五、可能的小问题" class="headerlink" title="五、可能的小问题"></a>五、可能的小问题</h2><ol>
<li>git连接失败的解决方案<ol>
<li>换网，校园网不一定好使</li>
<li>查询：<a href="https://ipaddress.com/website/github.com">github的ipv4地址</a><br>添加：C:\Windows\System32\drivers\etc\hosts -&gt; 140.82.112.4 github.com</li>
<li>ssh公钥配置，重新配置</li>
</ol>
</li>
<li>github页面代码块的错乱问题<ul>
<li>代码块前面不要有任何东西 </li>
<li>例如无序列表或者有序列表之类的东西</li>
<li>直接将代码块置顶，前面不留空格</li>
</ul>
</li>
</ol>
<h2 id="六、七牛云图床的配置"><a href="#六、七牛云图床的配置" class="headerlink" title="六、七牛云图床的配置"></a>六、七牛云图床的配置</h2><ol>
<li>七牛云登录后，对象存储里面新建空间，配置加速域名，用备案过的域名的二级域名</li>
<li>到腾讯云DNS解析的地方添加解析记录，qiniu CNAME CNAME记录值（七牛云提供）</li>
<li>AK SK 域名 存储区域</li>
</ol>
<h2 id="七、配置mermaid"><a href="#七、配置mermaid" class="headerlink" title="七、配置mermaid"></a>七、配置mermaid</h2><ul>
<li><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">直接参考github链接</a>（我搞的时候一直有问题）<ol>
<li>安装插件</li>
<li>修改配置文件</li>
<li>js文件修改</li>
</ol>
</li>
<li><a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">mermaid-github文档</a></li>
</ul>
<h2 id="八、hexo中添加本地文件下载"><a href="#八、hexo中添加本地文件下载" class="headerlink" title="八、hexo中添加本地文件下载"></a>八、hexo中添加本地文件下载</h2><ul>
<li>调整程序配置文件_config.yml 里的post_asset_folder:这个选项设置为True</li>
<li>在source下创建/download文件夹，先把文件xxx.xls/doc（或者其他）复制到这个文件夹</li>
<li> 最后在xxxx.md中想引入下载链接时，只需要在xxxx.md中按照markdown的格式引入即可：</li>
</ul>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">xx文件 <span class="token url">[<span class="token content">点击下载</span>](<span class="token url">/download/xx.xx</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>还可以在七牛云里面新建文件夹，将需要下载的文件上传，然后获取Url形成超链接即可。</li>
</ul>
<h2 id="九、换NEXT主题"><a href="#九、换NEXT主题" class="headerlink" title="九、换NEXT主题"></a>九、换NEXT主题</h2><ul>
<li>因为mermaid配置太折磨人了</li>
<li><a href="https://github.com/theme-next/awesome-next">next主题的相关插件</a></li>
<li><a href="https://blog.csdn.net/Sky_True/article/details/104435997/">别人的完整配置</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title>C项目学习——BuildYourOwnLisp</title>
    <url>/2022/06/22/throughLispLearnC/</url>
    <content><![CDATA[<h2 id="第零章-·-关于"><a href="#第零章-·-关于" class="headerlink" title="第零章 · 关于"></a>第零章 · 关于</h2><ul>
<li><a href="http://buildyourownlisp.com/">阅读地址</a></li>
<li><a href="https://github.com/orangeduck/BuildYourOwnLisp">项目主页</a></li>
</ul>
<h2 id="第一章-·-介绍"><a href="#第一章-·-介绍" class="headerlink" title="第一章 · 介绍"></a>第一章 · 介绍</h2><ul>
<li>没啥</li>
</ul>
<h2 id="第二章-·-安装"><a href="#第二章-·-安装" class="headerlink" title="第二章 · 安装"></a>第二章 · 安装</h2><h3 id="1-代码编辑器"><a href="#1-代码编辑器" class="headerlink" title="1. 代码编辑器"></a>1. 代码编辑器</h3><ul>
<li>windows notepad++</li>
</ul>
<h3 id="2-编译器"><a href="#2-编译器" class="headerlink" title="2. 编译器"></a>2. 编译器</h3><ul>
<li><a href="https://sourceforge.net/projects/mingw/">MinGW</a></li>
<li>配置系统环境<ul>
<li>系统环境新建 MinGW C:\MinGW</li>
<li>Path C:\MinGW\bin</li>
</ul>
</li>
</ul>
<h3 id="3-测试c编译器"><a href="#3-测试c编译器" class="headerlink" title="3. 测试c编译器"></a>3. 测试c编译器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-Hello-World"><a href="#4-Hello-World" class="headerlink" title="4. Hello World"></a>4. Hello World</h3><ul>
<li>新建hello_world.c文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> <span class="token comment">//头文件 标准输入输出库</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出到命令行</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结束main函数并返回值0，0表示程序正常退出，没有发生错误</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-编译"><a href="#5-编译" class="headerlink" title="5. 编译"></a>5. 编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall hello_world.c -o hello_world
hello_world
//产生可执行文件 hello_world 在cmd中执行 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="6-文档"><a href="#6-文档" class="headerlink" title="6. 文档"></a>6. 文档</h3><ul>
<li><a href="https://en.cppreference.com/w/c">C在线文档</a></li>
</ul>
<h2 id="第三章-·-基础"><a href="#第三章-·-基础" class="headerlink" title="第三章 · 基础"></a>第三章 · 基础</h2><h3 id="1-程序"><a href="#1-程序" class="headerlink" title="1. 程序"></a>1. 程序</h3><ul>
<li>程序由函数定义和类型定义组成</li>
<li>所有程序从main函数开始执行</li>
</ul>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><h3 id="3-函数声明"><a href="#3-函数声明" class="headerlink" title="3. 函数声明"></a>3. 函数声明</h3><h3 id="4-结构体声明"><a href="#4-结构体声明" class="headerlink" title="4. 结构体声明"></a>4. 结构体声明</h3><h3 id="5-指针"><a href="#5-指针" class="headerlink" title="5. 指针"></a>5. 指针</h3><ul>
<li>char** ：char 类型的指针的指针 </li>
</ul>
<h3 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6. 字符串"></a>6. 字符串</h3><ul>
<li>char*:字符串</li>
</ul>
<h3 id="7-条件分支"><a href="#7-条件分支" class="headerlink" title="7. 条件分支"></a>7. 条件分支</h3><ul>
<li>if</li>
<li>if…else</li>
<li>||</li>
<li>&amp;&amp;</li>
</ul>
<h3 id="8-循环"><a href="#8-循环" class="headerlink" title="8. 循环"></a>8. 循环</h3><ul>
<li>while</li>
<li>for(;;)</li>
<li>do…while</li>
</ul>
<h2 id="第四章-·-交互"><a href="#第四章-·-交互" class="headerlink" title="第四章 · 交互"></a>第四章 · 交互</h2><h3 id="1-读取-求值-输出"><a href="#1-读取-求值-输出" class="headerlink" title="1. 读取-求值-输出"></a>1. 读取-求值-输出</h3><ul>
<li>REPL<ul>
<li><em>read-evaluate-print loop</em> (读取-求值-输出循环)</li>
</ul>
</li>
</ul>
<h3 id="2-交互提示"><a href="#2-交互提示" class="headerlink" title="2. 交互提示"></a>2. 交互提示</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token comment">/* Declare a buffer for user input of size 2048*/</span>
<span class="token keyword">static</span> <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">/* Print Version and Exit Information */</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* In a never ending loop */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">/* Output our prompt */</span>
        <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"lispy>"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">/* Read a line of user input of maximum size 2048 */</span>
        <span class="token function">fgets</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token number">2048</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">/* Echo input back to user */</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No you're a %s"</span><span class="token punctuation">,</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h3><pre class="line-numbers language-none"><code class="language-none">gcc -std&#x3D;c99 -Wall prompt.c -o prompt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-运行prompt"><a href="#4-运行prompt" class="headerlink" title="4. 运行prompt"></a>4. 运行prompt</h3><h3 id="5-预处理器"><a href="#5-预处理器" class="headerlink" title="5. 预处理器"></a>5. 预处理器</h3><ul>
<li>在windows、linux和mac上都可以运行</li>
<li>感觉很强</li>
<li>不同的平台下头文件不一样</li>
<li>用一个readline函数内 输入读取到缓存中 缓存中的内容读取到新建的字符串 返回字符串</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">/* If we are compiling on Windows compile these functions */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/* Fake readline function */</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Fake add_history function */</span>
<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">/* Otherwise include the editline headers */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span> <span class="token comment">// 译注：如果是Mac系统，不需要包含history.h头文件。</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">/* 译注
上段#else中的代码可以改得更通用一些：
#else
#ifdef __linux__
#include &lt;editline/readline.h>
#include &lt;editline/history.h>
#endif

#ifdef __MACH__
#include &lt;editline/readline.h>
#endif
#endif
*/</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Now in either case readline will be correctly defined */</span>
    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No you're a %s\n"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第五章-·-编程语言"><a href="#第五章-·-编程语言" class="headerlink" title="第五章 · 编程语言"></a>第五章 · 编程语言</h2><h3 id="1-什么是编程语言？"><a href="#1-什么是编程语言？" class="headerlink" title="1.什么是编程语言？"></a>1.什么是编程语言？</h3><ul>
<li>自然语言都是建立在递归和重复的子结构之上的</li>
<li>需要一个语法解析器，判断用户输入是否合法</li>
<li>使用一个叫mpc的库来完成这个工作</li>
</ul>
<h3 id="2-解析器组合子"><a href="#2-解析器组合子" class="headerlink" title="2.解析器组合子"></a>2.解析器组合子</h3><ul>
<li><a href="https://github.com/orangeduck/mpc">mpc</a>是原作者编写的一个解析器组合子(Parser Combinators)库</li>
<li>使用这个库为任何语言编写语法解析器</li>
<li>简化了工作</li>
<li>仅编写高层的抽象语法规则</li>
</ul>
<h3 id="3-编写语法规则"><a href="#3-编写语法规则" class="headerlink" title="3.编写语法规则"></a>3.编写语法规则</h3><ul>
<li>解析器类型 mpc_parser_t*</li>
<li>mpc_or函数产生一个解析器 </li>
<li>mpc_sym将字符串转化为一个语句</li>
<li>mpc_and函数返回的解析器可接受的语句必须是各个语句按照顺序出现</li>
<li>mpcf_strfold和free指定了各个语句的组织及删除方式</li>
<li>mpc_many表示0到多个短语组成的逻辑关系</li>
<li>例子</li>
<li>定义好解析器Adjective None来定义短语Phrase</li>
<li>0到多个Phrase定义Doge语言</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Build a parser 'Adjective' to recognize descriptions */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Adjective <span class="token operator">=</span> <span class="token function">mpc_or</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> 
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"wow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"many"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"so"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"such"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Build a parser 'Noun' to recognize things */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Noun <span class="token operator">=</span> <span class="token function">mpc_or</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"lisp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"language"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token function">mpc_sym</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Phrase <span class="token operator">=</span> <span class="token function">mpc_and</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> mpcf_strfold<span class="token punctuation">,</span> 
    Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Doge <span class="token operator">=</span> <span class="token function">mpc_many</span><span class="token punctuation">(</span>mpcf_strfold<span class="token punctuation">,</span> Phrase<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Do some parsing here... */</span>

  <span class="token function">mpc_delete</span><span class="token punctuation">(</span>Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-更加自然的语法规则"><a href="#4-更加自然的语法规则" class="headerlink" title="4.更加自然的语法规则"></a>4.更加自然的语法规则</h3><ul>
<li><p>使用mpc_new函数定义语法规则的名字</p>
</li>
<li><p>使用mpca_lang函数具体定义这些语法规则</p>
</li>
<li><p><code>mpca_lang</code> 函数的第一个参数是操作标记，在这里我们使用默认选项。第二个参数是 C 语言的一个长字符串。这个字符串中定义了具体的语法。它包含一系列的递归规则。每个规则分为两部分，用冒号 <code>:</code> 隔开，冒号左边是规则的名字，右边是规则的定义，使用 <code>;</code> 表示规则结束。</p>
</li>
<li><table>
<thead>
<tr>
<th>语法表示</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>“ab”</td>
<td>字符串ab</td>
</tr>
<tr>
<td>‘a’</td>
<td>字符a</td>
</tr>
<tr>
<td>‘a’ ‘b’</td>
<td>先有一个字符a，后紧跟一个字符b</td>
</tr>
<tr>
<td>‘a’|’b’</td>
<td>有字符a或者b</td>
</tr>
<tr>
<td>‘a’*</td>
<td>要求有0个或多个字符a</td>
</tr>
<tr>
<td>‘a’+</td>
<td>要求有1个或多个字符a</td>
</tr>
<tr>
<td><abba></td>
<td>要求满足名为 <code>abba</code> 定义的语法规则</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Adjective <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"adjective"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Noun      <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"noun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Phrase    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"phrase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Doge      <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"doge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                           \
      adjective : \"wow\" | \"many\"            \
                |  \"so\" | \"such\";           \
      noun      : \"lisp\" | \"language\"       \
                | \"book\" | \"build\" | \"c\"; \
      phrase    : &lt;adjective> &lt;noun>;           \
      doge      : &lt;phrase>*;                    \
    "</span><span class="token punctuation">,</span>
    Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> Phrase<span class="token punctuation">,</span> Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Do some parsing here... */</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Adjective<span class="token punctuation">,</span> Noun<span class="token punctuation">,</span> Phrase<span class="token punctuation">,</span> Doge<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="第六章-·-语法分析"><a href="#第六章-·-语法分析" class="headerlink" title="第六章 · 语法分析"></a>第六章 · 语法分析</h2><h3 id="1-波兰表达式（polish-notation）"><a href="#1-波兰表达式（polish-notation）" class="headerlink" title="1. 波兰表达式（polish notation）"></a>1. 波兰表达式（polish notation）</h3><ul>
<li><p>实现一个简单的语法解析器</p>
</li>
<li><p>polish notation 是一种数学标记语言 运算符在操作数的前面</p>
</li>
<li><p>波兰表达式总是以操作符开头，后面跟着操作数或其他的包裹在圆括号中的表达式。</p>
</li>
<li><p>“程序(<code>Program</code>)是由一个操作符(<code>Operator</code>)加上一个或多个表达式(<code>Expression</code>)组成的”，而 “表达式(<code>Expression</code>)可以是一个数字，或者是包裹在圆括号中的一个操作符(<code>Operator</code>)加上一个或多个表达式(<code>Expression</code>)”</p>
</li>
<li><p>完整描述</p>
</li>
<li><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>定义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>程序(<code>Program</code>)</td>
<td><em>the start of input</em>, an <code>Operator</code>, one or more <code>Expression</code>, and <em>the end of input</em>.</td>
</tr>
<tr>
<td>表达式(Expression)</td>
<td>either a <code>Number</code> <em>or</em> <code>&#39;(&#39;</code>, an <code>Operator</code>, one or more <code>Expression</code>, and an <code>&#39;)&#39;</code>.</td>
</tr>
<tr>
<td>操作符(Operator)</td>
<td><code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;*&#39;</code>, or <code>&#39;/&#39;</code>.</td>
</tr>
<tr>
<td>数字(<code>Number</code>)</td>
<td>an optional <code>-</code>, and one or more characters between <code>0</code> and <code>9</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-正则表达式（Regular-Expressions）"><a href="#2-正则表达式（Regular-Expressions）" class="headerlink" title="2.正则表达式（Regular Expressions）"></a>2.正则表达式（Regular Expressions）</h3><ul>
<li><table>
<thead>
<tr>
<th>语法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>Any character is required.</td>
</tr>
<tr>
<td>a</td>
<td>The character <code>a</code> is required.</td>
</tr>
<tr>
<td>[abcdef]</td>
<td>Any character in the set <code>abcdef</code> is required.</td>
</tr>
<tr>
<td>[a-f]</td>
<td>Any character in the range <code>a</code> to <code>f</code> is required.</td>
</tr>
<tr>
<td>a?</td>
<td>The character <code>a</code> is optional.</td>
</tr>
<tr>
<td>a*</td>
<td>Zero or more of the character <code>a</code> are required.</td>
</tr>
<tr>
<td>a+</td>
<td>One or more of the character <code>a</code> are required.</td>
</tr>
<tr>
<td>^</td>
<td>The start of input is required.</td>
</tr>
<tr>
<td>$</td>
<td>The end of input is required.</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://learncodethehardway.org/">教程</a></p>
</li>
</ul>
<h3 id="3-安装mpc"><a href="#3-安装mpc" class="headerlink" title="3.安装mpc"></a>3.安装mpc</h3><ul>
<li>从<a href="https://github.com/orangeduck/mpc">mpc项目</a>主页中下载、mpc.h<code>和</code>mpc.c</li>
<li>第四章parsing.c</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing.c mpc.c -o parsing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>C语言中。尖括号用来包含系统头文件如 <code>stdio.h</code>，双引号用来包含其他的头文件如 <code>mpc.h</code></li>
</ul>
<h3 id="4-Polish-Notation-Grammar"><a href="#4-Polish-Notation-Grammar" class="headerlink" title="4.Polish Notation Grammar"></a>4.Polish Notation Grammar</h3><ul>
<li>以下代码放在parsing.c的main函数的开头</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Some Parsers */</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr     <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Define them with the following Language */</span>
<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                     \
    number   : /-?[0-9]+/ ;                             \
    operator : '+' | '-' | '*' | '/' ;                  \
    expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
    lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>将使用的解析器删除，将以下代码放在return的前面</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-解析用户的输入"><a href="#5-解析用户的输入" class="headerlink" title="5.解析用户的输入"></a>5.解析用户的输入</h3><ul>
<li>修改parsing.c中的while循环内容</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Attempt to Parse the user Input */</span>
<span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* On Success Print the AST */</span>
  <span class="token function">mpc_ast_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Otherwise Print the Error */</span>
  <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>调用了 <code>mpc_parse</code> 函数，并将 <code>Lispy</code> 解析器和用户输入 <code>input</code> 作为参数。它将解析的结果保存到 <code>&amp;r</code> 中，如果解析成功，返回值为 <code>1</code>，失败为 <code>0</code>。</li>
<li>解析成功时会产生一个内部结构，并保存到 <code>r</code> 的 <code>output</code> 字段中。我们可以使用 <code>mpc_ast_print</code> 将这个结构打印出来，使用 <code>mpc_ast_delete</code> 将其删除。</li>
<li>解析失败时则会将错误信息保存在 <code>r</code> 的 <code>error</code> 字段中。我们可以使用 <code>mpc_err_print</code> 将这个结构打印出来，使用 <code>mpc_err_delete</code> 将其删除。</li>
<li>重新编译</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing.c mpc.c -o parsing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li>parsing.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Create Some Parsers */</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr     <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy    <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Define them with the following Language */</span>
  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Attempt to parse the user input */</span>
    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* On success print and delete the AST */</span>
      <span class="token function">mpc_ast_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">/* Otherwise print and delete the Error */</span>
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Undefine and delete our parsers */</span>
  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><ul>
<li>到这里应该是完成了表达式的解析</li>
</ul>
<h2 id="第七章-·-计算"><a href="#第七章-·-计算" class="headerlink" title="第七章 · 计算"></a>第七章 · 计算</h2><h3 id="1-树型结构"><a href="#1-树型结构" class="headerlink" title="1.树型结构"></a>1.树型结构</h3><ul>
<li>可以读取输入，解析并得到表达式的内部结构</li>
<li>需要对表达式的内部结构进行计算求值</li>
<li>内部结构：抽象语法树(Abstract Syntax Tree，简称 AST)——表示用户输入的表达式结构</li>
<li>操作数和操作符等需要被处理的实际数据都位于叶子节点上</li>
<li>而非叶子节点上则包含了遍历和求值的信息</li>
<li>在 <code>mpc.h</code> 中，可以找到 <code>mpc_ast_t</code> 类型的定义——解析表达式得到的数据结构</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mpc_ast_t</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> tag<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> contents<span class="token punctuation">;</span>
  <span class="token class-name">mpc_state_t</span> state<span class="token punctuation">;</span>
  <span class="token keyword">int</span> children_num<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mpc_ast_t</span><span class="token operator">*</span><span class="token operator">*</span> children<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">mpc_ast_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>tag</code> 字段。在打印这个树形结构时，<code>tag</code> 就是在节点内容之前的信息，它表示了解析这个节点时所用到的所有规则。例如：<code>expr|number|regex</code>。知道创建节点时所匹配到的规则</li>
<li><code>contents</code> 字段，它包含了节点中具体的内容，例如 <code>&#39;*&#39;</code>、<code>&#39;(&#39;</code>、<code>&#39;5&#39;</code>。对于表示分支的非叶子节点，这个字段为空。而对于叶子节点，则包含了操作数或操作符的字符串形式。</li>
<li><code>state</code>。这里面包含了解析器发现这个节点时所处的状态，例如行数和列数等信息。</li>
<li>两个字段 <code>children_num</code> 和 <code>children</code> 帮助我们来遍历抽象语法树。前一个字段告诉我们有多少个孩子节点，后一个字段是包含这些节点的数组。</li>
<li><code>children</code> 字段的类型是 <code>mpc_ast_t**</code>。这是一个二重指针类型,它是孩子节点的列表。</li>
<li><code>children</code> 使用数组的语法，在其后使用 <code>[x]</code> 来获取某个下标的值。比如，可以用 <code>children[0]</code> 来获取第一个孩子节点。</li>
<li><code>mpc_ast_t*</code> 是指向结构体的指针类型，所以获取其字段的语法有些许不同。需要使用 <code>-&gt;</code> 符号</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Load AST from output */</span>
<span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> a <span class="token operator">=</span> r<span class="token punctuation">.</span>output<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tag: %s\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Contents: %s\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of children: %i\n"</span><span class="token punctuation">,</span> a<span class="token operator">-></span>children_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Get First Child */</span>
<span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> c0 <span class="token operator">=</span> a<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Tag: %s\n"</span><span class="token punctuation">,</span> c0<span class="token operator">-></span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Contents: %s\n"</span><span class="token punctuation">,</span> c0<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"First Child Number of children: %i\n"</span><span class="token punctuation">,</span>
  c0<span class="token operator">-></span>children_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h3><ul>
<li>树形结构是自身重复的。树的每个孩子节点都是树，每个孩子节点的孩子节点也是树，以此类推。正如编程语言一样，树形结构也是递归和重复的。显要想编写函数处理所有可能的情况，就必须要保证函数可以处理任意深度。可以使用递归函数的天生优势来轻松地处理这种重复自身的结构。</li>
<li>递归得到所有子节点的值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">number_of_nodes</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>children_num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>children_num <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      total <span class="token operator">=</span> total <span class="token operator">+</span> <span class="token function">number_of_nodes</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-求值"><a href="#3-求值" class="headerlink" title="3.求值"></a>3.求值</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lispy<span class="token operator">></span> * <span class="token number">10</span> <span class="token punctuation">(</span>+ <span class="token number">1</span> <span class="token number">51</span><span class="token punctuation">)</span>
<span class="token operator">></span>
  regex
  operator<span class="token operator">|</span>char:1:1 <span class="token string">'*'</span>
  <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:3 <span class="token string">'10'</span>
  <span class="token function">expr</span><span class="token operator">|</span><span class="token operator">></span>
    char:1:6 <span class="token string">'('</span>
    operator<span class="token operator">|</span>char:1:7 <span class="token string">'+'</span>
    <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:9 <span class="token string">'1'</span>
    <span class="token function">expr</span><span class="token operator">|</span>number<span class="token operator">|</span>regex:1:11 <span class="token string">'51'</span>
    char:1:13 <span class="token string">')'</span>
  regex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li><p>有 <code>number</code> 标签的节点一定是一个数字，并且没有孩子节点。可以直接将其转换为一个数字。这将是递归函数中的基本情况。</p>
</li>
<li><p>如果一个节点有 <code>expr</code> 标签，但没有 <code>number</code> 标签，需要看他的第二个孩子节点是什么操作符(第一个孩子节点永远是 <code>(</code> 字符)。然后我们需要使用这个操作符来对后面的孩子节点进行求值。当然，也不包括最后的 <code>)</code> 节点。</p>
</li>
<li><p>C 语言中 <code>long</code> 类型(长整形)保存计算的结果</p>
</li>
<li><p>为了检测节点的类型，或是获得节点中保存的数值，会用到节点中的 <code>tag</code> 和 <code>contents</code> 字段。这些字段都是字符串类型的，所以需要用到一些辅助性的库函数：</p>
</li>
<li><table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>atoi</td>
<td>Converts a <code>char*</code> to a <code>int</code>.</td>
</tr>
<tr>
<td>strcmp</td>
<td>Takes as input two <code>char*</code> and if they are equal it returns <code>0</code>.</td>
</tr>
<tr>
<td>strstr</td>
<td>Takes as input two <code>char*</code> and returns a pointer to the location of the second in the first, or <code>0</code> if the second is not a sub-string of the first.</td>
</tr>
</tbody></table>
</li>
<li><p>可以使用 <code>strcmp</code> 来检查应该使用什么操作符，并使用 <code>strstr</code> 来检测 <code>tag</code> 中是否含有某个字段。</p>
</li>
<li><p>递归求值函数</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If tagged as number return it directly. */</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* The operator is always second child. */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>

  <span class="token comment">/* We store the third child in `x` */</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Iterate the remaining children and combining. */</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>eval_op函数定义</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Use operator string to see which operation to perform */</span>
<span class="token keyword">long</span> <span class="token function">eval_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-打印"><a href="#4-打印" class="headerlink" title="4.打印"></a>4.打印</h3><ul>
<li>打印求值结果</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>进行基本的数学运算</li>
</ul>
<h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h3><ul>
<li>evaluation.c</li>
<li>重新编译运行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing003.c mpc.c -o parsing003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Use operator string to see which operation to perform */</span>
<span class="token keyword">long</span> <span class="token function">eval_op</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">long</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If tagged as number return it directly. */</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* The operator is always second child. */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>

  <span class="token comment">/* We store the third child in `x` */</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Iterate the remaining children and combining. */</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

      <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第八章-·-错误处理"><a href="#第八章-·-错误处理" class="headerlink" title="第八章 · 错误处理"></a>第八章 · 错误处理</h2><h3 id="1-异常退出"><a href="#1-异常退出" class="headerlink" title="1 异常退出"></a>1 异常退出</h3><ul>
<li>gdb</li>
</ul>
<h3 id="2-List-Value"><a href="#2-List-Value" class="headerlink" title="2. List Value"></a>2. List Value</h3><ul>
<li>需要能表示这两种结果的数据结构。简单起见，我们使用结构体来表示，并使用 <code>type</code> 字段来告诉我们当前哪个字段是有意义的</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Declare New lval Struct */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3. 枚举"></a>3. 枚举</h3><ul>
<li><code>lval</code> 的 <code>type</code> 和 <code>err</code> 字段的类型都是 <code>int</code></li>
<li>如果 <code>type</code> 为 0，那么此结构体表示一个<em>数字</em>。</li>
<li>如果 <code>type</code> 为 1，那么此结构体表示一个<em>错误</em>。</li>
<li>使用枚举 表明数字的含义</li>
<li>type字段声明枚举值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Enumeration of Possible lval Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_ERR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>error字段声明枚举值</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create Enumeration of Possible Error Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LERR_DIV_ZERO<span class="token punctuation">,</span> LERR_BAD_OP<span class="token punctuation">,</span> LERR_BAD_NUM <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="4-Lisp-Value函数"><a href="#4-Lisp-Value函数" class="headerlink" title="4.Lisp Value函数"></a>4.Lisp Value函数</h3><ul>
<li>用两个函数创建新的实例</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create a new number type lval */</span>
lval <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Create a new error type lval */</span>
lval <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>err <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>用switch来进行打印</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Print an "lval" */</span>
<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* In the case the type is a number print it */</span>
    <span class="token comment">/* Then 'break' out of the switch. */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* In the case the type is an error */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      <span class="token comment">/* Check what type of error it is and print it */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_DIV_ZERO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_OP<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Operator!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_NUM<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" followed by a newline */</span>
<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-求值"><a href="#5-求值" class="headerlink" title="5.求值"></a>5.求值</h3><ul>
<li>现在知道了 <code>lval</code> 类型的使用方法，需要用它来替换掉之前使用的 <code>long</code> 类型</li>
<li>这不仅仅是简单地将 <code>long</code> 替换为 <code>lval</code>，还需要修改函数使其能正确处理<em>数字</em>或是<em>错误</em>作为输入的情况。</li>
<li>在 <code>eval_op</code> 函数中，如果检测到错误，函数应该立即返回，当且仅当两个操作数都为数字类型时才做计算。另外，对于本章开头的除数为零的错误，也应该返回错误信息</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval <span class="token function">eval_op</span><span class="token punctuation">(</span>lval x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> lval y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If either value is an error return it */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise do maths on the number values */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">+</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">-</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">*</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* If second operand is zero return error */</span>
    <span class="token keyword">return</span> y<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">0</span> 
      <span class="token operator">?</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_DIV_ZERO<span class="token punctuation">)</span> 
      <span class="token operator">:</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">/</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_OP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>eval</code> 函数也需要小小地修整一下，为数字转换部分增加一点错误处理代码</li>
<li>新代码中，选用 <code>strtol</code> 函数进行字符串到数字的转换，因为可以通过检测 <code>errno</code> 变量确定是否转换成功。这无疑比使用 <code>atoi</code> 函数更为明智。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if there is some error in conversion */</span>
    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>  
  lval x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>使用新定义的打印函数：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">lval result &#x3D; eval(r.output);
lval_println(result);
mpc_ast_delete(r.output);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>尝试运行新程序，确保除数为零时不会崩溃了：）</li>
</ul>
<h3 id="6-参考-1"><a href="#6-参考-1" class="headerlink" title="6.参考"></a>6.参考</h3><ul>
<li>error_handing.c</li>
<li>重新编译，执行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall parsing004.c mpc.c -o parsing004<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Create Enumeration of Possible Error Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LERR_DIV_ZERO<span class="token punctuation">,</span> LERR_BAD_OP<span class="token punctuation">,</span> LERR_BAD_NUM <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Create Enumeration of Possible lval Types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_ERR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/* Declare New lval Struct */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

<span class="token comment">/* Create a new number type lval */</span>
lval <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Create a new error type lval */</span>
lval <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval v<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token punctuation">.</span>err <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" */</span>
<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* In the case the type is a number print it */</span>
    <span class="token comment">/* Then 'break' out of the switch. */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* In the case the type is an error */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      <span class="token comment">/* Check what type of error it is and print it */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_DIV_ZERO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_OP<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Operator!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>err <span class="token operator">==</span> LERR_BAD_NUM<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: Invalid Number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Print an "lval" followed by a newline */</span>
<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

lval <span class="token function">eval_op</span><span class="token punctuation">(</span>lval x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">,</span> lval y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If either value is an error return it */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise do maths on the number values */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">+</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">-</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">*</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* If second operand is zero return error */</span>
    <span class="token keyword">return</span> y<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">0</span> 
      <span class="token operator">?</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_DIV_ZERO<span class="token punctuation">)</span> 
      <span class="token operator">:</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>num <span class="token operator">/</span> y<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_OP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if there is some error in conversion */</span>
    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>LERR_BAD_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> op <span class="token operator">=</span> t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">;</span>  
  lval x <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">eval_op</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Operator <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"operator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                     \
      number   : /-?[0-9]+/ ;                             \
      operator : '+' | '-' | '*' | '/' ;                  \
      expr     : &lt;number> | '(' &lt;operator> &lt;expr>+ ')' ;  \
      lispy    : /^/ &lt;operator> &lt;expr>+ /$/ ;             \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-收获"><a href="#7-收获" class="headerlink" title="7.收获"></a>7.收获</h3><ul>
<li>结构体中用num和error这两个int字段表示正确和错误的情况，并用type这个int字段来表示当前哪个字段有意义</li>
<li>用enum枚举来表示type和error这两个字段不同的情况，将数字含义具体化</li>
<li>用switch来判断type或error这两个字段的各种情况进行打印输出</li>
</ul>
<h2 id="第九章-·-S-表达式"><a href="#第九章-·-S-表达式" class="headerlink" title="第九章 · S-表达式"></a>第九章 · S-表达式</h2><h3 id="1-List列表"><a href="#1-List列表" class="headerlink" title="1.List列表"></a>1.List列表</h3><ul>
<li>Lisp 程序代码与数据的形式完全相同，这使得它非常强大，能完成许多其他语言不能完成的事情。为了拥有这个强大的特性，需要将求值过程分为读取并存储输入、对输入进行求值两个过程。</li>
<li>花时间去更改程序内部的工作方式，在软件开发中，这被叫做<strong>重构</strong>。重构可能对于当前的程序运行结果并没有太大的影响，但因为工作方式的优化，在后面的开发中更加省心。</li>
<li>为了存储输入，我们需要创建一个内部列表结构，能够递归地表示数字、操作符号以及其他的列表。在 Lisp 中，这个结构被称为 S-表达式(Symbolic Expression)。我们将扩展 <code>lval</code> 结构来表示它。S-表达式求值也是典型的 Lisp 式过程：首先取列表第一个元素为操作符，然后遍历所有剩下的元素，将它们作为操作数。</li>
</ul>
<h3 id="2-指针（讲解地非常nice）"><a href="#2-指针（讲解地非常nice）" class="headerlink" title="2.指针（讲解地非常nice）"></a>2.指针（讲解地非常nice）</h3><ul>
<li>在 C 语言中，要表示列表，就必须正确的使用指针。</li>
<li>C 语言函数的参数<strong>全部</strong>是通过值传递的。也就是说，传递给函数的实际是实参的拷贝。对于 <code>int</code>、<code>long</code>、<code>char</code>等系统类型以及用户自定义的结构体都是成立的。这种方式适用于绝大多数情况，但也会偶尔出现问题。一种常见的情况是，如果我们有一个巨大结构体需要作为参数传递，则每次调用函数，就会对实参进行一次拷贝，这无疑是对性能和内存的浪费。</li>
<li>另外一个问题是，结构体的大小终究是有限的，无论多大，也只能是个固定的大小。而如果我们想向函数传递一组数据，而且数据的总数还是不固定的，结构体就明显的无能为力了。</li>
<li>为了解决这个问题，C 语言的开发者们想出了一个聪明的办法。他们把内存想象成一个巨大的字节数组，每个字节都可以拥有一个全局的索引值。</li>
<li>在这种情况下，计算机中的所有数据，包括当前运行的程序中的结构体、变量都有相应的索引值与其对应(数据的开始字节的索引作为整个数据的索引)。所以，除了将数据本身拷贝到函数参数，我们还可以只拷贝数据的索引值。在函数内部则可以根据索引值找到需要的数据本身(我们将这个索引值称为<em>地址</em>，存储地址的变量称为<em>指针</em>)。使用指针，函数可以修改指定位置的内存而无需拷贝。</li>
<li>因为计算机内存的大小是固定的，表示一个地址所需要的字节数也是固定的。但是地址指向的内存的字节数是可以变化的。这就意味着，我们可以创建一个大小可变的数据结构，并将其指针传入函数，对其进行读取及修改。</li>
<li>所以，所谓的指针也仅仅是一个数字而已。是内存中的一块数据的开始字节的索引值。指针的类型用来提示程序员和编译器指针指向的是一块什么样的数据，占多少个字节等。</li>
<li>指针类型是在现有类型的后面加一个星号 <code>*</code> 组成</li>
<li>要创建指针，我们就需要获取数据的地址。C 语言提供了取地址符(<code>&amp;</code>)来获取某个数据的地址。</li>
<li>为了获取指针所指向的地址的数据值(称为<em>解引用</em>)，我们需要在指针左边使用 <code>*</code> 操作符。要获取结构体指针的某个字段，需要使用 <code>-&gt;</code> 操作符</li>
</ul>
<h3 id="3-栈-Stack-和堆-Heap"><a href="#3-栈-Stack-和堆-Heap" class="headerlink" title="3.栈(Stack)和堆(Heap)"></a>3.栈(Stack)和堆(Heap)</h3><ol>
<li>栈<ul>
<li>栈是程序赖以生存的地方，所有的临时变量和数据结构都保存于其中，可以读取及编辑。每次调用一个新的函数，就会有一块新的栈区压入，并在其中存放函数内的临时变量、传入的实参的拷贝以及其它的一些信息。当函数运行完毕，这块栈区就会被弹出并回收，供其他函数使用。</li>
</ul>
</li>
<li>堆<ul>
<li>堆占据另一部分内存，主要用来存放长生命周期期的数据。堆中的数据必须手动申请和释放。申请内存使用 <code>malloc</code> 函数。这个函数接受一个数字作为要申请的字节数，返回申请好的内存块的指针。</li>
<li>当使用完毕申请的内存，我们还需要将其释放，只要将 <code>malloc</code> 函数返回的指针传给 <code>free</code> 函数即可。</li>
<li>堆比栈的使用难度要大一些，因为它要求程序员手动调用 <code>free</code> 函数释放内存，而且还要正确调用。如果不释放，程序就有可能不断申请新的内存，而不释放旧的，导致内存越用越多。这也被称为<em>内存泄漏</em>。避免这种情况发生的一个简单有效的办法就是，针对每一个 <code>malloc</code> 函数调用，都有且只有一个 <code>free</code> 函数与之对应。这某种程度上就能保证程序能正确处理堆内存的使用。</li>
</ul>
</li>
</ol>
<h3 id="4-解析表达式"><a href="#4-解析表达式" class="headerlink" title="4.解析表达式"></a>4.解析表达式</h3><ul>
<li>S-表达式的语法非常简单。只是小括号之间包含一组表达式而已。而这些表达式可以是数字、操作符或是其他的 S-表达式。只需修改一下之前写的就可以了。另外，我们还需把 <code>operator</code> 规则重命名为 <code>symbol</code>。为之后添加更多的操作符以及变量、函数等做准备。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                          \
    number : /-?[0-9]+/ ;                    \
    symbol : '+' | '-' | '*' | '/' ;         \
    sexpr  : '(' &lt;expr>* ')' ;               \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> ; \
    lispy  : /^/ &lt;expr>* /$/ ;               \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>退出前要清理</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-表达式结构"><a href="#5-表达式结构" class="headerlink" title="5.表达式结构"></a>5.表达式结构</h3><ul>
<li>需要让 <code>lval</code> 能够存储 S-表达式。这意味着我们还要能存储符号(Symbols)和数字。我们向枚举中添加两个新的类型。<code>LVAL_SYM</code> 表示操作符类型，例如 <code>+</code> 等，<code>LVAL_SEXPR</code> 表示 S-表达式</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>S-表达式是一个可变长度的列表。</li>
<li>不能创建可变长度的结构体，所以只能使用指针来表示它。为 <code>lval</code> 结构体创建一个 <code>cell</code> 字段，指向一个存放 <code>lval*</code> 列表的区域。所以 <code>cell</code> 的类型就应该是 <code>lval**</code>。指向 <code>lval*</code> 的指针。还需要知道 <code>cell</code> 列表中的元素个数，所以创建了 <code>count</code> 字段。</li>
<li>字符串来表示符号(Symbols)，另外我们还增加了另一个字符串用来存储错误信息。也就是说现在 <code>lval</code> 可以存储更加具体的错误信息了，而不只是一个错误代码，这使得我们的错误报告系统更加灵活好用。我们也可以删除掉之前写的错误枚举了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token comment">/* Error and Symbol types have some string data */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token comment">/* Count and Pointer to a list of "lval*" */</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-构造函数和析构函数"><a href="#6-构造函数和析构函数" class="headerlink" title="6.构造函数和析构函数"></a>6.构造函数和析构函数</h3><ul>
<li>我们可以重写 <code>lval</code> 的构造函数，使其返回 <code>lval</code> 的指针，而不是其本身。这样做会使得对 <code>lval</code> 变量进行跟踪更加简单。为此，我们需要用到 <code>malloc</code> 库函数以及 <code>sizeof</code> 操作符为 <code>lval</code> 结构体在堆上申请足够大的内存区域，然后使用 <code>-&gt;</code> 操作符填充结构体中的相关字段。</li>
<li>当我们构造一个 <code>lval</code> 时，它的某些指针字段可能会包含其他的在堆上申请的内存，所以我们应该小心行事。当某个 <code>lval</code> 完成使命之后，我们不仅需要删除它本身所指向的堆内存，还要删除它的字段所指向的堆内存。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Number lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Error lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Construct a pointer to a new Symbol lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A pointer to a new empty Sexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>NULL</code> 是一个指向内存地址 0 的特殊常量。按照惯例，它通常被用来表示空值或无数据。使用 <code>NULL</code> 来表示虽然有一个数据指针，但它目前还没有指向任何内容。</li>
</ul>
<blockquote>
<h4 id="为什么要使用-strlen-s-1？"><a href="#为什么要使用-strlen-s-1？" class="headerlink" title="为什么要使用 strlen(s) + 1？"></a>为什么要使用 <code>strlen(s) + 1</code>？</h4><p>在 C 语言中，字符串是以空字符做为终止标记的。所以，C 语言字符串的最后一个字符一定是 <code>\0</code>。请确保所有的字符串都是按照这个约定来存储的，不然程序就会因为莫名其妙的错误退出。<code>strlen</code> 函数返回的是字符串的实际长度(所以不包括结尾的 <code>\0</code> 终止符)。所以为了保证有足够的空间存储所有字符，我们需要在额外 +1。</p>
</blockquote>
<ul>
<li>一个定制的函数来删除 <code>lval*</code>。这个函数应该调用 <code>free</code> 函数来释放本身所指向的由 <code>malloc</code> 函数所申请的内存。但更重要的是，它应该根据自身的类型，释放所有它的字段指向的内存。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Do nothing special for number type */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* For Err or Sym free the string data */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Free the memory allocated for the "lval" struct itself */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-读取表达式"><a href="#7-读取表达式" class="headerlink" title="7.读取表达式"></a>7.读取表达式</h3><ul>
<li>首先我们会读取整个程序，并构造一个 <code>lval*</code> 来表示它，然后我们对这个 <code>lval*</code> 进行遍历求值来得到程序的运行结果。第一阶段负责把抽象语法树(abstract syntax tree)转换为一个 S-表达式，第二阶段则根据我们已由的 Lisp 规则对 S-表达式进行遍历求值。</li>
<li>第一步：递归的查看语法分析树中的每个节点，并根据节点的 <code>tag</code> 和 <code>contents</code> 字段构造出不同类型的 <code>lval*</code>。</li>
<li>如果给定节点的被标记为 <code>number</code> 或 <code>symbol</code>，则我们可以调用对应的构造函数直接返回一个 <code>lval*</code>。如果给定的节点被标记为 <code>root</code> 或 <code>sexpr</code>，则我们应该构造一个空的 S-表达式类型的 <code>lval*</code>，并逐一将它的子节点加入。</li>
<li>为了更加方便的像一个 S-表达式中添加元素，我们可以创建一个函数 <code>lval_add</code>，这个函数将表达式的子表达式计数加一，然后使用 <code>realloc</code> 函数为 <code>v-&gt;cell</code> 字段重新扩大申请内存，用于存储刚刚加入的子表达式 <code>lval* x</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span>
    <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If Symbol or Number return conversion to that type */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If root (>) or sexpr then create empty list */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Fill this list with any valid expression contained within */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="八、打印表达式"><a href="#八、打印表达式" class="headerlink" title="八、打印表达式"></a>八、打印表达式</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Print Value contained within */</span>
    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Don't print trailing space if last element */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p><code>lval_expr_print</code> 函数内部调用了 <code>lval_print</code> 函数，<code>lval_print</code> 内部又调用了 <code>lval_expr_print</code>。似乎是没有办法解决依赖性的。C 语言提供了<em>前置声明</em>来解决这个问题。前置声明只定义了函数的形式，而没有函数体(译者注：前置声明就是告诉编译器：“我保证有这个函数，你放心调用就是了”)。它允许其他函数调用它，而具体的函数定义则在后面。函数声明只要将函数定义的函数体换成 <code>;</code> 即可。在我们的程序中，应该将 <code>void lval_print(lval* v);</code> 语句放在一个比 <code>lval_expr_print</code> 函数靠前的地方。</p>
</blockquote>
<ul>
<li>在主循环中，将求值部分移除，替换为新写就的读取和打印函数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lispy<span class="token operator">></span> + <span class="token number">2</span> <span class="token number">2</span>
<span class="token punctuation">(</span>+ <span class="token number">2</span> <span class="token number">2</span><span class="token punctuation">)</span>
lispy<span class="token operator">></span> + <span class="token number">2</span> <span class="token punctuation">(</span>* <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>* <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>+ <span class="token number">2</span> <span class="token punctuation">(</span>* <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>* <span class="token number">2</span> <span class="token number">5</span><span class="token punctuation">))</span>
lispy<span class="token operator">></span> *     <span class="token number">55</span>     <span class="token number">101</span>  <span class="token punctuation">(</span>+ <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>* <span class="token number">55</span> <span class="token number">101</span> <span class="token punctuation">(</span>+ <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">))</span>
lispy<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="9-表达式求值"><a href="#9-表达式求值" class="headerlink" title="9.表达式求值"></a>9.表达式求值</h3><ul>
<li>可以把求值函数想象成某种转换器－－它读取 <code>lval*</code> 作为输入，通过某种方式将其转化为新的 <code>lval*</code> 并输出。</li>
<li>在有些时候，求值函数不对输入做任何修改，原封不动的将其返回；有些时候，它会对输入的做一些改动；而在大多数情况下，它会将输入的 <code>lval*</code> 删除，返回完全不同的东西。如果要返回新的东西，一定要记得将原有的作为输入的 <code>lval*</code> 删除。</li>
<li>对于 S-表达式，我们首先遍历它所有的子节点，如果子节点有任何错误，我们就使用稍后定义的函数 <code>lval_take</code> 将遇到的第一个错误返回。</li>
<li>对于没有子节点的 S-表达式直接将其返回就可以了，这是为了处理空表达式 <code>&#123;&#125;</code> 的情况。另外，我们还需要检查只有一个子节点的表达式，例如 <code>&#123;5&#125;</code>，这种情况我们应该将其包含的表达式返回。</li>
<li>如果以上情况都不成立，那我们就知道这是一个合法的表达式，有个多于一个的子节点。对于此种情况，我们使用稍后定义的函数 <code>lval_pop</code> 将第一个元素从表达式中分离开来，然后检查确保它是一个 <code>symbol</code>。然后根据它的具体类型，将它和参数一起传入 <code>builtin_op</code> 函数计算求值。如果它不是 <code>symbol</code>，我们就将它以及传进来的其它参数删除，然后返回一个错误。</li>
<li>对于其它的非 S-表达式类型，我们就直接将其返回。</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">lval* lval_eval_sexpr(lval* v) &#123;

  &#x2F;* Evaluate Children *&#x2F;
  for (int i &#x3D; 0; i &lt; v-&gt;count; i++) &#123;
    v-&gt;cell[i] &#x3D; lval_eval(v-&gt;cell[i]);
  &#125;

  &#x2F;* Error Checking *&#x2F;
  for (int i &#x3D; 0; i &lt; v-&gt;count; i++) &#123;
    if (v-&gt;cell[i]-&gt;type &#x3D;&#x3D; LVAL_ERR) &#123; return lval_take(v, i); &#125;
  &#125;

  &#x2F;* Empty Expression *&#x2F;
  if (v-&gt;count &#x3D;&#x3D; 0) &#123; return v; &#125;

  &#x2F;* Single Expression *&#x2F;
  if (v-&gt;count &#x3D;&#x3D; 1) &#123; return lval_take(v, 0); &#125;

  &#x2F;* Ensure First Element is Symbol *&#x2F;
  lval* f &#x3D; lval_pop(v, 0);
  if (f-&gt;type !&#x3D; LVAL_SYM) &#123;
    lval_del(f); lval_del(v);
    return lval_err(&quot;S-expression Does not start with symbol!&quot;);
  &#125;

  &#x2F;* Call builtin with operator *&#x2F;
  lval* result &#x3D; builtin_op(v, f-&gt;sym);
  lval_del(f);
  return result;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Evaluate Sexpressions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">/* All other lval types remain the same */</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>lval_pop</code> 和 <code>lval_take</code>。这两个都是用于操作 <code>lval</code> 类型的通用型函数</li>
<li><code>lval_pop</code> 函数将所操作的 S-表达式的第 <code>i</code> 个元素取出，并将在其后面的元素向前移动填补空缺，使得这个 S-表达式不再包含这个元素。然后将取出的元素返回。需要注意的是，这个函数并不会将这个 S- 表达式删除。它只是从中取出某个元素，剩下的元素都保持原样。这意味着这两部分最终都需要在某个地方使用 <code>lval_del</code> 函数删除。</li>
<li><code>lval_take</code> 和 <code>lval_pop</code> 函数类似，不过它将取出元素之后剩下的列表删除了。它利用了 <code>lval_pop</code> 函数并做了一点小小的改变，却使得我们的代码可读性更高了一些。所以，不同于 <code>lval_pop</code>，你只需负责使用 <code>lval_del</code> 删除取出的元素即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Find the item at "i" */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/* Shift memory after the item at "i" over the top */</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Decrease the count of items in the list */</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

  <span class="token comment">/* Reallocate the memory used */</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们还需要定义求值函数 <code>builtin_op</code>，它和我们在之前章节定义的 <code>eval_op</code> 函数类似，改成了接受一个 <code>lval*</code> 来代表一系列的参数。该函数应该对参数做更加严格的检查，如果有任何参数不是数字类型的 <code>lval*</code>，都应该返回一个错误。</li>
<li>首先，它确保所有的输入参数的类型都为数字。然后将第一个数字弹出开始计算。如果后面没有其它的子表达式，并且操作符为减号时，它会对第一个数字进行取反操作。这确保了类似于 (- 5) 这种表达式能够正确工作。</li>
<li>如果还有更多的参数，它就不断地从列表中取出，将其和之前的计算结果一起进行相应的数学运算。如果做除法时遇到被除数为零的情况，就将临时变量 x 和 y 以及参数列表删除，并返回一个错误。</li>
<li>如果没有错误，参数列表最终会被删除，并返回一个新的表达式。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Ensure all arguments are numbers */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Pop the first element */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* If no arguments and sub then perform unary negation */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* While there are still elements remaining */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Pop the next element */</span>
    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>求值函数就完成了。我们只需要再次更新一下 main 函数，在其打印表达式之前，先将输入经由求值函数处理即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="10-参考"><a href="#10-参考" class="headerlink" title="10.参考"></a>10.参考</h3><ul>
<li>s_expressions.c</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -std<span class="token operator">=</span>c99 -Wall s_expressions.c mpc.c -o s_expressions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Add SYM and SEXPR as possible lval types */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token comment">/* Error and Symbol types have some string data */</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token comment">/* Count and Pointer to a list of "lval*"; */</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

<span class="token comment">/* Construct a pointer to a new Number lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Construct a pointer to a new Error lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Construct a pointer to a new Symbol lval */</span> 
lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A pointer to a new empty Sexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Do nothing special for number type */</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* For Err or Sym free the string data */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Free the memory allocated for the "lval" struct itself */</span>
  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Find the item at "i" */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/* Shift memory after the item at "i" over the top */</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Decrease the count of items in the list */</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>

  <span class="token comment">/* Reallocate the memory used */</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Print Value contained within */</span>
    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Don't print trailing space if last element */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Ensure all arguments are numbers */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Pop the first element */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* If no arguments and sub then perform unary negation */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* While there are still elements remaining */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Pop the next element */</span>
    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Perform operation */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Delete element now finished with */</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Delete input expression and return result */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Evaluate Children */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Error Checking */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Empty Expression */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Single Expression */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Ensure First Element is Symbol */</span>
  lval<span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_SYM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"S-expression Does not start with symbol."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Call builtin with operator */</span>
  lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Evaluate Sexpressions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token comment">/* All other lval types remain the same */</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span>
    <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* If Symbol or Number return conversion to that type */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If root (>) or sexpr then create empty list */</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Fill this list with any valid expression contained within */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                          \
      number : /-?[0-9]+/ ;                    \
      symbol : '+' | '-' | '*' | '/' ;         \
      sexpr  : '(' &lt;expr>* ')' ;               \
      expr   : &lt;number> | &lt;symbol> | &lt;sexpr> ; \
      lispy  : /^/ &lt;expr>* /$/ ;               \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十章-·-Q表达式"><a href="#第十章-·-Q表达式" class="headerlink" title="第十章 · Q表达式"></a>第十章 · Q表达式</h2><h3 id="1-添加特性"><a href="#1-添加特性" class="headerlink" title="1.添加特性"></a>1.添加特性</h3><ul>
<li><p>这个模式也是给一个编程语言添加新特性的典型方式。它包含一系列的步骤来从无到有的实现某个特性。下表详细地说明了本章所要引入的 Q-表达式的具体实现步骤。</p>
</li>
<li><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Syntax</strong></td>
<td>Add new rule to the language grammar for this feature.</td>
</tr>
<tr>
<td><strong>Representation</strong></td>
<td>Add new data type variation to represent this feature.</td>
</tr>
<tr>
<td><strong>Parsing</strong></td>
<td>Add new functions for reading this feature from the <em>abstract syntax tree</em>.</td>
</tr>
<tr>
<td><strong>Semantics</strong></td>
<td>Add new functions for evaluating and manipulating this feature.</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-Q-表达式"><a href="#2-Q-表达式" class="headerlink" title="2.Q-表达式"></a>2.Q-表达式</h3><ul>
<li>新的 Lisp 值类型，叫做 Q-表达式。</li>
<li>它的英文全称为 <em>quoted expression</em>，跟 S-表达式一样，也是 Lisp 表达式的一种，但它不受标准 Lisp 求值机制的作用。也就是说，当受到函数的作用时，Q-表达式不会被求值，而是保持原样。这个特性让 Q-表达式有着广泛的应用。我们可以用它来存储和管理其他的 Lisp 值类型，例如数字、符号或 S-表达式等。</li>
<li>在添加 Q-表达式之后，我们还需要定义一系列的操作来管理它。类似于数学操作，这些操作定义了 Q-表达式具体的行为。</li>
<li>Q- 表达式的语法和 S-表达式非常相似，唯一的不同是 Q-表达式包裹在大括号 <code>&#123;&#125;</code> 中，而非 S-表达式的小括号 <code>()</code>，Q-表达式的语法规则如下所示。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Qexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                    \
    number : /-?[0-9]+/ ;                              \
    symbol : '+' | '-' | '*' | '/' ;                   \
    sexpr  : '(' &lt;expr>* ')' ;                         \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                         \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ; \
    lispy  : /^/ &lt;expr>* /$/ ;                         \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>同步更新清理函数 <code>mpc_cleanup</code> 来处理我们新添加的规则。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-读取Q-表达式"><a href="#3-读取Q-表达式" class="headerlink" title="3.读取Q-表达式"></a>3.读取Q-表达式</h3><ul>
<li>由于 Q-表达式和 S-表达式的形式基本一致，所以它们内部实现也大致是相同的。我们考虑重用 S-表达式的数据结构来表示 Q-表达式，在此之前需要向枚举中添加一个单独的类型。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>编写构造函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* A pointer to a new empty Qexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Q-表达式的打印和删除逻辑也和 S-表达式别无二致，我们只需照葫芦画瓢，在相应的函数中添加对应的逻辑即可，具体如下所示。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Qexpr or Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>经过这些简单的变化之后，我们就可以更新读取函数 <code>lval_read</code>，使其可以正确读取 Q-表达式了。因为 Q-表达式重用了所有 S-表达式的数据类型，所以我们也自然可以重用所有 S-表达式的函数，例如 <code>lval_add</code>。</li>
<li>因此，为了能够读取 Q-表达式，我们只需在抽象语法树中检测并创建空的 S-表达式的地方添加一个新的情况即可。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>同时在<code>lval_read</code>中添加一下代码识别花括号:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-内建函数"><a href="#4-内建函数" class="headerlink" title="4.内建函数"></a>4.内建函数</h3><ul>
<li>已经可以读取Q-表达式了，但它仍无任何用处。接下来我们将构建一些函数来操纵Q-表达式。</li>
<li>这些操作符将作用于我们的列表类型，所以设计要尽可能简洁。我们可以先定义一些简单的操作符，再以它们为基础来构建更复杂的，这样就可以不用添加额外的C代码。以下操作符将可以满足本书内容的需要：<ul>
<li><code>list</code> 接收一个或者多个参数，返回一个包含所有参数的Q-表达式</li>
<li><code>head</code> 接受一个Q-表达式，返回一个包含其第一个元素的Q-表达式</li>
<li><code>tail</code> 接受一个Q-表达式，返回一个除首元素外的Q-表达式</li>
<li><code>join</code> 接受一个或者多个Q-表达式，返回一个将其连在一起的Q-表达式</li>
<li><code>eval</code> 接受一个Q-表达式，将其看做一个S-表达式，并运行</li>
</ul>
</li>
<li>这些新的操作符也需要加入到<code>symbol</code>中。然后我们可以试着定义这些操作符的行为</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                        \
    number : /-?[0-9]+/ ;                                  \
    symbol : \"list\" | \"head\" | \"tail\"                \
           | \"join\" | \"eval\" | '+' | '-' | '*' | '/' ; \
    sexpr  : '(' &lt;expr>* ')' ;                             \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                             \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ;     \
    lispy  : /^/ &lt;expr>* /$/ ;                             \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-首次尝试"><a href="#5-首次尝试" class="headerlink" title="5.首次尝试"></a>5.首次尝试</h3><ul>
<li>我们的内建函数应该和上章的<code>buildin_op</code>接口一致。也就是说所有的参数都先转换为S-表达式，同时要注意使用后释放内存。函数的返回值将是一个新的<code>lval*</code>。</li>
<li>实现Q-表达式的<code>head</code>和<code>tail</code>的功能并不难。我们可以使用已有的S-表达式函数，比如<code>lval_take</code>和<code>lval_pop</code>。同时我们也要对错误的输入进行异常处理。</li>
<li>我们先从<code>head</code>和<code>tail</code>入手。它们在某些条件下是不能执行的。首先要保证输入的参数只有一个，并且类型为Q-表达式。其次这个输入的Q-表达式不能为空。</li>
<li><code>head</code>函数可以重复执行<code>pop</code>并<code>delete</code>在第二个列表元素（index 1）上，直到列表为空。</li>
<li><code>tail</code>函数更简单。只需要<code>pop</code>并<code>delete</code>第一个列表元素（index 0），剩余元素组成的列表则为我们所需要的。按此思路我们可以将代码实现如下：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Check Error Conditions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_QEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed incorrect types!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'head' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Otherwise take first argument */</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Delete all elements that are not head and return */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/* Check Error Conditions */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_QEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed incorrect types!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Function 'tail' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Take first argument */</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Delete first element and return */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-宏"><a href="#6-宏" class="headerlink" title="6.宏"></a>6.宏</h3><ul>
<li><code>head</code>和<code>tail</code>能够实现所需要的功能，但是代码难懂且长。有大段的代码是进行错误处理，使得真正的实现部分不那么明显。要解决这个问题，我们可以使用C语言的宏。</li>
<li>宏是预处理指令。（译注：它用来将一个标识符(宏名)定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。程序编译之前，编译的时候所有的宏名都会被定义的字符串替换，这便是宏替换）。它的功能非常强大（译注：甚至自成一门语言，参看宏编程），我们这里用其来简化代码。</li>
<li>宏的工作原理是定义一些参数，将这些参数复制到特定的格式（译注：宏定义）中。通过修改宏定义或者参数，宏可以生成我们想要的代码。其实我们在前面已经见过宏的定义方式，就是以<code>#define</code>为开头的代码片段。</li>
<li>这里我们定义一个<code>LASSERT</code>宏来帮助处理异常。通常宏名都是全大写，这样能够和C函数名区分开来。我们的宏有三个参数<code>args</code>，<code>cond</code>和<code>err</code>。宏名定义好后，我们可以来定义如何利用这三个参数来生成代码。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LASSERT</span><span class="token expression"><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cond<span class="token punctuation">,</span> err<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="7-Head-amp-Tail"><a href="#7-Head-amp-Tail" class="headerlink" title="7.Head&amp;Tail"></a>7.Head&amp;Tail</h3><ul>
<li>新的<code>head</code>和<code>tail</code>函数定义如下。可以明显的看到在使用宏后，代码更清晰了。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed &#123;&#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="8-List-amp-Eval"><a href="#8-List-amp-Eval" class="headerlink" title="8.List&amp;Eval"></a>8.List&amp;Eval</h3><ul>
<li><code>list</code>函数比较简单。它只需将输入的一个或多个S-表达式转化为一个Q-表达式。</li>
<li><code>eval</code>函数更像是转化。它将一个Q-表达式转化为S-表达式，然后使用<code>lval_eval</code>运行。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed too many arguments!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed incorrect type!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="9-Join"><a href="#9-Join" class="headerlink" title="9.Join"></a>9.Join</h3><ul>
<li>它需要多个参数，其结构看起来更像先前定义的<code>builtin_op</code>。首先确保所有的参数都是Q-表达式，然后将它们拼接起来。所以我们需要定义<code>lval_join</code>函数，它将<code>y</code>中元素依次弹出并添加进<code>x</code>中，然后将<code>y</code>删除，返回<code>x</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
      <span class="token string">"Function 'join' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
lval<span class="token operator">*</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> x<span class="token punctuation">,</span> lval<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* For each cell in 'y' add it to 'x' */</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Delete the empty 'y' and return 'x' */</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-索引函数"><a href="#10-索引函数" class="headerlink" title="10.索引函数"></a>10.索引函数</h3><ul>
<li>我们所有的内建函数都已定义。现在需要一个函数，根据提供的<code>symbol</code>来调用相应的方法。这里我们可以用<code>strcmp</code>和<code>strstr</code>来实现。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">builtin</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"join"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"+-/*"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Unknown Function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>同时修改早先<code>lval_eval_sexpr</code>函数来调用新的<code>buildin</code>。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Call builtin with operator */</span>
lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>现在我们已经全面支持Q-表达式了。编译并运行最新的代码，试试新定义的操作符吧。现在我们可以将S-表达式加在Q-表达式中。这表明我们可以将代码看做是数据。这是Lisp语言不同于其它语言所特有的。</li>
</ul>
<h3 id="11-参考"><a href="#11-参考" class="headerlink" title="11.参考"></a>11.参考</h3><ul>
<li>q_expressions.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mpc.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span>

<span class="token keyword">static</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">2048</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> prompt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fputs</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> cpy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>cpy<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cpy<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cpy<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> cpy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">add_history</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/readline.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;editline/history.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">/* Add QEXPR as possible lval type */</span>
<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span> LVAL_SYM<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> lval<span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">lval_num</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_NUM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>num <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_ERR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SYM<span class="token punctuation">;</span>
  v<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A pointer to a new empty Qexpr lval */</span>
lval<span class="token operator">*</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  v<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span> <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* If Qexpr or Sexpr then delete all elements inside */</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">/* Also free the memory allocated to contain the pointers */</span>
      <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">free</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> lval<span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  v<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell<span class="token punctuation">[</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>count<span class="token operator">--</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> x<span class="token punctuation">,</span> lval<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">char</span> open<span class="token punctuation">,</span> <span class="token keyword">char</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">putchar</span><span class="token punctuation">(</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%li"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: %s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span> <span class="token function">lval_expr_print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token char">'&#123;'</span><span class="token punctuation">,</span> <span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">lval_println</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LASSERT</span><span class="token expression"><span class="token punctuation">(</span>args<span class="token punctuation">,</span> cond<span class="token punctuation">,</span> err<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_QEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'head' passed &#123;&#125;."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'tail' passed &#123;&#125;."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token function">lval_del</span><span class="token punctuation">(</span><span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed too many arguments."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
    <span class="token string">"Function 'eval' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_SEXPR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">LASSERT</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_QEXPR<span class="token punctuation">,</span>
      <span class="token string">"Function 'join' passed incorrect type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    x <span class="token operator">=</span> <span class="token function">lval_join</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_NUM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Cannot operate on non-number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    lval<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">+=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">-=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x<span class="token operator">-></span>num <span class="token operator">*=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">-></span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Division By Zero."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      x<span class="token operator">-></span>num <span class="token operator">/=</span> y<span class="token operator">-></span>num<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">lval_del</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">builtin</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_head</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_tail</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"join"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_join</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_eval</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"+-/*"</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">builtin_op</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"Unknown Function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>type <span class="token operator">==</span> LVAL_ERR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_take</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> f <span class="token operator">=</span> <span class="token function">lval_pop</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">!=</span> LVAL_SYM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">lval_del</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"S-expression Does not start with symbol."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* Call builtin with operator */</span>
  lval<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">builtin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> f<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">lval_del</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type <span class="token operator">==</span> LVAL_SEXPR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_eval_sexpr</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> errno <span class="token operator">!=</span> ERANGE <span class="token operator">?</span> <span class="token function">lval_num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"invalid number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

lval<span class="token operator">*</span> <span class="token function">lval_read</span><span class="token punctuation">(</span><span class="token class-name">mpc_ast_t</span><span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_read_num</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">lval_sym</span><span class="token punctuation">(</span>t<span class="token operator">-></span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_sexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>t<span class="token operator">-></span>tag<span class="token punctuation">,</span> <span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token function">lval_qexpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token operator">-></span>children_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>contents<span class="token punctuation">,</span> <span class="token string">"&#123;"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>tag<span class="token punctuation">,</span>  <span class="token string">"regex"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    x <span class="token operator">=</span> <span class="token function">lval_add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token function">lval_read</span><span class="token punctuation">(</span>t<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Number <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Symbol <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Sexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"sexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Qexpr  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"qexpr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Expr   <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">mpc_parser_t</span><span class="token operator">*</span> Lispy  <span class="token operator">=</span> <span class="token function">mpc_new</span><span class="token punctuation">(</span><span class="token string">"lispy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
    <span class="token string">"                                                    \
      number : /-?[0-9]+/ ;                              \
      symbol : \"list\" | \"head\" | \"tail\" | \"eval\" \
             | \"join\" | '+' | '-' | '*' | '/' ;        \
      sexpr  : '(' &lt;expr>* ')' ;                         \
      qexpr  : '&#123;' &lt;expr>* '&#125;' ;                         \
      expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ; \
      lispy  : /^/ &lt;expr>* /$/ ;                         \
    "</span><span class="token punctuation">,</span>
    Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Lispy Version 0.0.0.0.6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press Ctrl+c to Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">char</span><span class="token operator">*</span> input <span class="token operator">=</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token string">"lispy> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">add_history</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">mpc_result_t</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpc_parse</span><span class="token punctuation">(</span><span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> input<span class="token punctuation">,</span> Lispy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">lval_eval</span><span class="token punctuation">(</span><span class="token function">lval_read</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_ast_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    
      <span class="token function">mpc_err_print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mpc_err_delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">free</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">mpc_cleanup</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十一章-·-变量"><a href="#第十一章-·-变量" class="headerlink" title="第十一章 · 变量"></a>第十一章 · 变量</h2><h3 id="1-不变性"><a href="#1-不变性" class="headerlink" title="1. 不变性"></a>1. 不变性</h3><ul>
<li>变量是一种命名值得方式。它们为一个值指定一个名称，然后在需要得时候获得该值的副本</li>
<li>为了允许命名值，需要创建一个存储程序中所有命名内容的名称和值的结构。我们称之为环境。</li>
<li>当我们开始一个新的交互式提示时，我们希望创建一个新的环境来配合它，在这个环境中，每个新的输入位都会被评估。然后我们可以在编程时存储和调用变量。</li>
</ul>
<blockquote>
<p>当我们为新事物重新命名时会发生什么？这不是易变性吗？在我们的Lisp中，当我们重新分配一个名称时，我们将删除旧的关联并创建一个新的关联。这给人一种错觉，即指定给该名称的对象已经更改，并且是可变的，但事实上，我们已经删除了旧对象，并将其指定为新对象。这与C不同，在C中，我们确实可以更改指针指向的数据或存储在结构中的数据，而无需删除它并创建新的数据。</p>
</blockquote>
<h3 id="2-符号语法"><a href="#2-符号语法" class="headerlink" title="2.符号语法"></a>2.符号语法</h3><ul>
<li>允许各种可能的符号输入。正则表达式</li>
<li>C中的变量的名称是非常严格的</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span>_<span class="token operator">+</span>\\<span class="token operator">-</span><span class="token operator">*</span>\\<span class="token operator">/</span>\\\\<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">!</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>反斜杠来转义，两个反斜杠表示单个反斜杠</li>
<li>This rule lets symbols be any of the normal C identifier characters<code>a-zA-Z0-9_</code>the arithmetic operator characters<code>+\\-*\\/</code>the backslash character<code>\\\\</code>the comparison operator characters<code>=&lt;&gt;!</code>or an ampersands<code>&amp;</code>. This will give us all the flexibility we need for defining new and existing symbols.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mpca_lang</span><span class="token punctuation">(</span>MPCA_LANG_DEFAULT<span class="token punctuation">,</span>
  <span class="token string">"                                                     \
    number : /-?[0-9]+/ ;                               \
    symbol : /[a-zA-Z0-9_+\\-*\\/\\\\=&lt;>!&amp;]+/ ;         \
    sexpr  : '(' &lt;expr>* ')' ;                          \
    qexpr  : '&#123;' &lt;expr>* '&#125;' ;                          \
    expr   : &lt;number> | &lt;symbol> | &lt;sexpr> | &lt;qexpr> ;  \
    lispy  : /^/ &lt;expr>* /$/ ;                          \
  "</span><span class="token punctuation">,</span>
  Number<span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> Sexpr<span class="token punctuation">,</span> Qexpr<span class="token punctuation">,</span> Expr<span class="token punctuation">,</span> Lispy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-函数指针"><a href="#3-函数指针" class="headerlink" title="3.函数指针"></a>3.函数指针</h3><ul>
<li><p>一旦我们引入变量，符号将不再在我们的语言中表示函数，而是代表一个名称，以便我们查看环境并从中获得一些新的值。</p>
</li>
<li><p>因此，我们需要一个新的值来表示语言中的函数，一旦遇到一个内置符号，我们就可以返回该值。要创建这种新类型的值，我们将使用一种称为函数指针的东西。</p>
</li>
<li><p>函数指针是C的一个重要特性，它允许您存储和传递指向函数的指针。编辑这些指针指向的数据是没有意义的。相反，我们使用它们来调用它们指向的函数，就像它是一个普通函数一样。</p>
</li>
<li><p>与普通指针一样，函数指针也有一些与之相关的类型。此类型指定指向的函数的类型，而不是指向的数据的类型。这可以让编译器计算出它是否被正确调用。</p>
</li>
<li><p>In the previous chapter our builtin functions took a <code>lval*</code> as input and returned a <code>lval*</code> as output. In this chapter our builtin functions will take an extra pointer to the environment <code>lenv*</code> as input. We can declare a new function pointer type called <code>lbuiltin</code>, for this type of function, like this.</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> lval<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>lbuiltin<span class="token punctuation">)</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span><span class="token punctuation">,</span> lval<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p><strong>Why is that syntax so odd?</strong></p>
<p>In some places the syntax of C can look particularly weird. It can help if we understand exactly why the syntax is like this. Let us de-construct the syntax in the example above part by part.</p>
<p>First the <code>typedef</code>. This can be put before any standard variable declaration. It results in the name of the variable, being declared a new type, matching what would be the inferred type of that variable. This is why in the above declaration what looks like the function name becomes the new type name.</p>
<p>Next all those <code>*</code>. Pointer types in C are actually meant to be written with the star <code>*</code> on the left hand side of the variable name, not the right hand side of the type <code>int *x;</code>. This is because C type syntax works by a kind of inference. Instead of reading <em>“Create a new <code>int</code> pointer <code>x</code>“</em>. It is meant to read <em>“Create a new variable <code>x</code> where to dereference <code>x</code> results in an <code>int</code>.”</em> Therefore <code>x</code> is inferred to be a pointer to an <code>int</code>.</p>
<p>This idea is extended to function pointers. We can read the above declaration as follows. <em>“To get an <code>lval\*</code> we dereference <code>lbuiltin</code> and call it with a <code>lenv\*</code> and a <code>lval\*</code>.”</em> Therefore <code>lbuiltin</code> must be a function pointer that takes an <code>lenv*</code> and a <code>lval*</code> and returns a <code>lval*</code>.</p>
</blockquote>
<h3 id="4-循环类型"><a href="#4-循环类型" class="headerlink" title="4.循环类型"></a>4.循环类型</h3><ul>
<li><code>lbuiltin</code>类型引用<code>lval</code>类型和<code>lenv</code>类型。这意味着应该首先在源文件中声明它们。</li>
<li>但我们想在<code>lval</code>结构中创建一个<code>lbuiltin</code>字段，以便创建函数值。因此，我们的<code>lbuiltin</code>声明必须先于<code>lval</code>声明。这导致了所谓的循环类型依赖，其中两种类型相互依赖。</li>
<li>我们以前在函数相互依赖的情况下遇到过这个问题。解决方案是创建一个转发声明，该声明声明了一个函数，但将函数体留空。</li>
<li>在C中，我们可以对类型执行完全相同的操作。首先，我们声明两个没有主体的结构类型。其次，我们将这些名称键入<code>lval</code>和<code>lenv</code>。然后我们可以定义<code>lbuiltin</code>函数指针类型。最后，我们可以定义<code>lval</code>结构体。现在我们所有的类型问题都解决了，编译器不会再抱怨了</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Forward Declarations */</span>

<span class="token keyword">struct</span> <span class="token class-name">lval</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">lenv</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lval</span> lval<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lenv</span> lenv<span class="token punctuation">;</span>

<span class="token comment">/* Lisp Value */</span>

<span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> LVAL_ERR<span class="token punctuation">,</span> LVAL_NUM<span class="token punctuation">,</span>   LVAL_SYM<span class="token punctuation">,</span>
       LVAL_FUN<span class="token punctuation">,</span> LVAL_SEXPR<span class="token punctuation">,</span> LVAL_QEXPR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> lval<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>lbuiltin<span class="token punctuation">)</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span><span class="token punctuation">,</span> lval<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">lval</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>

  <span class="token keyword">long</span> num<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> err<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> sym<span class="token punctuation">;</span>
  lbuiltin fun<span class="token punctuation">;</span>

  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  lval<span class="token operator">*</span><span class="token operator">*</span> cell<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-函数类型"><a href="#5-函数类型" class="headerlink" title="5.函数类型"></a>5.函数类型</h3><ul>
<li>添加了一个新的<code>lval</code>类型和枚举<code>LVAL_FUN</code>，要更新所有工作在<code>lvals</code>上的相关函数，以正确处理此更新。在大多数情况下，这只意味着在switch语句中插入新的case。我们可以从为这种类型创建一个新的构造函数开始。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_fun</span><span class="token punctuation">(</span>lbuiltin func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lval<span class="token operator">*</span> v <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  v<span class="token operator">-></span>type <span class="token operator">=</span> LVAL_FUN<span class="token punctuation">;</span>
  v<span class="token operator">-></span>fun <span class="token operator">=</span> func<span class="token punctuation">;</span>
  <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>On <strong>deletion</strong> we don’t need to do anything special for function pointers.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>On <strong>printing</strong> we can just print out a nominal string.</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;function>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>我们还将添加一个用于复制<code>lval</code>的新函数。当我们把东西放进环境中或从环境中取出东西时，这会很有用。对于数字和函数，我们可以直接复制相关字段。对于字符串，我们需要使用<code>malloc</code>和<code>strcpy</code>进行复制。要复制列表，我们需要分配正确的空间量，然后分别复制每个元素。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  lval<span class="token operator">*</span> x <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  x<span class="token operator">-></span>type <span class="token operator">=</span> v<span class="token operator">-></span>type<span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* Copy Functions and Numbers Directly */</span>
    <span class="token keyword">case</span> LVAL_FUN<span class="token operator">:</span> x<span class="token operator">-></span>fun <span class="token operator">=</span> v<span class="token operator">-></span>fun<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LVAL_NUM<span class="token operator">:</span> x<span class="token operator">-></span>num <span class="token operator">=</span> v<span class="token operator">-></span>num<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy Strings using malloc and strcpy */</span>
    <span class="token keyword">case</span> LVAL_ERR<span class="token operator">:</span>
      x<span class="token operator">-></span>err <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token operator">-></span>err<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">strcpy</span><span class="token punctuation">(</span>x<span class="token operator">-></span>err<span class="token punctuation">,</span> v<span class="token operator">-></span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> LVAL_SYM<span class="token operator">:</span>
      x<span class="token operator">-></span>sym <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>v<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">strcpy</span><span class="token punctuation">(</span>x<span class="token operator">-></span>sym<span class="token punctuation">,</span> v<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy Lists by copying each sub-expression */</span>
    <span class="token keyword">case</span> LVAL_SEXPR<span class="token operator">:</span>
    <span class="token keyword">case</span> LVAL_QEXPR<span class="token operator">:</span>
      x<span class="token operator">-></span>count <span class="token operator">=</span> v<span class="token operator">-></span>count<span class="token punctuation">;</span>
      x<span class="token operator">-></span>cell <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        x<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token operator">-></span>cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-环境"><a href="#6-环境" class="headerlink" title="6.环境"></a>6.环境</h3><ul>
<li>我们的环境结构必须对名称和值之间的关系列表进行编码。有很多方法可以构建一个可以做这类事情的结构。我们将寻求最简单、可行的方法。这是使用两个长度相等的列表。一个是<code>lval*</code>列表，另一个是<code>char*</code>列表。一个列表中的每个条目在另一个列表中的相同位置都有一个对应的条目。我们已经向前声明了我们的<code>lenv</code>结构，所以我们可以如下定义它。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">lenv</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> count<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> syms<span class="token punctuation">;</span>
  lval<span class="token operator">*</span><span class="token operator">*</span> vals<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们需要一些函数来创建和删除此结构。这些都很简单。创建会初始化结构字段，而删除会迭代两个列表中的项目，并删除或释放它们。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lenv<span class="token operator">*</span> <span class="token function">lenv_new</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  lenv<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>lenv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>vals <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lenv_del</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">lval_del</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们可以创建两个函数，要么从环境中获取值，要么将值放入其中。</li>
<li>为了从环境中获得一个值，我们循环环境中的所有项，并检查给定的符号是否与任何存储的字符串匹配。如果找到匹配项，则可以返回存储值的副本。如果没有找到匹配项，我们应该返回一个错误。</li>
<li>将新变量放入环境的函数稍微复杂一些。首先，我们要检查是否已经存在同名的变量。如果是这种情况，我们应该用新值替换它的值。为此，我们在环境中循环所有现有变量并检查它们的名称。如果找到匹配项，我们将删除存储在该位置的值，并将输入值的副本存储在该位置。</li>
<li>如果找不到具有该名称的现有值，我们需要分配更多空间将其放入。为此，我们可以使用<code>realloc</code>，并在新分配的位置存储<code>lval</code>及其名称的副本。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">lval<span class="token operator">*</span> <span class="token function">lenv_get</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">,</span> lval<span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Iterate over all items in environment */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check if the stored string matches the symbol string */</span>
    <span class="token comment">/* If it does, return a copy of the value */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/* If no symbol found return error */</span>
  <span class="token keyword">return</span> <span class="token function">lval_err</span><span class="token punctuation">(</span><span class="token string">"unbound symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">lenv_put</span><span class="token punctuation">(</span>lenv<span class="token operator">*</span> e<span class="token punctuation">,</span> lval<span class="token operator">*</span> k<span class="token punctuation">,</span> lval<span class="token operator">*</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

  <span class="token comment">/* Iterate over all items in environment */</span>
  <span class="token comment">/* This is to see if variable already exists */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">/* If variable is found delete item at that position */</span>
    <span class="token comment">/* And replace with variable supplied by user */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">lval_del</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      e<span class="token operator">-></span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">/* If no existing entry found allocate space for new entry */</span>
  e<span class="token operator">-></span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>vals <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>e<span class="token operator">-></span>vals<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lval<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> e<span class="token operator">-></span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Copy contents of lval and symbol string into new location */</span>
  e<span class="token operator">-></span>vals<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lval_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  e<span class="token operator">-></span>syms<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>k<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>e<span class="token operator">-></span>syms<span class="token punctuation">[</span>e<span class="token operator">-></span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token operator">-></span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="7-变量评估"><a href="#7-变量评估" class="headerlink" title="7.变量评估"></a>7.变量评估</h3><ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>c/c++项目学习</category>
      </categories>
      <tags>
        <tag>c/c++项目学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C基础学习与复习</title>
    <url>/2022/06/23/CNOTE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马C基础教程的资料总结</li>
<li><a href="https://qiniu.orangew.cn/download/C%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8F%8A100%E4%BE%8B.chm">C语言入门教程及100例.chm</a></li>
</ul>
<blockquote>
<p>上述下载文件打开后空白？</p>
<p>请点击文件的属性</p>
<p>勾选以下图片中的安全选项中的解除锁定</p>
<p>重新打开文件即可</p>
<p><img src="http://qiniu.orangew.cn/img/20220629235122.png" alt="20220629235122"></p>
</blockquote>
<h2 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h2><h3 id="1-C语言概述"><a href="#1-C语言概述" class="headerlink" title="1.C语言概述"></a>1.C语言概述</h3><h4 id="1-不同语言的应用场景"><a href="#1-不同语言的应用场景" class="headerlink" title="1.不同语言的应用场景"></a>1.不同语言的应用场景</h4><pre class="mermaid">graph LR;
不同语言-->嵌入式:C和汇编
不同语言-->Web开发:js,php,asp,jsp
不同语言-->高性能服务:apache,nginx,memcached,redis等等高性能web服务器和数据库都是纯c开发的
不同语言-->分布式应用:java,python的天下
不同语言-->游戏服务器:c,c++,lua脚本
不同语言-->并行计算:java,go,erlang
不同语言-->游戏引擎:c++,脚本
不同语言-->游戏逻辑:脚本
不同语言-->移动开发:java,obj-c,swift
不同语言-->桌面开发:c++,qt+script,c#
不同语言-->操作系统:c
不同语言-->虚拟技术:qemu,kvm,xen都是纯c开发的
不同语言-->数据库:c
不同语言-->编译器:c,c++
不同语言-->大数据:java,python
不同语言-->云存储:java,python</pre>

<h4 id="2-C语言的简洁"><a href="#2-C语言的简洁" class="headerlink" title="2.C语言的简洁"></a>2.C语言的简洁</h4><ul>
<li>32个关键字，9种控制语句，34种运算符</li>
<li><img src="http://qiniu.orangew.cn/img/32%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="32个关键字"></li>
</ul>
<blockquote>
<p>32个关键字:(由系统定义，不能重作其它定义)</p>
<p>auto<br>break<br>case<br>char<br>const<br>continue<br>default<br>do<br>double<br>else<br>enum<br>extern<br>float<br>for<br>goto<br>if<br>int<br>long<br>register<br>return<br>short<br>signed<br>sizeofstatic<br>struct<br>switch<br>typedef<br>unsigned<br>union<br>void<br>volatile<br>while</p>
</blockquote>
<blockquote>
<p>9种控制语句:</p>
<p>if( )<del>else</del></p>
<p>for( )~</p>
<p>while( )~</p>
<p>do~while( )</p>
<p>continue</p>
<p>break</p>
<p>switch</p>
<p>goto</p>
<p>return</p>
</blockquote>
<blockquote>
<p>34种运算符:<br>算术运算符: + - * / % ++ –<br>关系运算符: &lt; &lt;= == &gt; &gt;= !=<br>逻辑运算符: ! &amp;&amp; ||<br>位运算符:  &lt;&lt;  &gt;&gt;  ~ | ^ &amp;<br>赋值运算符: = 及其扩展<br>条件运算符: ?:<br>逗号运算符: ,<br>指针运算符: * &amp;<br>求字节数: sizeof<br>强制类型转换:(类型)<br>分量运算符: . -&gt;<br>下标运算符: [ ]<br>其它:( )</p>
</blockquote>
<h4 id="3-gcc编译C"><a href="#3-gcc编译C" class="headerlink" title="3.gcc编译C"></a>3.<code>gcc</code>编译C</h4><ul>
<li><code>gcc</code>（GNU Compiler Collection，GNU 编译器套件），是由 GNU 开发的编程语言编译器。<code>gcc</code>原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，<code>gcc</code>同样适用于微软的Windows。</li>
<li><code>gcc</code>最初用于编译C语言，随着项目的发展<code>gcc</code>已经成为了能够编译<code>C、C++、Java、Ada、fortran、Object C、Object C++、Go</code>语言的编译器大家族。</li>
<li>编译命令格式</li>
</ul>
<blockquote>
<p><code>gcc</code>  [<code>-option1</code>] … <filename></p>
<p><code>g++</code>  [<code>-option1</code>] … <filename></p>
</blockquote>
<ul>
<li>命令、选项和源文件之间使用空格分隔</li>
<li>一行命令中可以有零个、一个或多个选项</li>
<li>文件名可以包含文件的绝对路径，也可以使用相对路径</li>
<li>如果命令中不包含输出可执行文件的文件名，可执行文件的文件名会自动生成一个默认名，Linux平台为<code>a.out</code>，Windows平台为<code>a.exe</code></li>
<li><code>gcc</code>,<code>g++</code>编译常用选项说明</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
<tr>
<td>-E</td>
<td>预处理</td>
</tr>
<tr>
<td>-S</td>
<td>预处理和编译</td>
</tr>
<tr>
<td>-c</td>
<td>预处理、编译和汇编</td>
</tr>
</tbody></table>
<h4 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4.环境配置"></a>4.环境配置</h4><h4 id="5-代码分析"><a href="#5-代码分析" class="headerlink" title="5.代码分析"></a>5.代码分析</h4><ol>
<li>头文件<ul>
<li>#include&lt; &gt; 与 #include “”的区别：<ul>
<li>&lt; &gt; 表示系统直接按系统指定的目录检索</li>
<li>“” 表示系统先在 “” 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</li>
</ul>
</li>
</ul>
</li>
<li>main函数<ul>
<li>一个完整的C语言程序，是由一个、且只能有一个main()函数(又称主函数，必须有)和若干个其他函数结合而成（可选）</li>
<li>main函数是C语言程序的入口，程序是从main函数开始执行。</li>
</ul>
</li>
<li>{} 括号，程序体和代码块<ul>
<li>{}叫代码块，一个代码块内部可以有一条或者多条语句</li>
<li>C语言每句可执行代码都是”<strong>;</strong>“分号结尾</li>
<li>所有的#开头的行，都代表预编译指令，预编译指令行结尾是没有分号的</li>
<li>所有的可执行语句必须是在代码块里面</li>
</ul>
</li>
<li>注释<ul>
<li>//叫行注释，注释的内容编译器是忽略的，注释主要的作用是在代码中加一些说明和解释，这样有利于代码的阅读</li>
<li>/**/叫块注释</li>
<li>块注释是C语言标准的注释方法</li>
<li>行注释是从C++语言借鉴过来的</li>
</ul>
</li>
<li>return语句<ul>
<li>return代表函数执行完毕，返回return代表函数的终止</li>
<li>如果main定义的时候前面是int，那么return后面就需要写一个整数；如果main定义的时候前面是void，那么return后面什么也不需要写</li>
<li>在main函数中return 0代表程序执行成功，return -1代表程序执行失败</li>
<li>int main()和void main()在C语言中是一样的，但C++只接受int main这种定义方式</li>
</ul>
</li>
</ol>
<h4 id="6-system函数"><a href="#6-system函数" class="headerlink" title="6. system函数"></a>6. system函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在已经运行的程序中执行另外一个外部程序
参数：外部可执行程序名字
返回值：
成功：<span class="token number">0</span>
失败：任意数字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//system("calc"); //windows平台</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Linux平台, 需要头文件#include &lt;stdlib.h></span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-C语言编译过程"><a href="#7-C语言编译过程" class="headerlink" title="7.C语言编译过程"></a>7.C语言编译过程</h4><ol>
<li>预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</li>
<li>编译：检查语法，将预处理后文件编译生成汇编文件</li>
<li>汇编：将汇编文件生成目标文件(二进制文件)</li>
<li>链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</li>
</ol>
<pre class="mermaid">graph TD;
源代码*.c-->预处理器
头文件*.h-->预处理器
预处理器-->编译器
编译器-->汇编;
汇编-->目标代码*.o
目标代码*.o -->链接器
启动代码-->链接器
库代码-->链接器
链接器-->可执行文件</pre>

<h4 id="8-gcc编译过程"><a href="#8-gcc编译过程" class="headerlink" title="8.gcc编译过程"></a>8.gcc编译过程</h4><ol>
<li>分步编译</li>
</ol>
<blockquote>
<p>预处理：<code>gcc -E hello.c -o hello.i</code></p>
<p>编 译：<code>gcc -S hello.i -o hello.s</code></p>
<p>汇 编：<code>gcc -c hello.s -o hello.o</code></p>
<p>链 接：<code>gcc  hello.o -o hello</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-E</td>
<td>只进行预处理</td>
</tr>
<tr>
<td>-S</td>
<td>只进行预处理和编译</td>
</tr>
<tr>
<td>-c</td>
<td>只进行预处理、编译和汇编</td>
</tr>
<tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>文件后缀</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>.c</td>
<td>源文件</td>
</tr>
<tr>
<td>.i</td>
<td>预处理后的C语言文件</td>
</tr>
<tr>
<td>.s</td>
<td>编译后的汇编文件</td>
</tr>
<tr>
<td>.o</td>
<td>汇编后的目标文件</td>
</tr>
</tbody></table>
<p><img src="http://qiniu.orangew.cn/img/01%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="01编译过程"></p>
<h4 id="9-CPU内部结构和寄存器"><a href="#9-CPU内部结构和寄存器" class="headerlink" title="9.CPU内部结构和寄存器"></a>9.CPU内部结构和寄存器</h4><ol>
<li>64位和32位系统的区别</li>
</ol>
<ul>
<li>寄存器是CPU内部最基本的存储单元</li>
<li>CPU对外是通过总线(地址、控制、数据)来和外部设备交互的，总线的宽度是8位，同时CPU的寄存器也是8位，那么这个CPU就叫8位CPU</li>
<li>如果总线是32位，寄存器也是32位的，那么这个CPU就是32位CPU</li>
<li>有一种CPU内部的寄存器是32位的，但总线是16位，准32为CPU</li>
<li>所有的64位CPU兼容32位的指令，32位要兼容16位的指令，所以在64位的CPU上是可以识别32位的指令</li>
<li>在64位的CPU构架上运行了64位的软件操作系统，那么这个系统是64位</li>
<li>在64位的CPU构架上，运行了32位的软件操作系统，那么这个系统就是32位</li>
<li>64位的软件不能运行在32位的CPU之上</li>
</ul>
<ol start="2">
<li>寄存器名字</li>
</ol>
<table>
<thead>
<tr>
<th>8位</th>
<th>16位</th>
<th>32位</th>
<th>64位</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>AX</td>
<td>EAX</td>
<td>RAX</td>
</tr>
<tr>
<td>B</td>
<td>BX</td>
<td>EBX</td>
<td>RBX</td>
</tr>
<tr>
<td>C</td>
<td>CX</td>
<td>ECX</td>
<td>RCX</td>
</tr>
<tr>
<td>D</td>
<td>DX</td>
<td>EDX</td>
<td>RDX</td>
</tr>
</tbody></table>
<ol start="3">
<li>寄存器、缓存、内存三者之间的关系<ul>
<li>按与CPU远近来分，离得最近的是寄存器，然后缓存(CPU缓存)，最后内存。</li>
<li>CPU计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU&lt;—&gt;寄存器&lt;—&gt;内存，这就是它们之间的信息交换。</li>
<li>那为什么有缓存呢？因为如果经常操作内存中的同一址地的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。</li>
<li>因为从缓存提取的速度远高于内存。当然缓存的价格肯定远远高于内存，不然的话，机器里就没有内存的存在。</li>
<li>由此可以看出，从远近来看：CPU〈—〉寄存器〈—&gt; 缓存 &lt;—&gt; 内存。</li>
</ul>
</li>
</ol>
<h4 id="10-汇编语言"><a href="#10-汇编语言" class="headerlink" title="10.汇编语言"></a>10.汇编语言</h4><ol>
<li>vs中c语言嵌套汇编语言</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义整型变量a, b, c</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	__asm
	<span class="token punctuation">&#123;</span>
		mov a<span class="token punctuation">,</span> <span class="token number">3</span>	<span class="token comment">//3的值放在a对应内存的位置</span>
		mov b<span class="token punctuation">,</span> <span class="token number">4</span>	<span class="token comment">//4的值放在b对应内存的位置</span>
		mov eax<span class="token punctuation">,</span> a	<span class="token comment">//把a内存的值放在eax寄存器</span>
		add eax<span class="token punctuation">,</span> b	<span class="token comment">//eax和b相加，结果放在eax</span>
		mov c<span class="token punctuation">,</span> eax	<span class="token comment">//eax的值放在c中</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把c的值输出</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成功完成</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>反汇编</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义整型变量a, b, c</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>  c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把c的值输出</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//成功完成</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>设置断点</li>
<li>右键反汇编</li>
<li>根据汇编代码分析程序</li>
</ul>
<h4 id="11-IDE"><a href="#11-IDE" class="headerlink" title="11.IDE"></a>11.IDE</h4><ol>
<li>Qt Creator</li>
<li>Visual Studio<ol>
<li>vs2013不建议使用C的传统函数库scanf,strcpy,sprintf，使用这些函数，会提示C4996错误</li>
</ol>
</li>
</ol>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><h4 id="1-常量与变量"><a href="#1-常量与变量" class="headerlink" title="1.常量与变量"></a>1.常量与变量</h4><ol>
<li>关键字（32个）<ul>
<li>数据类型关键字（12个）<br>char, short,int,long, float, double,unsigned,signed,struct, union, enum, void</li>
<li>控制语句关键字（12个)<br>if,else, switch, case, default<br>for , do, while, break, continue, goto, return</li>
<li>存储类关键字(5个)<br>auto，extern,register，static，const</li>
<li>其他关键字（3个)<br>sizeof，typedef，volatile</li>
</ul>
</li>
<li>数据类型</li>
</ol>
<pre class="mermaid">graph LR;
数据类型-->基本类型
数据类型-->构造类型
数据类型-->指针类型:char*,int*,int**等
基本类型-->整型:int,short,long
基本类型-->字符型:char
基本类型-->浮点型
浮点型-->单精度浮点型:float
浮点型-->双精度浮点型:double
构造类型-->数组类型
构造类型-->结构类型:struct
构造类型-->联合类型:union
构造类型-->枚举类型:enum</pre>

<p>3.常量</p>
<ul>
<li><p>在程序运行过程中，其值不能被改变的量</p>
</li>
<li><p> 常量一般出现在表达式或赋值语句中</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>整型常量</th>
<th>100，200，-100，0</th>
</tr>
</thead>
<tbody><tr>
<td>实型常量</td>
<td>3.14 ， 0.125，-3.123</td>
</tr>
<tr>
<td>字符型常量</td>
<td>‘a’,‘b’,‘1’,‘\n’</td>
</tr>
<tr>
<td>字符串常量</td>
<td>“a”,“ab”，“12356”</td>
</tr>
</tbody></table>
</li>
</ul>
<ol start="4">
<li>变量<ul>
<li>在程序运行过程中，其值可以改变</li>
<li>变量在使用前必须先定义，定义变量前必须有相应的数据类型</li>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
<li>变量在编译时为其分配相应的内存空间</li>
<li>可以通过其名字和地址访问相应内存</li>
<li>变量名，变量值，存储单元</li>
</ul>
</li>
<li>声明和定义的区别<ul>
<li>声明变量不需要建立存储空间，如：extern int a;</li>
<li>定义变量需要建立存储空间，如：int b;</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//extern 关键字只做声明，不能做任何定义</span>
	<span class="token comment">//声明一个变量a，a在这里没有建立存储空间</span>
	<span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">//err, 没有空间，就不可以赋值</span>

	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">//定义一个变量b，b的类型为int，b赋值为10</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义：</p>
<ul>
<li><p>int b 它既是声明，同时又是定义</p>
</li>
<li><p>对于 extern b来讲它只是声明不是定义</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">10</span> </span><span class="token comment">//声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>	<span class="token comment">//定义了一个变量，其类型为int，名字叫a</span>

	<span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//定义一个const常量，名为叫b，值为10</span>
	<span class="token comment">//b = 11; //err,常量的值不能改变</span>

	<span class="token comment">//MAX = 100;	//err,常量的值不能改变</span>

	a <span class="token operator">=</span> MAX<span class="token punctuation">;</span><span class="token comment">//将abc的值设置为MAX的值</span>
	a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印变量a的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-整型：int"><a href="#2-整型：int" class="headerlink" title="2.整型：int"></a>2.整型：int</h4><ol>
<li><p>定义和输出</p>
<ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>输出一个有符号的10进制int类型</td>
</tr>
<tr>
<td>%o(字母o)</td>
<td>输出8进制的int类型</td>
</tr>
<tr>
<td>%x</td>
<td>输出16进制的int类型，字母以小写输出</td>
</tr>
<tr>
<td>%X</td>
<td>输出16进制的int类型，字母以大写输出</td>
</tr>
<tr>
<td>%u</td>
<td>输出一个10进制的无符号数</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量a，以10进制方式赋值为123</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0567</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量b，以8进制方式赋值为0567</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xabc</span><span class="token punctuation">;</span>	<span class="token comment">//定义变量c，以16进制方式赋值为0xabc</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"8进制：b = %o\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10进制：b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"16进制：c = %x\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"16进制：c = %X\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"10进制：c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span> <span class="token comment">//定义无符号int变量d，以16进制方式赋值</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"有符号方式打印：d = %d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无符号方式打印：d = %u\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>输入</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//不要加“\n”</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印a的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>short、int、long、long long</li>
</ol>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
</tr>
</tbody></table>
<ul>
<li>需要注意的是，整型数据在内存中占的字节数与所选择的操作系统有关。虽然 C 语言标准中没有明确规定整型数据的长度，但 long 类型整数的长度不能短于 int 类型， short 类型整数的长度不能长于 int 类型。</li>
<li>当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>整型常量</strong></th>
<th><strong>所需类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>代表int类型</td>
</tr>
<tr>
<td>10l, 10L</td>
<td>代表long类型</td>
</tr>
<tr>
<td>10ll, 10LL</td>
<td>代表long long类型</td>
</tr>
<tr>
<td>10u, 10U</td>
<td>代表unsigned int类型</td>
</tr>
<tr>
<td>10ul, 10UL</td>
<td>代表unsigned long类型</td>
</tr>
<tr>
<td>10ull, 10ULL</td>
<td>代表unsigned long long类型</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th align="left"><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%hd</td>
<td align="left">输出short类型</td>
</tr>
<tr>
<td>%d</td>
<td align="left">输出int类型</td>
</tr>
<tr>
<td>%ld</td>
<td align="left">输出long类型</td>
</tr>
<tr>
<td>%lld</td>
<td align="left">输出long long类型</td>
</tr>
<tr>
<td>%hu</td>
<td align="left">输出unsigned short类型</td>
</tr>
<tr>
<td>%u</td>
<td align="left">输出unsigned int类型</td>
</tr>
<tr>
<td>%lu</td>
<td align="left">输出unsigned long类型</td>
</tr>
<tr>
<td>%llu</td>
<td align="left">输出unsigned long long类型</td>
</tr>
</tbody></table>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">10l</span><span class="token punctuation">;</span> <span class="token comment">//或者10L</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">10ll</span><span class="token punctuation">;</span> <span class="token comment">//或者10LL</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short a = %hd\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long c = %ld\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"long long d = %lld\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> a2 <span class="token operator">=</span> <span class="token number">20u</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token number">20u</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> c2<span class="token operator">=</span> <span class="token number">20ul</span><span class="token punctuation">;</span> 
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> d2 <span class="token operator">=</span> <span class="token number">20ull</span><span class="token punctuation">;</span> 

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned short a = %hu\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned int b = %u\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long c = %lu\n"</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unsigned long long d = %llu\n"</span><span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.有符号数和无符号数的区别</p>
<ul>
<li>有符号数是最高位为符号位，0代表正数，1代表负数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">signed</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1089474374</span><span class="token punctuation">;</span> <span class="token comment">//定义有符号整型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为 BF0FF0BA</span>

	<span class="token comment">//B       F      0        F       F     0        B	      A</span>
	<span class="token comment">//1011 1111 0000 1111 1111 0000 1011 1010</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> 符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3236958022</span><span class="token punctuation">;</span> <span class="token comment">//定义无符号整型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为 C0F00F46</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>有符号和无符号整型的取值范围</li>
</ul>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>取值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>2字节</td>
<td>-32768 到 32767 (-215 ~ 215-1)</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-2147483648 到 2147483647 (-231 ~ 231-1)</td>
</tr>
<tr>
<td>long</td>
<td>4字节</td>
<td>-2147483648 到 2147483647 (-231 ~ 231-1)</td>
</tr>
<tr>
<td>unsigned short</td>
<td>2字节</td>
<td>0 到 65535 (0 ~ 216-1)</td>
</tr>
<tr>
<td>unsigned int</td>
<td>4字节</td>
<td>0 到 4294967295 (0 ~ 232-1)</td>
</tr>
<tr>
<td>unsigned long</td>
<td>4字节</td>
<td>0 到 4294967295 (0 ~ 232-1)</td>
</tr>
</tbody></table>
<h4 id="3-sizeof关键字"><a href="#3-sizeof关键字" class="headerlink" title="3.sizeof关键字"></a>3.sizeof关键字</h4><ul>
<li>sizeof不是函数，所以不需要包含任何头文件，它的功能是计算一个数据类型的大小，单位为字节</li>
<li>sizeof的返回值为size_t</li>
<li>size_t类型在32位操作系统下是unsigned int，是一个无符号的整数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sizeof得到指定值占用内存的大小，单位：字节</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">size_t</span> c <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %u\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用无符号数的方式输出c的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-字符型char"><a href="#4-字符型char" class="headerlink" title="4.字符型char"></a>4.字符型char</h4><ol>
<li>字符变量的定义和输出<ul>
<li>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中。char的本质就是一个1字节大小的整型。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(ch) = %u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch[%%c] = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印字符</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch[%%d] = %d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印‘a’ ASCII的值</span>

	<span class="token keyword">char</span> A <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//97</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %d\n"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//65</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写a转大写A</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大写A转小写a</span>

	ch <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"空字符：%d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空字符ASCII的值为32</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小写a转大写A</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %c\n"</span><span class="token punctuation">,</span> <span class="token char">'A'</span> <span class="token operator">+</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//大写A转小写a</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.字符变量的输入</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//不要加“\n”</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印ch的字符</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>ASCII对照表</li>
</ol>
<table>
<thead>
<tr>
<th><strong>十进制代码</strong></th>
<th><strong>十六进制代码</strong></th>
<th><strong>MCS 字符或缩写</strong></th>
<th><strong>DEC 多国字符名</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>ASCII 控制字符</strong> <strong>1</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>NUL</td>
<td>空字符</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>SOH</td>
<td>标题起始 (Ctrl/A)</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>STX</td>
<td>文本起始 (Ctrl/B)</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>ETX</td>
<td>文本结束 (Ctrl/C)</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>EOT</td>
<td>传输结束 (Ctrl/D)</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>ENQ</td>
<td>询问 (Ctrl/E)</td>
</tr>
<tr>
<td>6</td>
<td>6</td>
<td>ACK</td>
<td>认可 (Ctrl/F)</td>
</tr>
<tr>
<td>7</td>
<td>7</td>
<td>BEL</td>
<td>铃 (Ctrl/G)</td>
</tr>
<tr>
<td>8</td>
<td>8</td>
<td>BS</td>
<td>退格 (Ctrl/H)</td>
</tr>
<tr>
<td>9</td>
<td>9</td>
<td>HT</td>
<td>水平制表栏 (Ctrl/I)</td>
</tr>
<tr>
<td>10</td>
<td>0A</td>
<td>LF</td>
<td>换行 (Ctrl/J)</td>
</tr>
<tr>
<td>11</td>
<td>0B</td>
<td>VT</td>
<td>垂直制表栏 (Ctrl/K)</td>
</tr>
<tr>
<td>12</td>
<td>0C</td>
<td>FF</td>
<td>换页 (Ctrl/L)</td>
</tr>
<tr>
<td>13</td>
<td>0D</td>
<td>CR</td>
<td>回车 (Ctrl/M)</td>
</tr>
<tr>
<td>14</td>
<td>0E</td>
<td>SO</td>
<td>移出 (Ctrl/N)</td>
</tr>
<tr>
<td>15</td>
<td>0F</td>
<td>SI</td>
<td>移入 (Ctrl/O)</td>
</tr>
<tr>
<td>16</td>
<td>10</td>
<td>DLE</td>
<td>数据链接丢失 (Ctrl/P)</td>
</tr>
<tr>
<td>17</td>
<td>11</td>
<td>DC1</td>
<td>设备控制 1 (Ctrl/Q)</td>
</tr>
<tr>
<td>18</td>
<td>12</td>
<td>DC2</td>
<td>设备控制 2 (Ctrl/R)</td>
</tr>
<tr>
<td>19</td>
<td>13</td>
<td>DC3</td>
<td>设备控制 3 (Ctrl/S)</td>
</tr>
<tr>
<td>20</td>
<td>14</td>
<td>DC4</td>
<td>设备控制 4 (Ctrl/T)</td>
</tr>
<tr>
<td>21</td>
<td>15</td>
<td>NAK</td>
<td>否定接受 (Ctrl/U)</td>
</tr>
<tr>
<td>22</td>
<td>16</td>
<td>SYN</td>
<td>同步闲置符 (Ctrl/V)</td>
</tr>
<tr>
<td>23</td>
<td>17</td>
<td>ETB</td>
<td>传输块结束 (Ctrl/W)</td>
</tr>
<tr>
<td>24</td>
<td>18</td>
<td>CAN</td>
<td>取消 (Ctrl/X)</td>
</tr>
<tr>
<td>25</td>
<td>19</td>
<td>EM</td>
<td>媒体结束 (Ctrl/Y)</td>
</tr>
<tr>
<td>26</td>
<td>1A</td>
<td>SUB</td>
<td>替换 (Ctrl/Z)</td>
</tr>
<tr>
<td>27</td>
<td>1B</td>
<td>ESC</td>
<td>换码符</td>
</tr>
<tr>
<td>28</td>
<td>1C</td>
<td>FS</td>
<td>文件分隔符</td>
</tr>
<tr>
<td>29</td>
<td>1D</td>
<td>GS</td>
<td>组分隔符</td>
</tr>
<tr>
<td>30</td>
<td>1E</td>
<td>RS</td>
<td>记录分隔符</td>
</tr>
<tr>
<td>31</td>
<td>1F</td>
<td>US</td>
<td>单位分隔符</td>
</tr>
<tr>
<td><strong>ASCII 特殊和数字字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>32</td>
<td>20</td>
<td>SP</td>
<td>空格</td>
</tr>
<tr>
<td>33</td>
<td>21</td>
<td>!</td>
<td>感叹号</td>
</tr>
<tr>
<td>34</td>
<td>22</td>
<td>“</td>
<td>引号 (双引号)</td>
</tr>
<tr>
<td>35</td>
<td>23</td>
<td>#</td>
<td>数字符号</td>
</tr>
<tr>
<td>36</td>
<td>24</td>
<td>$</td>
<td>美元符</td>
</tr>
<tr>
<td>37</td>
<td>25</td>
<td>%</td>
<td>百分号</td>
</tr>
<tr>
<td>38</td>
<td>26</td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>39</td>
<td>27</td>
<td>‘</td>
<td>省略号 (单引号)</td>
</tr>
<tr>
<td>40</td>
<td>28</td>
<td>(</td>
<td>左圆括号</td>
</tr>
<tr>
<td>41</td>
<td>29</td>
<td>)</td>
<td>右圆括号</td>
</tr>
<tr>
<td>42</td>
<td>2A</td>
<td>*</td>
<td>星号</td>
</tr>
<tr>
<td>43</td>
<td>2B</td>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>44</td>
<td>2C</td>
<td>,</td>
<td>逗号</td>
</tr>
<tr>
<td>45</td>
<td>2D</td>
<td>–</td>
<td>连字号或减号</td>
</tr>
<tr>
<td>46</td>
<td>2E</td>
<td>.</td>
<td>句点或小数点</td>
</tr>
<tr>
<td>47</td>
<td>2F</td>
<td>/</td>
<td>斜杠</td>
</tr>
<tr>
<td>48</td>
<td>30</td>
<td>0</td>
<td>零</td>
</tr>
<tr>
<td>49</td>
<td>31</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td>32</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>51</td>
<td>33</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>52</td>
<td>34</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>53</td>
<td>35</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>54</td>
<td>36</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>55</td>
<td>37</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>56</td>
<td>38</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>57</td>
<td>39</td>
<td>9</td>
<td>9</td>
</tr>
<tr>
<td>58</td>
<td>3A</td>
<td>:</td>
<td>冒号</td>
</tr>
<tr>
<td>59</td>
<td>3B</td>
<td>;</td>
<td>分号</td>
</tr>
<tr>
<td>60</td>
<td>3C</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>61</td>
<td>3D</td>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>62</td>
<td>3E</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>63</td>
<td>3F</td>
<td>?</td>
<td>问号</td>
</tr>
<tr>
<td><strong>ASCII 字母字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>40</td>
<td>@</td>
<td>商业 at 符号</td>
</tr>
<tr>
<td>65</td>
<td>41</td>
<td>A</td>
<td>大写字母 A</td>
</tr>
<tr>
<td>66</td>
<td>42</td>
<td>B</td>
<td>大写字母 B</td>
</tr>
<tr>
<td>67</td>
<td>43</td>
<td>C</td>
<td>大写字母 C</td>
</tr>
<tr>
<td>68</td>
<td>44</td>
<td>D</td>
<td>大写字母 D</td>
</tr>
<tr>
<td>69</td>
<td>45</td>
<td>E</td>
<td>大写字母 E</td>
</tr>
<tr>
<td>70</td>
<td>46</td>
<td>F</td>
<td>大写字母 F</td>
</tr>
<tr>
<td>71</td>
<td>47</td>
<td>G</td>
<td>大写字母 G</td>
</tr>
<tr>
<td>72</td>
<td>48</td>
<td>H</td>
<td>大写字母 H</td>
</tr>
<tr>
<td>73</td>
<td>49</td>
<td>I</td>
<td>大写字母 I</td>
</tr>
<tr>
<td>74</td>
<td>4A</td>
<td>J</td>
<td>大写字母 J</td>
</tr>
<tr>
<td>75</td>
<td>4B</td>
<td>K</td>
<td>大写字母 K</td>
</tr>
<tr>
<td>76</td>
<td>4C</td>
<td>L</td>
<td>大写字母 L</td>
</tr>
<tr>
<td>77</td>
<td>4D</td>
<td>M</td>
<td>大写字母 M</td>
</tr>
<tr>
<td>78</td>
<td>4E</td>
<td>N</td>
<td>大写字母 N</td>
</tr>
<tr>
<td>79</td>
<td>4F</td>
<td>O</td>
<td>大写字母 O</td>
</tr>
<tr>
<td>80</td>
<td>50</td>
<td>P</td>
<td>大写字母 P</td>
</tr>
<tr>
<td>81</td>
<td>51</td>
<td>Q</td>
<td>大写字母 Q</td>
</tr>
<tr>
<td>82</td>
<td>52</td>
<td>R</td>
<td>大写字母 R</td>
</tr>
<tr>
<td>83</td>
<td>53</td>
<td>S</td>
<td>大写字母 S</td>
</tr>
<tr>
<td>84</td>
<td>54</td>
<td>T</td>
<td>大写字母 T</td>
</tr>
<tr>
<td>85</td>
<td>55</td>
<td>U</td>
<td>大写字母 U</td>
</tr>
<tr>
<td>86</td>
<td>56</td>
<td>V</td>
<td>大写字母 V</td>
</tr>
<tr>
<td>87</td>
<td>57</td>
<td>W</td>
<td>大写字母 W</td>
</tr>
<tr>
<td>88</td>
<td>58</td>
<td>X</td>
<td>大写字母 X</td>
</tr>
<tr>
<td>89</td>
<td>59</td>
<td>Y</td>
<td>大写字母 Y</td>
</tr>
<tr>
<td>90</td>
<td>5A</td>
<td>Z</td>
<td>大写字母 Z</td>
</tr>
<tr>
<td>91</td>
<td>5B</td>
<td>[</td>
<td>左中括号</td>
</tr>
<tr>
<td>92</td>
<td>5C</td>
<td>\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>93</td>
<td>5D</td>
<td>]</td>
<td>右中括号</td>
</tr>
<tr>
<td>94</td>
<td>5E</td>
<td>^</td>
<td>音调符号</td>
</tr>
<tr>
<td>95</td>
<td>5F</td>
<td>_</td>
<td>下划线</td>
</tr>
<tr>
<td>96</td>
<td>60</td>
<td>`</td>
<td>重音符</td>
</tr>
<tr>
<td>97</td>
<td>61</td>
<td>a</td>
<td>小写字母 a</td>
</tr>
<tr>
<td>98</td>
<td>62</td>
<td>b</td>
<td>小写字母 b</td>
</tr>
<tr>
<td>99</td>
<td>63</td>
<td>c</td>
<td>小写字母 c</td>
</tr>
<tr>
<td>100</td>
<td>64</td>
<td>d</td>
<td>小写字母 d</td>
</tr>
<tr>
<td>101</td>
<td>65</td>
<td>e</td>
<td>小写字母 e</td>
</tr>
<tr>
<td>102</td>
<td>66</td>
<td>f</td>
<td>小写字母 f</td>
</tr>
<tr>
<td>103</td>
<td>67</td>
<td>g</td>
<td>小写字母 g</td>
</tr>
<tr>
<td>104</td>
<td>68</td>
<td>h</td>
<td>小写字母 h</td>
</tr>
<tr>
<td>105</td>
<td>69</td>
<td>i</td>
<td>小写字母 i</td>
</tr>
<tr>
<td>106</td>
<td>6A</td>
<td>j</td>
<td>小写字母 j</td>
</tr>
<tr>
<td>107</td>
<td>6B</td>
<td>k</td>
<td>小写字母 k</td>
</tr>
<tr>
<td>108</td>
<td>6C</td>
<td>l</td>
<td>小写字母 l</td>
</tr>
<tr>
<td>109</td>
<td>6D</td>
<td>m</td>
<td>小写字母 m</td>
</tr>
<tr>
<td>110</td>
<td>6E</td>
<td>n</td>
<td>小写字母 n</td>
</tr>
<tr>
<td>111</td>
<td>6F</td>
<td>o</td>
<td>小写字母 o</td>
</tr>
<tr>
<td>112</td>
<td>70</td>
<td>p</td>
<td>小写字母 p</td>
</tr>
<tr>
<td>113</td>
<td>71</td>
<td>q</td>
<td>小写字母 q</td>
</tr>
<tr>
<td>114</td>
<td>72</td>
<td>r</td>
<td>小写字母 r</td>
</tr>
<tr>
<td>115</td>
<td>73</td>
<td>s</td>
<td>小写字母 s</td>
</tr>
<tr>
<td>116</td>
<td>74</td>
<td>t</td>
<td>小写字母 t</td>
</tr>
<tr>
<td>117</td>
<td>75</td>
<td>u</td>
<td>小写字母 u</td>
</tr>
<tr>
<td>118</td>
<td>76</td>
<td>v</td>
<td>小写字母 v</td>
</tr>
<tr>
<td>119</td>
<td>77</td>
<td>w</td>
<td>小写字母 w</td>
</tr>
<tr>
<td>120</td>
<td>78</td>
<td>x</td>
<td>小写字母 x</td>
</tr>
<tr>
<td>121</td>
<td>79</td>
<td>y</td>
<td>小写字母 y</td>
</tr>
<tr>
<td>122</td>
<td>7A</td>
<td>z</td>
<td>小写字母 z</td>
</tr>
<tr>
<td>123</td>
<td>7B</td>
<td>{</td>
<td>左大括号</td>
</tr>
<tr>
<td>124</td>
<td>7C</td>
<td>|</td>
<td>垂直线</td>
</tr>
<tr>
<td>125</td>
<td>7D</td>
<td>}</td>
<td>右大括号 (ALTMODE)</td>
</tr>
<tr>
<td>126</td>
<td>7E</td>
<td>~</td>
<td>代字号 (ALTMODE)</td>
</tr>
<tr>
<td>127</td>
<td>7F</td>
<td>DEL</td>
<td>擦掉 (DELETE)</td>
</tr>
<tr>
<td><strong>控制字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>128</td>
<td>80</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>129</td>
<td>81</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>130</td>
<td>82</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>131</td>
<td>83</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>132</td>
<td>84</td>
<td>IND</td>
<td>索引</td>
</tr>
<tr>
<td>133</td>
<td>85</td>
<td>NEL</td>
<td>下一行</td>
</tr>
<tr>
<td>134</td>
<td>86</td>
<td>SSA</td>
<td>被选区域起始</td>
</tr>
<tr>
<td>135</td>
<td>87</td>
<td>ESA</td>
<td>被选区域结束</td>
</tr>
<tr>
<td>136</td>
<td>88</td>
<td>HTS</td>
<td>水平制表符集</td>
</tr>
<tr>
<td>137</td>
<td>89</td>
<td>HTJ</td>
<td>对齐的水平制表符集</td>
</tr>
<tr>
<td>138</td>
<td>8A</td>
<td>VTS</td>
<td>垂直制表符集</td>
</tr>
<tr>
<td>139</td>
<td>8B</td>
<td>PLD</td>
<td>部分行向下</td>
</tr>
<tr>
<td>140</td>
<td>8C</td>
<td>PLU</td>
<td>部分行向上</td>
</tr>
<tr>
<td>141</td>
<td>8D</td>
<td>RI</td>
<td>反向索引</td>
</tr>
<tr>
<td>142</td>
<td>8E</td>
<td>SS2</td>
<td>单移 2</td>
</tr>
<tr>
<td>143</td>
<td>8F</td>
<td>SS3</td>
<td>单移 3</td>
</tr>
<tr>
<td>144</td>
<td>90</td>
<td>DCS</td>
<td>设备控制字符串</td>
</tr>
<tr>
<td>145</td>
<td>91</td>
<td>PU1</td>
<td>专用 1</td>
</tr>
<tr>
<td>146</td>
<td>92</td>
<td>PU2</td>
<td>专用 2</td>
</tr>
<tr>
<td>147</td>
<td>93</td>
<td>STS</td>
<td>设置传输状态</td>
</tr>
<tr>
<td>148</td>
<td>94</td>
<td>CCH</td>
<td>取消字符</td>
</tr>
<tr>
<td>149</td>
<td>95</td>
<td>MW</td>
<td>消息等待</td>
</tr>
<tr>
<td>150</td>
<td>96</td>
<td>SPA</td>
<td>保护区起始</td>
</tr>
<tr>
<td>151</td>
<td>97</td>
<td>EPA</td>
<td>保护区结束</td>
</tr>
<tr>
<td>152</td>
<td>98</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>153</td>
<td>99</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>154</td>
<td>9A</td>
<td></td>
<td>[保留]</td>
</tr>
<tr>
<td>155</td>
<td>9B</td>
<td>CSI</td>
<td>控制序列引导符</td>
</tr>
<tr>
<td>156</td>
<td>9C</td>
<td>ST</td>
<td>字符串终止符</td>
</tr>
<tr>
<td>157</td>
<td>9D</td>
<td>OSC</td>
<td>操作系统命令</td>
</tr>
<tr>
<td>158</td>
<td>9E</td>
<td>PM</td>
<td>秘密消息</td>
</tr>
<tr>
<td>159</td>
<td>9F</td>
<td>APC</td>
<td>应用程序</td>
</tr>
<tr>
<td><strong>其他字符</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>160</td>
<td>A0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>161</td>
<td>A1</td>
<td>¡</td>
<td>反向感叹号</td>
</tr>
<tr>
<td>162</td>
<td>A2</td>
<td>¢</td>
<td>分币符</td>
</tr>
<tr>
<td>163</td>
<td>A3</td>
<td>£</td>
<td>英磅符</td>
</tr>
<tr>
<td>164</td>
<td>A4</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>165</td>
<td>A5</td>
<td>¥</td>
<td>人民币符</td>
</tr>
<tr>
<td>166</td>
<td>A6</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>167</td>
<td>A7</td>
<td>§</td>
<td>章节符</td>
</tr>
<tr>
<td>168</td>
<td>A8</td>
<td>¤</td>
<td>通用货币符号 2</td>
</tr>
<tr>
<td>169</td>
<td>A9</td>
<td>©</td>
<td>版权符号</td>
</tr>
<tr>
<td>170</td>
<td>AA</td>
<td>ª</td>
<td>阴性顺序指示符</td>
</tr>
<tr>
<td>171</td>
<td>AB</td>
<td>«</td>
<td>左角引号</td>
</tr>
<tr>
<td>172</td>
<td>AC</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>173</td>
<td>AD</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>174</td>
<td>AE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>175</td>
<td>AF</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>176</td>
<td>B0</td>
<td>°</td>
<td>温度符</td>
</tr>
<tr>
<td>177</td>
<td>B1</td>
<td>±</td>
<td>加/减号</td>
</tr>
<tr>
<td>178</td>
<td>B2</td>
<td>²</td>
<td>上标 2</td>
</tr>
<tr>
<td>179</td>
<td>B3</td>
<td>³</td>
<td>上标 3</td>
</tr>
<tr>
<td>180</td>
<td>B4</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>181</td>
<td>B5</td>
<td>µ</td>
<td>微符</td>
</tr>
<tr>
<td>182</td>
<td>B6</td>
<td>¶</td>
<td>段落符，pilcrow</td>
</tr>
<tr>
<td>183</td>
<td>B7</td>
<td>·</td>
<td>中点</td>
</tr>
<tr>
<td>184</td>
<td>B8</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>185</td>
<td>B9</td>
<td>¹</td>
<td>上标 1</td>
</tr>
<tr>
<td>186</td>
<td>BA</td>
<td>º</td>
<td>阳性顺序指示符</td>
</tr>
<tr>
<td>187</td>
<td>BB</td>
<td>»</td>
<td>右角引号</td>
</tr>
<tr>
<td>188</td>
<td>BC</td>
<td>¼</td>
<td>分数四分之一</td>
</tr>
<tr>
<td>189</td>
<td>BD</td>
<td>½</td>
<td>分数二分之一</td>
</tr>
<tr>
<td>190</td>
<td>BE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>191</td>
<td>BF</td>
<td>¿</td>
<td>反向问号</td>
</tr>
<tr>
<td>192</td>
<td>C0</td>
<td>À</td>
<td>带重音符的大写字母 A</td>
</tr>
<tr>
<td>193</td>
<td>C1</td>
<td>Á</td>
<td>带尖锐重音的大写字母 A</td>
</tr>
<tr>
<td>194</td>
<td>C2</td>
<td>Â</td>
<td>带音调符号的大写字母 A</td>
</tr>
<tr>
<td>195</td>
<td>C3</td>
<td>Ã</td>
<td>带代字号的大写字母 A</td>
</tr>
<tr>
<td>196</td>
<td>C4</td>
<td>Ä</td>
<td>带元音变音 (分音符号) 的大写字母 A</td>
</tr>
<tr>
<td>197</td>
<td>C5</td>
<td>Å</td>
<td>带铃声的大写字母 A</td>
</tr>
<tr>
<td>198</td>
<td>C6</td>
<td>Æ</td>
<td>大写字母 AE 双重元音</td>
</tr>
<tr>
<td>199</td>
<td>C7</td>
<td>Ç</td>
<td>带变音符号的大写字母 C</td>
</tr>
<tr>
<td>200</td>
<td>C8</td>
<td>È</td>
<td>带重音符的大写字母 E</td>
</tr>
<tr>
<td>201</td>
<td>C9</td>
<td>É</td>
<td>带尖锐重音的大写字母 E</td>
</tr>
<tr>
<td>202</td>
<td>CA</td>
<td>Ê</td>
<td>带音调符号的大写字母 E</td>
</tr>
<tr>
<td>203</td>
<td>CB</td>
<td>Ë</td>
<td>带元音变音 (分音符号) 的大写字母 E</td>
</tr>
<tr>
<td>204</td>
<td>CC</td>
<td>Ì</td>
<td>带重音符的大写字母 I</td>
</tr>
<tr>
<td>205</td>
<td>CD</td>
<td>Í</td>
<td>带尖锐重音的大写字母 I</td>
</tr>
<tr>
<td>206</td>
<td>CE</td>
<td>Î</td>
<td>带音调符号的大写字母 I</td>
</tr>
<tr>
<td>207</td>
<td>CF</td>
<td>Ï</td>
<td>带元音变音 (分音符号) 的大写字母 I</td>
</tr>
<tr>
<td>208</td>
<td>D0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>209</td>
<td>D1</td>
<td>Ñ</td>
<td>带代字号的大写字母 N</td>
</tr>
<tr>
<td>210</td>
<td>D2</td>
<td>Ò</td>
<td>带重音符的大写字母 O</td>
</tr>
<tr>
<td>211</td>
<td>D3</td>
<td>Ó</td>
<td>带尖锐重音的大写字母 O</td>
</tr>
<tr>
<td>212</td>
<td>D4</td>
<td>Ô</td>
<td>带音调符号的大写字母 O</td>
</tr>
<tr>
<td>213</td>
<td>D5</td>
<td>Õ</td>
<td>带代字号的大写字母 O</td>
</tr>
<tr>
<td>214</td>
<td>D6</td>
<td>Ö</td>
<td>带元音变音 (分音符号) 的大写字母 O</td>
</tr>
<tr>
<td>215</td>
<td>D7</td>
<td>OE</td>
<td>大写字母 OE 连字 2</td>
</tr>
<tr>
<td>216</td>
<td>D8</td>
<td>Ø</td>
<td>带斜杠的大写字母 O</td>
</tr>
<tr>
<td>217</td>
<td>D9</td>
<td>Ù</td>
<td>带重音符的大写字母 U</td>
</tr>
<tr>
<td>218</td>
<td>DA</td>
<td>Ú</td>
<td>带尖锐重音的大写字母 U</td>
</tr>
<tr>
<td>219</td>
<td>DB</td>
<td>Û</td>
<td>带音调符号的大写字母 U</td>
</tr>
<tr>
<td>220</td>
<td>DC</td>
<td>Ü</td>
<td>带元音变音 (分音符号) 的大写字母 U</td>
</tr>
<tr>
<td>221</td>
<td>DD</td>
<td>Y</td>
<td>带元音变音 (分音符号) 的大写字母 Y</td>
</tr>
<tr>
<td>222</td>
<td>DE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>223</td>
<td>DF</td>
<td>ß</td>
<td>德语高调小写字母 s</td>
</tr>
<tr>
<td>224</td>
<td>E0</td>
<td>à</td>
<td>带重音符的小写字母 a</td>
</tr>
<tr>
<td>225</td>
<td>E1</td>
<td>á</td>
<td>带尖锐重音的小写字母 a</td>
</tr>
<tr>
<td>226</td>
<td>E2</td>
<td>â</td>
<td>带音调符号的小写字母 a</td>
</tr>
<tr>
<td>227</td>
<td>E3</td>
<td>ã</td>
<td>带代字号的小写字母 a</td>
</tr>
<tr>
<td>228</td>
<td>E4</td>
<td>ä</td>
<td>带元音变音 (分音符号) 的小写字母 a</td>
</tr>
<tr>
<td>229</td>
<td>E5</td>
<td>å</td>
<td>带铃声的小写字母 a</td>
</tr>
<tr>
<td>230</td>
<td>E6</td>
<td>æ</td>
<td>小写字母 ae 双重元音</td>
</tr>
<tr>
<td>231</td>
<td>E7</td>
<td>ç</td>
<td>带变音符号的小写字母 c</td>
</tr>
<tr>
<td>232</td>
<td>E8</td>
<td>è</td>
<td>带重音符的小写字母 e</td>
</tr>
<tr>
<td>233</td>
<td>E9</td>
<td>é</td>
<td>带尖锐重音的小写字母 e</td>
</tr>
<tr>
<td>234</td>
<td>EA</td>
<td>ê</td>
<td>带音调符号的小写字母 e</td>
</tr>
<tr>
<td>235</td>
<td>EB</td>
<td>ë</td>
<td>带元音变音 (分音符号) 的小写字母 e</td>
</tr>
<tr>
<td>236</td>
<td>EC</td>
<td>ì</td>
<td>带重音符的小写字母 i</td>
</tr>
<tr>
<td>237</td>
<td>ED</td>
<td>í</td>
<td>带尖锐重音的小写字母 i</td>
</tr>
<tr>
<td>238</td>
<td>EE</td>
<td>î</td>
<td>带音调符号的小写字母 i</td>
</tr>
<tr>
<td>239</td>
<td>EF</td>
<td>ï</td>
<td>带元音变音 (分音符号) 的小写字母 i</td>
</tr>
<tr>
<td>240</td>
<td>F0</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>241</td>
<td>F1</td>
<td>ñ</td>
<td>带代字号的小写字母 n</td>
</tr>
<tr>
<td>242</td>
<td>F2</td>
<td>ò</td>
<td>带重音符的小写字母 o</td>
</tr>
<tr>
<td>243</td>
<td>F3</td>
<td>ó</td>
<td>带尖锐重音的小写字母 o</td>
</tr>
<tr>
<td>244</td>
<td>F4</td>
<td>ô</td>
<td>带音调符号的小写字母 o</td>
</tr>
<tr>
<td>245</td>
<td>F5</td>
<td>õ</td>
<td>带代字号的小写字母 o</td>
</tr>
<tr>
<td>246</td>
<td>F6</td>
<td>ö</td>
<td>带元音变音 (分音符号) 的小写字母 o</td>
</tr>
<tr>
<td>247</td>
<td>F7</td>
<td>oe</td>
<td>小写字母 oe 连字 2</td>
</tr>
<tr>
<td>248</td>
<td>F8</td>
<td>ø</td>
<td>带斜杠的小写字母 o</td>
</tr>
<tr>
<td>249</td>
<td>F9</td>
<td>ù</td>
<td>带重音符的小写字母 u</td>
</tr>
<tr>
<td>250</td>
<td>FA</td>
<td>ú</td>
<td>带尖锐重音的小写字母 u</td>
</tr>
<tr>
<td>251</td>
<td>FB</td>
<td>û</td>
<td>带音调符号的小写字母 u</td>
</tr>
<tr>
<td>252</td>
<td>FC</td>
<td>ü</td>
<td>带元音变音 (分音符号) 的小写字母 u</td>
</tr>
<tr>
<td>253</td>
<td>FD</td>
<td>ÿ</td>
<td>带元音变音 (分音符号) 的小写字母 y 2</td>
</tr>
<tr>
<td>254</td>
<td>FE</td>
<td></td>
<td>[保留] 2</td>
</tr>
<tr>
<td>255</td>
<td>FF</td>
<td></td>
<td>[保留] 2</td>
</tr>
</tbody></table>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令。</li>
</ul>
<p>4.转义字符</p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII码值（十进制）</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td>\n</td>
<td>换行(LF) ，将当前位置移到下一行开头</td>
<td>010</td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表(HT) （跳到下一个TAB位置）</td>
<td>009</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>\</td>
<td>代表一个反斜线字符”&quot;</td>
<td>092</td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<h4 id="5-浮点型（float-double）"><a href="#5-浮点型（float-double）" class="headerlink" title="5.浮点型（float,double）"></a>5.浮点型（float,double）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//传统方式赋值</span>
	<span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span> <span class="token comment">//或3.14F</span>
	<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %lf\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//科学法赋值</span>
	a <span class="token operator">=</span> <span class="token number">3.2e3f</span><span class="token punctuation">;</span> <span class="token comment">//3.2*1000 = 3200，e可以写E</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a1 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">100e-3f</span><span class="token punctuation">;</span> <span class="token comment">//100*0.001 = 0.1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a2 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3.1415926f</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a3 = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果为3.141593</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-进制"><a href="#6-进制" class="headerlink" title="6.进制"></a>6.进制</h4><ul>
<li><p>进制也就是进位制，是人们规定的一种进位方法。 对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制</strong></th>
<th><strong>二进制</strong></th>
<th><strong>八进制</strong></th>
<th><strong>十六进制</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>10</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>11</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>100</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td>101</td>
<td>5</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>110</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td>7</td>
<td>111</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>1000</td>
<td>10</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>1001</td>
<td>11</td>
<td>9</td>
</tr>
<tr>
<td>10</td>
<td>1010</td>
<td>12</td>
<td>A</td>
</tr>
<tr>
<td>11</td>
<td>1011</td>
<td>13</td>
<td>B</td>
</tr>
<tr>
<td>12</td>
<td>1100</td>
<td>14</td>
<td>C</td>
</tr>
<tr>
<td>13</td>
<td>1101</td>
<td>15</td>
<td>D</td>
</tr>
<tr>
<td>14</td>
<td>1110</td>
<td>16</td>
<td>E</td>
</tr>
<tr>
<td>15</td>
<td>1111</td>
<td>17</td>
<td>F</td>
</tr>
<tr>
<td>16</td>
<td>10000</td>
<td>20</td>
<td>10</td>
</tr>
</tbody></table>
</li>
<li><p>二进制是计算技术中广泛采用的一种数制。二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p>
</li>
<li><p>数据在计算机中主要是以补码的形式存储的。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>术语</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bit(比特)</td>
<td>一个二进制代表一位，一个位只能表示0或1两种状态。数据传输是习惯以“位”（bit）为单位。</td>
</tr>
<tr>
<td>Byte(字节)</td>
<td>一个字节为8个二进制，称为8位，计算机中存储的最小单位是字节。数据存储是习惯以“字节”（Byte）为单位。</td>
</tr>
<tr>
<td>WORD(双字节)</td>
<td>2个字节，16位</td>
</tr>
<tr>
<td>DWORD</td>
<td>两个WORD，4个字节，32位</td>
</tr>
<tr>
<td>1b</td>
<td>1bit，1位</td>
</tr>
<tr>
<td>1B</td>
<td>1Byte,1字节，8位</td>
</tr>
<tr>
<td>1k，1K</td>
<td>1024</td>
</tr>
<tr>
<td>1M(1兆)</td>
<td>1024k, 1024*1024</td>
</tr>
<tr>
<td>1G</td>
<td>1024M</td>
</tr>
<tr>
<td>1T</td>
<td>1024G</td>
</tr>
<tr>
<td>1Kb(千位)</td>
<td>1024bit,1024位</td>
</tr>
<tr>
<td>1KB(千字节)</td>
<td>1024Byte，1024字节</td>
</tr>
<tr>
<td>1Mb(兆位)</td>
<td>1024Kb = 1024 * 1024bit</td>
</tr>
<tr>
<td>1MB(兆字节)</td>
<td>1024KB = 1024 * 1024Byte</td>
</tr>
</tbody></table>
</li>
<li><p>八进制，Octal，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1。一些编程语言中常常以数字0开始表明该数字是八进制。</p>
</li>
<li><p>八进制的数和二进制数可以按位对应（八进制一位对应二进制三位），因此常应用在计算机语言中。</p>
</li>
<li><p>十六进制（英文名称：Hexadecimal），同我们日常生活中的表示法不一样，它由0-9，A-F组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9，A-F对应10-15。</p>
</li>
<li><p>十六进制的数和二进制数可以按位对应（十六进制一位对应二进制四位），因此常应用在计算机语言中。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>十进制</th>
<th>以正常数字1-9开头，如123</th>
</tr>
</thead>
<tbody><tr>
<td>八进制</td>
<td>以数字0开头，如0123</td>
</tr>
<tr>
<td>十六进制</td>
<td>以0x开头，如0x123</td>
</tr>
<tr>
<td>二进制</td>
<td>C语言不能直接书写二进制数</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>		<span class="token comment">//十进制方式赋值</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0123</span><span class="token punctuation">;</span>		<span class="token comment">//八进制方式赋值， 以数字0开头</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xABC</span><span class="token punctuation">;</span>	<span class="token comment">//十六进制方式赋值</span>

	<span class="token comment">//如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十进制：%d\n"</span><span class="token punctuation">,</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"八进制：%o\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//%o,为字母o,不是数字</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十六进制：%x\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-计算机内存数值存储方式"><a href="#7-计算机内存数值存储方式" class="headerlink" title="7. 计算机内存数值存储方式"></a>7. 计算机内存数值存储方式</h4><ol>
<li><p>原码</p>
<ul>
<li><p>一个数的原码(原始的二进制码)有如下特点：</p>
<ul>
<li><p>最高位做为符号位，0表示正,为1表示负</p>
</li>
<li><p>其它数值部分就是数值本身绝对值的二进制数</p>
</li>
<li><p>负数的原码是在其绝对值的基础上，最高位变为1</p>
</li>
</ul>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
</li>
<li><p>原码表示法简单易懂，与带符号数本身转换方便，只要符号还原即可，但当两个正数相减或不同符号数相加时，必须比较两个数哪个绝对值大，才能决定谁减谁，才能确定结果是正还是负，所以原码不便于加减运算。</p>
</li>
</ul>
</li>
<li><p>反码</p>
<ul>
<li><p>对于正数，反码与原码相同</p>
</li>
<li><p>对于负数，符号位不变，其它部分取反(1变0,0变1)</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>反码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0000</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
</li>
<li><p>反码运算也不方便，通常用来作为求补码的中间过渡。</p>
</li>
</ul>
</li>
<li><p>补码</p>
<ul>
<li><strong>在计算机系统中，数值一律用补码来存储。</strong></li>
<li>补码特点：<ul>
<li>对于正数，原码、反码、补码相同</li>
<li>对于负数，其补码为它的反码加1</li>
<li>补码符号位不动，其他位求反，最后整个数加1，得到原码</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>  a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//结果为 fffffff1</span>
	<span class="token comment">//fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001</span>
	<span class="token comment">//符号位不变，其它取反：1000 0000 0000 0000 0000 0000 0000 1110</span>
	<span class="token comment">//上面加1：1000 0000 0000 0000 0000 0000 0000 1111  最高位1代表负数，就是-15</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li><p>补码的意义</p>
</li>
<li><p>用8位二进制数分别表示+0和-0</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>反码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>补码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>10000 0000由于只用8位描述，最高位1丢弃，变为0000 0000</td>
</tr>
</tbody></table>
<ol start="2">
<li><strong>在计算机系统中，数值一律用补码来存储</strong>，主要原因是：<ul>
<li>统一了零的编码</li>
<li>将符号位和其它位统一处理</li>
<li>将减法运算转变为加法运算</li>
<li>两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃</li>
</ul>
</li>
</ol>
<h4 id="8-数据值溢出"><a href="#8-数据值溢出" class="headerlink" title="8.数据值溢出"></a>8.数据值溢出</h4><ul>
<li><p>有符号位最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位的溢出会导致最高位丢失。</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>取值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>1字节</td>
<td>-128到 127(-27 ~ 27-1)</td>
</tr>
<tr>
<td>unsigned char</td>
<td>1字节</td>
<td>0 到 255(0 ~ 28-1)</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>

	<span class="token comment">//符号位溢出会导致数的正负发生改变</span>
	ch <span class="token operator">=</span> <span class="token number">0x7f</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//127+2</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//	0111 1111</span>
	<span class="token comment">//+2后 1000 0001，这是负数补码，其原码为 1111 1111，结果为-127</span>

	<span class="token comment">//最高位的溢出会导致最高位丢失</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ch2<span class="token punctuation">;</span>
	ch2 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//255+1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//	  1111 1111</span>
	<span class="token comment">//+1后 10000 0000， char只有8位最高位的溢出，结果为0000 0000，十进制为0</span>

	ch2 <span class="token operator">=</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//255+1</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//	  1111 1111</span>
	<span class="token comment">//+1后 10000 0001， char只有8位最高位的溢出，结果为0000 0001，十进制为1</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="9-类型限定符"><a href="#9-类型限定符" class="headerlink" title="9.类型限定符"></a>9.类型限定符</h4><ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>限定符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>extern</td>
<td>声明一个变量，extern声明的变量没有建立存储空间。extern int a;//变量在定义的时候创建存储空间</td>
</tr>
<tr>
<td>const</td>
<td>定义一个常量，常量的值不能修改。const int a = 10;</td>
</tr>
<tr>
<td>Volatile</td>
<td>防止编译器优化代码</td>
</tr>
<tr>
<td>register</td>
<td>定义寄存器变量，提高效率。register是建议型的指令，而不是命令型的指令，如果CPU有空闲寄存器，那么register就生效，如果没有空闲寄存器，那么register无效。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="10-字符串格式化输出和输入"><a href="#10-字符串格式化输出和输入" class="headerlink" title="10.字符串格式化输出和输入"></a>10.字符串格式化输出和输入</h4><ol>
<li> 字符串常量</li>
</ol>
<ul>
<li>字符串是<strong>内存中一段连续的char空间</strong>，<strong>以’\0’(数字0)结尾</strong>。</li>
<li>字符串常量是由双引号括起来的字符序列，如“china”、“C program”，“$12.5”等都是合法的字符串常量。</li>
<li>每个字符串的结尾，编译器会自动的添加一个结束标志位’\0’，即 “a” 包含两个字符’a’和’\0’。</li>
</ul>
<ol start="2">
<li><p>printf函数和putchar函数</p>
<ul>
<li><p>printf格式字符：</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>对应数据类型</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>int</td>
<td>接受整数值并将它表示为有符号的十进制整数</td>
</tr>
<tr>
<td>%hd</td>
<td>short int</td>
<td>短整数</td>
</tr>
<tr>
<td>%hu</td>
<td>unsigned short</td>
<td>无符号短整数</td>
</tr>
<tr>
<td>%o</td>
<td>unsigned int</td>
<td>无符号8进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>unsigned int</td>
<td>无符号10进制整数</td>
</tr>
<tr>
<td>%x,%X</td>
<td>unsigned int</td>
<td>无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF</td>
</tr>
<tr>
<td>%f</td>
<td>float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>%lf</td>
<td>double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>%e,%E</td>
<td>double</td>
<td>科学计数法表示的数，此处”e”的大小写代表在输出时用的”e”的大小写</td>
</tr>
<tr>
<td>%c</td>
<td>char</td>
<td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td>
</tr>
<tr>
<td>%s</td>
<td>char *</td>
<td>字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td>
</tr>
<tr>
<td>%p</td>
<td>void *</td>
<td>以16进制形式输出指针</td>
</tr>
<tr>
<td>%%</td>
<td>%</td>
<td>输出一个百分号</td>
</tr>
</tbody></table>
</li>
<li><p>printf附加格式：</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>字符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>l(字母l)</td>
<td>附加在d,u,x,o前面，表示长整数</td>
</tr>
<tr>
<td>-</td>
<td>左对齐</td>
</tr>
<tr>
<td>m(代表一个整数)</td>
<td>数据最小宽度</td>
</tr>
<tr>
<td>0(数字0)</td>
<td>将输出的前面补上0直到占满指定列宽为止不可以搭配使用-</td>
</tr>
<tr>
<td>m.n(代表一个整数)</td>
<td>m指域宽，即对应的输出项在输出设备上所占的字符数。n指精度，用于说明输出的实型数的小数位数。对数值型的来说，未指定n时，隐含的精度为n=6位。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式化输出一个字符串</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出变量a在内存中的地址编号</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%d\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//putchar只有一个参数，就是要输出的char</span>
	<span class="token keyword">long</span> a2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld, %lx, %lo\n"</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">long</span> <span class="token keyword">long</span> a3 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld, %llx, %llo\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> abc <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%6d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%-6d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%06d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abc = '%-06d'\n"</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d = \' %-10.3lf \'\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>scanf函数与getchar函数<ul>
<li>getchar是从标准输入设备读取一个char。</li>
<li>scanf通过%转义的方式可以得到用户通过标准输入设备输入的数据。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> ch1<span class="token punctuation">;</span>
	<span class="token keyword">char</span> ch2<span class="token punctuation">;</span>
	<span class="token keyword">char</span> ch3<span class="token punctuation">;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch1的字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ch1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch1 = %c\n"</span><span class="token punctuation">,</span> ch1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//测试此处getchar()的作用</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch2的字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	ch2 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\'ch2 = %ctest\'\n"</span><span class="token punctuation">,</span> ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//测试此处getchar()的作用</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入ch3的字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里第二个参数一定是变量的地址，而不是变量名</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch3 = %c\n"</span><span class="token punctuation">,</span> ch3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入a的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入b的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-运算符与表达式"><a href="#3-运算符与表达式" class="headerlink" title="3.运算符与表达式"></a>3.运算符与表达式</h3><h4 id="1-常用运算符分类"><a href="#1-常用运算符分类" class="headerlink" title="1.常用运算符分类"></a>1.常用运算符分类</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
<tr>
<td>位运算符</td>
<td>用于处理数据的位运算</td>
</tr>
<tr>
<td>sizeof运算符</td>
<td>用于求字节数长度</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前自增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后自增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前自减</td>
<td>a=2; b=–a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后自减</td>
<td>a=2; b=a–;</td>
<td>a=1; b=2;</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a>3.赋值运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4.比较运算符"></a>4.比较运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h4><ul>
<li><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="6-运算符优先级"><a href="#6-运算符优先级" class="headerlink" title="6.运算符优先级"></a>6.运算符优先级</h4><ul>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>优先级</strong></th>
<th><strong>运算符</strong></th>
<th><strong>名称或含义</strong></th>
<th><strong>使用形式</strong></th>
<th><strong>结合方向</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td><strong>[]</strong></td>
<td>数组下标</td>
<td>数组名[常量表达式]</td>
<td>左到右</td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>()</strong></td>
<td>圆括号</td>
<td>(表达式）/函数名(形参表)</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>.</strong></td>
<td>成员选择（对象）</td>
<td>对象.成员名</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>-&gt;</strong></td>
<td>成员选择（指针）</td>
<td>对象指针-&gt;成员名</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>2</strong></td>
<td><strong>-</strong></td>
<td>负号运算符</td>
<td>-表达式</td>
<td>右到左</td>
<td>单目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>~</strong></td>
<td>按位取反运算符</td>
<td>~表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>++</strong></td>
<td>自增运算符</td>
<td>++变量名/变量名++</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>–</strong></td>
<td>自减运算符</td>
<td>–变量名/变量名–</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>*****</td>
<td>取值运算符</td>
<td>*指针变量</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>&amp;</strong></td>
<td>取地址运算符</td>
<td>&amp;变量名</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>!</strong></td>
<td>逻辑非运算符</td>
<td>!表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>(类型)</strong></td>
<td>强制类型转换</td>
<td>(数据类型)表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>sizeof</strong></td>
<td>长度运算符</td>
<td>sizeof(表达式)</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>3</strong></td>
<td><strong>/</strong></td>
<td>除</td>
<td>表达式/表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td>*****</td>
<td>乘</td>
<td>表达式*表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>%</strong></td>
<td>余数（取模）</td>
<td>整型表达式%整型表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>4</strong></td>
<td><strong>+</strong></td>
<td>加</td>
<td>表达式+表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>-</strong></td>
<td>减</td>
<td>表达式-表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td><strong>&lt;&lt;</strong></td>
<td>左移</td>
<td>变量&lt;&lt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>&gt;&gt;</strong></td>
<td>右移</td>
<td>变量&gt;&gt;表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>6</strong></td>
<td><strong>&gt;</strong></td>
<td>大于</td>
<td>表达式&gt;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>&gt;=</strong></td>
<td>大于等于</td>
<td>表达式&gt;=表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>&lt;</strong></td>
<td>小于</td>
<td>表达式&lt;表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td><strong>&lt;=</strong></td>
<td>小于等于</td>
<td>表达式&lt;=表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>7</strong></td>
<td><strong>==</strong></td>
<td>等于</td>
<td>表达式==表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td><strong>!****=</strong></td>
<td>不等于</td>
<td>表达式!= 表达式</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>8</strong></td>
<td><strong>&amp;</strong></td>
<td>按位与</td>
<td>表达式&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>9</strong></td>
<td><strong>^</strong></td>
<td>按位异或</td>
<td>表达式^表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>10</strong></td>
<td><strong>|</strong></td>
<td>按位或</td>
<td>表达式|表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>11</strong></td>
<td><strong>&amp;&amp;</strong></td>
<td>逻辑与</td>
<td>表达式&amp;&amp;表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td><strong>||</strong></td>
<td>逻辑或</td>
<td>表达式||表达式</td>
<td>左到右</td>
<td>双目运算符</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>13</strong></td>
<td><strong>?:</strong></td>
<td>条件运算符</td>
<td>表达式1?表达式2: 表达式3</td>
<td>右到左</td>
<td>三目运算符</td>
</tr>
<tr>
<td><strong>14</strong></td>
<td><strong>=</strong></td>
<td>赋值运算符</td>
<td>变量=表达式</td>
<td>右到左</td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>/=</strong></td>
<td>除后赋值</td>
<td>变量/=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td>***=**</td>
<td>乘后赋值</td>
<td>变量*=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>%=</strong></td>
<td>取模后赋值</td>
<td>变量%=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>+=</strong></td>
<td>加后赋值</td>
<td>变量+=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>-=</strong></td>
<td>减后赋值</td>
<td>变量-=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>&lt;&lt;=</strong></td>
<td>左移后赋值</td>
<td>变量&lt;&lt;=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>&gt;&gt;=</strong></td>
<td>右移后赋值</td>
<td>变量&gt;&gt;=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>&amp;=</strong></td>
<td>按位与后赋值</td>
<td>变量&amp;=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>^=</strong></td>
<td>按位异或后赋值</td>
<td>变量^=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td><strong>|=</strong></td>
<td>按位或后赋值</td>
<td>变量|=表达式</td>
<td></td>
<td>–</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>15</strong></td>
<td><strong>，</strong></td>
<td>逗号运算符</td>
<td>表达式,表达式,…</td>
<td>左到右</td>
<td>–</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7.类型转换"></a>7.类型转换</h4><ul>
<li><p>转换的方法有两种：</p>
<ul>
<li>自动转换(隐式转换)：遵循一定的规则,由编译系统自动完成。</li>
<li>强制类型转换：把表达式的运算结果强制转换成所需的数据类型。</li>
</ul>
</li>
<li><p>类型转换的原则：占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低。</p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wpsD743.tmp.jpg" alt="img"></p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s1=%d\n"</span><span class="token punctuation">,</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s2=%lf\n"</span><span class="token punctuation">,</span> num <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	x <span class="token operator">=</span> <span class="token number">3.6f</span><span class="token punctuation">;</span>

	i <span class="token operator">=</span> x<span class="token punctuation">;</span>			<span class="token comment">//x为实型, i为整型，直接赋值会有警告</span>
	i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">;</span>		<span class="token comment">//使用强制类型转换</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x=%f, i=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4.程序流程结构"></a>4.程序流程结构</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ol>
<li>C语言支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构。<ul>
<li>顺序结构：程序按顺序执行，不发生跳转。</li>
<li>选择结构：依据是否满足条件，有选择的执行相应功能。</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码。</li>
</ul>
</li>
</ol>
<h4 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h4><ol>
<li>if语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.if…else 语句</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li> if…else if…else语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"个位\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"十位\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"百位\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"很大\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.三目运算符</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		c <span class="token operator">=</span> a<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		c <span class="token operator">=</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1 = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	c <span class="token operator">=</span> <span class="token punctuation">(</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c2 = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.switch语句</p>
<pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;

int main()
&#123;
	char c;
	c &#x3D; getchar();

	switch (c) &#x2F;&#x2F;参数只能是整型变量
	&#123;
	case &#39;1&#39;:
		printf(&quot;OK\n&quot;);
		break;&#x2F;&#x2F;switch遇到break就中断了
	case &#39;2&#39;:
		printf(&quot;not OK\n&quot;);
		break;
	default:&#x2F;&#x2F;如果上面的条件都不满足，那么执行default
		printf(&quot;are u ok?\n&quot;);
	&#125;
	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><ol>
<li>while语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>do…while语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">do</span>
	<span class="token punctuation">&#123;</span>
		a<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>for语句</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.嵌套循环</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				num<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-跳转语句break、continue、goto"><a href="#4-跳转语句break、continue、goto" class="headerlink" title="4.跳转语句break、continue、goto"></a>4.跳转语句break、continue、goto</h4><ol>
<li>break语句<ul>
<li>在switch条件语句和循环语句中都可以使用break语句：<ul>
<li>当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。</li>
<li>当它出现在循环语句中，作用是跳出当前内循环语句，执行后面的代码。</li>
<li>当它出现在嵌套循环语句中，跳出最近的内循环语句，执行后面的代码。</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出while循环</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出for (n = 0; n &lt; 10; n++)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//跳出for (m = 0; m &lt; 10; m++)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>continue语句<ul>
<li>在循环语句中，如果希望立即终止本次循环，并执行下一次循环，此时就需要使用continue语句。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//定义变量sum</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">//如果i是一个偶数，执行if语句中的代码</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment">//结束本次循环</span>
		<span class="token punctuation">&#125;</span>
		sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>          <span class="token comment">//实现sum和i的累加</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.goto语句(无条件跳转，尽量少用)</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">goto</span> End<span class="token punctuation">;</span> <span class="token comment">//无条件跳转到End的标识</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aaaaaaaaa\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

End<span class="token operator">:</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bbbbbbbb\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-数组和字符串"><a href="#5-数组和字符串" class="headerlink" title="5.数组和字符串"></a>5.数组和字符串</h3><ol>
<li><p>概述</p>
<ul>
<li><p>数组就是在内存中连续的相同类型的变量空间。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。</p>
</li>
<li><p>数组属于构造数据类型：</p>
<ul>
<li><p>一个数组可以分解为多个数组元素：这些数组元素可以是基本数据类型或构造类型。</p>
</li>
<li><p>按数组元素类型的不同，数组可分为：数值数组、字符数组、指针数组、结构数组等类别。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">struct</span> <span class="token class-name">Stu</span> boy<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1.一维数组"></a>1.一维数组</h4><ol>
<li><p>一维数组的定义和使用</p>
<ul>
<li><p>数组名字符合标识符的书写规定(数字、英文字母、下划线)</p>
</li>
<li><p>数组名不能与其它变量名相同，同一作用域内是唯一的</p>
</li>
<li><p>方括号[]中常量表达式表示数组元素的个数</p>
</li>
<li><p>定义数组时[]内最好是常量，使用数组时[]内即可是常量，也可以是变量</p>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义了一个数组，名字叫a，有10个成员，每个成员都是int类型</span>
	<span class="token comment">//a[0]…… a[9]，没有a[10]</span>
	<span class="token comment">//没有a这个变量，a是数组的名字，但不是变量名，它是常量</span>
	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//……</span>
	a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//给数组赋值</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//遍历数组，并输出每个成员的值</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.一维数组的初始化</p>
<ul>
<li>在定义数组的同时进行赋值，称为初始化。全局数组若不初始化，编译器将其初始化为零。局部数组若不初始化，内容为随机值。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化前三个成员，后面所有元素都设置为0</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//所有的成员都设置为0</span>
	
<span class="token comment">//[]中不定义元素个数，定义时必须初始化</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义了一个数组，有5个成员</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.数组名</p>
<ul>
<li>数组名是一个地址的常量，代表数组中首元素的地址。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a[0] = %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组占用内存的大小，10个int类型，10 * 4  = 40</span>
	<span class="token keyword">int</span> n0 <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组第0个元素占用内存大小，第0个元素为int，4</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.强化训练</p>
<ol>
<li>一维数组的最值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> max <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			max <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组中最大值为：%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.一维数组的逆置</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
		j<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.冒泡法排序</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个数组，同时初始化所有成员变量</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>

	<span class="token comment">//1、流程</span>
	<span class="token comment">//2、试数</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//内循环的目的是比较相邻的元素，把大的放到后面</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token operator">></span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2.二维数组"></a>2.二维数组</h4><ul>
<li>二维数组在概念上是二维的：其下标在两个方向上变化，对其访问一般需要两个下标。</li>
<li>在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，也就是说内存中只有一维数组，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义了一个二维数组，名字叫a</span>
	<span class="token comment">//由3个一维数组组成，这个一维数组是int [4]</span>
	<span class="token comment">//这3个一维数组的数组名分别为a[0],a[1],a[2]</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//……</span>
	a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

	<span class="token comment">//给数组每个元素赋值</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//遍历数组，并输出每个成员的值</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>初始化</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//分段赋值 	int a[3][4] = &#123;&#123; 1, 2, 3, 4 &#125;,&#123; 5, 6, 7, 8, &#125;,&#123; 9, 10, 11, 12 &#125;&#125;;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
	<span class="token punctuation">&#123;</span> 
		<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//连续赋值</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//可以只给部分元素赋初值，未初始化则为0</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//所有的成员都设置为0</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//[]中不定义元素个数，定义时必须初始化</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>数组名<ul>
<li>数组名是一个地址的常量，代表数组中首元素的地址。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义了一个二维数组，名字叫a</span>
	<span class="token comment">//二维数组是本质上还是一维数组，此一维数组有3个元素</span>
<span class="token comment">//每个元素又是一个一维数组int[4]</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//数组名为数组首元素地址，二维数组的第0个元素为一维数组</span>
	<span class="token comment">//第0个一维数组的数组名为a[0]</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a[0] = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//测二维数组所占内存空间，有3个一维数组，每个一维数组的空间为4*4</span>
	<span class="token comment">//sizeof(a) = 3 * 4 * 4 = 48</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//测第0个元素所占内存空间，a[0]为第0个一维数组int[4]的数组名，4*4=16</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a[0]) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//测第0行0列元素所占内存空间，第0行0列元素为一个int类型，4字节</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a[0][0]) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//求二维数组行数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 求二维数组列数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"j = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//求二维数组行*列总数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-字符数组与字符串"><a href="#3-字符数组与字符串" class="headerlink" title="3.字符数组与字符串"></a>3.字符数组与字符串</h4><ol>
<li>字符数组与字符串区别<ul>
<li>C语言中没有字符串这种数据类型，可以通过char的数组来替代；</li>
<li>字符串一定是一个char的数组，但char的数组未必是字符串；</li>
<li>数字0(和字符‘\0’等价)结尾的char数组就是一个字符串，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以字符串是一种特殊的char的数组。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> c1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'g'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//普通字符数组</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1 = %s\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//乱码，因为没有’\0’结束符</span>

	<span class="token comment">//以‘\0’(‘\0’就是数字0)结尾的字符数组是字符串</span>
	<span class="token keyword">char</span> c2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c2 = %s\n"</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//字符串处理以‘\0’(数字0)作为结束符，后面的'h', 'l', 'l', 'e', 'o'不会输出</span>
	<span class="token keyword">char</span> c3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c3 = %s\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>字符串的初始化</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">// C语言没有字符串类型，通过字符数组模拟</span>
<span class="token comment">// C语言字符串，以字符‘\0’, 数字0</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//不指定长度, 没有0结束符，有多少个元素就有多长</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//乱码</span>

	<span class="token comment">//指定长度，后面没有赋值的元素，自动补0</span>
	<span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>“hello”<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2 = %s\n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//所有元素赋值为0</span>
	<span class="token keyword">char</span> buf3<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//char buf4[2] = &#123; '1', '2', '3' &#125;;//数组越界</span>

	<span class="token keyword">char</span> buf5<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'7'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf5 = %s\n"</span><span class="token punctuation">,</span> buf5<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> buf6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'7'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf6 = %s\n"</span><span class="token punctuation">,</span> buf6<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> buf7<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token char">'7'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf7 = %s\n"</span><span class="token punctuation">,</span> buf7<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//使用字符串初始化，编译器自动在后面补0，常用</span>
	<span class="token keyword">char</span> buf8<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"agjdslgjlsdjg"</span><span class="token punctuation">;</span>

	<span class="token comment">//'\0'后面最好不要连着数字，有可能几个数字连起来刚好是一个转义字符</span>
	<span class="token comment">//'\ddd'八进制字义字符，'\xdd'十六进制转移字符</span>
	<span class="token comment">// \012相当于\n</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\012abc"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str == %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>字符串的输入输出<ul>
<li>由于字符串采用了’\0’标志，字符串的输入输出将变得简单方便。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input string1 : \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//scanf(“%s”,str)默认以空格分隔</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"output:%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ul>
<li>gets()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止。
参数：
	s：字符串首地址
返回值：
	成功：读入的字符串
	失败：<span class="token constant">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>gets(str)与scanf(“%s”,str)的区别：</p>
<ul>
<li>gets(str)允许输入的字符串含有空格</li>
<li>scanf(“%s”,str)不允许含有空格</li>
<li>由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字符数组越界(缓冲区溢出)的情况。</li>
</ul>
</li>
<li><p>fgets()</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size <span class="token operator">-</span> <span class="token number">1</span>个字符为止，最后会自动加上字符 <span class="token char">'\0'</span> 作为字符串结束。
参数：
	s：字符串
	size：指定最大读取字符串的长度（size <span class="token operator">-</span> <span class="token number">1</span>）
	stream：文件指针，如果读键盘输入的字符串，固定写为<span class="token constant">stdin</span>
返回值：
	成功：成功读取的字符串
	读到文件尾或出错： <span class="token constant">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fgets()在读取一个用户通过键盘输入的字符串的时候，同时把用户输入的回车也做为字符串的一部分。通过scanf和gets输入一个字符串的时候，不包含结尾的“\n”，但通过fgets结尾多了“\n”。fgets()函数是安全的，不存在缓冲区溢出的问题。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入str: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str = \"%s\"\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>puts()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：标准设备输出s字符串，在输出完成后自动输出一个<span class="token char">'\n'</span>。
参数：
	s：字符串首地址
返回值：
	成功：非负数
	失败：<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fputs()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将str所指定的字符串写入到stream指定的文件中， 字符串结束符 <span class="token char">'\0'</span>  不写入文件。 
参数：
	str：字符串
	stream：文件指针，如果把字符串输出到屏幕，固定写为<span class="token constant">stdout</span>
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fputs()是puts()的文件操作版本，但fputs()不会自动输出一个’\n’。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>strlen()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token class-name">size_t</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：计算指定指定字符串s的长度，不包含字符串结束符‘\<span class="token number">0</span>’
参数：
s：字符串首地址
返回值：字符串s的长度，<span class="token class-name">size_t</span>为<span class="token keyword">unsigned</span> <span class="token keyword">int</span>类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc\0defg"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="4-字符串追加"><a href="#4-字符串追加" class="headerlink" title="4.字符串追加"></a>4.字符串追加</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;

int main()
&#123;
	char str1[] &#x3D; &quot;abcdef&quot;;
	char str2[] &#x3D; &quot;123456&quot;;
	char dst[100];

	int i &#x3D; 0;
	while (str1[i] !&#x3D; 0)
	&#123;
		dst[i] &#x3D; str1[i];
		i++;
	&#125;

	int j &#x3D; 0;
	while (str2[j] !&#x3D; 0)
	&#123;
		dst[i + j] &#x3D; str2[j];
		j++;
	&#125;
	dst[i + j] &#x3D; 0; &#x2F;&#x2F;字符串结束符

	printf(&quot;dst &#x3D; %s\n&quot;, dst);

	return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul>
<li>系统函数，即库函数：这是由编译系统提供的，用户不必自己定义这些函数，可以直接使用它们，如我们常用的打印函数printf()。</li>
<li>用户定义函数：用以解决用户的专门需要。</li>
<li>函数的使用可以省去重复代码的编写，降低代码重复率</li>
<li>函数可以让程序更加模块化，从而有利于程序的阅读，修改和完善</li>
</ul>
<h4 id="2-函数的调用：产生随机数"><a href="#2-函数的调用：产生随机数" class="headerlink" title="2.函数的调用：产生随机数"></a>2.函数的调用：产生随机数</h4><ol>
<li>函数五要素<ul>
<li>头文件：包含指定的头文件</li>
<li>函数名字：函数名字必须和头文件声明的名字一样</li>
<li>功能：需要知道此函数能干嘛后才调用</li>
<li>参数：参数类型要匹配</li>
<li>返回值：根据需要接收返回值</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token class-name">time_t</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token class-name">time_t</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：获取当前系统时间
参数：常设置为<span class="token constant">NULL</span>
返回值：当前系统时间<span class="token punctuation">,</span> <span class="token class-name">time_t</span> 相当于<span class="token keyword">long</span>类型，单位为毫秒

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：用来设置<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>产生随机数时的随机种子
参数：如果每次seed相等，<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>产生随机数相等
返回值：无

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：返回一个随机数值
参数：无
返回值：随机数

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">time_t</span> tm <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到系统时间</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机种子只需要设置一次即可</span>

	<span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"r = %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-函数的定义"><a href="#3-函数的定义" class="headerlink" title="3.函数的定义"></a>3.函数的定义</h4><ul>
<li><p>函数定义的一般形式：</p>
</li>
<li><blockquote>
<p>返回类型 函数名(形式参数列表)</p>
<p>​    {</p>
<p>​        数据定义部分;</p>
<p>​        执行语句部分;</p>
<p>}</p>
</blockquote>
</li>
<li><p> 函数名字、形参、函数体、返回值</p>
</li>
</ul>
<ol>
<li>函数名</li>
<li>形参列表<ul>
<li>在定义函数时指定的形参，在未出现函数调用时，它们并不占内存中的存储单元，因此称它们是形式参数或虚拟参数，简称形参，表示它们并不是实际存在的数据，所以，形参里的变量不能赋值。</li>
<li>在定义函数时指定的形参，必须是，类型+变量的形式</li>
<li>在定义函数时指定的形参，可有可无，根据函数的需要来设计，如果没有形参，圆括号内容为空，或写一个void关键字</li>
</ul>
</li>
<li>函数体<ul>
<li>花括号{ }里的内容即为函数体的内容，这里为函数功能实现的过程，这和以前的写代码没太大区别，以前我们把代码写在main()函数里，现在只是把这些写到别的函数里。</li>
</ul>
</li>
<li>返回值<ul>
<li>函数的返回值是通过函数中的return语句获得的，return后面的值也可以是一个表达式。</li>
<li>尽量保证return语句中表达式的值和函数返回类型是同一类型。</li>
<li>如果函数返回的类型和return语句中表达式的值不一致，则以函数返回类型为准，即函数返回类型决定返回值的类型。对数值型数据，可以自动进行类型转换。</li>
<li>如果函数返回的类型和return语句中表达式的值不一致，而它又无法自动进行类型转换，程序则会报错。</li>
<li>return语句的另一个作用为中断return所在的执行函数，类似于break中断循环、switch语句一样。</li>
<li>如果函数带返回值，return后面必须跟着一个值，如果函数没有返回值，函数名字的前面必须写一个void关键字，这时候，我们写代码时也可以通过return中断函数(也可以不用)，只是这时，return后面不带内容( 分号“；”除外)。</li>
</ul>
</li>
</ol>
<h4 id="4-函数的调用"><a href="#4-函数的调用" class="headerlink" title="4.函数的调用"></a>4.函数的调用</h4><ul>
<li>main()为编译器设定好自动调用的主函数，无需人为调用，我们都是在main()函数里调用别的函数，一个 C 程序里有且只有一个main()函数。</li>
<li>函数执行流程<ol>
<li>查找函数定义</li>
<li>参数类型匹配</li>
<li>执行函数</li>
</ol>
</li>
<li>函数的形参和实参<ul>
<li>形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用。</li>
<li>实参出现在主调函数中，进入被调函数后，实参也不能使用。</li>
<li>实参变量对形参变量的数据传递是“值传递”，即单向传递，只由实参传给形参，而不能由形参传回来给实参。</li>
<li>在调用函数时，编译系统临时给形参分配存储单元。调用结束后，形参单元被释放。</li>
<li>实参单元与形参单元是不同的单元。调用结束后，形参单元被释放，函数调用结束返回主调函数后则不能再使用该形参变量。实参单元仍保留并维持原值。因此，在执行一个被调用函数时，形参的值如果发生改变，并不会改变主调函数中实参的值。</li>
</ul>
</li>
<li>无参函数调用<ul>
<li>如果是调用无参函数，则不能加上“实参”，但括号不能省略。</li>
</ul>
</li>
<li>有参函数调用<ul>
<li>如果实参表列包含多个实参，则各参数间用逗号隔开。</li>
<li>实参与形参的个数应相等，类型应匹配(相同或赋值兼容)。实参与形参按顺序对应，一对一地传递数据。</li>
<li>实参可以是常量、变量或表达式，无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值，以便把这些值传送给形参。所以，这里的变量是在圆括号( )外面定义好、赋好值的变量。</li>
</ul>
</li>
<li>函数返回值<ul>
<li>如果函数定义没有返回值，函数调用时不能写void关键字，调用函数时也不能接收函数的返回值。</li>
<li>如果函数定义有返回值，这个返回值我们根据用户需要可用可不用，但是，假如我们需要使用这个函数返回值，我们需要<strong>定义一个匹配类型的变量来接收。</strong></li>
</ul>
</li>
</ul>
<h4 id="5-函数的声明"><a href="#5-函数的声明" class="headerlink" title="5.函数的声明"></a>5.函数的声明</h4><ul>
<li><p>如果使用用户自己定义的函数，而该函数与调用它的函数（即主调函数）不在同一文件中，或者函数定义的位置在主调函数之后，则必须在调用此函数之前对被调用的函数作声明。</p>
</li>
<li><p>所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行。</p>
</li>
<li><p>注意：一个函数只能被定义一次，但可以声明多次。</p>
</li>
<li><p><strong>函数定义和声明的区别：</strong></p>
<ol>
<li>定义是指对函数功能的确立，包括指定函数名、函数类型、形参及其类型、函数体等，它是一个完整的、独立的函数单位。</li>
<li>声明的作用则是把函数的名字、函数类型以及形参的个数、类型和顺序(注意，不包括函数体)通知编译系统，以便在对包含函数调用的语句进行编译时，据此对其进行对照检查（例如函数名是否正确，实参与形参的类型和个数是否一致）。</li>
</ol>
</li>
</ul>
<h4 id="6-main函数与exit函数"><a href="#6-main函数与exit函数" class="headerlink" title="6.main函数与exit函数"></a>6.main函数与exit函数</h4><ul>
<li>在main函数中调用exit和return结果是一样的，但在子函数中调用return只是代表子函数终止了，在子函数中调用exit，那么程序终止。</li>
</ul>
<h4 id="7-多文件（分文件）编程"><a href="#7-多文件（分文件）编程" class="headerlink" title="7.多文件（分文件）编程"></a>7.多文件（分文件）编程</h4><ol>
<li>分文件编程<ul>
<li>把函数声明放在头文件xxx.h中，在主函数中包含相应头文件</li>
<li>在头文件对应的xxx.c中实现xxx.h声明的函数</li>
<li><img src="http://qiniu.orangew.cn/img/wps6DF8.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>防止头文件重复包含<ul>
<li>为了避免同一个文件被include多次，C/C++中有两种方式，一种是 #ifndef 方式，一种是 #pragma once 方式。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__SOMEFILE_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__SOMEFILE_H__</span></span>

<span class="token comment">// 声明语句</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token comment">// 声明语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="7-指针"><a href="#7-指针" class="headerlink" title="7.指针"></a>7.指针</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.  概述"></a>1.  概述</h4><ol>
<li>内存<ul>
<li>存储器：计算机的组成中，用来存储程序和数据，辅助CPU进行运算处理的重要部分。</li>
<li>内存：内部存贮器，暂存程序/数据——掉电丢失 SRAM、DRAM、DDR、DDR2、DDR3。</li>
<li>外存：外部存储器，长时间保存程序/数据—掉电不丢ROM、ERRROM、FLASH（NAND、NOR）、硬盘、光盘。</li>
<li>内存是沟通CPU与硬盘的桥梁：<ul>
<li>暂存放CPU中的运算数据</li>
<li>暂存与硬盘等外部存储器交换的数据</li>
</ul>
</li>
</ul>
</li>
<li>物理存储器和存储地址空间<ul>
<li>物理存储器：实际存在的具体存储器芯片<ul>
<li>主板上装插的内存条</li>
<li>显示卡上的显示RAM芯片</li>
<li>各种适配卡上的RAM芯片和ROM芯片</li>
</ul>
</li>
<li>存储地址空间：对存储器编码的范围。我们在软件上常说的内存是指这一层含义。<ul>
<li>编码：对每个物理存储单元（一个字节）分配一个号码</li>
<li>寻址：可以根据分配的号码找到相应的存储单元，完成数据的读写</li>
</ul>
</li>
</ul>
<ol start="3">
<li>内存地址</li>
</ol>
<ul>
<li>将内存抽象成一个很大的一维字符数组。</li>
<li>编码就是对内存的每一个字节分配一个32位或64位的编号（与32位或者64位处理器相关）。</li>
<li> 这个内存编号我们称之为内存地址。</li>
<li>内存中的每一个数据都会分配相应的地址：</li>
<li>char:占一个字节分配一个地址</li>
<li>int: 占四个字节分配四个地址</li>
<li>float、struct、函数、数组等</li>
</ul>
<ol start="4">
<li>指针和指针变量</li>
</ol>
<ul>
<li>内存区的每一个字节都有一个编号，这就是“地址”。</li>
<li>如果在程序中定义了一个变量，在对程序进行编译或运行时，系统就会给这个变量分配内存单元，并确定它的内存地址(编号)</li>
<li>指针的实质就是内存“地址”。指针就是地址，地址就是指针。</li>
<li>指针是内存单元的编号，指针变量是存放地址的变量。</li>
<li>通常我们叙述时会把指针变量简称为指针，实际他们含义并不一样。</li>
</ul>
</li>
</ol>
<h4 id="2-指针基础知识"><a href="#2-指针基础知识" class="headerlink" title="2.指针基础知识"></a>2.指针基础知识</h4><ol>
<li> 指针变量的定义和使用</li>
</ol>
<ul>
<li>指针也是一种数据类型，指针变量也是一种变量</li>
<li>指针变量指向谁，就把谁的地址赋值给指针变量</li>
<li>“*”操作符操作的是指针变量指向的内存空间</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p, %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印a, b的地址</span>

	<span class="token comment">//int *代表是一种数据类型，int*指针类型，p才是变量名</span>
	<span class="token comment">//定义了一个指针类型的变量，可以指向一个int类型变量的地址</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//将a的地址赋值给变量p，p也是一个变量，值是一个内存地址编号</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p指向了a的地址，*p就是a的值</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*p1指向了b的地址，*p1就是b的值</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>注意：&amp;可以取得一个变量在内存中的地址。但是，<strong>不能取寄存器变量，因为寄存器变量不在内存里，而在CPU里面</strong>，所以是没有地址的。</li>
</ul>
<ol start="2">
<li>通过指针间接修改变量的值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>

	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, *p = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b = %d, *p = %d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>指针大小<ul>
<li>使用sizeof()测量指针的大小，得到的总是：4或8</li>
<li>sizeof()测的是指针变量指向存储地址的大小</li>
<li>在32位平台，所有的指针（地址）都是32位(4字节)</li>
<li>在64位平台，所有的指针（地址）都是64位(8字节)</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p4<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p1) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p2) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p3) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(p4) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(double *) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>野指针和空指针<ul>
<li>指针变量也是变量，是变量就可以任意赋值，不要越界即可（32位为4字节，64位为8字节），但是，任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。所以，野指针不会直接引发错误，操作野指针指向的内存区域才会出问题。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义</span>

	p <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span> <span class="token comment">//给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义</span>

	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment">//操作野指针指向未知区域，内存出问题，err</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>但是，野指针和有效指针变量保存的都是数值，为了标志此指针变量没有指向任何变量(空闲可用)，C语言中，可以把NULL赋值给此指针，这样就标志此指针为空指针，没有任何指针。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>NULL是一个值为0的宏常量</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="5">
<li>万能指针void *<ul>
<li>void *指针可以指向任意变量的内存空间：</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指向变量时，最好转换为void *</span>

	<span class="token comment">//使用指针变量指向的内存时，转换为int *</span>
	<span class="token operator">*</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.const修饰的指针变量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token comment">//指向常量的指针</span>
	<span class="token comment">//修饰*，指针指向内存区域不能修改，指针指向可以变</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//等价于int const *p1 = &amp;a;</span>
	<span class="token comment">//*p1 = 111; //err</span>
	p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span> <span class="token comment">//ok</span>

<span class="token comment">//指针常量</span>
	<span class="token comment">//修饰p1，指针指向不能变，指针指向的内存可以修改</span>
	<span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token comment">//p2 = &amp;b; //err</span>
	<span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span> <span class="token comment">//ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在编辑程序时，指针作为函数参数，如果不想修改指针对应内存空间的值，需要使用const修饰指针数据类型。</li>
</ul>
<p>7.指针和数组</p>
<ol>
<li>数组名</li>
</ol>
<ul>
<li>数组名字是数组的首元素地址，但它是一个常量：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a[0] = %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//a = 10; //err, 数组名只是常量，不能修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>指针操作数组元素</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//printf("%d, ", a[i]);</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//定义一个指针变量保存a的地址</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>   3.指针加减运算</p>
<ul>
<li>加法运算<ul>
<li>指针计算不是简单的整数相加</li>
<li>如果是一个int *，+1的结果是增加一个int的大小</li>
<li>如果是一个char *，+1的结果是增加一个char大小</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//移动了2个int</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p1 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//移动了2个char</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>通过改变指针指向操作数组元素：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>减法运算</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//第2个元素地址</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//第1个元素地址</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1 = %p, p2 = %p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> n1 <span class="token operator">=</span> p2 <span class="token operator">-</span> p1<span class="token punctuation">;</span> <span class="token comment">//n1 = 1</span>
	<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p2 <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span> <span class="token comment">//n2 = 4</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n1 = %d, n2 = %d\n"</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>指针数组<ul>
<li>指针数组，它是数组，数组的每个元素都是指针类型。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//指针数组</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>
	p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-多级指针"><a href="#3-多级指针" class="headerlink" title="3.多级指针"></a>3.多级指针</h4><ul>
<li>C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针。</li>
<li>二级指针就是指向一个一级指针变量地址的指针。</li>
<li>三级指针基本用不着。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//一级指针</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//*p就是a</span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>q <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>
<span class="token comment">//*q就是p</span>
<span class="token comment">//**q就是a</span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>t <span class="token operator">=</span> <span class="token operator">&amp;</span>q<span class="token punctuation">;</span>
<span class="token comment">//*t就是q</span>
<span class="token comment">//**t就是p</span>
<span class="token comment">//***t就是a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-指针和函数"><a href="#4-指针和函数" class="headerlink" title="4.指针和函数"></a>4.指针和函数</h4><ol>
<li>函数形参改变实参的值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>
	x <span class="token operator">=</span> y<span class="token punctuation">;</span>
	y <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x = %d, y = %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> tmp<span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span>
	<span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span>
	<span class="token operator">*</span>y <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">swap1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token function">swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a2 = %d, b2 = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>数组名做函数参数<ul>
<li>数组名做函数参数，函数的形参会退化为指针：</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printArrary</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//数组名做函数参数</span>
	<span class="token function">printArrary</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>指针做为函数的返回值</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span><span class="token punctuation">(</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-指针和字符串"><a href="#5-指针和字符串" class="headerlink" title="5.指针和字符串"></a>5.指针和字符串</h4><ol>
<li>字符指针</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">'m'</span><span class="token punctuation">;</span>
	p<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token string">"mike jiang"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>字符指针做函数参数</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">mystrcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>dest<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		len1<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		len2<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		dest<span class="token punctuation">[</span>len1 <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello mike"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>
	
	<span class="token function">mystrcat</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dst = %s\n"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>3.const修饰的指针变量</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//const修饰一个变量为只读</span>
	<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token comment">//a = 100; //err</span>

	<span class="token comment">//指针变量， 指针指向的内存， 2个不同概念</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"aklgjdlsgjlkds"</span><span class="token punctuation">;</span>

	<span class="token comment">//从左往右看，跳过类型，看修饰哪个字符</span>
	<span class="token comment">//如果是*， 说明指针指向的内存不能改变</span>
	<span class="token comment">//如果是指针变量，说明指针的指向不能改变，指针的值不能修改</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span>
	<span class="token comment">// 等价于上面 char const *p1 = buf;</span>
	<span class="token comment">//p[1] = '2'; //err</span>
	p <span class="token operator">=</span> <span class="token string">"agdlsjaglkdsajgl"</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>

	<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p2 <span class="token operator">=</span> buf<span class="token punctuation">;</span>
	p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'3'</span><span class="token punctuation">;</span>
	<span class="token comment">//p2 = "salkjgldsjaglk"; //err</span>

	<span class="token comment">//p3为只读，指向不能变，指向的内存也不能变</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> p3 <span class="token operator">=</span> buf<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.指针数组做为main函数的形参</p>
<ul>
<li>main函数是操作系统调用的，第一个参数标明argc数组的成员数量，argv数组的每个成员都是char *类型</li>
<li>argv是命令行参数的字符串数组</li>
<li>argc代表命令行参数的数量，程序名字本身算一个参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//argc: 传参数的个数（包含可执行程序）</span>
<span class="token comment">//argv：指针数组，指向输入的参数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token comment">//指针数组，它是数组，每个元素都是指针</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aaaaaaa"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbbbbb"</span><span class="token punctuation">,</span> <span class="token string">"ccccccc"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argc = %d\n"</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-项目开发常用字符串应用模型"><a href="#6-项目开发常用字符串应用模型" class="headerlink" title="6.项目开发常用字符串应用模型"></a>6.项目开发常用字符串应用模型</h4><ol>
<li>strstr中的while和do-while模型<ul>
<li>利用strstr标准库函数找出一个字符串中substr出现的个数。</li>
</ul>
</li>
</ol>
<ul>
<li>while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"11abcd111122abcd333abcd3322abcd3333322qqq"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//能进来，肯定有匹配的子串</span>
		<span class="token comment">//重新设置起点位置</span>
		p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		n<span class="token operator">++</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//如果到结束符</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>do-while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"11abcd111122abcd333abcd3322abcd3333322qqq"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">do</span>
	<span class="token punctuation">&#123;</span>
		p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//累计个数</span>

			<span class="token comment">//重新设置查找的起点</span>
			p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token comment">//如果没有匹配的字符串，跳出循环</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果没有到结尾</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.两头堵模型</p>
<ul>
<li>求非空字符串元素的个数：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>

<span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">//从左边开始</span>
	<span class="token comment">//如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//位置从右移动一位</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左移动</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//非空元素个数</span>
	<span class="token operator">*</span>n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"      abcddsgadsgefg      "</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"非空字符串元素个数：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>字符串反转模型(逆置)</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> tmp<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//交换元素</span>
		tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>
		str<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
		str<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

		begin<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//往右移动位置</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span>	    <span class="token comment">//往左移动位置</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//char *str = "abcdefg"; //文件常量区，内容不允许修改</span>
	<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">inverse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str ========== %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-字符串处理函数"><a href="#7-字符串处理函数" class="headerlink" title="7.字符串处理函数"></a>7.字符串处理函数</h4><ol>
<li>strcpy()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把src所指向的字符串复制到dest所指向的空间中，<span class="token char">'\0'</span>也会拷贝过去
参数：
	dest：目的字符串首地址
	src：源字符首地址
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
    
    <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况。</li>
</ul>
<ol start="2">
<li>strncpy()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把src指向字符串的前n个字符复制到dest所指向的空间中，是否拷贝结束符看指定的长度是否包含<span class="token char">'\0'</span>。
参数：
	dest：目的字符串首地址
	src：源字符首地址
	n：指定需要拷贝字符串个数
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
    
    <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>

	dest<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>strcat()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将src字符串连接到dest的尾部，‘\<span class="token number">0</span>’也会追加过去
参数：
	dest：目的字符串首地址
	src：源字符首地址
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
	
		<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>src <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>strncat()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strncat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将src字符串前n个字符连接到dest的尾部，‘\<span class="token number">0</span>’也会追加过去
参数：
	dest：目的字符串首地址
	src：源字符首地址
	n：指定需要追加字符串个数
返回值：
	成功：返回dest字符串的首地址
	失败：<span class="token constant">NULL</span>
    
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>src <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strncat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.strcmp()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：比较 s1 和 s2 的大小，比较的是字符ASCII码大小。
参数：
	s1：字符串<span class="token number">1</span>首地址
	s2：字符串<span class="token number">2</span>首地址
返回值：
	相等：<span class="token number">0</span>
	大于：<span class="token operator">></span><span class="token number">0</span> 在不同操作系统strcmp结果会不同   返回ASCII差值
	小于：<span class="token operator">&lt;</span><span class="token number">0</span>
	
    <span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token string">"hello mike"</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1==str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1>str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1&lt;str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>strncmp()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：比较 s1 和 s2 前n个字符的大小，比较的是字符ASCII码大小。
参数：
	s1：字符串<span class="token number">1</span>首地址
	s2：字符串<span class="token number">2</span>首地址
	n：指定比较字符串的数量
返回值：
	相等：<span class="token number">0</span>
	大于： <span class="token operator">></span> <span class="token number">0</span>
	小于： <span class="token operator">&lt;</span> <span class="token number">0</span>
	
	<span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token string">"hello mike"</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1==str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1>str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1&lt;str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>7.sprintf()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到出现字符串结束符 <span class="token char">'\0'</span>  为止。
参数：
	str：字符串首地址
	format：字符串格式，用法和<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：实际格式化的字符个数
	失败： <span class="token operator">-</span> <span class="token number">1</span>
    
    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, src = %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">"a = %d, src = %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dst = \" %s\"\n"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len = %d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="8">
<li>sscanf()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据。
参数：
	str：指定的字符串首地址
	format：字符串格式，用法和<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：参数数目
	
	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a=10, b=20"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token function">sscanf</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"a=%d,  b=%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%d, b:%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>9.strchr()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strchr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在字符串s中查找字母c出现的位置
参数：
	s：字符串首地址
	c：匹配字母<span class="token punctuation">(</span>字符<span class="token punctuation">)</span>
返回值：
	成功：返回第一次出现的c地址
	失败：<span class="token constant">NULL</span>

	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ddda123abcd"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="10">
<li> strstr()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>haystack<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在字符串haystack中查找字符串needle出现的位置
参数：
	haystack：源字符串首地址
	needle：匹配字符串首地址
返回值：
	成功：返回第一次出现的needle地址
	失败：<span class="token constant">NULL</span>

	<span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ddddabcd123abcd333abcd"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="11">
<li>strtok()</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>delim<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：来将字符串分割成一个个片段。当<span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>在参数s的字符串中发现参数delim中包含的分割字符时<span class="token punctuation">,</span> 则会将该字符改为\<span class="token number">0</span> 字符，当连续出现多个时只替换第一个为\<span class="token number">0</span>。
参数：
	str：指向欲分割的字符串
	delim：为分割字符串中包含的所有字符
返回值：
	成功：分割后字符串首地址
	失败：<span class="token constant">NULL</span>
	
在第一次调用时：<span class="token function">strtok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>必需给予参数s字符串
往后的调用则将参数s设置成<span class="token constant">NULL</span>，每次调用成功则返回指向被分割出片段的指针

	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"adc*fvcv*ebcy*hghbdfg*casdert"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将"*"分割的子串取出</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
		s <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>12.atoi()</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：<span class="token function">atoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符<span class="token punctuation">(</span><span class="token char">'\0'</span><span class="token punctuation">)</span>才结束转换，并将结果返回返回值。
参数：
	nptr：待转换的字符串
返回值：成功转换后整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>atof()：把一个小数形式的字符串转化为一个浮点数。</li>
<li>atol()：将一个字符串转化为long类型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-10"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num1 = %d\n"</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0.123"</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token function">atof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num2 = %lf\n"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="8-指针小结"><a href="#8-指针小结" class="headerlink" title="8.指针小结"></a>8.指针小结</h4><table>
<thead>
<tr>
<th><strong>定义</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>int i</td>
<td>定义整形变量</td>
</tr>
<tr>
<td>int *p</td>
<td>定义一个指向int的指针变量</td>
</tr>
<tr>
<td>int a[10]</td>
<td>定义一个有10个元素的数组，每个元素类型为int</td>
</tr>
<tr>
<td>int *p[10]</td>
<td>定义一个有10个元素的数组，每个元素类型为int*</td>
</tr>
<tr>
<td>int func()</td>
<td>定义一个函数，返回值为int型</td>
</tr>
<tr>
<td>int *func()</td>
<td>定义一个函数，返回值为int *型</td>
</tr>
<tr>
<td>int **p</td>
<td>定义一个指向int的指针的指针，二级指针</td>
</tr>
</tbody></table>
<h3 id="8-内存管理"><a href="#8-内存管理" class="headerlink" title="8.内存管理"></a>8.内存管理</h3><h4 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1.作用域"></a>1.作用域</h4><ul>
<li>C语言变量的作用域分为：<ul>
<li>代码块作用域(代码块是{}之间的一段代码)</li>
<li>函数作用域</li>
<li>文件作用域</li>
</ul>
</li>
<li>局部变量<ul>
<li>局部变量也叫auto自动变量(auto可写可不写)，一般情况下代码块{}内部定义的变量都是自动变量，它有如下特点：<ul>
<li>在一个函数内定义，只在函数范围内有效</li>
<li>在复合语句中定义，只在复合语句中有效</li>
<li>随着函数调用的结束或复合语句的结束局部变量的声明声明周期也结束</li>
<li>如果没有赋初值，内容为随机</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//auto写不写是一样的</span>
	<span class="token comment">//auto只能出现在&#123;&#125;内部</span>
	<span class="token keyword">auto</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//b = 100; //err， 在main作用域中没有b</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//在复合语句中定义，只在复合语句中有效</span>
		<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//a = 10; //err离开if()的复合语句，a已经不存在</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>静态(static)局部变量<ul>
<li>static局部变量的作用域也是在定义的函数内有效</li>
<li>static局部变量的生命周期和程序运行周期一样，同时staitc局部变量的值只初始化一次，但可以赋值多次</li>
<li>static局部变量若未赋以初值，则由系统自动赋值：数值型变量自动赋初值0，字符型变量赋空字符</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//静态局部变量，没有赋值，系统赋值为0，而且只会初始化一次</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
	a<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p> 全局变量</p>
</li>
<li><p>在函数外定义，可被本文件及其它文件中的函数所共用，若其它文件中的函数调用此变量,须用extern声明</p>
</li>
<li><p>全局变量的生命周期和程序运行周期一样</p>
</li>
<li><p>不同文件的全局变量不可重名</p>
</li>
<li><p>静态(static)全局变量</p>
<ul>
<li>在函数外定义,作用范围被限制在所定义的文件中</li>
<li>不同文件静态全局变量可以重名,但作用域不冲突</li>
<li>static全局变量的生命周期和程序运行周期一样，同时staitc全局变量的值只初始化一次</li>
</ul>
</li>
<li><p>extern全局变量声明</p>
<ul>
<li>extern int a;声明一个变量，这个全局变量在别的文件中已经定义了，这里只是声明，而不是定义。</li>
</ul>
</li>
<li><p>全局函数和静态函数</p>
<ul>
<li>在C语言中函数默认都是全局的，使用关键字static可以将函数声明为静态，函数定义为static就意味着这个函数只能在定义这个函数的文件中使用，在其他文件中不能调用，即使在其他文件中声明这个函数都没用。</li>
<li>对于不同文件中的staitc函数名字可以相同。</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>允许在不同的函数中使用相同的变量名，它们代表不同的对象，分配不同的单元，互不干扰。</li>
<li>同一源文件中,允许全局变量和局部变量同名，在局部变量的作用域内，全局变量不起作用。</li>
<li>所有的函数默认都是全局的，意味着所有的函数都不能重名，但如果是staitc函数，那么作用域是文件级的，所以不同的文件static函数名是可以相同的。</li>
</ul>
</li>
<li><p>总结</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>作用域</strong></th>
<th><strong>生命周期</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>auto变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td></td>
</tr>
<tr>
<td>static局部变量</td>
<td>一对{}内</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>extern变量</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>static全局变量</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>extern函数</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>static函数</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td></td>
</tr>
<tr>
<td>register变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td></td>
</tr>
<tr>
<td>全局变量</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="2-内存布局"><a href="#2-内存布局" class="headerlink" title="2.内存布局"></a>2.内存布局</h4><ol>
<li>内存分区<ul>
<li>C代码经过预处理、编译、汇编、链接4步后生成一个可执行程序。</li>
<li>在 Windows 下，程序是一个普通的可执行文件，以下列出一个二进制可执行文件的基本情况：</li>
<li><img src="http://qiniu.orangew.cn/img/wps430F.tmp.jpg" alt="img"></li>
<li>通过上图可以得知，在没有运行程序前，也就是说程序没有加载到内存前，可执行程序内部已经分好3段信息，分别为代码区（text）、数据区（data）和未初始化数据区（bss）3 个部分（有些人直接把data和bss合起来叫做静态区或全局区）。<ul>
<li>代码区<ul>
<li>存放 CPU 执行的机器指令。通常代码区是可共享的（即另外的执行程序可以调用它），使其可共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。<strong>代码区通常是只读的</strong>，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。</li>
</ul>
</li>
<li>全局初始化数据区/静态数据区（data段）<ul>
<li>该区包含了在程序中明确被初始化的全局变量、已经初始化的静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。</li>
</ul>
</li>
<li>未初始化数据区（又叫 bss 区）<ul>
<li>存入的是全局未初始化变量和未初始化静态变量。未初始化数据区的数据在程序开始执行之前被内核初始化为 0 或者空（NULL）。</li>
<li>程序在加载到内存前，代码区和全局区(data和bss)的大小就是固定的，程序运行期间不能改变。然后，运行可执行程序，系统把程序加载到内存，除了根据可执行程序的信息分出代码区（text）、数据区（data）和未初始化数据区（bss）之外，还额外增加了栈区、堆区。</li>
<li><img src="http://qiniu.orangew.cn/img/wps3AF8.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>代码区（text segment）<ul>
<li>加载的是可执行文件代码段，所有的可执行代码都加载到代码区，这块内存是不可以在运行期间修改的。</li>
</ul>
</li>
<li>未初始化数据区（BSS）<ul>
<li>加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</li>
</ul>
</li>
<li>全局初始化数据区/静态数据区（data segment）<ul>
<li>加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的生存周期为整个程序运行过程。</li>
</ul>
</li>
<li>栈区（stack）<ul>
<li>栈是一种先进后出的内存结构，由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</li>
</ul>
</li>
<li>堆区（heap）<ul>
<li>堆是一个大容器，它的容量要远远大于栈，但没有栈那样先进后出的顺序。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>存储类型总结</li>
</ol>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>作用域</strong></th>
<th><strong>生命周期</strong></th>
<th><strong>存储位置</strong></th>
</tr>
</thead>
<tbody><tr>
<td>auto变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td>栈区</td>
</tr>
<tr>
<td>static局部变量</td>
<td>一对{}内</td>
<td>整个程序运行期</td>
<td>初始化在data段，未初始化在BSS段</td>
</tr>
<tr>
<td>extern变量</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td>初始化在data段，未初始化在BSS段</td>
</tr>
<tr>
<td>static全局变量</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td>初始化在data段，未初始化在BSS段</td>
</tr>
<tr>
<td>extern函数</td>
<td>整个程序</td>
<td>整个程序运行期</td>
<td>代码区</td>
</tr>
<tr>
<td>static函数</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td>代码区</td>
</tr>
<tr>
<td>register变量</td>
<td>一对{}内</td>
<td>当前函数</td>
<td>运行时存储在CPU寄存器</td>
</tr>
<tr>
<td>字符串常量</td>
<td>当前文件</td>
<td>整个程序运行期</td>
<td>data段</td>
</tr>
</tbody></table>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> e<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> f<span class="token punctuation">;</span>
<span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>i <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>k <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a\t %p\t //局部未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;b\t %p\t //局部初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;c\t %p\t //静态局部未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;d\t %p\t //静态局部初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;e\t %p\t //全局未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;f\t %p\t //全局静态未初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;g\t %p\t //全局初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;h\t %p\t //全局静态初始化变量\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i\t %p\t //只读数据(文字常量区)\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

	k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"k\t %p\t //动态分配的内存\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>内存操作函数</li>
</ol>
<ul>
<li>memset()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将s的内存区域的前n个字节以参数c填入
参数：
	s：需要操作内存s的首地址
	c：填充的字符，c虽然参数为<span class="token keyword">int</span>，但必须是<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">,</span> 范围为<span class="token number">0</span><span class="token operator">~</span><span class="token number">255</span>
	n：指定需要设置的大小
返回值：s的首地址
	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>memcpy()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：拷贝src所指的内存内容的前n个字节到dest所值的内存地址上。
参数：
	dest：目的内存首地址
	src：源内存首地址，注意：dest和src所指的内存空间不可重叠，可能会导致程序报错
	n：需要拷贝的字节数
返回值：dest的首地址

	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//memcpy(&amp;a[3], a, 5 * sizeof(int)); //err, 内存重叠</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> memmove()</li>
<li>memmove()功能用法和memcpy()一样，区别在于：dest和src所指的内存空间重叠时，memmove()仍然能处理，不过执行效率比memcpy()低些。</li>
<li>memcmp()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token keyword">int</span> <span class="token function">memcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>s2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：比较s1和s2所指向内存区域的前n个字节
参数：
	s1：内存首地址<span class="token number">1</span>
	s2：内存首地址<span class="token number">2</span>
	n：需比较的前n个字节
返回值：
	相等：<span class="token operator">=</span><span class="token number">0</span>
	大于：<span class="token operator">></span><span class="token number">0</span>
	小于：<span class="token operator">&lt;</span><span class="token number">0</span>

	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag = %d\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.堆区内存分配和释放</p>
<ul>
<li>malloc() </li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：在内存的动态存储区<span class="token punctuation">(</span>堆区<span class="token punctuation">)</span>中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。分配的内存空间内容不确定，一般使用memset初始化。
参数：
	size：需要分配内存大小<span class="token punctuation">(</span>单位：字节<span class="token punctuation">)</span>
返回值：
成功：分配空间的起始地址
失败：<span class="token constant">NULL</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要申请数组的个数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"申请空间失败!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//将申请到空间清0</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">/*给数组赋值*/</span>
		array<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">/*打印数组元素*/</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li> free()</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。对同一内存空间多次释放会出错。
参数：
ptr：需要释放空间的首地址，被释放区应是由malloc函数所分配的区域。
返回值：无<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-内存分区代码分析"><a href="#3-内存分区代码分析" class="headerlink" title="3.内存分区代码分析"></a>3.内存分区代码分析</h4><ul>
<li>返回栈区地址</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//函数调用完毕，a释放</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//操作野指针指向的内存,err</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>返回data区地址</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//函数调用完毕，a不释放</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>值传递1</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递，形参修改不会影响实参</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err，操作空指针指向的内存</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>值传递2</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ok，*p为100</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>返回堆区地址</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token comment">//返回堆区地址，函数调用完毕，不释放</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*p = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span>

	<span class="token comment">//堆区空间，使用完毕，手动释放</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="9-复合类型-自定义类型"><a href="#9-复合类型-自定义类型" class="headerlink" title="9.复合类型(自定义类型)"></a>9.复合类型(自定义类型)</h3><h4 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1.结构体"></a>1.结构体</h4><ol>
<li> 概述</li>
<li>结构体变量的定义和初始化<ul>
<li>先声明结构体类型再定义变量名</li>
<li>在声明类型的同时定义变量</li>
<li>直接定义结构体类型变量（无类型名）</li>
<li><img src="http://qiniu.orangew.cn/img/wps11E2.tmp.jpg" alt="img"></li>
<li>结构体类型和结构体变量关系：<ul>
<li>结构体类型：指定了一个结构体类型，它相当于一个模型，但其中并无具体数据，系统对之也不分配实际内存单元。</li>
<li>结构体变量：系统根据结构体类型（内部成员状况）为之分配空间。</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//先定义类型，再定义变量（常用）</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"mike"</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//定义类型同时定义变量</span>
<span class="token keyword">struct</span> <span class="token class-name">stu2</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"yuri"</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>结构体成员的使用</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1<span class="token punctuation">;</span>

	<span class="token comment">//如果是普通变量，通过点运算符操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s1.name = %s, s1.age = %d\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//如果是指针变量，通过->操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(&amp;s1)->name = %s, (&amp;s1)->age = %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.结构体数组</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//统计学生成绩</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> num<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
	<span class="token keyword">float</span> score<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义一个含有5个元素的结构体数组并将其初始化</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> boy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"Li ping"</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">45</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>			
		<span class="token punctuation">&#123;</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"Zhang ping"</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">62.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"He fang"</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token number">92.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">"Cheng ling"</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token number">87</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token string">"Wang ming"</span><span class="token punctuation">,</span> <span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">58</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">float</span> ave<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		s <span class="token operator">+=</span> boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>	<span class="token comment">//计算总分</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">//统计不及格人的分数</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s=%f\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印总分数</span>
	ave <span class="token operator">=</span> s <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>					<span class="token comment">//计算平均分数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"average=%f\ncount=%d\n\n"</span><span class="token punctuation">,</span> ave<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印平均分与不及格人数</span>


	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" name=%s,  score=%f\n"</span><span class="token punctuation">,</span> boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">// printf(" name=%s,  score=%f\n", (boy+i)->name, (boy+i)->score);</span>

	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>5.结构体套结构体</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">person</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">person</span> info<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token char">'F'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"yuri"</span><span class="token punctuation">,</span> <span class="token char">'M'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id = %d\tinfo.name=%s\tinfo.sex=%c\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>6.结构体赋值</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1<span class="token punctuation">;</span>

	<span class="token comment">//如果是普通变量，通过点运算符操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s1.name = %s, s1.age = %d\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//相同类型的两个结构体变量，可以相互赋值</span>
	<span class="token comment">//把s1成员变量的值拷贝给s2成员变量的内存</span>
	<span class="token comment">//s1和s2只是成员变量的值一样而已，它们还是没有关系的两个变量</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>
<span class="token comment">//memcpy(&amp;s2, &amp;s1, sizeof(s1));</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s2.name = %s, s2.age = %d\n"</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li> 结构体和指针</li>
</ol>
<ul>
<li>指向普通结构体变量的指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"lily"</span><span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">//如果是指针变量，通过->操作结构体成员</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p->name = %s, p->age=%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(*p).name = %s, (*p).age=%d\n"</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>堆区结构体变量</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span>  <span class="token class-name">stu</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//如果是指针变量，通过->操作结构体成员</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p->name = %s, p->age=%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(*p).name = %s, (*p).age=%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>结构体套一级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">//一级指针</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span>  <span class="token class-name">stu</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	p<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p->name = %s, p->age=%d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(*p).name = %s, (*p).age=%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>8.结构体做函数参数</p>
<ul>
<li>结构体普通变量做函数参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//函数参数为结构体普通变量</span>
<span class="token keyword">void</span> <span class="token function">set_stu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tmp.name = %s, tmp.age = %d\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">set_stu</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//值传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s.name = %s, s.age = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>结构体指针变量做函数参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//函数参数为结构体指针变量</span>
<span class="token keyword">void</span> <span class="token function">set_stu_pro</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"mike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	tmp<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">set_stu_pro</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址传递</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s.name = %s, s.age = %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>构体数组名做函数参数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//void set_stu_pro(struct stu tmp[100], int n)</span>
<span class="token comment">//void set_stu_pro(struct stu tmp[], int n)</span>
<span class="token keyword">void</span> <span class="token function">set_stu_pro</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>tmp<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"name%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		tmp<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
		tmp<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">stu</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">set_stu_pro</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组名传递</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>const修饰结构体指针形参变量</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//结构体类型的定义</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//p = NULL; //err</span>
	p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//void fun2(struct stu const*  p)</span>
<span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>  p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//ok</span>
	<span class="token comment">//p->age = 10; //err</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//p = NULL; //err</span>
	<span class="token comment">//p->age = 10; //err</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-联合体"><a href="#2-联合体" class="headerlink" title="2.联合体"></a>2.联合体</h4><ul>
<li>联合union是一个能在同一个存储空间存储不同类型数据的类型；</li>
<li>联合体所占的内存长度等于其最长成员的长度倍数，也有叫做共用体；</li>
<li>同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用；</li>
<li>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖；</li>
<li>共用体变量的地址和它的各成员的地址都是同一地址。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//共用体也叫联合体 </span>
<span class="token keyword">union</span> Test
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//定义共用体变量</span>
	<span class="token keyword">union</span> Test tmp<span class="token punctuation">;</span>

	<span class="token comment">//1、所有成员的首地址是一样的</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p, %p, %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//2、共用体大小为最大成员类型的大小</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">union</span> Test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//3、一个成员赋值，会影响另外的成员</span>
	<span class="token comment">//左边是高位，右边是低位</span>
	<span class="token comment">//低位放低地址，高位放高地址</span>
	tmp<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0x44332211</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2211</span>

	tmp<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"short: %x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2200</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int: %x\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//44332200</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3.枚举"></a>3.枚举</h4><ul>
<li>枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内。</li>
<li>枚举类型定义：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span>  枚举名
<span class="token punctuation">&#123;</span>
	枚举值表
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>在枚举值表中应列出所有可用值，也称为枚举元素。</li>
<li>枚举值是常量，不能在程序中用赋值语句再对它赋值。</li>
<li>枚举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">enum</span> <span class="token class-name">weekday</span>
<span class="token punctuation">&#123;</span>
	sun <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> mon<span class="token punctuation">,</span> tue<span class="token punctuation">,</span> wed<span class="token punctuation">,</span> thu<span class="token punctuation">,</span> fri<span class="token punctuation">,</span> sat
<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">bool</span>
<span class="token punctuation">&#123;</span>
	flase<span class="token punctuation">,</span> true
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">enum</span> <span class="token class-name">weekday</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
	a <span class="token operator">=</span> sun<span class="token punctuation">;</span>
	b <span class="token operator">=</span> mon<span class="token punctuation">;</span>
	c <span class="token operator">=</span> tue<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">enum</span> <span class="token class-name">bool</span> flag<span class="token punctuation">;</span>
	flag <span class="token operator">=</span> true<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag为真\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-typedf"><a href="#4-typedf" class="headerlink" title="4. typedf"></a>4. typedf</h4><ul>
<li>typedef为C语言的关键字，作用是为一种数据类型(基本类型或自定义数据类型)定义一个新名字，不能创建新类型。</li>
<li>与#define不同，typedef仅限于数据类型，而不是能是表达式或具体的值</li>
<li>#define发生在预处理，typedef发生在编译阶段</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> INT<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span> BYTE<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> BYTE T_BYTE<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> UBYTE<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">type</span>
<span class="token punctuation">&#123;</span>
	UBYTE a<span class="token punctuation">;</span>
	INT b<span class="token punctuation">;</span>
	T_BYTE c<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>TYPE<span class="token punctuation">,</span> <span class="token operator">*</span>PTYPE<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	TYPE t<span class="token punctuation">;</span>
	t<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">254</span><span class="token punctuation">;</span>
	t<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	t<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>

	PTYPE p <span class="token operator">=</span> <span class="token operator">&amp;</span>t<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u, %d, %c\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>a<span class="token punctuation">,</span> p<span class="token operator">-></span>b<span class="token punctuation">,</span> p<span class="token operator">-></span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="10-文件操作"><a href="#10-文件操作" class="headerlink" title="10.文件操作"></a>10.文件操作</h3><h4 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1.概述"></a>1.概述</h4><ol>
<li><p>磁盘文件和设备文件</p>
<ul>
<li>磁盘文件<ul>
<li>指一组相关数据的有序集合,通常存储在外部介质(如磁盘)上，使用时才调入内存。</li>
</ul>
</li>
<li>设备文件<ul>
<li>在操作系统中把每一个与主机相连的输入、输出设备看作是一个文件，把它们的输入、输出等同于对磁盘文件的读和写。</li>
</ul>
</li>
</ul>
</li>
<li><p>磁盘文件的分类</p>
<ul>
<li>计算机的存储在物理上是二进制的，所以物理上所有的磁盘文件本质上都是一样的：以字节为单位进行顺序存储。</li>
</ul>
</li>
</ol>
<ul>
<li>从用户或者操作系统使用的角度（逻辑上）把文件分为：<ul>
<li>文本文件：基于字符编码的文件 </li>
<li>二进制文件：基于值编码的文件</li>
</ul>
</li>
</ul>
<ol start="3">
<li><p>文本文件和二进制文件</p>
<ol>
<li><p>文本文件</p>
<ul>
<li><p>基于字符编码，常见编码有ASCII、UNICODE等</p>
</li>
<li><p>一般可以使用文本编辑器直接打开</p>
</li>
<li><p>数5678的以ASCII存储形式(ASCII码)为：</p>
<p> 00110101 00110110 00110111 00111000</p>
</li>
</ul>
</li>
<li><p>二进制文件</p>
<ul>
<li>基于值编码,自己根据具体应用,指定某个值是什么意思</li>
<li>把内存中的数据按其在内存中的存储形式原样输出到磁盘</li>
<li>数5678的存储形式(二进制码)为：00010110 0010111</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="2-文件的打开和关闭"><a href="#2-文件的打开和关闭" class="headerlink" title="2.文件的打开和关闭"></a>2.文件的打开和关闭</h4><ol>
<li>文件指针<ul>
<li>在C语言中用一个指针变量指向一个文件，这个指针称为文件指针。 </li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">short</span>           level<span class="token punctuation">;</span>	<span class="token comment">//缓冲区"满"或者"空"的程度 </span>
	<span class="token keyword">unsigned</span>        flags<span class="token punctuation">;</span>	<span class="token comment">//文件状态标志 </span>
	<span class="token keyword">char</span>            fd<span class="token punctuation">;</span>		<span class="token comment">//文件描述符</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>   hold<span class="token punctuation">;</span>	<span class="token comment">//如无缓冲区不读取字符</span>
	<span class="token keyword">short</span>           bsize<span class="token punctuation">;</span>	<span class="token comment">//缓冲区的大小</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>   <span class="token operator">*</span>buffer<span class="token punctuation">;</span><span class="token comment">//数据缓冲区的位置 </span>
	<span class="token keyword">unsigned</span>        ar<span class="token punctuation">;</span>	 <span class="token comment">//指针，当前的指向 </span>
	<span class="token keyword">unsigned</span>        istemp<span class="token punctuation">;</span>	<span class="token comment">//临时文件，指示器</span>
	<span class="token keyword">short</span>           token<span class="token punctuation">;</span>	<span class="token comment">//用于有效性的检查 </span>
<span class="token punctuation">&#125;</span>FILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>FILE是系统使用typedef定义出来的有关文件信息的一种结构体类型，结构中含有文件名、文件状态和文件当前位置等信息。</li>
<li>声明FILE结构体类型的信息包含在头文件“stdio.h”中，一般设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量。通过文件指针就可对它所指的文件进行各种操作。</li>
<li><img src="http://qiniu.orangew.cn/img/wpsF582.tmp.jpg" alt="img"></li>
<li>C语言中有三个特殊的文件指针由系统默认打开，用户无需定义即可直接使用:<ul>
<li>stdin： 标准输入，默认为当前终端（键盘），我们使用的scanf、getchar函数默认从此终端获得数据。</li>
<li>stdout：标准输出，默认为当前终端（屏幕），我们使用的printf、puts函数默认输出信息到此终端。</li>
<li>stderr：标准出错，默认为当前终端（屏幕），我们使用的perror函数默认输出信息到此终端。</li>
</ul>
</li>
</ul>
<ol start="2">
<li>文件打开</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
FILE <span class="token operator">*</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：打开文件
参数：
	filename：需要打开的文件名，根据需要加上路径
	mode：打开文件的模式设置
返回值：
	成功：文件指针
	失败：<span class="token constant">NULL</span>

第一个参数的几种形式<span class="token operator">:</span>
	FILE <span class="token operator">*</span>fp_passwd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//相对路径：</span>
	<span class="token comment">//打开当前目录passdw文件：源文件(源程序)所在目录</span>
	FILE <span class="token operator">*</span>fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"passwd.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//打开当前目录(test)下passwd.txt文件</span>
	fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">". / test / passwd.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//打开当前目录上一级目录（相对当前目录）passwd.txt文件</span>
	fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">".. / passwd.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token comment">//绝对路径：</span>
	<span class="token comment">//打开C盘test目录下一个叫passwd.txt文件</span>
	fp_passwd <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"c:/test/passwd.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二个参数的几种形式(打开文件的方式)：</li>
</ul>
<table>
<thead>
<tr>
<th><strong>打开模式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>r或rb</td>
<td>以只读方式打开一个文本文件（不创建文件，若文件不存在则报错）</td>
</tr>
<tr>
<td>w或wb</td>
<td>以写方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td>
</tr>
<tr>
<td>a或ab</td>
<td>以追加方式打开文件，在末尾添加内容，若文件不存在则创建文件</td>
</tr>
<tr>
<td>r+或rb+</td>
<td>以可读、可写的方式打开文件(不创建新文件)</td>
</tr>
<tr>
<td>w+或wb+</td>
<td>以可读、可写的方式打开文件(如果文件存在则清空文件，文件不存在则创建一个文件)</td>
</tr>
<tr>
<td>a+或ab+</td>
<td>以添加方式打开文件，打开文件并在末尾更改文件,若文件不存在则创建文件</td>
</tr>
</tbody></table>
<ul>
<li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li>
<li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li>
<li>在Windows平台下，以“文本”方式打开文件，不加b：<ul>
<li>当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li>
<li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入 </li>
<li>以”二进制”方式打开文件，则读\n写都不会进行这样的转换</li>
</ul>
</li>
<li>在Unix/Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">nt <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">// "\\"这样的路径形式，只能在windows使用</span>
	<span class="token comment">// "/"这样的路径形式，windows和linux平台下都可用，建议使用这种</span>
	<span class="token comment">// 路径可以是相对路径，也可是绝对路径</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"../test"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//fp = fopen("..\\test", "w");</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//返回空，说明打开失败</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//perror()是标准出错打印函数，能打印调用库函数出错原因</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>文件的关闭<ul>
<li>打开的文件会占用内存资源，如果总是打开不关闭，会消耗很多内存</li>
<li>一个进程同时打开的文件数是有限制的，超过最大同时打开文件数，再次调用fopen打开文件会失败</li>
<li>如果没有明确的调用fclose关闭打开的文件，那么程序在退出的时候，操作系统会统一关闭。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：关闭先前<span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>打开的文件。此动作让缓冲区的数据写入文件中，并释放系统所提供的文件资源。
参数：
	stream：文件指针
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

	FILE <span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"abc.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-文件的顺序读写"><a href="#3-文件的顺序读写" class="headerlink" title="3.文件的顺序读写"></a>3.文件的顺序读写</h4><ol>
<li>按照字符读写文件fgetc、fputc</li>
</ol>
<ul>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将ch转换为<span class="token keyword">unsigned</span> <span class="token keyword">char</span>后写入stream指定的文件中
参数：
	ch：需要写入文件的字符
	stream：文件指针
返回值：
	成功：成功写入文件的字符
	失败：返回<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"this is a test for fputc"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//往文件fp写入字符buf[i]</span>
	<span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fputc</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ch = %c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>文件结尾</li>
<li>在C语言中，EOF表示文件结束符(end of file)。在while循环中以EOF作为文件结束标志，这种以EOF作为文件结束标志的文件，必须是文本文件。在文本文件中，数据都是以字符的ASCII代码值的形式存放。我们知道，ASCII代码值的范围是0~127，不可能出现-1，因此可以用EOF作为文件结束标志。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EOF</span>     <span class="token expression"><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ANSI C提供一个feof函数，用来判断文件是否结束。feof函数既可用以判断二进制文件又可用以判断文本文件。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">feof</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：检测是否读取到了文件结尾。判断的是最后一次“读操作的内容”，不是当前位置内容<span class="token punctuation">(</span>上一个内容<span class="token punctuation">)</span>。
参数：
	stream：文件指针
返回值：
	非<span class="token number">0</span>值：已经到文件结尾
	<span class="token number">0</span>：没有到文件结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件中读取一个字符
参数：
	stream：文件指针
返回值：
	成功：返回读取到的字符
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束，则执行循环</span>
<span class="token punctuation">&#123;</span>
	ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>强化训练：实现vi、cat命令（这个可以搞一下）</li>
<li><img src="http://qiniu.orangew.cn/img/wps9088.tmp.jpg" alt="img"></li>
</ul>
<ol start="2">
<li>按照行读写文件fgets、fputs</li>
</ol>
<ul>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：将str所指定的字符串写入到stream指定的文件中，字符串结束符 <span class="token char">'\0'</span>  不写入文件。 
参数：
	str：字符串
	stream：文件指针
返回值：<span class="token number">6</span>
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"123456\n"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbbbbb\n"</span><span class="token punctuation">,</span> <span class="token string">"ccccccccccc\n"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">fputs</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len = %d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件内读入字符，保存到str所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size <span class="token operator">-</span> <span class="token number">1</span>个字符为止，最后会自动加上字符 <span class="token char">'\0'</span> 作为字符串结束。
参数：
	str：字符串
	size：指定最大读取字符串的长度（size <span class="token operator">-</span> <span class="token number">1</span>）
	stream：文件指针
返回值：
	成功：成功读取的字符串
	读到文件尾或出错： <span class="token constant">NULL</span>

<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>强化训练：文件版四则运算（可以写一下）<ul>
<li>有个文件大小不确定，每行内容都是一个四则运算表达式，还没有算出结果，写一个程序，自动算出其结果后修改文件。</li>
<li><img src="http://qiniu.orangew.cn/img/wps2E66.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>按照格式化文件fprintf、fscanf</li>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：根据参数format字符串来转换并格式化数据，然后将结果输出到stream指定的文件中，指定出现字符串结束符 <span class="token char">'\0'</span>  为止。
参数：
	stream：已经打开的文件
	format：字符串格式，用法和<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：实际写入文件的字符个数
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：从stream指定的文件读取字符串，并根据参数format字符串来转换并格式化数据。
参数：
	stream：已经打开的文件
	format：字符串格式，用法和<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>一样
返回值：
	成功：参数数目，成功转换的值的个数
	失败： <span class="token operator">-</span> <span class="token number">1</span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d, c = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><h2 id="强化训练：文件版排序"><a href="#强化训练：文件版排序" class="headerlink" title="强化训练：文件版排序"></a>强化训练：文件版排序</h2><ul>
<li><img src="http://qiniu.orangew.cn/img/wps605F.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>按照块读写文件fread、fwrite</li>
<li>写文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：以数据块的方式给文件写入内容
参数：
	ptr：准备写入文件数据的地址
	size： <span class="token class-name">size_t</span> 为 <span class="token keyword">unsigned</span> <span class="token keyword">int</span>类型，此参数指定写入文件内容的块数据大小
	nmemb：写入文件的块数，写入文件数据总大小为：size <span class="token operator">*</span> nmemb
	stream：已经打开的文件指针
返回值：
	成功：实际成功写入文件数据的块数目，此值和 nmemb 相等
	失败：<span class="token number">0</span>


<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"stu%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>读文件</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：以数据块的方式从文件中读取内容
参数：
	ptr：存放读取出来数据的内存空间
	size： <span class="token class-name">size_t</span> 为 <span class="token keyword">unsigned</span> <span class="token keyword">int</span>类型，此参数指定读取文件内容的块数据大小
	nmemb：读取文件的块数，读取文件数据总大小为：size <span class="token operator">*</span> nmemb
	stream：已经打开的文件指针
返回值：
	成功：实际成功读取到内容的块数，如果此值比nmemb小，但大于<span class="token number">0</span>，说明读到文件的结尾。
	失败：<span class="token number">0</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s = %s, %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>强化训练：大文件拷贝<ul>
<li><img src="http://qiniu.orangew.cn/img/wpsB15A.tmp.jpg" alt="img"></li>
</ul>
</li>
</ul>
<h4 id="4-文件的随机读写"><a href="#4-文件的随机读写" class="headerlink" title="4.文件的随机读写"></a>4.文件的随机读写</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：移动文件流（文件光标）的读写位置。
参数：
	stream：已经打开的文件指针
	offset：根据whence来移动的位移数（偏移量），可以是正数，也可以负数，如果正数，则相对于whence往右移动，如果是负数，则相对于whence往左移动。如果向前移动的字节数超过了文件开头则出错返回，如果向后移动的字节数超过了文件末尾，再次写入时将增大文件尺寸。
	whence：其取值如下：
		<span class="token constant">SEEK_SET</span>：从文件开头移动offset个字节
		<span class="token constant">SEEK_CUR</span>：从当前位置移动offset个字节
		<span class="token constant">SEEK_END</span>：从文件末尾移动offset个字节
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：获取文件流（文件光标）的读写位置。
参数：
	stream：已经打开的文件指针
返回值：
	成功：当前文件流（文件光标）的读写位置
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把文件流（文件光标）的读写位置移动到文件开头。
参数：
	stream：已经打开的文件指针
返回值：
	无返回值

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

<span class="token comment">//假如已经往文件写入3个结构体</span>
<span class="token comment">//fwrite(s, sizeof(Stu), 3, fp);</span>

Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Stu tmp<span class="token punctuation">;</span> 
<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">//文件光标读写位置从开头往右移动2个结构体的位置</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读第3个结构体</span>
ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[tmp]%s, %d\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//把文件光标移动到文件开头</span>
<span class="token comment">//fseek(fp, 0, SEEK_SET);</span>
<span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

ret <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stu<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s === %s, %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="5-Windows和Linux文本文件区别"><a href="#5-Windows和Linux文本文件区别" class="headerlink" title="5.Windows和Linux文本文件区别"></a>5.Windows和Linux文本文件区别</h4><ul>
<li>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</li>
<li>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</li>
<li>在Windows平台下，以“文本”方式打开文件，不加b：<ul>
<li>当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li>
<li>当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入 </li>
<li>以”二进制”方式打开文件，则读\写都不会进行这样的转换</li>
</ul>
</li>
<li>在Unix/Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</li>
</ul>
<ul>
<li>判断文本文件是Linux格式还是Windows格式:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	FILE <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token function">fgets</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\r'</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"windows file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"linux file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		len<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">fclose</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="6-获取文件状态"><a href="#6-获取文件状态" class="headerlink" title="6.获取文件状态"></a>6.获取文件状态</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：获取文件状态信息
参数：
path：文件名
buf：保存文件信息的结构体
返回值：
成功：<span class="token number">0</span>
失败<span class="token operator">-</span><span class="token number">1</span>

<span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">dev_t</span>         st_dev<span class="token punctuation">;</span>         <span class="token comment">//文件的设备编号</span>
	<span class="token class-name">ino_t</span>         st_ino<span class="token punctuation">;</span>          <span class="token comment">//节点</span>
	<span class="token class-name">mode_t</span>        st_mode<span class="token punctuation">;</span>   <span class="token comment">//文件的类型和存取的权限</span>
	<span class="token class-name">nlink_t</span>       st_nlink<span class="token punctuation">;</span>     <span class="token comment">//连到该文件的硬连接数目，刚建立的文件值为1</span>
	<span class="token class-name">uid_t</span>         st_uid<span class="token punctuation">;</span>         <span class="token comment">//用户ID</span>
	<span class="token class-name">gid_t</span>         st_gid<span class="token punctuation">;</span>         <span class="token comment">//组ID</span>
	<span class="token class-name">dev_t</span>         st_rdev<span class="token punctuation">;</span>      <span class="token comment">//(设备类型)若此文件为设备文件，则为其设备编号</span>
	<span class="token class-name">off_t</span>         st_size<span class="token punctuation">;</span>        <span class="token comment">//文件字节数(文件大小)</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> st_blksize<span class="token punctuation">;</span>   <span class="token comment">//块大小(文件系统的I/O 缓冲区大小)</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> st_blocks<span class="token punctuation">;</span>    <span class="token comment">//块数</span>
	<span class="token class-name">time_t</span>        st_atime<span class="token punctuation">;</span>     <span class="token comment">//最后一次访问时间</span>
	<span class="token class-name">time_t</span>        st_mtime<span class="token punctuation">;</span>    <span class="token comment">//最后一次修改时间</span>
	<span class="token class-name">time_t</span>        st_ctime<span class="token punctuation">;</span>     <span class="token comment">//最后一次改变时间(指属性)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">stat</span> st <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">stat</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> st<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span><span class="token comment">//得到结构体中的成员变量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="7-删除文件、重命名文件名"><a href="#7-删除文件、重命名文件名" class="headerlink" title="7.删除文件、重命名文件名"></a>7.删除文件、重命名文件名</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：删除文件
参数：
	pathname：文件名
返回值：
	成功：<span class="token number">0</span>
	失败：<span class="token operator">-</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>oldpath<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>newpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：把oldpath的文件名改为newpath
参数：
oldpath：旧文件名
newpath：新文件名
返回值：
成功：<span class="token number">0</span>
失败： <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="8-文件缓冲区"><a href="#8-文件缓冲区" class="headerlink" title="8.文件缓冲区"></a>8.文件缓冲区</h4><ol>
<li>文件缓冲区<ul>
<li>ANSI C标准采用“缓冲文件系统”处理数据文件。</li>
<li>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</li>
<li>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。</li>
</ul>
</li>
<li>磁盘文件的存取<ul>
<li><img src="http://qiniu.orangew.cn/img/wps8F97.tmp.jpg" alt="img"></li>
<li>磁盘文件，一般保存在硬盘、U盘等掉电不丢失的磁盘设备中，在需要时调入内存</li>
<li>在内存中对文件进行编辑处理后，保存到磁盘中</li>
<li>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率</li>
</ul>
</li>
<li>更新缓冲区</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>
<span class="token keyword">int</span> <span class="token function">fflush</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：更新缓冲区，让缓冲区的数据立马写到文件中。
参数：
stream：文件指针
返回值：
成功：<span class="token number">0</span>
失败：<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础教程整理</title>
    <url>/2022/07/01/C-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="C语言提高"><a href="#C语言提高" class="headerlink" title="C语言提高"></a>C语言提高</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>B站黑马教程资料总结</li>
<li> [Linux C 函数.chm](C-基础教程整理\07_Linux C 函数.chm) </li>
</ul>
<h3 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h3><h4 id="数据类型本质分析"><a href="#数据类型本质分析" class="headerlink" title="数据类型本质分析"></a>数据类型本质分析</h4><h5 id="数据类型概念"><a href="#数据类型概念" class="headerlink" title="数据类型概念"></a>数据类型概念</h5><ul>
<li> “类型”是对数据的抽象 </li>
<li> 类型相同的数据有相同的表示形式、存储格式以及相关的操作 </li>
<li> 程序中使用的所有数据都必定属于某一种数据类型 </li>
<li><img src="http://qiniu.orangew.cn/img/wps39B3.tmp.jpg" alt="img"></li>
</ul>
<h5 id="数据类型的本质"><a href="#数据类型的本质" class="headerlink" title="数据类型的本质"></a>数据类型的本质</h5><ul>
<li>数据类型可理解为创建变量的模具：是固定内存大小的别名。</li>
<li>数据类型的作用：编译器预算对象（变量）分配的内存空间大小</li>
<li>注意：数据类型只是模具，编译器并没有分配空间，只有根据类型（模具）创建变量（实物），编译器才会分配空间。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//告诉编译器，分配4个字节的内存</span>
    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//告诉编译器，分配4*10 = 40 个字节的内存</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b:%p, b+1: %p, &amp;b:%p, &amp;b+1: %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//b+1 和 &amp;b+1的结果不一样 </span>
    <span class="token comment">//是因为 b 和 &amp;b 所代表的数据类型不一样</span>
    <span class="token comment">//b  代表数组首元素的地址</span>
    <span class="token comment">//&amp;b 代表整体数组的地址</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><img src="http://qiniu.orangew.cn/img/20220702085501.png" alt="20220702085501"></li>
</ul>
<h5 id="数据类型的大小"><a href="#数据类型的大小" class="headerlink" title="数据类型的大小"></a>数据类型的大小</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//告诉编译器，分配4个字节的内存</span>
    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//告诉编译器，分配4*10 = 40 个字节的内存</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(int *):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b[0]):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(*b):%d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><img src="http://qiniu.orangew.cn/img/20220702090155.png" alt="20220702090155"></li>
<li>sizeof是操作符，不是函数；sizeof测量的实体大小为编译期间就已确定。</li>
</ul>
<h5 id="数据类型的别名"><a href="#数据类型的别名" class="headerlink" title="数据类型的别名"></a>数据类型的别名</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">People</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">People</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">people_t</span><span class="token punctuation">;</span>
<span class="token comment">/* 给结构体类型起别名 */</span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u32<span class="token punctuation">;</span>   <span class="token comment">//给unsigned int类型取别名</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">People</span> p1<span class="token punctuation">;</span> 
    <span class="token class-name">people_t</span> p2<span class="token punctuation">;</span>
    u32 a<span class="token punctuation">;</span>      

    p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    
    p2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        

    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                 

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="数据类型的封装"><a href="#数据类型的封装" class="headerlink" title="数据类型的封装"></a>数据类型的封装</h5><ul>
<li> void的字面意思是“无类型”，void *则为“无类型指针”，void *可以指向任何类型的数据。</li>
</ul>
<ol>
<li>用法1：数据类型的封装</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InitHardEnv</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>典型的如内存操作函数memcpy和memset的函数原型分别为</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memset</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>用法2：void修饰函数返回值和参数，仅表示无<ul>
<li>如果函数没有返回值，那么应该将其声明为void型</li>
<li>如果函数没有参数，应该声明其参数为void</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">function2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>void指针的意义<ul>
<li>C语言规定只有相同类型的指针才可以相互赋值</li>
<li>void * 指针作为左值用于“接收”任意类型的指针</li>
<li>void * 指针作为右值赋值给其它指针时需要强制类型转换</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
<span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">sizoeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>不存在void类型的变量</li>
<li>C语言没有定义void究竟是多大内存的别名</li>
</ul>
<h5 id="数类型的总结与拓展"><a href="#数类型的总结与拓展" class="headerlink" title="数类型的总结与拓展"></a>数类型的总结与拓展</h5><blockquote>
<p>​    1、数据类型本质是固定内存大小的别名，是个模具，c语言规定：通过数据类型定义变量。</p>
<p>​    2、数据类型大小计算（sizeof）</p>
<p>​    3、可以给已存在的数据类型起别名typedef</p>
<p>​    4、数据类型封装概念（void 万能类型）</p>
</blockquote>
<h4 id="变量的本质分析"><a href="#变量的本质分析" class="headerlink" title="变量的本质分析"></a>变量的本质分析</h4><h5 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h5><ul>
<li>概念：既能读又能写的内存对象，称为变量；若一旦初始化后不能修改的对象则称为常量。</li>
<li>变量定义形式：   类型 标识符, 标识符, … , 标识符 ; </li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>   	x<span class="token punctuation">;</span>
<span class="token keyword">int</span>   	wordCut<span class="token punctuation">,</span>  Radius<span class="token punctuation">,</span>  Height<span class="token punctuation">;</span>       
<span class="token keyword">double</span>   FlightTime<span class="token punctuation">,</span>  Mileage<span class="token punctuation">,</span>  Speed<span class="token punctuation">;</span>    
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">double</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h5><ol>
<li>程序通过变量来申请和命名内存空间 int a = 0。</li>
<li>通过变量名访问内存空间。</li>
<li>变量：一段连续内存空间的别名.</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 通过变量直接操作内存</span>
	i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;i:%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p:%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 通过内存编号间接操作内存</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, *p = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>数据类型和变量的关系<ul>
<li>通过数据类型定义变量</li>
</ul>
</li>
<li>总结</li>
</ol>
<blockquote>
<p>1 对内存，可读可写；</p>
<p>2 通过变量往内存读写数据；</p>
<p>3 不是向变量读写数据，而是向变量所代表的内存空间中写数据。</p>
</blockquote>
<h4 id="程序的内存四区模型"><a href="#程序的内存四区模型" class="headerlink" title="程序的内存四区模型"></a>程序的内存四区模型</h4><p><img src="http://qiniu.orangew.cn/img/wpsE914.tmp.jpg" alt="img"></p>
<ul>
<li><p>流程说明</p>
<ul>
<li><p>操作系统把物理硬盘代码load到内存</p>
</li>
<li><p>操作系统把c代码分成四个区</p>
</li>
<li><p><img src="file:///C:\Users\10559\AppData\Local\Temp\ksohtml\wps9FF2.tmp.jpg" alt="img"></p>
</li>
<li><p>操作系统找到main函数入口执行</p>
</li>
<li><p>建立正确程序运行内存布局图是学好C的关键</p>
</li>
</ul>
</li>
</ul>
<h5 id="栈区和堆区"><a href="#栈区和堆区" class="headerlink" title="栈区和堆区"></a>栈区和堆区</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//堆</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                   
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                
    <span class="token punctuation">&#125;</span>                                   
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>      
<span class="token punctuation">&#125;</span>

<span class="token comment">//栈</span>

<span class="token comment">//注意 return不是把内存块 64个字节,给return出来</span>
<span class="token comment">//而是把内存块的首地址(比如内存的编号0xaa11) ，返回给 tmp</span>
<span class="token comment">// 理解指针的关键是内存，没有内存哪里来的指针 </span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//临时变量 栈区存放</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//printf("buf:%s\n", buf);</span>
    <span class="token keyword">return</span> buf<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                   
        <span class="token keyword">return</span> <span class="token punctuation">;</span>                    
    <span class="token punctuation">&#125;</span>                                   
    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"111222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向tmp做指向的内存空间中copy数据</span>

    tmp <span class="token operator">=</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//tmp = 0xaa11;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="全局区"><a href="#全局区" class="headerlink" title="全局区"></a>全局区</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token string">"abcdefg2"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token string">"abcdefg2"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token function">getStr1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> <span class="token function">getStr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//打印p1 p2 所指向内存空间的数据</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%s , p2:%s \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//打印p1 p2 的值</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p , p2:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="函数的调用模型"><a href="#函数的调用模型" class="headerlink" title="函数的调用模型"></a>函数的调用模型</h5><ul>
<li><img src="http://qiniu.orangew.cn/img/wpsFE.tmp.jpg" alt="img"></li>
</ul>
<h5 id="函数调用变量传递分析"><a href="#函数调用变量传递分析" class="headerlink" title="函数调用变量传递分析"></a>函数调用变量传递分析</h5><ol>
<li><p><img src="http://qiniu.orangew.cn/img/wps2BC3.tmp.png" alt="img"></p>
</li>
<li><p> <img src="http://qiniu.orangew.cn/img/wpsCC98.tmp.png" alt="img"></p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wps996F.tmp.png" alt="img"></p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wps6422.tmp.png" alt="img"></p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wpsBE4A.tmp.png" alt="img"></p>
</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wps2E6A.tmp.jpg" alt="img"> </p>
<ol>
<li>main函数中可以在栈/堆/全局分配内存，都可以被func1和func2使用</li>
<li>func2在栈上分配的内存，不能被func1和main函数使用</li>
<li>func2中malloc的内存(堆),可以被main和func1函数使用</li>
<li>func2中全局分配“abcdefg”(常量全局区)内存，可以被func1和main函数使用</li>
</ol>
<h5 id="栈的生长方向和内存存放方向"><a href="#栈的生长方向和内存存放方向" class="headerlink" title="栈的生长方向和内存存放方向"></a>栈的生长方向和内存存放方向</h5><p><img src="http://qiniu.orangew.cn/img/wpsC94E.tmp.png" alt="img"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>

    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;b: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf的地址 : %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf+1地址: %p \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><h4 id="指针强化"><a href="#指针强化" class="headerlink" title="指针强化"></a>指针强化</h4><h5 id="指针是一种数据类型"><a href="#指针是一种数据类型" class="headerlink" title="指针是一种数据类型"></a>指针是一种数据类型</h5><ol>
<li><p>指针变量也是一种变量，占有内存空间，用来保存内存地址</p>
<p>测试指针变量占有内存空间大小。</p>
</li>
<li><p>*p操作内存</p>
</li>
</ol>
<blockquote>
<p>在指针声明时，* 号表示所声明的变量为指针</p>
<p>在指针使用时，* 号表示操作指针所指向的内存空间中的值</p>
</blockquote>
<ul>
<li>*p相当于通过地址(p变量的值)找到一块内存，然后操作内存</li>
<li>*p放在等号的左边赋值（给内存赋值，写内存）</li>
<li>*p放在等号的右边取值（从内存获取值，读内存）</li>
</ul>
<ol start="3">
<li>指针变量和它指向的内存块是两个不同的概念。</li>
</ol>
<blockquote>
<p>​        规则1： 给p赋值p=0x1111; 只会改变指针变量值，不会改变所指的内容；</p>
<p>​        p = p +1; //p++</p>
<p>​        规则2 ：给*p赋值 *p=’a’; 不会改变指针变量的值，只会改变所指的内存块的值 </p>
<p>​        规则3 ：= 左边 *p 表示 给内存赋值， = 右边 *p 表示取值，含义不同切记！</p>
<p>​        规则4 ：保证所指的内存块能修改</p>
</blockquote>
<ol start="4">
<li>指针是一种数据类型，是指它指向的内存空间的数据类型 。</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> 
p<span class="token operator">++</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>指针步长（p++），根据所致内存空间的数据类型来确定。</li>
<li>p++ 等价于 (unsigned char )p+sizeof(a);    </li>
</ul>
<ol start="5">
<li>当我们不断的给指针变量赋值，就是不断的改变指针变量（和所指向内存空间没有任何关系）。指针指向谁，就把谁的地址赋值给指针。</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>


<span class="token comment">//不断给指针赋值就是不断改变指针的指向</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     i<span class="token punctuation">;</span>

    <span class="token keyword">char</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//不断的修改p1的值 相当于 不断改变指针的指向</span>
    p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//不断改变p1本身变量</span>
        p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token string">"abcdefg1212333333333311"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//不断的改变p1本身变量，跟p1指向的内存块无关</span>
        p1 <span class="token operator">=</span> p2<span class="token operator">+</span>i<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>不允许向NULL和未知非法地址拷贝内存。</li>
</ol>
<h5 id="简接赋值-p-是指针存在的最大意义"><a href="#简接赋值-p-是指针存在的最大意义" class="headerlink" title="简接赋值(* p)是指针存在的最大意义"></a>简接赋值(* p)是指针存在的最大意义</h5><blockquote>
<p>*p间接赋值成立条件： 三大条件 </p>
<p>条件一： 2个变量（通常一个实参，一个形参）</p>
<p>条件二：建立关系，实参取地址赋给形参指针 </p>
<p>条件三：*p形参去间接修改实参的值 </p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">// 条件一：两个变量</span>
            
p <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>       <span class="token comment">// 条件二：建立关系</span>

Num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>        <span class="token comment">// 条件三：通过* 操作符， 间接的给变量内存赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>间接操作：从0级指针到1级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//使用一级指针</span>
<span class="token keyword">void</span>  <span class="token function">getFileLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">41</span><span class="token punctuation">;</span>    <span class="token comment">//  p的值是file_len的地址 *p的地址间接修改file_len的值 </span>
                     <span class="token comment">//在被调用函数里面 通过形参 去 间接的修改 实参的值...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span>  <span class="token function">getFileLen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//不使用指针， 0级指针</span>
<span class="token keyword">void</span>  <span class="token function">getFileLen3</span><span class="token punctuation">(</span><span class="token keyword">int</span> file_len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    file_len <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//1级指针的技术推演</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> file_len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment">//条件1  定义了两个变量(实参 另外一个变量是形参p)</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    p <span class="token operator">=</span> <span class="token operator">&amp;</span>file_len<span class="token punctuation">;</span>          <span class="token comment">//条件2 建立关联</span>

    file_len <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token comment">//直接修改</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>               <span class="token comment">//条件3 p的值是file_len的地址 </span>
                           <span class="token comment">//      *就像一把钥匙 通过地址 </span>
                           <span class="token comment">//      找到一块内存空间 间接的修改了file_len的值</span>

    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>  <span class="token comment">//  p的值是a的地址 *a的地址间接修改a的值  //条件3 *p</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"file_len: %d\n"</span><span class="token punctuation">,</span> file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">getFileLen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file_len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//建立关联: 把实参取地址 传递给 形参</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getFileLen后 file_len: %d \n"</span><span class="token punctuation">,</span> file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getFileLen3</span><span class="token punctuation">(</span>file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getFileLen3后 file_len: %d \n"</span><span class="token punctuation">,</span> file_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>间接操作：从1级别指针到2级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>


<span class="token keyword">void</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    p2 <span class="token operator">=</span> <span class="token number">0x80088008</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0x40044004</span><span class="token punctuation">;</span> <span class="token comment">//间接赋值  p2是p1的地址</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token comment">//直接修改p1的值</span>
    p1 <span class="token operator">=</span> <span class="token number">0x11001100</span><span class="token punctuation">;</span>

    <span class="token comment">//间接修改p1的值</span>
    p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">;</span>

    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0x10101010</span><span class="token punctuation">;</span>    <span class="token comment">//间接赋值  p2是p1的地址</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">0x20022002</span><span class="token punctuation">;</span> <span class="token comment">//间接赋值  p2是p1的地址</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">getMem</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">getMem2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%p \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>函数调用时，形参传给实参，用实参取地址，传给形参，在被调用函数里面用*p，来改变实参，把运算结果传出来。</p>
</blockquote>
<ul>
<li>间接赋值的推论</li>
</ul>
<blockquote>
<p>用1级指针形参，去间接修改了0级指针(实参)的值。</p>
<p>用2级指针形参，去间接修改了1级指针(实参)的值。</p>
<p>用3级指针形参，去间接修改了2级指针(实参)的值。</p>
<p>用n级指针形参，去间接修改了n-1级指针(实参)的值。</p>
</blockquote>
<ul>
<li>间接操作：应用场景<ul>
<li>正常：    条件一，条件二，条件三都写在一个函数里。</li>
<li>间接赋值：条件一，条件二写在一个函数里， 条件三写在另一个函数里</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">/* 间接赋值成立的三个条件
   条件1    定义1个变量（实参） 
   条件2    建立关联：把实参取地址传给形参
   条件3：  *形参去间接地的修改了实参的值。
 */</span>
<span class="token keyword">void</span> <span class="token function">copy_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p1 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
        p2<span class="token operator">++</span><span class="token punctuation">;</span>
        p1<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//间接赋值的应用场景</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//1写在一个函数中 2作为形参建立关联   3 单独写在另外一个函数里面 </span>
    <span class="token keyword">char</span> from<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> to<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token string">"1122233133332fafdsafas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copy_str</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"to:%s \n"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="理解指针必须和内存四区概念结合"><a href="#理解指针必须和内存四区概念结合" class="headerlink" title="理解指针必须和内存四区概念结合"></a>理解指针必须和内存四区概念结合</h5><ol>
<li>主调函数 被调函数 <ul>
<li>主调函数可把堆区、栈区、全局数据内存地址传给被调用函数</li>
<li>被调用函数只能返回堆区、全局数据</li>
</ul>
</li>
<li>内存分配方式<ul>
<li>指针做函数参数，是有输入和输出特性的。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>mylen1<span class="token punctuation">,</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>mylen2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>tmp1<span class="token punctuation">,</span> <span class="token operator">*</span>tmp2<span class="token punctuation">;</span>

    tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token string">"1132233"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//间接赋值 </span>
    <span class="token operator">*</span>mylen1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1级指针</span>
    <span class="token operator">*</span>myp1 <span class="token operator">=</span> tmp1<span class="token punctuation">;</span>            <span class="token comment">//2级指针的间接赋值</span>

    tmp2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> <span class="token string">"aaaaavbdddddddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>mylen2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1级指针</span>
    <span class="token operator">*</span>myp2 <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>            <span class="token comment">//2级指针的间接赋值</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func getMem() err:%d \n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1:%s \n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2:%s \n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="应用指针必须和函数调用相结合（指针做函数参数）"><a href="#应用指针必须和函数调用相结合（指针做函数参数）" class="headerlink" title="应用指针必须和函数调用相结合（指针做函数参数）"></a>应用指针必须和函数调用相结合（指针做函数参数）</h5><ul>
<li><p>指针作为函数参数是研究指针的重点。</p>
</li>
<li><p>一级指针典型用法:</p>
<ul>
<li><p>一级指针做输入</p>
</li>
<li><blockquote>
<p>int showbuf(char *p);</p>
<p>int showArray(int *array, int iNum);</p>
</blockquote>
</li>
<li><p>一级指针做输出</p>
</li>
<li><blockquote>
<p>int getLen(char *pFileName, int *pfileLen);</p>
</blockquote>
<blockquote>
<p>理解</p>
<p>​        输入：主调函数分配内存</p>
<p>​        输出：被调用函数分配内存</p>
<p>​        被调用函数是在heap上分配内存而非stack上</p>
</blockquote>
</li>
</ul>
</li>
<li><p>二级指针典型用法</p>
<ul>
<li><p>二级指针做输入</p>
</li>
<li><blockquote>
<p>int main(int arc ,char * arg[]);     //字符串数组</p>
<p>int shouMatrix(int [3] [4], int iLine);</p>
</blockquote>
</li>
<li><p>二级指针做输出</p>
</li>
<li><blockquote>
<p>int Demo64_GetTeacher(Teacher **ppTeacher);</p>
<p>int Demo65_GetTeacher_Free(Teacher **ppTeacher);</p>
<p>int getData(char **data, int *dataLen);</p>
<p>int getData_Free(void *data);</p>
<p>int getData_Free2(void **data);       //避免野指针</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4 id="经典语录"><a href="#经典语录" class="headerlink" title="经典语录"></a>经典语录</h4><blockquote>
<p>1）指针也是一种数据类型，指针的数据类型是指它所指向内存空间的数据类型</p>
<p>2）间接赋值*p是指针存在的最大意义 </p>
<p>3）理解指针必须和内存四区概念相结合 </p>
<p>4）应用指针必须和函数调用相结合（指针做函数参数）</p>
<p>指针是子弹，函数是枪管；子弹只有沿着枪管发射才能显示它的威力；指针的学习重点不言而喻了吧。接口的封装和设计、模块的划分、解决实际应用问题；它是你的工具。</p>
<p>5）指针指向谁就把谁的地址赋给指针 </p>
<p>6）C/C++语言有它自己的学习特点；若java语言的学习特点是学习、应用、上项目；那么C/C++语言的学习特点是：学习、理解、应用、上项目。多了一个步骤。</p>
<p>7)理解指针关键在内存，没有内存哪来的内存首地址，没有内存首地址，哪来的指针。</p>
</blockquote>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h4><h5 id="字符串数组初始化方法"><a href="#字符串数组初始化方法" class="headerlink" title="字符串数组初始化方法"></a>字符串数组初始化方法</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//一级指针的典型用法</span>
<span class="token comment">//字符串 </span>
<span class="token comment">//1 C语言的字符串 以零'\0'结尾的字符串</span>
<span class="token comment">//2 在C语言中没有字符串类型  通过字符数组 来模拟字符串 </span>
<span class="token comment">//3 字符串的内存分配  堆上 栈上 全局区 </span>

<span class="token comment">//字符数组 初始化</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//1 不指定长度  C编译器会自动帮程序员 求元素的个数</span>
    <span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//buf1是一个数组 不是一个以0结尾的字符串</span>

    <span class="token comment">//2 指定长度  </span>
    <span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">//后面的buf2[4]-buf2[99] 个字节均默认填充0</span>

    <span class="token comment">//char buf3[2] = &#123;'a', 'b', 'c', 'd'&#125;; </span>
    <span class="token comment">//如果初始化的个数大于内存的个数 编译错误</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf1: %s\n"</span><span class="token punctuation">,</span> buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2: %s \n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2[88]:%d \n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//3 用字符串初始化 字符数组</span>
    <span class="token keyword">char</span> buf3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>       <span class="token comment">//buf3 作为字符数组 有5个字节</span>
                                <span class="token comment">//      作为字符串有 4个字节</span>

    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf3字符的长度:%d \n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4</span>

    <span class="token comment">//buf3 作为数组 数组是一种数据类型 本质(固定小大内存块的别名)</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf3数组所占内存空间大小:%d \n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//5</span>


    <span class="token keyword">char</span> buf4<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span> <span class="token comment">// buf</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf4[100]:%d \n"</span><span class="token punctuation">,</span> buf4<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>sizeof 和 strlen的区别</p>
</li>
<li><blockquote>
<ol>
<li><p>sizeof为一个操作符，执行sizeof的结果，在编译期间就已经确定；</p>
<p>strlen是一个函数，是在程序执行的时候才确定结果。</p>
</li>
<li><p>sizeof和strlen对于求字符串来讲，sizeof() 字符串类型的大小，包括’\0’；strlen() 字符串的长度不包括‘\0’（数字 0 和字符‘\0’等价）。</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<h5 id="数组法和指针法操作字符串"><a href="#数组法和指针法操作字符串" class="headerlink" title="数组法和指针法操作字符串"></a>数组法和指针法操作字符串</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    <span class="token keyword">char</span>    buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>  

    <span class="token comment">//通过[]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                       
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          
    <span class="token punctuation">&#125;</span>                                       
                        
    p <span class="token operator">=</span> buf<span class="token punctuation">;</span> <span class="token comment">//buf 代表数组首元素的地址</span>
    <span class="token comment">//通过指针</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                                                          
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>                            
    <span class="token punctuation">&#125;</span>                                                       

    <span class="token comment">//通过数组首元素地址 buf 来操作</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                                   
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>buf<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>                                                   
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>[]</code> 的本质 和 <code>*p</code> 是一样。</li>
<li><code>buf</code> 是一个指针，只读的常量。之所以<code>buf</code>是一个常量指针是为了释放内存的时候,保证<code>buf</code>所指向的内存空间安全。</li>
</ul>
<h4 id="字符串做函数参数"><a href="#字符串做函数参数" class="headerlink" title="字符串做函数参数"></a>字符串做函数参数</h4><ul>
<li>数组偏移来拷贝</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"i am a student"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//0没有copy到b的buf中.</span>

    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//重要</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%s \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b:%s \n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>用一个一级指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//字符串copy函数</span>

<span class="token comment">//form形参 形参to 的值 不停的在变化....</span>
<span class="token comment">//不断的修改了from和to的指向</span>
<span class="token keyword">void</span> <span class="token function">copy_str1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span> from<span class="token operator">++</span><span class="token punctuation">,</span> to<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">copy_str2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//  先 *to = *from;  再from++, to++ </span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> 

    <span class="token keyword">return</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str3</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        from <span class="token operator">++</span><span class="token punctuation">;</span>
        to <span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str4</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str5</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//*(0) = 'a';</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">copy_str5_err</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//*(0) = 'a';</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from:%s \n"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//不要轻易改变形参的值, 要引入一个辅助的指针变量. 把形参给接过来.....</span>
<span class="token keyword">int</span> <span class="token function">copy_str6</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//*(0) = 'a';</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tmpfrom <span class="token operator">=</span> from<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>tmpto <span class="token operator">=</span> to<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> from <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> to <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>tmpto<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>tmpfrom<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">//空语句</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from:%s \n"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>from <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
    <span class="token function">copy_str1</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str2</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str3</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str4</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">copy_str5</span><span class="token punctuation">(</span>from <span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf:%s \n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token comment">//错误案例</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>myto <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//要分配内存</span>
        <span class="token comment">//copy_str25(from,myto);</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>myto <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//要分配内存</span>

        ret <span class="token operator">=</span> <span class="token function">copy_str6</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> myto<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func copy_str6() err:%d  "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
	
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="项目开发常用字符串应用模型"><a href="#项目开发常用字符串应用模型" class="headerlink" title="项目开发常用字符串应用模型"></a>项目开发常用字符串应用模型</h4><h5 id="strstr中的while和do-while模型"><a href="#strstr中的while和do-while模型" class="headerlink" title="strstr中的while和do-while模型"></a>strstr中的while和do-while模型</h5><ul>
<li>利用strstr标准库函数找出一个字符串中substr出现的个数。</li>
<li>do-while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//strstr(str, str2)</span>

    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//初始化 让p指针达到查找的条件</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"11abcd111122abcd3333322abcd3333322qqq"</span><span class="token punctuation">;</span>

    <span class="token keyword">do</span>
    <span class="token punctuation">&#123;</span>
        p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ncount<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//</span>
            p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指针达到下次查找的条件</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ncount:%d \n"</span><span class="token punctuation">,</span> ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>while模型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//初始化 让p指针达到查找的条件</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"2abcd3333322qqqabcd"</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ncount <span class="token operator">++</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//让p指针达到查找的条件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ncount:%d \n"</span><span class="token punctuation">,</span> ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="两头堵模型"><a href="#两头堵模型" class="headerlink" title="两头堵模型"></a>两头堵模型</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>

<span class="token keyword">int</span> <span class="token function">get_count_non_space</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> count_p<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> count_p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"str == NULL, count_p == NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    ncount <span class="token operator">=</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token operator">*</span>count_p <span class="token operator">=</span> ncount<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"      abcdefg      "</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ncount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">get_count_non_space</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"get_count_non_space err, ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ncount = %d\n"</span><span class="token punctuation">,</span> ncount<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="字符串反转模型"><a href="#字符串反转模型" class="headerlink" title="字符串反转模型"></a>字符串反转模型</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">inverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> tmp_ch<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    p1 <span class="token operator">=</span> str<span class="token punctuation">;</span>
    p2 <span class="token operator">=</span> str <span class="token operator">+</span> length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tmp_ch <span class="token operator">=</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span>
        <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">*</span>p2<span class="token punctuation">;</span>
        <span class="token operator">*</span>p2 <span class="token operator">=</span> tmp_ch<span class="token punctuation">;</span>
        <span class="token operator">++</span>p1<span class="token punctuation">;</span>
        <span class="token operator">--</span>p2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="递归思想"><a href="#递归思想" class="headerlink" title="递归思想"></a>递归思想</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">char</span> g_buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">//3 递归和非全局变量</span>
<span class="token keyword">int</span> <span class="token function">inverse4</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>dst<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归技术的条件</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inverse4</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span>  <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">strncat</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//2 递归和全局变量(把逆序的结果放在全局变量里)</span>
<span class="token keyword">int</span> <span class="token function">inverse3</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归技术的条件</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inverse3</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">strncat</span><span class="token punctuation">(</span>g_buf<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//1 通过递归的方式逆序打印</span>
<span class="token keyword">int</span> <span class="token function">inverse2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 递归技术的条件</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inverse2</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> dst_buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// test inverse()</span>
    <span class="token comment">//printf("buf : %s\n", inverse(buf));</span>

    <span class="token comment">// test inverse2();</span>
    <span class="token comment">//inverse2(buf);</span>

    <span class="token comment">// test inverse3();</span>
    <span class="token comment">//inverse3(buf);</span>
    <span class="token comment">//printf("g_buf : %s\n", g_buf);</span>

    <span class="token comment">// test inverse4();</span>
    <span class="token function">inverse4</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> dst_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dst_buf : %s\n"</span><span class="token punctuation">,</span> dst_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="一级指针-char-易错地方"><a href="#一级指针-char-易错地方" class="headerlink" title="一级指针(char*)易错地方"></a>一级指针(char*)易错地方</h4><h5 id="对空字符串和非法字符串的判断"><a href="#对空字符串和非法字符串的判断" class="headerlink" title="对空字符串和非法字符串的判断"></a>对空字符串和非法字符串的判断</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">copy_str</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>from <span class="token operator">==</span> <span class="token char">'\0'</span> <span class="token operator">||</span> <span class="token operator">*</span>to <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func copy_str() err\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span> from<span class="token operator">++</span><span class="token punctuation">,</span> to<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span><span class="token string">"aabbccdd"</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> to<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">copy_str</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"to : %s\n"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="越界"><a href="#越界" class="headerlink" title="越界"></a>越界</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="指针的叠加会不断改变指针的方向"><a href="#指针的叠加会不断改变指针的方向" class="headerlink" title="指针的叠加会不断改变指针的方向"></a>指针的叠加会不断改变指针的方向</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">getKeyByValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>keyvaluebuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>keybuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token operator">*</span>keyvaluebuf <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token operator">*</span>a<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyvaluebuf<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>           

    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   

<span class="token keyword">void</span> <span class="token function">copy_str_err</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token operator">*</span>from<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">;</span> from<span class="token operator">++</span><span class="token punctuation">,</span> to<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>           
        <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>        
    <span class="token punctuation">&#125;</span>                           
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"to:%s"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from:%s"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="局部变量不要外传"><a href="#局部变量不要外传" class="headerlink" title="局部变量不要外传"></a>局部变量不要外传</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">my_stract</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>z<span class="token operator">=</span>str<span class="token punctuation">;</span>           <span class="token comment">/*指针z指向数组str*/</span>  

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    z<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token comment">/*去掉串尾结束标志*/</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    z<span class="token operator">=</span>str<span class="token punctuation">;</span>                 <span class="token comment">/*将str地址赋给指针变量z*/</span>

    <span class="token keyword">return</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="函数内使用辅助变量的重要性"><a href="#函数内使用辅助变量的重要性" class="headerlink" title="函数内使用辅助变量的重要性"></a>函数内使用辅助变量的重要性</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//char *p = "abcd11111abcd2222abcdqqqqq"; </span>
<span class="token comment">//字符串中"abcd"出现的次数。</span>
<span class="token keyword">int</span> <span class="token function">getSubCount</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>substr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>mycount<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>sub <span class="token operator">=</span> substr<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> substr<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> mycount <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">do</span>
    <span class="token punctuation">&#123;</span>
        p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token operator">*</span>mycount<span class="token operator">++</span><span class="token punctuation">;</span>
            p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcd11111abcd2222abcdqqqqq"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSubCount</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"abcd's count :%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><h5 id="const知识点"><a href="#const知识点" class="headerlink" title="const知识点"></a>const知识点</h5><ol>
<li>const声明的变量只能被读</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

i<span class="token operator">=</span>j<span class="token punctuation">;</span>   <span class="token comment">//非法，导致编译错误</span>
j<span class="token operator">=</span>i<span class="token punctuation">;</span>   <span class="token comment">//合法 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>必须初始化</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">//合法</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span>      <span class="token comment">//非法，导致编译错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="3">
<li>在另一.c源文件中引用const常量</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>         <span class="token comment">//合法</span>
<span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment">//非法，常量不可以被再次赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="4">
<li>避免不必要的内存分配</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STRING</span> <span class="token string">"abcdefghijklmn"</span></span>
<span class="token keyword">const</span> <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"ABCDEFGHIJK"</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为STRING分配了第一次内存</span>
<span class="token function">printf</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为string一次分配了内存，以后不再分配</span>

<span class="token function">printf</span><span class="token punctuation">(</span>STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为STRING分配了第二次内存</span>
<span class="token function">printf</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>      
<span class="token comment">/*
由于const定义常量从汇编的角度来看，只是给出了对应的内存地址，
而不是象#define一样给出的是立即数，所以，const定义的常量在
程序运行过程中只有一份拷贝，而#define定义的常量在内存中有
若干个拷贝。
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li>C语言中const是一个冒牌货<ul>
<li>通过强制类型转换，将地址赋给变量，再作修改即可以改变const常量值。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">nt <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment">//代表一个常整型数</span>
    <span class="token keyword">int</span> <span class="token keyword">const</span> b<span class="token punctuation">;</span>    <span class="token comment">//代表一个常整型数  </span>

    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>  <span class="token comment">// 是一个指向常整型数的指针</span>
                    <span class="token comment">// (所指向的内存数据不能修改，</span>
                    <span class="token comment">//  但是本身可以修改)</span>
    
    <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> d<span class="token punctuation">;</span> <span class="token comment">// 常指针(指针变量不能被修改，</span>
                    <span class="token comment">//        但是它所指向的内存空间可以被修改)</span>

    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> e<span class="token punctuation">;</span><span class="token comment">// 一个指向常量整型的常指针</span>
                         <span class="token comment">// (指针和它所指向的内存空间，</span>
                         <span class="token comment">//  均不可以修改)</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>const好处</li>
</ul>
<blockquote>
<p>合理的利用const，</p>
<p>1 指针做函数参数，可以有效的提高代码可读性，减少bug；</p>
<p>2 清楚的分清参数的输入和输出特性</p>
</blockquote>
<h4 id="强化练习"><a href="#强化练习" class="headerlink" title="强化练习"></a>强化练习</h4><blockquote>
<p>有一个字符串开头或结尾含有n个空格 （”   abcdefgdddd    “），欲去掉前后空格，返回一个新字符串。<br>    要求1：请自己定义一个接口（函数），并实现功能；<br>    要求2：编写测试用例。<br>    int trimSpace(char *inbuf, char *outbuf);</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">/*
2. 有一个字符串开头或结尾含有n个空格 （"   abcdefgdddd    "），欲去掉前后空格，返回一个新字符串。
	要求1：请自己定义一个接口（函数），并实现功能；
	要求2：编写测试用例。
	int trimSpace(char *inbuf, char *outbuf);
*/</span>


<span class="token comment">/* 
功能：获取非空字符串
参数：
	inbuf： 原始字符串buf首地址
	outbuf：非空字符串buf首地址
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>inbuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>outbuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inbuf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> outbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//字符串第一个元素位置</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>inbuf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//字符串最后一个元素位置</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//出错处理</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从左往右，如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//往右移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左，如果当前字符为空</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//非空元素个数</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> inbuf <span class="token operator">+</span> begin<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	outbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//因为strncpy()不会自动添加'\0'，所以需要人为添加</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"   abcdefgdddd    "</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"trimSpace err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf:%s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>要求写一个函数实现如下功能：</p>
<p>功能1：把偶数位字符挑选出来，组成一个字符串1。</p>
<p>功能2：把奇数位字符挑选出来，组成一个字符串2。</p>
<p>功能3：把字符串1和字符串2，通过函数参数，传送给main，并打印。</p>
<p>功能4：主函数能测试通过。</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getStr1Str2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>source<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token keyword">int</span> <span class="token function">getstr1str2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> source<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf1<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token operator">=</span>source<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
cnt<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token operator">*</span>buf1<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
<span class="token operator">*</span>buf2<span class="token operator">++</span><span class="token operator">=</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">*</span>buf1<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token operator">*</span>buf2<span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">char</span> nullc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> testc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"fsadfweeuwru"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>buf1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>buf2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"char is null  value is %d\n"</span><span class="token punctuation">,</span><span class="token function">getstr1str2</span><span class="token punctuation">(</span>nullc<span class="token punctuation">,</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getstr1str2</span><span class="token punctuation">(</span>testc<span class="token punctuation">,</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf1 is %s  buf2 is %s"</span><span class="token punctuation">,</span>buf1<span class="token punctuation">,</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>要求1：请自己定义一个接口，实现根据key获取.</p>
<p>要求2：编写测试用例。</p>
<p>要求3：键值对中间可能有n多空格，请去除空格</p>
<p>格式如下：</p>
<p>“key1 = value1”</p>
<p>“key2 =    value2”</p>
<p>“key3 = value3”</p>
<p>“key4    = value4”</p>
<p>“key5  =  “</p>
<p>“key6  =”</p>
<p>int getKeyByValue(char *keyvaluebuf, char *keybuf, char *valuebuf, int * valuebuflen);</p>
<p>int main(void)</p>
<p>{</p>
<p>//…</p>
<p>getKeyByValude(“key1 = valude1”, “key1”, buf, &amp;len);</p>
<p>//…</p>
<p>return 0;</p>
<p>}</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
功能：获取非空字符串
参数：
	inbuf： 原始字符串buf首地址
	outbuf：非空字符串buf首地址
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>inbuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>outbuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inbuf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> outbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//字符串第一个元素位置</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>inbuf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//字符串最后一个元素位置</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//出错处理</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从左往右，如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> inbuf<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//往右移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左，如果当前字符为空</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>inbuf<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//非空元素个数</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> inbuf <span class="token operator">+</span> begin<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	outbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//因为strncpy()不会自动添加'\0'，所以需要人为添加</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
功能：
	键值对（“key = value”）字符串根据键key查找对应的值value
参数：
	keyval：键值对（“key = value”）字符串
	pkey：键
	buf：匹配键所对应的内容
	len：匹配键所对应内容的长度
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">getKeyByValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>keyval<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pkey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>keyval <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pkey <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> buf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> len <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//辅助变量把形参接过来</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> keyval<span class="token punctuation">;</span> <span class="token comment">//"key1 =    valude1"</span>

	<span class="token comment">//查看key是否在母串</span>
	<span class="token comment">//查找 key1 是否在 "key1 =    valude1"</span>
	p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> pkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token comment">//没有匹配键</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//重新设置起点位置，字符串跳过key值</span>
	<span class="token comment">//"key1 =    valude1" -> " =    valude1"</span>
	p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pkey<span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token comment">//查找是否包含=号</span>
	p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token comment">//没有</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//字符串跳过"="</span>
	<span class="token comment">//" =    valude1" -> "    valude1"</span>
	p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//获取非空字符串</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//通过*操作符操作内存</span>
	<span class="token comment">//间接赋值</span>
	<span class="token operator">*</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> keyval<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"key1 =    valude1"</span><span class="token punctuation">;</span> <span class="token comment">//键值对字符串</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>pkey <span class="token operator">=</span> <span class="token string">"key1"</span><span class="token punctuation">;</span> <span class="token comment">//键值</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">getKeyByValue</span><span class="token punctuation">(</span>keyval<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"getKeyByValue: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value: %s\nlen = %d\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><h4 id="二级指针基本概念"><a href="#二级指针基本概念" class="headerlink" title="二级指针基本概念"></a>二级指针基本概念</h4><ul>
<li>如果一个指针变量存放的又是另一个指针变量的地址,则称这个指针变量为指向指针的指针 变量。也称为“二级指针”。</li>
<li>通过指针访问变量称为间接访问。由于指针变量直接指向变量,所以称为“一级指针”。而如果通过指向指针的指针变量来访问变量则构成“二级指针”。 </li>
<li><img src="http://qiniu.orangew.cn/img/wpsA271.tmp.jpg" alt="img"></li>
</ul>
<h5 id="二级指针输出特性"><a href="#二级指针输出特性" class="headerlink" title="二级指针输出特性"></a>二级指针输出特性</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token comment">/*out*/</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp1<span class="token punctuation">,</span> <span class="token comment">/*out*/</span><span class="token keyword">int</span> <span class="token operator">*</span>mylen1<span class="token punctuation">,</span> 
		 <span class="token comment">/*out*/</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp2<span class="token punctuation">,</span> <span class="token comment">/*out*/</span><span class="token keyword">int</span> <span class="token operator">*</span>mylen2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getMem_Free</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="二级指针输入特性"><a href="#二级指针输入特性" class="headerlink" title="二级指针输入特性"></a>二级指针输入特性</h5><ul>
<li>第一种输入模型：指针数组</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>myArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaaaaa"</span><span class="token punctuation">,</span> <span class="token string">"ccccc"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbb"</span><span class="token punctuation">,</span> <span class="token string">"111111"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sortMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第二种输入模型：二维数组</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> myArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aaaaaa"</span><span class="token punctuation">,</span> <span class="token string">"ccccc"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbb"</span><span class="token punctuation">,</span> <span class="token string">"1111111111111"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> myArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sortMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> myArray<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第三种输入模型：手工二维内存</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">printMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">sortMyArray</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">arrayFree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myArray<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//指针数组</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">,</span> <span class="token string">"789"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">//二维数组</span>
    <span class="token keyword">char</span> p2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">,</span> <span class="token string">"789"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">//手工二维内存</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char *array[3];</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        p3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char buf[10]</span>

        <span class="token function">sprintf</span><span class="token punctuation">(</span>p3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token comment">//在函数里面分配内存并赋值</span>
<span class="token comment">//char ***p是二维字符串数组的地址</span>
<span class="token comment">//num是字符串数组中字符串的个数</span>
<span class="token keyword">int</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>p <span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//二维字符串数组地址不存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//给临时二维字符串数组分配内存</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//内存分配失败</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
	<span class="token comment">//给每一个字符串分配内存</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>  <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//sprintf函数将格式化输入到字符串中</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//将指针p指向临时字符串</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//释放内存</span>
<span class="token keyword">void</span> <span class="token function">memFree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>p <span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token comment">//判断二维字符串的地址是否为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token comment">//释放每一个字符串</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//将指针指向空</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//把实参赋值成null</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>array <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">memFree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h5><blockquote>
<p>有字符串有以下特征（“abcd11111abcd2222abcdqqqqq”）,求写一个函数接口，输出以下结果。</p>
<p>把字符串替换成（dcba11111dcba2222dcbaqqqqq），并把结果传出。</p>
<p>要求：</p>
<p>​    1. 正确实现接口和功能</p>
<p>​    2. 编写测试用例</p>
<p>/*</p>
<p>src:  原字符串</p>
<p>dst:  生成的或需要填充的字符串</p>
<p>sub:  需要查找的子字符串</p>
<p>new_sub:提换的新子字符串</p>
<p>return : 0 成功</p>
<p>​    -1 失败</p>
<p> */</p>
<p>int replaceSubstr(/* in <em>/char <em>src, /</em> out <em>/char</em></em> dst, </p>
<p>​         /* in */char <em>sub, /</em> in */char *new_sub);</p>
<p>有一个字符串符合以下特征（“abcdef,acccd,eeee,aaaa,e3eeee,ssss,”）</p>
<p>写两个函数(API)，输出以下结果</p>
<p>第一个API(第二种内存模型)</p>
<p>1)以逗号分隔字符串，形成二维数组，并把结果传出</p>
<p>2)把二维数组行数运算结果也传出</p>
<p>int spitString(const char *str, char c, char buf[10] [30], int *count);</p>
<p>第二个API(第三种内存模型)</p>
<p>1)以逗号分隔字符串，形成一个二级指针。</p>
<p>2)把一共拆分多少行字符串个数传出</p>
<p>int spitString2(const char *str, char c, char ** myp / * in */, int *count);</p>
<p>要求：</p>
<p>1, 能正确表达功能的要求，定义出接口。</p>
<p>2, 正确实现接口和功能.</p>
<p>3, 编写正确的测试用例.</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第一个作业</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">/*
src:    原字符串
dst:    生成的或需要填充的字符串
sub:    需要查找的子字符串
new_sub:提换的新子字符串

return : 0 成功
-1 失败
*/</span>
<span class="token keyword">int</span> <span class="token function">replaceSubstr</span><span class="token punctuation">(</span><span class="token comment">/* in */</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token comment">/* out */</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> dst<span class="token punctuation">,</span>
	<span class="token comment">/* in */</span><span class="token keyword">char</span> <span class="token operator">*</span>sub<span class="token punctuation">,</span>  <span class="token comment">/* in */</span><span class="token keyword">char</span> <span class="token operator">*</span>new_sub<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// src = "22abcd11111abcd2222abcdqqqqq"</span>
	<span class="token comment">// dst = "22dcba11111dcba2222dcbaqqqqq"</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> dst <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> sub <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> new_sub <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//临时变量, 字符数组</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> src<span class="token punctuation">;</span> <span class="token comment">//记录查找的起点</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">//匹配字符串的首地址</span>

	<span class="token keyword">do</span> 
	<span class="token punctuation">&#123;</span>
		<span class="token comment">// src = "22abcd11111abcd2222abcdqqqqq"</span>
		p <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> len <span class="token operator">=</span> p <span class="token operator">-</span> start<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//把匹配字符串前面的内容连接过去</span>
				<span class="token function">strncat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>

			<span class="token function">strncat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> new_sub<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>new_sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//追加替换的新串</span>

			<span class="token comment">//更改查找的起点位置</span>
			start <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">strcat</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>dst <span class="token operator">=</span> buf<span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcd11111abcd2222abcdqqqqq"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">replaceSubstr</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"replaceSubstr err:　%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">spitString</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> str<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//第几行</span>

	<span class="token keyword">do</span> 
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span>
		p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> len <span class="token operator">=</span> p <span class="token operator">-</span> start<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">//添加结束符</span>
				buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

				i<span class="token operator">++</span><span class="token punctuation">;</span> 
			<span class="token punctuation">&#125;</span>
			start <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>


	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>count <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//有多少行字符串</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char *p[]</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//每个元素的空间</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char a[30]</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> p<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">getMemFree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
			tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">spitString2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>count<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>start <span class="token operator">=</span> str<span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//第几行</span>

	<span class="token keyword">do</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span>
		p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> len <span class="token operator">=</span> p <span class="token operator">-</span> start<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">strncpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">//添加结束符</span>
				buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>

				i<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			start <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>


	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>start <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>count <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//有多少行字符串</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>
	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">spitString</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"abcdef,acccd,eeee,aaaa,e3eeee,ssss,"</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">getMem</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态打造二维数组</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">spitString2</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">getMemFree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><h4 id="数组的基本概念"><a href="#数组的基本概念" class="headerlink" title="数组的基本概念"></a>数组的基本概念</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul>
<li>元素类型角度：数组是相同类型的变量的有序集合</li>
<li>内存角度：连续的一大片内存空间</li>
</ul>
<h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><ul>
<li>所谓多维数组就是二维和大于二维的数组,在C语言中并不直接支持多维数组,包括二维数 组。多维数组的声明是使用一维数组的嵌套声明实现的。一个一维数组的每个元素又被声明为一 维数组,从而构成二维数组,可以说二维数组是特殊的一维数组。</li>
<li>二维数组定义的一般形式是:</li>
<li>类型说明符 数组名[常量表达式1] [常量表达式2] </li>
</ul>
<h5 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h5><ul>
<li>数组首元素的地址和数组地址是两个不同的概念</li>
<li>数组名代表数组首元素的地址，它是个常量。 </li>
<li>变量本质是内存空间的别名，一定义数组，就分配内存，内存就固定了。所以数组名起名以后就不能被修改了。</li>
<li>数组首元素的地址和数组的地址值相等。</li>
</ul>
<h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><ul>
<li>数组的类型由元素类型和数组大小共同决定</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">/*
   typedef int(MYINT5)[5];   
   typedef float(MYFLOAT10)[10];

   数组定义：

   MYINT5       iArray;  等价于 int iArray[5];
   MYFLOAT10    fArray;  等价于 float fArray[10];
 */</span>

<span class="token comment">/*定义 数组类型，并用数组类型定义变量*/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>MYINT5<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    MYINT5 array<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>                       
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                   
    <span class="token punctuation">&#125;</span>                                       
                     
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>                           
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
    <span class="token punctuation">&#125;</span>                                           
                         
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                   
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="数组指针和指针数组"><a href="#数组指针和指针数组" class="headerlink" title="数组指针和指针数组"></a>数组指针和指针数组</h4><h5 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>point_array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>point_array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>指针数组，是一个数组, 里面的每一个元素都是一个指针。（多个指针）</li>
<li>每个指针可以指向不同的数据块</li>
</ul>
<h5 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>array_point<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>是一个指针，指向一个数组。（一个指针）</li>
<li>指针本是一种类型，但又说什么类型的指针，只不过是说指针所指向的数据是什么类型而已。那么指向数组类型的指针，就只好叫数组指针。</li>
</ul>
<h5 id="定义数组指针"><a href="#定义数组指针" class="headerlink" title="定义数组指针"></a>定义数组指针</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//a的类型是一个指向int类型的指针。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>数组名a是数组首元素的起始地址，但并不是数组的起始地址。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>         <span class="token comment">//&amp;a的类型是一个指向数组int[10]类型的指针。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>通过将取地址符&amp;作用于数组名可以得到整个数组的起始地址。</li>
<li>通过数组类型定义数组指针: </li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span>ArrayType<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//定义类型ArrayType 为int[5]类型</span>

ArrayType<span class="token operator">*</span> pointer<span class="token punctuation">;</span>         <span class="token comment">//那么指向ArrayType的指针就是指向int[5]类型的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>通过数组指针定义数组指针</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>MyPointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义类型MyPointer 为指向int[5]类型的指针</span>

MyPointer myPoint<span class="token punctuation">;</span>          <span class="token comment">//那么用这种类型的指针定义的便都是指向int[5]类型的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>直接定义</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="多维数组名的本质"><a href="#多维数组名的本质" class="headerlink" title="多维数组名的本质"></a>多维数组名的本质</h4><p><img src="http://qiniu.orangew.cn/img/wps8B37.tmp.jpg" alt="img"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// a 多维数组名 代表？</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a %d , a+1:%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//a+1的步长 是20个字节 5*4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a %d , &amp;a+1:%d "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//&amp;+1的步长 是5*4*3 = 60</span>

    <span class="token comment">//多维数组名的本质就是一个指向第一个维度的数组的指针</span>
    <span class="token comment">//步长为第一个维度的数据类型大小</span>

    <span class="token comment">//定义一个指向数组的指针变量 </span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pArray<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>      <span class="token comment">//告诉编译器  分配 4个字节的内存 32bit平台下</span>
pArray <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
                                                     
    <span class="token comment">// (a+i)                代表是整个第i行的地址  二级指针</span>
    <span class="token comment">// *(a+i)               代表 1级指针  第i行首元素的地址</span>
    <span class="token comment">// *(a+i) + j  ===> &amp;  (a[i][j])</span>
    <span class="token comment">//*( *(a+i) + j) ===>   a[i][j]元素的值</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多维数组的参数退化"><a href="#多维数组的参数退化" class="headerlink" title="多维数组的参数退化"></a>多维数组的参数退化</h3><h4 id="多维数组的线性存储特性"><a href="#多维数组的线性存储特性" class="headerlink" title="多维数组的线性存储特性"></a>多维数组的线性存储特性</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printfArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//把二维数组 当成  1维数组 来打印 证明线性存储</span>
    <span class="token function">printfArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="http://qiniu.orangew.cn/img/20220702201301.png" alt="20220702201301"></p>
<h4 id="多维数组的3种形式参数"><a href="#多维数组的3种形式参数" class="headerlink" title="多维数组的3种形式参数"></a>多维数组的3种形式参数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">printArray01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printArray02</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">printArray03</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printArray03</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="形参退化成指针的原因"><a href="#形参退化成指针的原因" class="headerlink" title="形参退化成指针的原因"></a>形参退化成指针的原因</h4><ul>
<li>原因1：高效</li>
<li>原因2：C语言处理a[n]的时候，它没有办法知道n是几，它只知道&amp;n[0]是多少，它的值作为参数传递进去了，虽然c语言可以做到直接int fun(char a[20])，然后函数能得到20这个数字，但是，C没有这么做。 </li>
</ul>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="结构体的类型和定义"><a href="#结构体的类型和定义" class="headerlink" title="结构体的类型和定义"></a>结构体的类型和定义</h4><ul>
<li>结构体是一种构造数据类型。</li>
<li>用途：把不同类型的数据组合成一个整体——-自定义数据类型</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//声明一个结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">_Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//定义结构体变量的方法</span>
<span class="token comment">/*
   1)定义类型 用类型定义变量
   2)定义类型的同时，定义变量；
   3）直接定义结构体变量；
 */</span>

<span class="token keyword">struct</span> <span class="token class-name">_Student</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>  <span class="token comment">//定义类型的同时，定义变量；</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>s3<span class="token punctuation">,</span>s4<span class="token punctuation">;</span> <span class="token comment">//直接定义结构体变量</span>

<span class="token comment">//初始化结构体变量的几种方法</span>
<span class="token comment">//1)</span>
<span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> t4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"tile2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"addr2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//2)</span>
<span class="token keyword">struct</span> <span class="token class-name">Dog1</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>d5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"gongzhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//3)</span>
<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    tile<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>d6 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"gongzhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//结构体变量的引用</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//struct _Teacher t1, t2;</span>
    <span class="token comment">//定义同时初始化</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> t3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"tile2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"addr2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span>tile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//用指针法和变量法分别操作结构体</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> t4<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Teacher</span> <span class="token operator">*</span>pTeacher <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    pTeacher <span class="token operator">=</span> <span class="token operator">&amp;</span>t4<span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>t4<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>pTeacher<span class="token operator">-></span>addr<span class="token punctuation">,</span> <span class="token string">"ddddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"t4.name:%s\n"</span><span class="token punctuation">,</span> t4<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体的赋值"><a href="#结构体的赋值" class="headerlink" title="结构体的赋值"></a>结构体的赋值</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//声明一个结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    title<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span> <span class="token class-name">teacher_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">show_teacher</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> t<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"title : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age : %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"addr : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span>  <span class="token function">copyTeacher</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> to<span class="token punctuation">,</span> <span class="token class-name">teacher_t</span> from <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    to <span class="token operator">=</span> from<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span>  <span class="token function">copyTeacher2</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token class-name">teacher_t</span> <span class="token operator">*</span>from <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//结构体赋值和实参形参赋值行为研究</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">teacher_t</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//结构体直接赋值</span>
    t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>
    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copyTeacher</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copyTeacher2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show_teacher</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//声明一个结构体类型</span>
<span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span>    title<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>     age<span class="token punctuation">;</span>
    <span class="token keyword">char</span>    addr<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span> <span class="token class-name">teacher_t</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">show_teacher</span><span class="token punctuation">(</span><span class="token class-name">teacher_t</span> t<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"title : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age : %d\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"addr : %s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//定义结构体数组</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">_Mytercher</span> teaArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr<span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">show_teacher</span><span class="token punctuation">(</span>teaArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体作为函数参数"><a href="#结构体作为函数参数" class="headerlink" title="结构体作为函数参数"></a>结构体作为函数参数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>alisname<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Teacher<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name : %s\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"alisname : %s\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age:%d \n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">sortTeacer</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    Teacher tmp<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//=号操作  赋值操作</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

Teacher <span class="token operator">*</span> <span class="token function">createTeacher01</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Teacher <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Teacher     Array[3]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span> <span class="token comment">//</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>pT<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Teacher <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  Teacher     Array[3]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">*</span>pT <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//二级指针 形参 去间接的修改 实参 的值 </span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>         ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

    Teacher <span class="token operator">*</span>pArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func createTeacher02() er:%d \n "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter age:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>  pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向指针所指的内存空间copy数据</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter alias:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>  pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>alisname <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//向指针所指的内存空间copy数据</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sortTeacer</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序之后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体嵌套指针"><a href="#结构体嵌套指针" class="headerlink" title="结构体嵌套指针"></a>结构体嵌套指针</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>student_name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> stu_num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Teacher<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n-------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"teacher'name:%s\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"id:%d \n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"student's count:%d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\tstudent[%d]:%s\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">sortTeacer</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>     i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
    Teacher tmp<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//=号操作  赋值操作</span>
                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">createStudents</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">int</span> stunum<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">//二级指针的第三种内存模型</span>
    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>stunum <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打造二维内存</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>stunum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    t<span class="token operator">-></span>student_name <span class="token operator">=</span> p<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>pT<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    Teacher <span class="token operator">*</span> tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    tmp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>

        <span class="token comment">//malloc一级指针</span>
        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token operator">*</span>pT <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token comment">//二级指针 形参 去间接的修改 实参 的值 </span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//释放一级指针</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//释放二级指针</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>myp <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name <span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>myp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token function">free</span><span class="token punctuation">(</span>myp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">free</span><span class="token punctuation">(</span>myp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span>         ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>         num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    Teacher <span class="token operator">*</span>pArray <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    ret <span class="token operator">=</span> <span class="token function">createTeacher02</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func createTeacher02() er:%d \n "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter id:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>  pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nplease enter student number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span><span class="token punctuation">(</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//之所以在这开辟学生名称的内存 是因为在这里才知道这个老师</span>
        <span class="token comment">//对应的学生数目</span>
        <span class="token function">createStudents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter student name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>pArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_name<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sortTeacer</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序之后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">FreeTeacher</span><span class="token punctuation">(</span>pArray<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="有关浅拷贝深拷贝问题"><a href="#有关浅拷贝深拷贝问题" class="headerlink" title="有关浅拷贝深拷贝问题"></a>有关浅拷贝深拷贝问题</h4><p><img src="http://qiniu.orangew.cn/img/wpsCBF1.tmp.jpg" alt="img"> </p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age <span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>pname2<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>Teacher_t<span class="token punctuation">;</span>
<span class="token comment">//结构体中套一个 1级指针 或 二级指针 </span>

<span class="token comment">//编译器的=号操作,只会把指针变量的值,从from  copy 到 to,但 </span>
<span class="token comment">//不会 把指针变量 所指 的 内存空间 给copy过去..//浅copy</span>

<span class="token comment">//如果 想执行深copy,再显示的分配内存</span>
<span class="token keyword">void</span> <span class="token function">deepCopyTeacher</span><span class="token punctuation">(</span>Teacher_t <span class="token operator">*</span>to<span class="token punctuation">,</span> Teacher_t <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>to <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">;</span>

    to<span class="token operator">-></span>pname2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>to<span class="token operator">-></span>pname2<span class="token punctuation">,</span> from<span class="token operator">-></span>pname2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//memcpy(to, from , sizeof(Teacher_t));</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//浅拷贝</span>
<span class="token keyword">void</span> <span class="token function">copyTeacher</span><span class="token punctuation">(</span>Teacher_t <span class="token operator">*</span>to<span class="token punctuation">,</span> Teacher_t <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// or</span>
    <span class="token comment">//*to = *from;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Teacher_t t1<span class="token punctuation">;</span>
    Teacher_t t2<span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span>pname2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>pname2<span class="token punctuation">,</span> <span class="token string">"ssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//t1 copy t2</span>
    <span class="token function">deepCopyTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>pname2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>pname2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span>pname2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span>pname2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>pname2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span>pname2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体成员偏移量"><a href="#结构体成员偏移量" class="headerlink" title="结构体成员偏移量"></a>结构体成员偏移量</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//一旦结构体定义下来,则结构体中的成员..内存布局 就定下了</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//64</span>
    <span class="token keyword">int</span> age <span class="token punctuation">;</span>       <span class="token comment">//4</span>
    <span class="token keyword">int</span> p<span class="token punctuation">;</span>          <span class="token comment">//4</span>

<span class="token punctuation">&#125;</span> Teacher_t<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    Teacher_t  t1<span class="token punctuation">;</span>
    Teacher_t <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>t1<span class="token punctuation">;</span>

    <span class="token keyword">int</span> offsize1 <span class="token operator">=</span>   <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">-></span>age<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span> <span class="token comment">//age 相对于结构体 Teacher的偏移量</span>
    <span class="token keyword">int</span> offsize2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Teacher_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-></span>age <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绝对0地址 age的偏移量</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offsize1:%d \n"</span><span class="token punctuation">,</span> offsize1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"offsize2:%d \n"</span><span class="token punctuation">,</span> offsize2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="结构体字节对齐"><a href="#结构体字节对齐" class="headerlink" title="结构体字节对齐"></a>结构体字节对齐</h4><ul>
<li>在用sizeof运算符求算某结构体所占空间时，并不是简单地将结构体中所有元素各自占的空间相加，这里涉及到内存字节对齐的问题。</li>
<li>从理论上讲，对于任何变量的访问都可以从任何地址开始访问，但是事实上不是如此，实际上访问特定类型的变量只能在特定的地址访问，这就需要各个变量在空间上按一定的规则排列， 而不是简单地顺序排列，这就是内存对齐。</li>
</ul>
<h5 id="内存对齐的原因"><a href="#内存对齐的原因" class="headerlink" title="内存对齐的原因"></a>内存对齐的原因</h5><ul>
<li><p>某些平台只能在特定的地址处访问特定类型的数据。</p>
</li>
<li><p>提高存取数据的速度。比如有的平台每次都是从偶地址处读取数据，对于一个int型的变量，若从偶地址单元处存放，则只需一个读取周期即可读取该变量；但是若从奇地址单元处存放，则需要2个读取周期读取该变量。</p>
</li>
</ul>
<h5 id="内存对齐的原则"><a href="#内存对齐的原则" class="headerlink" title="内存对齐的原则"></a>内存对齐的原则</h5><ul>
<li><p>默认情况下，数据成员的对齐规则(以最大的类型字节为单位)。</p>
</li>
<li><p>当然，字节对齐可以通过程序控制，采用指令：</p>
</li>
<li><blockquote>
<p>#pragma pack(xx)  </p>
<p>#pragma pack(1)   //1字节对齐</p>
<p>#pragma pack(2)   //2字节对齐</p>
<p>#pragma pack(4)   //4字节对齐</p>
<p>#pragma pack(8)   //8字节对齐</p>
<p>#pragma pack(16)  //16字节对齐</p>
</blockquote>
</li>
</ul>
<h4 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h4><blockquote>
<ol>
<li>列出定义结构体变量的几种方法。</li>
</ol>
<ol start="2">
<li><p>同类型结构体变量是否可以相互赋值？会存在什么风险？</p>
</li>
<li><p>练习结构体数组排序　　<br> 从键盘输入3个学生的信息（姓名、学号、成绩），存入一个结构体数组中，计算平均分，并按成绩<br> 高低排序并输出<br> typedef struct Stu<br> {</p>
<pre><code> char name[50];
 int id;
 double score;
</code></pre>
<p> }Stu;</p>
<p> int main(void)<br> {</p>
<pre><code> Stu s[3];
 int n = 3;
</code></pre>
 <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//从键盘输入学生信息</span>
<span class="token function">initStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
														
<span class="token comment">//aveStu(s, 3)：平均分</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n平均分为： %lf\n"</span><span class="token punctuation">,</span>  <span class="token function">aveStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
														
<span class="token comment">//分数排序，降序</span>
<span class="token function">sortStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
														
<span class="token comment">//打印学生信息</span>
<span class="token function">showStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
														
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> }</p>
</li>
</ol>
<ol start="4">
<li><p>重写结构体嵌套一级指针老师和二级指针学生的代码</p>
<p> //结构体类型，每个导师有三个学生<br> typedef struct Teacher<br> {</p>
<pre><code> char *tName; //导师
 char  * * stu;  //三个学生
 int age;
</code></pre>
<p> }Teacher;</p>
<p> //在createTeacher中分配空间<br> int createTeacher( Teacher  * * p / * out * / , int n1, int n2);</p>
<p> //给成员赋值<br> void initTeacher(Teacher *p, int n1, int n2);</p>
<p> //打印结构体成员信息<br> void printTeacher(Teacher *p, int n1, int n2);</p>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//根据导师名字排序, 降序</span>
<span class="token keyword">void</span> <span class="token function">sortTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
<span class="token keyword">void</span> <span class="token function">freeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span> <span class="token operator">*</span> p <span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//导师个数</span>
	<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//学生</span>
	Teacher <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-c" data-language="c"><code class="language-c">ret <span class="token operator">=</span> <span class="token function">createTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"createTeacher err:%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">initTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给成员赋值</span>

<span class="token comment">//打印成员，排序前</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<pre class="line-numbers language-c" data-language="c"><code class="language-c">	<span class="token comment">//根据导师名字排序, 降序</span>
	<span class="token function">sortTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//打印成员，排序后</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
	<span class="token function">freeTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<ol start="5">
<li><p>画一下第4题createTeacher()的内存四区图</p>
</li>
<li><p>分析以下结构体所占空间大小<br> typedef struct Stu<br> {</p>
<pre><code> char a[4];
 int b;
 double c;
 short d;
</code></pre>
<p> }Stu;</p>
<p> #pragma pack(1)     //1字节对齐<br> #pragma pack(2)     //2字节对齐<br> #pragma pack(4)     //4字节对齐<br> #pragma pack(8)     //8字节对齐<br> #pragma pack(16)    //16字节对齐</p>
</li>
</ol>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span>

<span class="token comment">//从键盘输入学生信息</span>
<span class="token keyword">void</span> <span class="token function">initStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入第%d个学生信息：\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入姓名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入分数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//求平均分</span>
<span class="token keyword">double</span> <span class="token function">aveStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> allScore <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		allScore <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span> <span class="token comment">//分数累加</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">return</span> allScore <span class="token operator">/</span> <span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//分数排序，降序</span>
<span class="token keyword">void</span> <span class="token function">sortStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	Stu tmp<span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token comment">//降序</span>
			<span class="token punctuation">&#123;</span>
				tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//打印学生信息</span>
<span class="token keyword">void</span> <span class="token function">showStu</span><span class="token punctuation">(</span>Stu <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n学生信息如下：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"姓名\t学号\t分数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\t%d\t%lf\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	Stu s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

	<span class="token comment">//从键盘输入学生信息</span>
	<span class="token function">initStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token comment">//aveStu(s, 3)：平均分</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n平均分为： %lf\n"</span><span class="token punctuation">,</span>  <span class="token function">aveStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//分数排序，降序</span>
	<span class="token function">sortStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//打印学生信息</span>
	<span class="token function">showStu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//结构体类型，每个导师有三个学生</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>tName<span class="token punctuation">;</span> <span class="token comment">//导师</span>
	<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>stu<span class="token punctuation">;</span>  <span class="token comment">//三个学生</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>Teacher<span class="token punctuation">;</span>

<span class="token comment">//在createTeacher中分配空间</span>
<span class="token keyword">int</span> <span class="token function">createTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>p<span class="token comment">/*out*/</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//三个结构体，Teacher t[3]</span>
	Teacher <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">)</span><span class="token operator">*</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//每个老师的导师，n2个学生分配空间</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//导师名字</span>
		t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//每个导师有n2个学生</span>
		<span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n2 <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//char *tmp[i]</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu <span class="token operator">=</span> tmp<span class="token punctuation">;</span> <span class="token comment">//重要</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">//间接赋值是指针存在最大意义</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> t<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//给成员赋值</span>
<span class="token keyword">void</span> <span class="token function">initTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//导师名字</span>
		<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"teacher%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">//每个导师有n2个学生</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"stu%d%d%d%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//年龄</span>
		p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//打印结构体成员信息</span>
<span class="token keyword">void</span> <span class="token function">printTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//先打印导师，再打印学生</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s[%d]\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//每个导师有n2个学生</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%s"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//根据导师名字排序, 降序</span>
<span class="token keyword">void</span> <span class="token function">sortTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	Teacher tmp<span class="token punctuation">;</span>

	<span class="token comment">//选择法排序</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//降序</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//交换成员变量的值</span>
				tmp <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
<span class="token keyword">void</span> <span class="token function">freeTeacher</span><span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	Teacher <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//先释放导师</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName<span class="token punctuation">)</span><span class="token punctuation">;</span>
			t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tName <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//再释放导师名下的学生</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
			t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//导师个数</span>
	<span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//学生</span>
	Teacher <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">createTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"createTeacher err:%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">initTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给成员赋值</span>

	<span class="token comment">//打印成员，排序前</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//根据导师名字排序, 降序</span>
	<span class="token function">sortTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//打印成员，排序后</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printTeacher</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//释放空间，在函数内部把p赋值为NULL</span>
	<span class="token function">freeTeacher</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="文件操作的步骤"><a href="#文件操作的步骤" class="headerlink" title="文件操作的步骤"></a>文件操作的步骤</h4><ol>
<li>引入头文件(stdio.h ) </li>
<li>定义文件指针 </li>
<li>打开文件 </li>
<li>文件读写 </li>
<li>关闭文件 </li>
</ol>
<h4 id="有关文件的概念"><a href="#有关文件的概念" class="headerlink" title="有关文件的概念"></a>有关文件的概念</h4><ul>
<li><p>按文件的逻辑结构：</p>
</li>
<li><blockquote>
<p>记录文件：由具有一定结构的记录组成（定长和不定长）</p>
<p>流式文件：由一个个字符（字节）数据顺序组成</p>
</blockquote>
</li>
<li><p>按存储介质：</p>
</li>
<li><blockquote>
<p>普通文件：存储介质文件（磁盘、磁带等）</p>
<p>设备文件：非存储介质（键盘、显示器、打印机等）</p>
</blockquote>
</li>
<li><p> 按数据的组织形式：</p>
</li>
</ul>
<blockquote>
<p>文本文件： ASCII文件，每个字节存放一个字符的ASCII码</p>
<p>二进制文件：数据按其在内存中的存储形式原样存放</p>
<p><img src="http://qiniu.orangew.cn/img/wps3AB2.tmp.jpg" alt="img"></p>
</blockquote>
<ul>
<li>流概念<ul>
<li>是一个动态的概念，可以将一个字节形象地比喻成一滴水，字节在设备、文件和程序之间的传输就是流，类似于水在管道中的传输，可以看出，流是对输入输出源的一种抽象，也是对传输信息的一种抽象。通过对输入输出源的抽象，屏蔽了设备之间的差异，使程序员能以一种通用的方式进行存储操作，通过对传输信息的抽象，使得所有信息都转化为字节流的形式传输，信息解读的过程与传输过程分离。</li>
<li>C语言中，I/O操作可以简单地看作是从程序移进或移出字节，这种搬运的过程便称为流(stream)。程序只需要关心是否正确地输出了字节数据，以及是否正确地输入了要读取字节数据，特定I/O设备的细节对程序员是隐藏的。</li>
</ul>
</li>
<li>文件处理方法<ol>
<li>文件缓冲区<ul>
<li>ANSIC标准采用“缓冲文件系统”处理数据文件 所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区。从内存向磁盘输出数据必须先送到内存中的缓冲区,装满缓冲区后才一起送到磁盘去 如果从磁盘向计算机读入数据,则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲 区),然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) </li>
</ul>
</li>
<li>输入输出流<ul>
<li>输入输出是数据传送的过程,数据如流水一样从一处流向另一处,因此常将输入输出形象地称为 流(stream),即数据流。流表示了信息从源到目的端的流动。 </li>
<li><img src="http://qiniu.orangew.cn/img/wps62C.tmp.jpg" alt="img"></li>
<li>输入操作时,数据从文件流向计算机内存 — 文件的读取 </li>
<li><img src="http://qiniu.orangew.cn/img/wpsC2C6.tmp.jpg" alt="img"></li>
<li>输出操作时,数据从计算机流向文件 — 文件的写入 </li>
<li><img src="http://qiniu.orangew.cn/img/wps15D8.tmp.jpg" alt="img"></li>
<li>无论是用Word打开或保存文件,还是C程序中的输入输出都是通过操作系统进行的 “流”是一个传输通道,数据可以从运行环境流入程序中,或从程序流至运行环境 。</li>
</ul>
</li>
</ol>
</li>
<li>文件句柄</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">short</span>           level<span class="token punctuation">;</span>      <span class="token comment">/* 缓冲区"满"或者"空"的程度 */</span>
    <span class="token keyword">unsigned</span>        flags<span class="token punctuation">;</span>      <span class="token comment">/* 文件状态标志 */</span>
    <span class="token keyword">char</span>            fd<span class="token punctuation">;</span>         <span class="token comment">/* 文件描述符 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   hold<span class="token punctuation">;</span>       <span class="token comment">/* 如无缓冲区不读取字符 */</span>
    <span class="token keyword">short</span>           bsize<span class="token punctuation">;</span>      <span class="token comment">/* 缓冲区的大小 */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   <span class="token operator">*</span>buffer<span class="token punctuation">;</span>    <span class="token comment">/* 数据缓冲区的位置 */</span>
    <span class="token keyword">unsigned</span>        ar<span class="token punctuation">;</span>         <span class="token comment">/* 指针，当前的指向 */</span>
    <span class="token keyword">unsigned</span>        istemp<span class="token punctuation">;</span>     <span class="token comment">/* 临时文件，指示器 */</span>
    <span class="token keyword">short</span>           token<span class="token punctuation">;</span>      <span class="token comment">/* 用于有效性的检查 */</span>
<span class="token punctuation">&#125;</span>FILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="C语言文件指针"><a href="#C语言文件指针" class="headerlink" title="C语言文件指针"></a>C语言文件指针</h4><ul>
<li><p>在C语言中用一个指针变量指向一个文件,这个指针称为文件指针。 </p>
</li>
<li><p>声明FILE结构体类型的信息包含在头文件“stdio.h”中</p>
</li>
<li><p>一般设置一个指向FILE类型变量的指针变量,然后通过它来引用这些FILE类型变量 通过文件指针就可对它所指的文件进行各种操作。 </p>
<p>定义说明文件指针的一般形式为:</p>
</li>
<li><p>FILE * 指针变量标识符; </p>
</li>
<li><p>其中FILE应为大写,它实际上是由系统定义的一个结构,该结构中含有文件名、文件状态和文件 当前位置等信息。在编写源程序时不必关心FILE结构的细节。 </p>
</li>
<li><p>FILE *fp; </p>
</li>
<li><p>表示<code>fp</code>是指向FILE结构的指针变量,通过fp即可找存放某个文件信息的结构变量,然后按结构变 量�供的信息找到该文件,实施对文件的操作。习惯上也笼统地把<code>fp</code>称为指向一个文件的指针。 </p>
</li>
<li><p><img src="http://qiniu.orangew.cn/img/wps476.tmp.jpg" alt="img"></p>
</li>
</ul>
<h4 id="文件操作API"><a href="#文件操作API" class="headerlink" title="文件操作API"></a>文件操作API</h4><blockquote>
<p><code>fgetc fputc</code> 按照字符读写文件</p>
<p>​        </p>
<p><code>fputs fgets</code>     按照行读写文件 （读写配置文件）</p>
<p>​        </p>
<p><code>fread fwirte</code> 按照块读写文件 （大数据块迁移）</p>
<p>​        </p>
<p><code>fprintf    fscanf</code>    按照格式化进行读写文件</p>
</blockquote>
<h4 id="标准的文件读写"><a href="#标准的文件读写" class="headerlink" title="标准的文件读写"></a>标准的文件读写</h4><ol>
<li><p>文件的打开fopen()</p>
<ul>
<li><p>文件的打开操作表示将给用户指定的文件在内存分配一个FILE结构区，并将该结构的指针返回给用户程序，以后用户程序就可用此FILE指针来实现对指定文件的存取操作了。当使用打开函数时，必须给出文件名、文件操作方式(读、写或读写),如果该文件名不存在，就意味着建立(只对写文件而言，对读文件则出错)，并将文件指针指向文件开头。若已有一个同名文件存在，则删除该文件，若无同名文件，则建立该文件，并将文件指针指向文件开头。</p>
</li>
<li><p><code>fopen(char *filename,char *type);</code></p>
</li>
<li><p>其中* filename是要打开文件的文件名指针，一般用双引号括起来的文件名表示，也可使用双反斜杠隔开的路径名。而*type参数表示了对打开文件的操作方式。其可采用的操作方式如下：</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th>方式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>“r”</td>
<td>打开，只读，文件必须已经存在。</td>
</tr>
<tr>
<td>“w”</td>
<td>只写,如果文件不存在则创建,如果文件已存在则把文件长度截断(Truncate)为0字节。再重新写,也就是替换掉原来的文件内容文件指针指到头。</td>
</tr>
<tr>
<td>“a”</td>
<td>只能在文件末尾追加数据,如果文件不存在则创建</td>
</tr>
<tr>
<td>“rb”</td>
<td>打开一个二进制文件，只读</td>
</tr>
<tr>
<td>“wb”</td>
<td>打开一个二进制文件，只写</td>
</tr>
<tr>
<td>“ab”</td>
<td>打开一个二进制文件，追加</td>
</tr>
<tr>
<td>“r+”</td>
<td>允许读和写,文件必须已存在</td>
</tr>
<tr>
<td>“w+”</td>
<td>允许读和写,如果文件不存在则创建,如果文件已存在则把文件长度截断为0字节再重新写 。</td>
</tr>
<tr>
<td>“a+”</td>
<td>允许读和追加数据,如果文件不存在则创建</td>
</tr>
<tr>
<td>“rb+”</td>
<td>以读/写方式打开一个二进制文件</td>
</tr>
<tr>
<td>“wb+”</td>
<td>以读/写方式建立一个新的二进制文件</td>
</tr>
<tr>
<td>“ab+”</td>
<td>以读/写方式打开一个二进制文件进行追加</td>
</tr>
</tbody></table>
</li>
<li><p>当用fopen()成功的打开一个文件时，该函数将返回一个FILE指针，如果文件打开失败，将返回一个NULL指针。如想打开test文件，进行写：</p>
</li>
<li><blockquote>
<p>FILE *fp;</p>
<p>if((fp=fopen(“test”,”w”))==NULL)</p>
<p>{</p>
<p>  printf(“File cannot be  opened\n”);</p>
<p>  exit();</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>  printf(“File opened for writing\n”);</p>
<p>}</p>
<p>fclose(fp);</p>
</blockquote>
</li>
<li><p>c语言中有三个特殊的文件指针无需定义、打开可直接使用:</p>
<ol>
<li>stdin： 标准输入 默认为当前终端（键盘）<ul>
<li>我们使用的scanf、getchar函数默认从此终端获得数据</li>
</ul>
</li>
<li>stdout：标准输出 默认为当前终端（屏幕）<ul>
<li>我们使用的printf、puts函数默认输出信息到此终端</li>
</ul>
</li>
<li>stderr：标准出错 默认为当前终端（屏幕）<ul>
<li>当我们程序出错或者使用:perror函数时信息打印在此终端</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>关闭文件函数fclose()</p>
<ul>
<li><p>文件操作完成后，必须要用fclose()函数进行关闭，这是因为对打开的文件进行写入时，若文件缓冲区的空间未被写入的内容填满，这些内容不会写到打开的文件中去而丢失。只有对打开的文件进行关闭操作时，停留在文件缓冲区的内容才能写到该文件中去，从而使文件完整。再者一旦关闭了文件，该文件对应的FILE结构将被释放，从而使关闭的文件得到保护，因为这时对该文件的存取操作将不会进行。文件的关闭也意味着释放了该文件的缓冲区。</p>
</li>
<li><p><code>int fclose(FILE *stream);</code></p>
</li>
<li><p>它表示该函数将关闭FILE指针对应的文件，并返回一个整数值。若成功地关闭了文件，则返回一个0值，否则返回一个非0值。常用以下方法进行测试</p>
</li>
<li><blockquote>
<p>if(fclose(fp)!=0)</p>
<p>{</p>
<p>  printf(“File cannot be closed\n”);</p>
<p>  exit(1);</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>  printf(“File is now closed\n”);</p>
<p>}</p>
</blockquote>
</li>
</ul>
</li>
<li><p>文件的读写</p>
</li>
</ol>
<ul>
<li><p>读写文件中字符的函数(一次只读写文件中的一个字符)：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">putc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>其中fgetc()函数将把由流指针指向的文件中的一个字符读出，例如：</p>
</li>
<li><p><code>ch=fgetc(fp);</code></p>
</li>
<li><p>将把流指针fp指向的文件中的一个字符读出，并赋给ch，当执行fgetc()函数时，若当时文件指针指到文件尾，即遇到文件结束标志EOF(其对应值为-1)，该函数返回一个-1给ch，在程序中常用检查该函数返回值是否为-1来判断是否已读到文件尾，从而决定是否继续。</p>
</li>
<li><blockquote>
<p>#include &lt;stdio.h&gt;</p>
<p>int main(void)</p>
<p>{</p>
<p>  FILE *fp;</p>
<p>  char ch;</p>
<p>  if((fp=fopen(“myfile.txt”,”r”))==NULL)</p>
<p>  {</p>
<p>​    printf(“file cannot be opened\n”);</p>
<p>​    exit(1);</p>
<p>  }</p>
<p>  while((ch=fgetc(fp))!=EOF) {</p>
<p>​    fputc(ch,stdout);</p>
<p>  }</p>
<p>  fclose(fp);</p>
<p>  return 0;</p>
<p>}</p>
</blockquote>
</li>
<li><p>该程序以只读方式打开myfile.txt文件，在执行while循环时，文件指针每循环一次后移一个字符位置。用fgetc()函数将文件指针指定的字符读到ch变量中，然后用fputc()函数在屏幕上显示，当读到文件结束标志EOF时，变关闭该文件。</p>
</li>
<li><p>上面的程序用到了fputc()函数，该函数将字符变量ch的值写到流指针指定的文件中去，由于流指针用的是标准输出(显示器)的FILE指针stdout，故读出的字符将在显示器上显示。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>读写文件中字符串的函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">,</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>其中fgets()函数将把由流指针指定的文件中n-1个字符，读到由指针stream指向的字符数组中去，例如：</p>
</li>
<li><p><code>fgets(buffer, 9, fp);</code></p>
</li>
<li><p>将把fp指向的文件中的8个字符读到buffer内存区，buffer可以是定义的字符数组，也可以是动态分配的内存区。</p>
</li>
<li><p>注意，fgets()函数读到’\n’就停止，而不管是否达到数目要求。同时在读取字符串的最后加上’\0’。</p>
</li>
<li><p>fgets()函数执行完以后，返回一个指向该串的指针。如果读到文件尾或出错，则均返回一个空指针NULL，所以长用feof()函数来测定是否到了文件尾或者是ferror()函数来测试是否出错，例如下面的程序用fgets()函数读test.txt文件中的第一行并显示出来：</p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cannot open file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>fputs()函数想指定文件写入一个由string指向的字符串，’\0’不写入文件。     </li>
<li>fprintf()同printf()函数类似，不同之处就是printf()函数是想显示器输出，fprintf()则是向流指针指向的文件输出。</li>
<li>下面程序是向文件test.dat里输入一些字符：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token operator">=</span><span class="token string">"That's good news"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">617</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>

    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.dat"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"Your score of TOEFLis"</span><span class="token punctuation">,</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">':'</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>文件二进制块读写函数</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//返回值:读或写的记录数,成功时返回的记录数等于nmemb,</span>
<span class="token comment">//出错或读到文件末尾时返回 的记录数小于nmemb,也可能返回0          </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>fread</code>和<code>fwrite</code>用于读写记录,这里的记录是指一串固定长度的字节,比如一个int、一个结构 体或者一个定长数组。参数<code>size</code>指出一条记录的长度,而<code>nmemb</code>指出要读或写多少条记录,这些 记录在<code>ptr</code>所指的内存空间中连续存放,共占<code>size * nmemb</code>个字节,<code>fread</code>从文件<code>stream</code>中读 出<code>size * nmemb</code>个字节保存到<code>ptr</code>中,而<code>fwrite</code>把<code>ptr</code>中的<code>size * nmemb</code>个字节写到文件<code>stream</code>中。</li>
<li> <code>nmemb</code>是请求读或写的记录数,<code>fread</code>和<code>fwrite</code>返回的记录数有可能小于<code>nmemb</code>指定的记录数。例 如当前读写位置距文件末尾只有一条记录的长度,调用<code>fread</code>时指定<code>nmemb</code>为2,则返回值为1。 如果当前读写位置已经在文件末尾了,或者读文件时出错了,则<code>fread</code>返回0。如果写文件时出 错了,则<code>fwrite</code>的返回值小于<code>nmemb</code>指定的值。下面的例子由两个程序组成,一个程序把结构体 保存到文件中,另一个程序和从文件中读出结构体。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">record</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">record</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"Ken"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"Knuth"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"recfile"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file recfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>   
    
    <span class="token function">fwrite</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">record</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">struct</span> <span class="token class-name">record</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">record</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"recfile"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open file recfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fread</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">record</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name1: %s\tAge1: %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rintf</span><span class="token punctuation">(</span><span class="token string">"Name2: %s\tAge2: %d\n"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4.清除和设置文件缓冲区</p>
<ul>
<li><code>int fflush(FILE *stream);</code></li>
<li><code>fflush()</code>函数将清除由<code>stream</code>指向的文件缓冲区里的内容，常用于写完一些数据后，立即用该函数清除缓冲区，以免误操作时，破坏原来的数据。</li>
</ul>
<ol start="5">
<li>  文件的随机读写函数</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回值:成功返回0,出错返回-1并设置errno </span>

<span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回值:成功返回当前读写位置,出错返回-1并设置errno </span>

<span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>fseek的whence和offset参数共同决定了读写位置移动到何处,whence参数的含义如下: </p>
</li>
<li><blockquote>
<p>SEEK_SET </p>
<p>​    从文件开头移动offset个字节</p>
<p>SEEK_CUR </p>
<p>​    从当前位置移动offset个字节 </p>
<p>SEEK_END <img src="E:\Computer\myblog\hexo\source_posts\C-基础教程整理\wps2394.tmp.jpg" alt="img"> </p>
<p>​    从文件末尾移动offset个字节 </p>
</blockquote>
</li>
<li><p>offset可正可负,负值表示向前(向文件开头的方向)移动,正值表示向后(向文件末尾的方 向)移动,如果向前移动的字节数超过了文件开头则出错返回,如果向后移动的字节数超过了 文件末尾,再次写入时将增大文件尺寸,从原来的文件末尾到fseek移动之后的读写位置之间的 字节都是0。 </p>
</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"textfile"</span><span class="token punctuation">,</span><span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span>"Open file textfile\n”<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Seek file textfile\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">'K'</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="文件操作案例"><a href="#文件操作案例" class="headerlink" title="文件操作案例"></a>文件操作案例</h4><ol>
<li><p>配置文件读写（自定义接口）</p>
<blockquote>
<p>配置文件读写案例实现分析</p>
<p>​    1、    功能划分</p>
<p>​        a)    界面测试（功能集成）</p>
<p>​            自己动手规划接口模型。</p>
<p>​        b)    配置文件读写    </p>
<p>​            i.    配置文件读（根据key，读取valude）</p>
<p>​            ii.    配置文件写（输入key、valude）</p>
<p>​            iii.    配置文件修改（输入key、valude）</p>
<p>​            iv.    优化 ===》接口要求紧 模块要求松</p>
<p>​    2、    实现及代码讲解</p>
<p>​    3、    测试。</p>
<p>（2）加密文件读写 （使用别人写好的接口）</p>
</blockquote>
</li>
</ol>
<ul>
<li>cfg.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//防止头文件重复包含</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token comment">//为了兼容C++编译器</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span><span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __cplusplus</span></span>

<span class="token comment">//函数的声明</span>

<span class="token comment">//读配置文件</span>
<span class="token keyword">int</span> <span class="token function">ReadCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>pLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//写、修改配置文件</span>
<span class="token keyword">int</span> <span class="token function">WriteCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __cplusplus</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>ctg.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>

<span class="token comment">//文件最大大小</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">8</span><span class="token operator">*</span><span class="token number">1024</span> </span><span class="token comment">//8K</span></span>

<span class="token comment">/*
功能：获取非空字符串
参数：
	inbuf： 原始字符串buf首地址
	outbuf：非空字符串buf首地址
返回值：
	成功：0
	失败：非0
*/</span>
<span class="token keyword">int</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>inbuf<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>outbuf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>inbuf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> outbuf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> inbuf<span class="token punctuation">;</span>
	<span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从左往右移动，如果当前字符为空，而且没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		begin<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//位置从右移动一位</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从右往左移动，如果当前字符为空</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		end<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//往左移动</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	n <span class="token operator">=</span> end <span class="token operator">-</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//非空元素个数</span>

	<span class="token function">strncpy</span><span class="token punctuation">(</span>outbuf<span class="token punctuation">,</span> p <span class="token operator">+</span> begin<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	outbuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//读配置文件</span>
<span class="token keyword">int</span> <span class="token function">ReadCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>pLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pKey <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pVal <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pLen <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//如果没有key所对应的value，flag则为0</span>

	<span class="token comment">//读方式打开文件</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"ReadCfgFile[fopen]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//如果文件没有结束</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		tmp <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//判断每行中是否包含key</span>
		tmp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span><span class="token comment">//如果没有包含key</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//跳出本次循环</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//重新设置搜索字符串的位置（跳过key）</span>
		<span class="token comment">// "k1 = 1111" -> " = 1111"</span>
		tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//判断是否包含=</span>
		tmp <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token char">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//跳出本次循环</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//重新设置搜索字符串的位置(跳过=)</span>
		<span class="token comment">//"= 1111" -> "   1111  "</span>
		tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token comment">//获取非空字符，两头堵模型</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">trimSpace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> pVal<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//到这，已经找到你所要求的value</span>
			<span class="token operator">*</span>pLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pVal<span class="token punctuation">)</span><span class="token punctuation">;</span> 
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//很重要</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有%s所对应的值\n"</span><span class="token punctuation">,</span> pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//关闭文件</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//写、修改配置文件</span>
<span class="token comment">//实现流程</span>
<span class="token comment">//循环读每一行</span>
<span class="token comment">//此行包含key，则把key的value修改</span>
<span class="token comment">//如果所有行都不包含key，则在文件结尾追加： "key = value"</span>
<span class="token comment">//难点：如何修改</span>
<span class="token keyword">int</span> <span class="token function">WriteCfgFile</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>fileName<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pVal<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pKey <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pVal <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> tmpBuf<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> lineBuf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//0: 不包括key</span>

	<span class="token comment">//打开文件，读写方式打开，文件不存在，打开失败</span>
	fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//文件不存在时，新建文件</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//perror("WriteCfgFile ")</span>
		<span class="token comment">//return -2;</span>

		<span class="token comment">//写读方式打开文件，文件不存在则创建</span>
		fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"WriteCfgFile fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//假如文件存在</span>
	<span class="token comment">//获取文件内容大小，看是否超出范围</span>

	<span class="token comment">//把文件光标移动到结尾处</span>
	<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//获取文件内容大小</span>
	<span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//如果文件大小超过8k，中断程序</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> MAXSIZE<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件大小超过8k，不支持\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//把文件光标移动到最开始位置</span>
	<span class="token comment">//fseek(fp, 0, SEEK_SET);</span>
	<span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//循环读每一行</span>
	<span class="token comment">//此行包含key，则把key的value修改</span>
	<span class="token comment">//如果所有行都不包含key，则在文件结尾追加： "key = value"</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">fgets</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//此行是否包含key</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">,</span> pKey<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//包含</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//重写给lineBuf格式化</span>
			<span class="token function">sprintf</span><span class="token punctuation">(</span>lineBuf<span class="token punctuation">,</span> <span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> pKey<span class="token punctuation">,</span> pVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">strcat</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> lineBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">strcat</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> lineBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span> <span class="token comment">//文件中没有key值</span>
	<span class="token punctuation">&#123;</span><span class="token comment">//如果所有行都不包含key，则在文件结尾追加： "key = value"</span>
		<span class="token comment">//sprintf(lineBuf, "%s = %s", pKey, pVal);	</span>

		<span class="token comment">//到这一步，文件光标已经移动到结尾处</span>
		<span class="token comment">//如果此时往文件中写内容，肯定是追加到结尾处</span>
		<span class="token comment">//格式化方式写文件</span>
		<span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> pKey<span class="token punctuation">,</span> pVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>	<span class="token comment">//关闭文件</span>
		<span class="token comment">//重写以写方式打开文件，重写给文件写内容</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//写读方式打开文件，文件不存在则创建</span>
		fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"WriteCfgFile fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//往文件写内容</span>
		<span class="token function">fputs</span><span class="token punctuation">(</span>tmpBuf<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>main.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token comment">//&lt;>: 从系统目录找</span>
<span class="token comment">//"": 从当前目录找，没有找到再从系统目录中寻找</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cfg.h"</span> </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">CFGNAME</span> <span class="token string">"./mycfg.ini"</span></span>

<span class="token keyword">void</span> <span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 写配置文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 读配置文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4 退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">MyWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入key: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">WriteCfgFile</span><span class="token punctuation">(</span>CFGNAME<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//失败</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WriteCfgFile err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n写入的内容：%s = %s\n\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">MyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入key: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

	ret <span class="token operator">=</span> <span class="token function">ReadCfgFile</span><span class="token punctuation">(</span>CFGNAME<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//失败</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ReadCfgFile err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n %s对应的value为：%s, 长度为：%d\n\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> cmd<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cmd:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">MyWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">MyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>拷贝文件</p>
</blockquote>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">2</span> </span><span class="token comment">//每次读写2k数据</span></span>

<span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 拷贝文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">myCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> rPath<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//源文件</span>
	<span class="token keyword">char</span> wPath<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//目的文件</span>
	FILE <span class="token operator">*</span>rFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>wFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入源文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> rPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入目的文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> wPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>rPath<span class="token punctuation">,</span> wPath<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"源文件和目的文件不能相同\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//只读方式打开源文件</span>
	rFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>rPath<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen rPath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//只写方式打开目的文件</span>
	wFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>wPath<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen wFp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">do</span> 
	<span class="token punctuation">&#123;</span>
		n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token comment">//读多少，写多少</span>
		n <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"拷贝：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">fwrite</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"拷贝完成\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	

	<span class="token keyword">int</span> cmd<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cmd: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">myCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>加密 解密文件</p>
</blockquote>
<ul>
<li>des.h</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*********************************************************
 *  des.h
 *  用户使用des算法头文件
 *	
 *********************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_OPENDESS_H_</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_OPENDESS_H_</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>


<span class="token comment">//加密小于4k的数据（encrypt：加密）</span>
<span class="token comment">//pInData：明文数据</span>
<span class="token comment">//nInDataLen：明文数据长度</span>
<span class="token comment">//pOutData：加密后的数据</span>
<span class="token comment">//pOutDataLen：加密数据的长度</span>
<span class="token keyword">int</span> <span class="token function">DesEnc</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//加密等于4k的数据</span>
<span class="token keyword">int</span> <span class="token function">DesEnc_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//解密小于4k的数据(decrypt：解密)</span>
<span class="token comment">//pInData：密文数据</span>
<span class="token comment">//nInDataLen：密文数据长度</span>
<span class="token comment">//pOutData：解密后的数据</span>
<span class="token comment">//pOutDataLen：解密数据的长度</span>
<span class="token keyword">int</span> <span class="token function">DesDec</span><span class="token punctuation">(</span>
	   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	   <span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	   <span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//解密等于4k的数据</span>
<span class="token keyword">int</span> <span class="token function">DesDec_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>des.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/******************************************************
 *
 *  des.c
 *  common des......
 *
 ******************************************************/</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"des.h"</span></span>

<span class="token comment">/*********************************************************
  data type definition for Des;
**********************************************************/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EN0</span>	<span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DE1</span>	<span class="token expression"><span class="token number">1</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DES_KEYBYTES</span>	<span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DES_KEYLONGS</span>	<span class="token expression"><span class="token number">32</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DES_BLOCKLEN</span>	<span class="token expression"><span class="token number">8</span></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ek<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	ekLen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dk<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	dkLen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> CbcCtx<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> DES_CTX<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ek1<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	ek1Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dk1<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	dk1Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> ek2<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	ek2Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dk2<span class="token punctuation">[</span>DES_KEYBYTES<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span>	dk2Len<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> CbcCtx<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">//int	IsFirstBlock;</span>
<span class="token punctuation">&#125;</span> DES3_CTX<span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pc1<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span>
	 <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span>
	<span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span>
	<span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pc2<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>		 <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>
	<span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> 	<span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span>		<span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span>
	<span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> 	<span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> bytebit<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0200</span><span class="token punctuation">,</span><span class="token number">0100</span><span class="token punctuation">,</span><span class="token number">040</span><span class="token punctuation">,</span><span class="token number">020</span><span class="token punctuation">,</span><span class="token number">010</span><span class="token punctuation">,</span><span class="token number">04</span><span class="token punctuation">,</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">01</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> totrot<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> bigbyte<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0x800000L</span><span class="token punctuation">,</span>	<span class="token number">0x400000L</span><span class="token punctuation">,</span>	<span class="token number">0x200000L</span><span class="token punctuation">,</span>	<span class="token number">0x100000L</span><span class="token punctuation">,</span>
	<span class="token number">0x80000L</span><span class="token punctuation">,</span>	<span class="token number">0x40000L</span><span class="token punctuation">,</span>	<span class="token number">0x20000L</span><span class="token punctuation">,</span>	<span class="token number">0x10000L</span><span class="token punctuation">,</span>
	<span class="token number">0x8000L</span><span class="token punctuation">,</span>	<span class="token number">0x4000L</span><span class="token punctuation">,</span>	<span class="token number">0x2000L</span><span class="token punctuation">,</span>	<span class="token number">0x1000L</span><span class="token punctuation">,</span>
	<span class="token number">0x800L</span><span class="token punctuation">,</span>		<span class="token number">0x400L</span><span class="token punctuation">,</span>		<span class="token number">0x200L</span><span class="token punctuation">,</span>		<span class="token number">0x100L</span><span class="token punctuation">,</span>
	<span class="token number">0x80L</span><span class="token punctuation">,</span>		<span class="token number">0x40L</span><span class="token punctuation">,</span>		<span class="token number">0x20L</span><span class="token punctuation">,</span>		<span class="token number">0x10L</span><span class="token punctuation">,</span>
	<span class="token number">0x8L</span><span class="token punctuation">,</span>		<span class="token number">0x4L</span><span class="token punctuation">,</span>		<span class="token number">0x2L</span><span class="token punctuation">,</span>		<span class="token number">0x1L</span>	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//insert digits</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP1<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>
       <span class="token number">0x01010400l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00010000l</span><span class="token punctuation">,</span><span class="token number">0x01010404l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010004l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span><span class="token number">0x00010000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000400l</span><span class="token punctuation">,</span><span class="token number">0x01010400l</span><span class="token punctuation">,</span><span class="token number">0x01010404l</span><span class="token punctuation">,</span><span class="token number">0x00000400l</span><span class="token punctuation">,</span>
       <span class="token number">0x01000404l</span><span class="token punctuation">,</span><span class="token number">0x01010004l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x00010400l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010400l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span><span class="token number">0x01000404l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010004l</span><span class="token punctuation">,</span><span class="token number">0x01000004l</span><span class="token punctuation">,</span><span class="token number">0x01000004l</span><span class="token punctuation">,</span><span class="token number">0x00010004l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010000l</span><span class="token punctuation">,</span><span class="token number">0x01010404l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010400l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span><span class="token number">0x01000000l</span><span class="token punctuation">,</span><span class="token number">0x00000400l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010004l</span><span class="token punctuation">,</span><span class="token number">0x00010000l</span><span class="token punctuation">,</span><span class="token number">0x00010400l</span><span class="token punctuation">,</span><span class="token number">0x01000004l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000400l</span><span class="token punctuation">,</span><span class="token number">0x00000004l</span><span class="token punctuation">,</span><span class="token number">0x01000404l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span>
       <span class="token number">0x01010404l</span><span class="token punctuation">,</span><span class="token number">0x00010004l</span><span class="token punctuation">,</span><span class="token number">0x01010000l</span><span class="token punctuation">,</span><span class="token number">0x01000404l</span><span class="token punctuation">,</span>
       <span class="token number">0x01000004l</span><span class="token punctuation">,</span><span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x00010404l</span><span class="token punctuation">,</span><span class="token number">0x01010400l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000404l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x01000400l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00010004l</span><span class="token punctuation">,</span><span class="token number">0x00010400l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x01010004l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP2<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>
       <span class="token number">0x80108020l</span><span class="token punctuation">,</span><span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span><span class="token number">0x00108020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00100000l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span><span class="token number">0x80008020l</span><span class="token punctuation">,</span>
       <span class="token number">0x80000020l</span><span class="token punctuation">,</span><span class="token number">0x80108020l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x80000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00100000l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00108000l</span><span class="token punctuation">,</span><span class="token number">0x00100020l</span><span class="token punctuation">,</span><span class="token number">0x80008020l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80000000l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span><span class="token number">0x00108020l</span><span class="token punctuation">,</span><span class="token number">0x80100000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00100020l</span><span class="token punctuation">,</span><span class="token number">0x80000020l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00108000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00008020l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x80100000l</span><span class="token punctuation">,</span><span class="token number">0x00008020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00108020l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span><span class="token number">0x00100000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80008020l</span><span class="token punctuation">,</span><span class="token number">0x80100000l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span>
       <span class="token number">0x80100000l</span><span class="token punctuation">,</span><span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x80108020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00108020l</span><span class="token punctuation">,</span><span class="token number">0x00000020l</span><span class="token punctuation">,</span><span class="token number">0x00008000l</span><span class="token punctuation">,</span><span class="token number">0x80000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00008020l</span><span class="token punctuation">,</span><span class="token number">0x80108000l</span><span class="token punctuation">,</span><span class="token number">0x00100000l</span><span class="token punctuation">,</span><span class="token number">0x80000020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00100020l</span><span class="token punctuation">,</span><span class="token number">0x80008020l</span><span class="token punctuation">,</span><span class="token number">0x80000020l</span><span class="token punctuation">,</span><span class="token number">0x00100020l</span><span class="token punctuation">,</span>
       <span class="token number">0x00108000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x80008000l</span><span class="token punctuation">,</span><span class="token number">0x00008020l</span><span class="token punctuation">,</span>
       <span class="token number">0x80000000l</span><span class="token punctuation">,</span><span class="token number">0x80100020l</span><span class="token punctuation">,</span><span class="token number">0x80108020l</span><span class="token punctuation">,</span><span class="token number">0x00108000l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP3<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span> 
       <span class="token number">0x00000208l</span><span class="token punctuation">,</span><span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00020208l</span><span class="token punctuation">,</span><span class="token number">0x08000200l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x08000008l</span><span class="token punctuation">,</span><span class="token number">0x08000008l</span><span class="token punctuation">,</span><span class="token number">0x00020000l</span><span class="token punctuation">,</span>
       <span class="token number">0x08020208l</span><span class="token punctuation">,</span><span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x08020000l</span><span class="token punctuation">,</span><span class="token number">0x00000208l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000000l</span><span class="token punctuation">,</span><span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x00000200l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020200l</span><span class="token punctuation">,</span><span class="token number">0x08020000l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span><span class="token number">0x00020208l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000208l</span><span class="token punctuation">,</span><span class="token number">0x00020200l</span><span class="token punctuation">,</span><span class="token number">0x00020000l</span><span class="token punctuation">,</span><span class="token number">0x08000208l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x08020208l</span><span class="token punctuation">,</span><span class="token number">0x00000200l</span><span class="token punctuation">,</span><span class="token number">0x08000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x08000000l</span><span class="token punctuation">,</span><span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x00000208l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020000l</span><span class="token punctuation">,</span><span class="token number">0x08020200l</span><span class="token punctuation">,</span><span class="token number">0x08000200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000200l</span><span class="token punctuation">,</span><span class="token number">0x00020008l</span><span class="token punctuation">,</span><span class="token number">0x08020208l</span><span class="token punctuation">,</span><span class="token number">0x08000200l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000008l</span><span class="token punctuation">,</span><span class="token number">0x00000200l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span>
       <span class="token number">0x08000208l</span><span class="token punctuation">,</span><span class="token number">0x00020000l</span><span class="token punctuation">,</span><span class="token number">0x08000000l</span><span class="token punctuation">,</span><span class="token number">0x08020208l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x00020208l</span><span class="token punctuation">,</span><span class="token number">0x00020200l</span><span class="token punctuation">,</span><span class="token number">0x08000008l</span><span class="token punctuation">,</span>
       <span class="token number">0x08020000l</span><span class="token punctuation">,</span><span class="token number">0x08000208l</span><span class="token punctuation">,</span><span class="token number">0x00000208l</span><span class="token punctuation">,</span><span class="token number">0x08020000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00020208l</span><span class="token punctuation">,</span><span class="token number">0x00000008l</span><span class="token punctuation">,</span><span class="token number">0x08020008l</span><span class="token punctuation">,</span><span class="token number">0x00020200l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP4<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>             
       <span class="token number">0x00802001l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00000080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00802080l</span><span class="token punctuation">,</span><span class="token number">0x00800081l</span><span class="token punctuation">,</span><span class="token number">0x00800001l</span><span class="token punctuation">,</span><span class="token number">0x00002001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span><span class="token number">0x00802081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000081l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00800080l</span><span class="token punctuation">,</span><span class="token number">0x00800001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000001l</span><span class="token punctuation">,</span><span class="token number">0x00002000l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00802001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000080l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00002001l</span><span class="token punctuation">,</span><span class="token number">0x00002080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00800081l</span><span class="token punctuation">,</span><span class="token number">0x00000001l</span><span class="token punctuation">,</span><span class="token number">0x00002080l</span><span class="token punctuation">,</span><span class="token number">0x00800080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00002000l</span><span class="token punctuation">,</span><span class="token number">0x00802080l</span><span class="token punctuation">,</span><span class="token number">0x00802081l</span><span class="token punctuation">,</span><span class="token number">0x00000081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00800080l</span><span class="token punctuation">,</span><span class="token number">0x00800001l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span><span class="token number">0x00802081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000081l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00802000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00002080l</span><span class="token punctuation">,</span><span class="token number">0x00800080l</span><span class="token punctuation">,</span><span class="token number">0x00800081l</span><span class="token punctuation">,</span><span class="token number">0x00000001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00802001l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00002081l</span><span class="token punctuation">,</span><span class="token number">0x00000080l</span><span class="token punctuation">,</span>
       <span class="token number">0x00802081l</span><span class="token punctuation">,</span><span class="token number">0x00000081l</span><span class="token punctuation">,</span><span class="token number">0x00000001l</span><span class="token punctuation">,</span><span class="token number">0x00002000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00800001l</span><span class="token punctuation">,</span><span class="token number">0x00002001l</span><span class="token punctuation">,</span><span class="token number">0x00802080l</span><span class="token punctuation">,</span><span class="token number">0x00800081l</span><span class="token punctuation">,</span>
       <span class="token number">0x00002001l</span><span class="token punctuation">,</span><span class="token number">0x00002080l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00802001l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000080l</span><span class="token punctuation">,</span><span class="token number">0x00800000l</span><span class="token punctuation">,</span><span class="token number">0x00002000l</span><span class="token punctuation">,</span><span class="token number">0x00802080l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP5<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>   
       <span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x02080100l</span><span class="token punctuation">,</span><span class="token number">0x02080000l</span><span class="token punctuation">,</span><span class="token number">0x42000100l</span><span class="token punctuation">,</span>
       <span class="token number">0x00080000l</span><span class="token punctuation">,</span><span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x40000000l</span><span class="token punctuation">,</span><span class="token number">0x02080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x40080100l</span><span class="token punctuation">,</span><span class="token number">0x00080000l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x42000100l</span><span class="token punctuation">,</span><span class="token number">0x42080000l</span><span class="token punctuation">,</span><span class="token number">0x00080100l</span><span class="token punctuation">,</span><span class="token number">0x40000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x02000000l</span><span class="token punctuation">,</span><span class="token number">0x40080000l</span><span class="token punctuation">,</span><span class="token number">0x40080000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x42080100l</span><span class="token punctuation">,</span><span class="token number">0x42080100l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span>
       <span class="token number">0x42080000l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x42000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x02080100l</span><span class="token punctuation">,</span><span class="token number">0x02000000l</span><span class="token punctuation">,</span><span class="token number">0x42000000l</span><span class="token punctuation">,</span><span class="token number">0x00080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x00080000l</span><span class="token punctuation">,</span><span class="token number">0x42000100l</span><span class="token punctuation">,</span><span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x02000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x40000000l</span><span class="token punctuation">,</span><span class="token number">0x02080000l</span><span class="token punctuation">,</span><span class="token number">0x42000100l</span><span class="token punctuation">,</span><span class="token number">0x40080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40000000l</span><span class="token punctuation">,</span><span class="token number">0x42080000l</span><span class="token punctuation">,</span><span class="token number">0x02080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x40080100l</span><span class="token punctuation">,</span><span class="token number">0x00000100l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x42080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x42080100l</span><span class="token punctuation">,</span><span class="token number">0x00080100l</span><span class="token punctuation">,</span><span class="token number">0x42000000l</span><span class="token punctuation">,</span><span class="token number">0x42080100l</span><span class="token punctuation">,</span>
       <span class="token number">0x02080000l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x00080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00080100l</span><span class="token punctuation">,</span><span class="token number">0x02000100l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span><span class="token punctuation">,</span><span class="token number">0x00080000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x40080000l</span><span class="token punctuation">,</span><span class="token number">0x02080100l</span><span class="token punctuation">,</span><span class="token number">0x40000100l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
       
       
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP6<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span> 
       <span class="token number">0x20000010l</span><span class="token punctuation">,</span><span class="token number">0x20400000l</span><span class="token punctuation">,</span><span class="token number">0x00004000l</span><span class="token punctuation">,</span><span class="token number">0x20404010l</span><span class="token punctuation">,</span>
       <span class="token number">0x20400000l</span><span class="token punctuation">,</span><span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x20404010l</span><span class="token punctuation">,</span><span class="token number">0x00400000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x00404010l</span><span class="token punctuation">,</span><span class="token number">0x00400000l</span><span class="token punctuation">,</span><span class="token number">0x20000010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x00004010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span><span class="token punctuation">,</span><span class="token number">0x00004000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00404000l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span><span class="token punctuation">,</span><span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x20400010l</span><span class="token punctuation">,</span>
       <span class="token number">0x20400010l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x00404010l</span><span class="token punctuation">,</span><span class="token number">0x20404000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00004010l</span><span class="token punctuation">,</span><span class="token number">0x00404000l</span><span class="token punctuation">,</span><span class="token number">0x20404000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x20400010l</span><span class="token punctuation">,</span><span class="token number">0x00404000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20404010l</span><span class="token punctuation">,</span><span class="token number">0x00400000l</span><span class="token punctuation">,</span><span class="token number">0x00004010l</span><span class="token punctuation">,</span><span class="token number">0x20000010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00400000l</span><span class="token punctuation">,</span><span class="token number">0x20004000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x00004010l</span><span class="token punctuation">,</span>
       <span class="token number">0x20000010l</span><span class="token punctuation">,</span><span class="token number">0x20404010l</span><span class="token punctuation">,</span><span class="token number">0x00404000l</span><span class="token punctuation">,</span><span class="token number">0x20400000l</span><span class="token punctuation">,</span>
       <span class="token number">0x00404010l</span><span class="token punctuation">,</span><span class="token number">0x20404000l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span><span class="token number">0x20400010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00000010l</span><span class="token punctuation">,</span><span class="token number">0x00004000l</span><span class="token punctuation">,</span><span class="token number">0x20400000l</span><span class="token punctuation">,</span><span class="token number">0x00404010l</span><span class="token punctuation">,</span>
       <span class="token number">0x00004000l</span><span class="token punctuation">,</span><span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span><span class="token punctuation">,</span><span class="token number">0x00000000l</span><span class="token punctuation">,</span>
       <span class="token number">0x20404000l</span><span class="token punctuation">,</span><span class="token number">0x20000000l</span><span class="token punctuation">,</span><span class="token number">0x00400010l</span><span class="token punctuation">,</span><span class="token number">0x20004010l</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
            
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP7<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0x00200000L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x04000802L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000800L</span><span class="token punctuation">,</span> <span class="token number">0x04000802L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04200802L</span><span class="token punctuation">,</span> <span class="token number">0x00200000L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x04000002L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000002L</span><span class="token punctuation">,</span> <span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x00000802L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000800L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x00200002L</span><span class="token punctuation">,</span> <span class="token number">0x04000800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000002L</span><span class="token punctuation">,</span> <span class="token number">0x04200000L</span><span class="token punctuation">,</span> <span class="token number">0x04200800L</span><span class="token punctuation">,</span> <span class="token number">0x00200002L</span><span class="token punctuation">,</span>
	<span class="token number">0x04200000L</span><span class="token punctuation">,</span> <span class="token number">0x00000800L</span><span class="token punctuation">,</span> <span class="token number">0x00000802L</span><span class="token punctuation">,</span> <span class="token number">0x04200802L</span><span class="token punctuation">,</span>
	<span class="token number">0x00200800L</span><span class="token punctuation">,</span> <span class="token number">0x00000002L</span><span class="token punctuation">,</span> <span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x00200800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x00200800L</span><span class="token punctuation">,</span> <span class="token number">0x00200000L</span><span class="token punctuation">,</span> <span class="token number">0x04000802L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000802L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x04200002L</span><span class="token punctuation">,</span> <span class="token number">0x00000002L</span><span class="token punctuation">,</span>
	<span class="token number">0x00200002L</span><span class="token punctuation">,</span> <span class="token number">0x04000000L</span><span class="token punctuation">,</span> <span class="token number">0x04000800L</span><span class="token punctuation">,</span> <span class="token number">0x00200000L</span><span class="token punctuation">,</span>
	<span class="token number">0x04200800L</span><span class="token punctuation">,</span> <span class="token number">0x00000802L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200800L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000802L</span><span class="token punctuation">,</span> <span class="token number">0x04000002L</span><span class="token punctuation">,</span> <span class="token number">0x04200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00200800L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x00000002L</span><span class="token punctuation">,</span> <span class="token number">0x04200802L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x00200802L</span><span class="token punctuation">,</span> <span class="token number">0x04200000L</span><span class="token punctuation">,</span> <span class="token number">0x00000800L</span><span class="token punctuation">,</span>
	<span class="token number">0x04000002L</span><span class="token punctuation">,</span> <span class="token number">0x04000800L</span><span class="token punctuation">,</span> <span class="token number">0x00000800L</span><span class="token punctuation">,</span> <span class="token number">0x00200002L</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> SP8<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0x10001040L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span> <span class="token number">0x10041040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10000000L</span><span class="token punctuation">,</span> <span class="token number">0x10001040L</span><span class="token punctuation">,</span> <span class="token number">0x00000040L</span><span class="token punctuation">,</span> <span class="token number">0x10000000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10040000L</span><span class="token punctuation">,</span> <span class="token number">0x10041040L</span><span class="token punctuation">,</span> <span class="token number">0x00041000L</span><span class="token punctuation">,</span>
	<span class="token number">0x10041000L</span><span class="token punctuation">,</span> <span class="token number">0x00041040L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span> <span class="token number">0x00000040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10040000L</span><span class="token punctuation">,</span> <span class="token number">0x10000040L</span><span class="token punctuation">,</span> <span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x00001040L</span><span class="token punctuation">,</span>
	<span class="token number">0x00041000L</span><span class="token punctuation">,</span> <span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10040040L</span><span class="token punctuation">,</span> <span class="token number">0x10041000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00001040L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x10040040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10000040L</span><span class="token punctuation">,</span> <span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x00041040L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00041040L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span> <span class="token number">0x10041000L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000040L</span><span class="token punctuation">,</span> <span class="token number">0x10040040L</span><span class="token punctuation">,</span> <span class="token number">0x00001000L</span><span class="token punctuation">,</span> <span class="token number">0x00041040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x00000040L</span><span class="token punctuation">,</span> <span class="token number">0x10000040L</span><span class="token punctuation">,</span> <span class="token number">0x10040000L</span><span class="token punctuation">,</span>
	<span class="token number">0x10040040L</span><span class="token punctuation">,</span> <span class="token number">0x10000000L</span><span class="token punctuation">,</span> <span class="token number">0x00040000L</span><span class="token punctuation">,</span> <span class="token number">0x10001040L</span><span class="token punctuation">,</span>
	<span class="token number">0x00000000L</span><span class="token punctuation">,</span> <span class="token number">0x10041040L</span><span class="token punctuation">,</span> <span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10000040L</span><span class="token punctuation">,</span>
	<span class="token number">0x10040000L</span><span class="token punctuation">,</span> <span class="token number">0x10001000L</span><span class="token punctuation">,</span> <span class="token number">0x10001040L</span><span class="token punctuation">,</span> <span class="token number">0x00000000L</span><span class="token punctuation">,</span>
	<span class="token number">0x10041040L</span><span class="token punctuation">,</span> <span class="token number">0x00041000L</span><span class="token punctuation">,</span> <span class="token number">0x00041000L</span><span class="token punctuation">,</span> <span class="token number">0x00001040L</span><span class="token punctuation">,</span>
	<span class="token number">0x00001040L</span><span class="token punctuation">,</span> <span class="token number">0x00040040L</span><span class="token punctuation">,</span> <span class="token number">0x10000000L</span><span class="token punctuation">,</span> <span class="token number">0x10041000L</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">deskey</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span><span class="token keyword">short</span> edf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cookey</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>raw1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>dough<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//void cpkey(register unsigned long *into);</span>
<span class="token comment">//void usekey(register unsigned long *from);</span>
<span class="token comment">//void des(unsigned char *inblock,unsigned char *outblock);</span>
<span class="token keyword">void</span> <span class="token function">scrunch</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>into<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">unscrun</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>into<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">desfunc</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>block<span class="token punctuation">,</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*****************  DES Function  *****************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandEncKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesEncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandDecKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesDecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesEncRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesEncKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesDecRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesDecKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">void</span> <span class="token function">deskey</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span><span class="token keyword">short</span> edf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>kn<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> pc1m<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pcr<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> 
	<span class="token punctuation">&#123;</span>
		l <span class="token operator">=</span> pc1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		m <span class="token operator">=</span> l <span class="token operator">&amp;</span> <span class="token number">07</span><span class="token punctuation">;</span>
		pc1m<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> key<span class="token punctuation">[</span>l <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>bytebit<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> edf <span class="token operator">==</span> DE1 <span class="token punctuation">)</span>	m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span>	m <span class="token operator">=</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
		n <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		kn<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> kn<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			l <span class="token operator">=</span> j <span class="token operator">+</span> totrot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> l <span class="token operator">&lt;</span> <span class="token number">28</span> <span class="token punctuation">)</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> 
		<span class="token punctuation">&#123;</span>
			l <span class="token operator">=</span> j <span class="token operator">+</span> totrot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> l <span class="token operator">&lt;</span> <span class="token number">56</span> <span class="token punctuation">)</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span>	pcr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pc1m<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> 
		<span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span> 
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> pcr<span class="token punctuation">[</span>pc2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>	kn<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">|=</span> bigbyte<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> pcr<span class="token punctuation">[</span>pc2<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>	kn<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">|=</span> bigbyte<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">cookey</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>raw1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>dough<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>cook<span class="token punctuation">,</span><span class="token operator">*</span>raw0<span class="token punctuation">;</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
	
	cook <span class="token operator">=</span> dough<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> raw1<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		raw0 <span class="token operator">=</span> raw1<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x00fc0000L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x00000fc0L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x00fc0000L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x00000fc0L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x0003f000L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw0 <span class="token operator">&amp;</span> <span class="token number">0x0000003fL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x0003f000L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>
		<span class="token operator">*</span>cook<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>raw1 <span class="token operator">&amp;</span> <span class="token number">0x0000003fL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">scrunch</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>into<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>into	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof<span class="token operator">++</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	<span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token operator">*</span>outof   <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">unscrun</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>outof<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>into<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token operator">*</span>outof<span class="token operator">++</span>	  <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into<span class="token operator">++</span>	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>outof <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>into	 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token operator">*</span>outof		  <span class="token operator">&amp;</span> <span class="token number">0xffL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">desfunc</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>block<span class="token punctuation">,</span><span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>keys<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">register</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> fval<span class="token punctuation">,</span> work<span class="token punctuation">,</span> right<span class="token punctuation">,</span> leftt<span class="token punctuation">;</span>
	<span class="token keyword">register</span> <span class="token keyword">int</span> round<span class="token punctuation">;</span>
	
	leftt <span class="token operator">=</span> block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	right <span class="token operator">=</span> block<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f0f0f0fL</span><span class="token punctuation">;</span>
	
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000ffffL</span><span class="token punctuation">;</span>
	
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333L</span><span class="token punctuation">;</span>
	
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff00ffL</span><span class="token punctuation">;</span>
	
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	right <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffL</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xaaaaaaaaL</span><span class="token punctuation">;</span>
	
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffL</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span>round <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> round <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> round<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		work  <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		work <span class="token operator">^=</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval  <span class="token operator">=</span> SP7<span class="token punctuation">[</span> work	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP5<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP3<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP1<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		work  <span class="token operator">=</span> right <span class="token operator">^</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP8<span class="token punctuation">[</span> work 	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP6<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP4<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP2<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		leftt <span class="token operator">^=</span> fval<span class="token punctuation">;</span>
		work  <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">&lt;&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		work <span class="token operator">^=</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval  <span class="token operator">=</span> SP7<span class="token punctuation">[</span> work 	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP5<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP3<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP1<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		work  <span class="token operator">=</span> leftt <span class="token operator">^</span> <span class="token operator">*</span>keys<span class="token operator">++</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP8<span class="token punctuation">[</span> work 	<span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP6<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP4<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		fval <span class="token operator">|=</span> SP2<span class="token punctuation">[</span><span class="token punctuation">(</span>work <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3fL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		right <span class="token operator">^=</span> fval<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	right <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xaaaaaaaaL</span><span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">=</span> <span class="token punctuation">(</span>leftt <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>leftt <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span>  <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff00ffL</span><span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>leftt <span class="token operator">>></span>  <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333L</span><span class="token punctuation">;</span>
	right <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000ffffL</span><span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	work <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">>></span>  <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> leftt<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f0f0f0fL</span><span class="token punctuation">;</span>
	leftt <span class="token operator">^=</span> work<span class="token punctuation">;</span>
	right <span class="token operator">^=</span> <span class="token punctuation">(</span>work <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>block<span class="token operator">++</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>
	<span class="token operator">*</span>block <span class="token operator">=</span> leftt<span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************************************************
	OPENCOMM_DesExpandEncKey	: Expand Des Enc Key 扩展des加密密钥
	Return value:
		0         : Success
		other     : failed
	Parameters:
		pbDesKey        : 扩展前的DES密钥(8字节)       input
		ulDesKeyLen     : 扩展前的DES密钥长度          input
		pbDesEncKey     : 扩展后的DES加密密钥(128字节)  output
		*ulDesEncKeyLen : 扩展后的DES加密密钥长度       output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandEncKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesEncKeyLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> kn<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dough<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">deskey</span><span class="token punctuation">(</span>pbDesKey<span class="token punctuation">,</span> EN0<span class="token punctuation">,</span> kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cookey</span><span class="token punctuation">(</span>kn<span class="token punctuation">,</span> dough<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>ulDesEncKeyLen <span class="token operator">=</span> DES_KEYBYTES<span class="token punctuation">;</span>  <span class="token comment">//32 long = 128 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbDesEncKey<span class="token punctuation">,</span> dough<span class="token punctuation">,</span> <span class="token operator">*</span>ulDesEncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************************************************
	OPENCOMM_DesExpandDecKey	: Expand Des Dec Key 扩展des解密密钥
	Return value:
		0       : Success
		other   : failed
	Parameters:
		pbDesKey        : 扩展前的DES密钥(8字节)      input
		ulDesKeyLen     : 扩展前的DES密钥长度         input
		pbDesDecKey     : 扩展后的DES解密密钥(128字节) output
		*ulDesDecKeyLen : 扩展后的DES解密密钥长度      output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesExpandDecKey</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulDesDecKeyLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> kn<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dough<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">deskey</span><span class="token punctuation">(</span>pbDesKey<span class="token punctuation">,</span> DE1<span class="token punctuation">,</span> kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cookey</span><span class="token punctuation">(</span>kn<span class="token punctuation">,</span> dough<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>ulDesDecKeyLen <span class="token operator">=</span> DES_KEYBYTES<span class="token punctuation">;</span>  <span class="token comment">//32 long = 128 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbDesDecKey<span class="token punctuation">,</span> dough<span class="token punctuation">,</span> <span class="token operator">*</span>ulDesDecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/****************************************************************
	OPENCOMM_DesEncRaw		: Des算法加密小整块明文8字节 
	Return value:
		0       : Success
		other   : failed
	Parameters:
		pbDesEncKey    : DES加密密钥    input
		ulDesEncKeyLen : DES加密密钥长度 input
		pbInData       : 待加密的明文    input
		ulInDataLen    : 待加密的明文长度 input
		pbOutData      : 加密后的密文    output
		*ulOutDataLen  : 加密后的密文长度 output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesEncRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesEncKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesEncKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> work<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ek<span class="token punctuation">[</span>DES_KEYLONGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> cp<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulInDataLen <span class="token operator">!=</span> DES_BLOCKLEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesEncKeyLen <span class="token operator">!=</span> DES_KEYBYTES<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> pbInData<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scrunch</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8 bytes -> 2 long</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> pbDesEncKey<span class="token punctuation">,</span> ulDesEncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">desfunc</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>ek<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">unscrun</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 long -> 8 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbOutData<span class="token punctuation">,</span> cp<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">*</span>ulOutDataLen <span class="token operator">=</span> DES_BLOCKLEN<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*****************************************************************
	OPENCOMM_DesDecRaw : Des算法解密小整块密文8字节 
	Return value:
		0     : Success
		other : failed
	Parameters:
		pbDesDecKey    : DES解密密钥     input
		ulDesDecKeyLen : DES解密密钥长度  input
		pbInData       : 待解密的密文     input
		ulInDataLen    : 待解密的密文长度  input
		pbOutData      : 解密后的明文     output
		*ulOutDataLen  : 解密后的明文长度  output
*****************************************************************/</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">OPENCOMM_DesDecRaw</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbDesDecKey<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulDesDecKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbInData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span>  ulInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pbOutData<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>ulOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> work<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dk<span class="token punctuation">[</span>DES_KEYLONGS<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> cp<span class="token punctuation">[</span>DES_BLOCKLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulInDataLen <span class="token operator">!=</span> DES_BLOCKLEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ulDesDecKeyLen <span class="token operator">!=</span> DES_KEYBYTES<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>

	<span class="token function">memcpy</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> pbInData<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scrunch</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8 bytes -> 2 long</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>dk<span class="token punctuation">,</span> pbDesDecKey<span class="token punctuation">,</span> ulDesDecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">desfunc</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>dk<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">unscrun</span><span class="token punctuation">(</span>work<span class="token punctuation">,</span>cp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 long -> 8 bytes</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pbOutData<span class="token punctuation">,</span> cp<span class="token punctuation">,</span> DES_BLOCKLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	des_enc(pbDesEncKey, pbInData, pbOutData);</span>
	<span class="token operator">*</span>ulOutDataLen <span class="token operator">=</span> DES_BLOCKLEN<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*********************   DES    *********************/</span>

<span class="token keyword">int</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesKeyBuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesEncKeyBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> EncKeyLen<span class="token punctuation">,</span> KeyLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> loops<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nInDataLen<span class="token operator">%</span><span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	KeyLen <span class="token operator">=</span> nDesKeyLen<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> pDesKey<span class="token punctuation">,</span> nDesKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	
	retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesExpandEncKey</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> KeyLen<span class="token punctuation">,</span>
		DesEncKeyBuf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>EncKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> retval<span class="token punctuation">;</span>

	loops <span class="token operator">=</span> nInDataLen<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesEncRaw</span><span class="token punctuation">(</span>DesEncKeyBuf<span class="token punctuation">,</span> EncKeyLen<span class="token punctuation">,</span> pInData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>
			<span class="token number">8</span><span class="token punctuation">,</span> pOutData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>pOutDataLen <span class="token operator">=</span> nInDataLen<span class="token punctuation">;</span>
	<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pDesKey<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nDesKeyLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesKeyBuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> DesDecKeyBuf<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> DecKeyLen<span class="token punctuation">,</span> KeyLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> loops<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nInDataLen<span class="token operator">%</span><span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span>nDesKeyLen <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0xEE20</span><span class="token punctuation">;</span>
	KeyLen <span class="token operator">=</span> nDesKeyLen<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> pDesKey<span class="token punctuation">,</span> nDesKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesExpandDecKey</span><span class="token punctuation">(</span>DesKeyBuf<span class="token punctuation">,</span> KeyLen<span class="token punctuation">,</span>
		DesDecKeyBuf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>DecKeyLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
	
	loops <span class="token operator">=</span> nInDataLen<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loops<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		retval <span class="token operator">=</span> <span class="token function">OPENCOMM_DesDecRaw</span><span class="token punctuation">(</span>DesDecKeyBuf<span class="token punctuation">,</span> DecKeyLen<span class="token punctuation">,</span> pInData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span>
			<span class="token number">8</span><span class="token punctuation">,</span> pOutData <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>pOutDataLen <span class="token operator">=</span> nInDataLen<span class="token punctuation">;</span>
	<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//对称明文数据打pading</span>
<span class="token keyword">void</span>  <span class="token function">CW_dataPadAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> tag<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>date<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> dateLen<span class="token punctuation">,</span> 
					<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>padDate<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>padDateLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>           i<span class="token punctuation">,</span> padLen<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pTmp   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	
	pTmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>dateLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pTmp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token operator">*</span>padDate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dateLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">,</span> date<span class="token punctuation">,</span> dateLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		padLen <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">-</span> dateLen <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>padLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			pTmp<span class="token punctuation">[</span>dateLen<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>padLen<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token operator">*</span>padDateLen <span class="token operator">=</span> dateLen <span class="token operator">+</span> padLen<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
		padLen <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> dateLen <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>padLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			pTmp<span class="token punctuation">[</span>dateLen<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>padLen<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>		
	<span class="token punctuation">&#125;</span>
	
	<span class="token operator">*</span>padDateLen <span class="token operator">=</span> dateLen <span class="token operator">+</span> padLen<span class="token punctuation">;</span>	
	<span class="token operator">*</span>padDate <span class="token operator">=</span> pTmp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">USER_PASSWORD_KEY</span> <span class="token string">"abcd1234"</span></span>


<span class="token comment">//数据加密</span>
<span class="token keyword">int</span> <span class="token function">DesEnc</span><span class="token punctuation">(</span>
		 <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		 <span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		 <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		 <span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>	<span class="token operator">*</span>padDate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>	padDateLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token function">CW_dataPadAdd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pInData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>nInDataLen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>padDate<span class="token punctuation">,</span> <span class="token operator">&amp;</span>padDateLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

	rv <span class="token operator">=</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		padDate<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padDateLen<span class="token punctuation">,</span> pOutData<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>padDate <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">free</span><span class="token punctuation">(</span>padDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>padDate <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">free</span><span class="token punctuation">(</span>padDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//数据加密</span>
<span class="token keyword">int</span> <span class="token function">DesEnc_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>	<span class="token operator">*</span>padDate <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>	padDateLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	rv <span class="token operator">=</span> <span class="token function">myic_DESEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		pInData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>nInDataLen<span class="token punctuation">,</span> pOutData<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//解密分配内存错误</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">ERR_MALLOC</span> <span class="token expression"><span class="token number">20</span></span></span>
<span class="token comment">//密码长度不是8的整数倍, 不合法</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">ERR_FILECONT</span> <span class="token expression"><span class="token number">20</span></span></span>


<span class="token comment">//用户使用函数des解密</span>
<span class="token keyword">int</span> <span class="token function">DesDec</span><span class="token punctuation">(</span>
		   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
		   <span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
		   <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
		   <span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token keyword">char</span>			padChar<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> 	<span class="token operator">*</span>tmpPlain <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	
	tmpPlain <span class="token operator">=</span>		<span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>nInDataLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ERR_MALLOC<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nInDataLen<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//解密</span>
	rv <span class="token operator">=</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		pInData<span class="token punctuation">,</span> nInDataLen<span class="token punctuation">,</span> tmpPlain<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//去pading</span>
	padChar <span class="token operator">=</span> tmpPlain<span class="token punctuation">[</span><span class="token operator">*</span>pOutDataLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padChar<span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padChar<span class="token operator">></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">//异常处理</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> ERR_FILECONT<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token operator">*</span>pOutDataLen <span class="token operator">=</span> <span class="token operator">*</span>pOutDataLen <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>padChar<span class="token punctuation">;</span>	
	<span class="token comment">//memset(tmpPlain + *pOutDataLen, 0, (int)padChar);	</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pOutData<span class="token punctuation">,</span> tmpPlain<span class="token punctuation">,</span> <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span> <span class="token function">free</span><span class="token punctuation">(</span>tmpPlain<span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//用户使用函数des解密</span>
<span class="token keyword">int</span> <span class="token function">DesDec_raw</span><span class="token punctuation">(</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pInData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>            nInDataLen<span class="token punctuation">,</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pOutData<span class="token punctuation">,</span>
	<span class="token keyword">int</span>           <span class="token operator">*</span>pOutDataLen<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span>				rv<span class="token punctuation">;</span>
	<span class="token comment">//char			padChar;</span>
	<span class="token comment">//unsigned char 	*tmpPlain = NULL;</span>

	<span class="token comment">/*
	tmpPlain =		(unsigned char *)malloc(nInDataLen+24);
	if (tmpPlain == NULL)
	&#123;
		return ERR_MALLOC;
	&#125;
	memset(tmpPlain, 0, nInDataLen+24);
	*/</span>

	<span class="token comment">//解密</span>
	rv <span class="token operator">=</span> <span class="token function">myic_DESDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>USER_PASSWORD_KEY<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>USER_PASSWORD_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span>
		pInData<span class="token punctuation">,</span> nInDataLen<span class="token punctuation">,</span> pOutData<span class="token punctuation">,</span> pOutDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//if (tmpPlain != NULL) free(tmpPlain);</span>
		<span class="token keyword">return</span> rv<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">/*
	//去pading
	padChar = tmpPlain[*pOutDataLen - 1];
	if ( (int)padChar&lt;=0 || (int)padChar>8) //异常处理
	&#123;
		if (tmpPlain) free(tmpPlain);
		return ERR_FILECONT;
	&#125;

	*pOutDataLen = *pOutDataLen - (int)padChar;	
	//memset(tmpPlain + *pOutDataLen, 0, (int)padChar);	
	memcpy(pOutData, tmpPlain, *pOutDataLen);
	if (tmpPlain) free(tmpPlain);	
	*/</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>main.c</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"des.h"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span> </span><span class="token comment">//4K</span></span>

<span class="token keyword">void</span> <span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 加密文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 解密文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3 清屏\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4 退出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//加密文件</span>
<span class="token keyword">void</span> <span class="token function">FileEnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> srcFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> dstFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入需要加密的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入加密后的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	FILE <span class="token operator">*</span>rFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>wFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> srcBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//明文</span>
	<span class="token keyword">int</span> srcLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//明文长度</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dstBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//密文</span>
	<span class="token keyword">int</span> dstLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//密文长度</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> wLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">//读、二进制方式打开需要加密的文件</span>
	rFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileEnc fopen srcFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//写、二进制方式打开加密后的文件</span>
	wFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileEnc fopen dstFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从源文件中读取数据</span>
	<span class="token comment">//4k: DesEnc_raw()</span>
	<span class="token comment">//&lt;4k: DesEnc()</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//从文件中读取内容</span>
		<span class="token comment">//srcBuf: 存放文件内容的buf</span>
		<span class="token comment">//1：每次读1个字节</span>
		<span class="token comment">//SIZE: 一次读4k块内存， 读取内容的大小： SIZE * 1</span>
		<span class="token comment">//返回值：成功读取内容的块数</span>
		srcLen <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>srcLen <span class="token operator">&lt;</span> SIZE<span class="token punctuation">)</span> <span class="token comment">//如果读取内容&lt;4k，跳出循环</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//=4k数据的加密处理</span>
		<span class="token comment">//把明文srcBuf(长度为srcLen)加密为密文dstBuf(长度为dstLen)</span>
		ret <span class="token operator">=</span> <span class="token function">DesEnc_raw</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileEnc DesEnc_raw err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//把密文dstBuf(长度为dstLen)写到文件wFp中</span>
		wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（等于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//小于4k的处理</span>
	<span class="token comment">//把明文srcBuf(长度为srcLen)加密为密文dstBuf(长度为dstLen)</span>
	ret <span class="token operator">=</span> <span class="token function">DesEnc</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileEnc DesEnc err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//把密文dstBuf(长度为dstLen)写到文件wFp中</span>
	wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（小于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

End<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


<span class="token punctuation">&#125;</span>

<span class="token comment">//解密文件</span>
<span class="token keyword">void</span> <span class="token function">FileDec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> srcFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> dstFile<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入需要解密的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入解密后的文件: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	FILE <span class="token operator">*</span>rFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	FILE <span class="token operator">*</span>wFp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> srcBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//密文</span>
	<span class="token keyword">int</span> srcLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//密文长度</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dstBuf<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//明文</span>
	<span class="token keyword">int</span> dstLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	<span class="token comment">//明文长度</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> wLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">//读、二进制方式打开需要解密的文件</span>
	rFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileDec fopen srcFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//写、二进制方式打开解密后的文件</span>
	wFp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"FileDec fopen dstFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//从源文件中读取数据</span>
	<span class="token comment">//4k: DesDec_raw()</span>
	<span class="token comment">//&lt;4k: DesDec()</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//文件没有结束</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//从文件中读取内容</span>
		<span class="token comment">//srcBuf: 存放文件内容的buf</span>
		<span class="token comment">//1：每次读1个字节</span>
		<span class="token comment">//SIZE: 一次读4k内存， 读取内容的大小： SIZE * 1</span>
		<span class="token comment">//返回值：成功读取内容的块数</span>
		srcLen <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>srcLen <span class="token operator">&lt;</span> SIZE<span class="token punctuation">)</span> <span class="token comment">//如果读取内容&lt;4k，跳出循环</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//=4k数据的解密处理</span>
		<span class="token comment">//把明文srcBuf(长度为srcLen)解密为明文dstBuf(长度为dstLen)</span>
		ret <span class="token operator">=</span> <span class="token function">DesDec_raw</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileDec DesDec_raw err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//把明文dstBuf(长度为dstLen)写到文件wFp中</span>
		wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（等于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token comment">//小于4k的处理</span>
	<span class="token comment">//把明文srcBuf(长度为srcLen)解密为明文dstBuf(长度为dstLen)</span>
	ret <span class="token operator">=</span> <span class="token function">DesDec</span><span class="token punctuation">(</span>srcBuf<span class="token punctuation">,</span> srcLen<span class="token punctuation">,</span> dstBuf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dstLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"FileDec DesDec err: %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//把密文dstBuf(长度为dstLen)写到文件wFp中</span>
	wLen <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>dstBuf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> dstLen<span class="token punctuation">,</span> wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>wLen <span class="token operator">!=</span> dstLen<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"（小于4k）写文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> End<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

End<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>rFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>wFp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">fclose</span><span class="token punctuation">(</span>wFp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> cmd<span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">MyMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cmd:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">FileEnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
			<span class="token function">FileDec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="链表和函数指针"><a href="#链表和函数指针" class="headerlink" title="链表和函数指针"></a>链表和函数指针</h3><ul>
<li>链表是一种常用的数据结构，它通过指针将一些列数据结点，连接成一个数据链。相对于数组，链表具有更好的动态性（非顺序存储）。</li>
<li>数据域用来存储数据，指针域用于建立与下一个结点的联系。</li>
<li>建立链表时无需预先知道数据总量的，可以随机的分配空间，可以高效的在链表中的任意位置实时插入或删除数据。</li>
<li>链表的开销，主要是访问顺序性和组织链的空间损失。</li>
</ul>
<h4 id="链表的相关概念"><a href="#链表的相关概念" class="headerlink" title="链表的相关概念"></a>链表的相关概念</h4><ol>
<li>有关结构体的自身引用</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//结构体嵌套结构体指针(√)</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Teacher</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Teacher</span> <span class="token operator">*</span>teacher<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">teacher_t</span><span class="token punctuation">;</span>


<span class="token comment">//数据类型本质：固定大小内存块的别名 </span>

<span class="token comment">//结构体中套一个结构体(X)</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Student</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token class-name">student_t</span><span class="token punctuation">;</span>
<span class="token comment">//在自己类型大小 还没有确定的情况下 引用自己类型的元素 是不正确的</span>
<span class="token comment">//结构体不能嵌套定义 （确定不了数据类型的内存大小，分配不了内存）</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">teacher_t</span> t1<span class="token punctuation">;</span>
    <span class="token class-name">student_t</span> s1<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>data域和指针域</li>
</ol>
<p><img src="http://qiniu.orangew.cn/img/wps23AF.tmp.jpg" alt="img"></p>
<p><img src="http://qiniu.orangew.cn/img/wps55EB.tmp.jpg" alt="img"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>link<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> item<span class="token punctuation">;</span>     <span class="token comment">//data域</span>
    link next<span class="token punctuation">;</span>              <span class="token comment">//链表域</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol>
<li><p>动态链表和静态链表</p>
<ul>
<li><p>静态链表和动态链表是线性表链式存储结构的两种不同的表示方式。</p>
</li>
<li><p>所有结点都是在程序中定义的，不是临时开辟的，也不能用完后释放，这种链表称为“静态链表”。</p>
</li>
<li><p>所谓动态链表，是指在程序执行过程中从无到有地建立起一个链表，即一个一个地开辟结点和输入各结点数据，并建立起前后相链的关系。</p>
</li>
</ul>
</li>
<li><p>带头链表和不带头链表</p>
</li>
<li><p>单向链表、双向链表、循环链表等</p>
</li>
</ol>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol>
<li>建立带有头结点的单向链表<ul>
<li>编写函数SList_Creat，建立带有头结点的单向链表。循环创建结点，结点数据域中的数值从键盘输入，以-1作为输入结束标志。链表的头结点地址由函数值返回。</li>
</ul>
</li>
<li>顺序访问链表中各结点的数据域<ul>
<li>编写函数SList_Print，顺序输出单向链表各项结点数据域中的内容。</li>
</ul>
</li>
<li>在单向链表中插入节点<ul>
<li>编写函数SList_NodeInsert，功能：在值为x的结点前，插入值为y的结点；若值为x的结点不存在，则插在表尾。</li>
</ul>
</li>
<li>删除单向链表中的结点、<ul>
<li>编写函数SList_NodeDel，删除值为x的结点。\</li>
</ul>
</li>
<li>单向链表的基本操作</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>		<span class="token comment">//数据域</span>
	<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>	<span class="token comment">//指针域</span>
<span class="token punctuation">&#125;</span>SLIST<span class="token punctuation">;</span>

<span class="token comment">//创建头节点</span>
SLIST <span class="token operator">*</span><span class="token function">SListCreat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		<span class="token comment">//当前节点</span>
	SLIST <span class="token operator">*</span>pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">//头结点</span>
	SLIST <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>		<span class="token comment">//新节点</span>

	<span class="token comment">//头结点，只是作为标志使用，不保存有效数据</span>
	pHead <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//pHead成员变量赋值，数据域任意即可，后面用不上</span>
	pHead<span class="token operator">-></span>id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	pHead<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//保存当前节点</span>
	<span class="token comment">//指针指向谁，就把谁的地址赋值给指针</span>
	pCur <span class="token operator">=</span> pHead<span class="token punctuation">;</span>

	<span class="token keyword">int</span> data<span class="token punctuation">;</span>

	<span class="token comment">//循环创建结点，结点数据域中的数值从键盘输入，以-1作为输入结束标志</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 

		<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span><span class="token comment">//输入-1，退出循环</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//新节点分配空间</span>
		pNew <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pNew <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span><span class="token comment">//如果没有分配成功，跳出本次循环</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//pNew成员变量赋值</span>
		pNew<span class="token operator">-></span>id <span class="token operator">=</span> data<span class="token punctuation">;</span>
		pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

		<span class="token comment">//当前节点next指向新节点</span>
		pCur<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>

		<span class="token comment">//新节点的next指向NULL</span>
		pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

		<span class="token comment">//当前节点的位置移动到新节点的位置（pCur指向pNew）</span>
		pCur <span class="token operator">=</span> pNew<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	
	<span class="token comment">//链表的头结点地址由函数值返回。</span>
	<span class="token keyword">return</span> pHead<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//遍历节点</span>
<span class="token comment">//顺序输出单向链表各项结点数据域中的内容</span>
<span class="token keyword">int</span> <span class="token function">SListPrint</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//保存头结点的下一个节点</span>
	<span class="token comment">//因为头结点不是有效数据节点，下一个节点才是有效数据的结点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"head -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d -> "</span><span class="token punctuation">,</span> pCur<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//节点往后移动，当前节点指向下一个节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NULL\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//在值为x的结点前，插入值为y的结点；</span>
<span class="token comment">//若值为x的结点不存在，则插在表尾</span>
<span class="token keyword">int</span> <span class="token function">SListNodeInsert</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>
	SLIST <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>         <span class="token comment">//新节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//如果当前节点数据域等于x，跳出循环</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">==</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//程序执行到这，有两种情况</span>
	<span class="token comment">//1. 找到值为x的结点，pCur为当前匹配节点，pPre为上一个节点</span>
	<span class="token comment">//2. 没有找到x的结点，节点移动到结尾，pPre为最后一个节点，pCur为NULL</span>

	<span class="token comment">//在值为x的结点前，插入值为y的结点；</span>
	<span class="token comment">//若值为x的结点不存在，则插在表尾</span>
	
	<span class="token comment">//新节点分配空间</span>
	pNew <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pNew <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//pNew成员变量赋值</span>
	pNew<span class="token operator">-></span>id <span class="token operator">=</span> y<span class="token punctuation">;</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//pPre的next指向pNew</span>
	pPre<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>

	<span class="token comment">//pNew的next指向pCur</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除第一个值为x的结点</span>
<span class="token keyword">int</span> <span class="token function">SListNodeDel</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>


	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">==</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//上一个节点指向当前节点的下一个节点</span>
			pPre<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>

			<span class="token comment">//临时释放节点</span>
			<span class="token function">free</span><span class="token punctuation">(</span>pCur<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pCur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

			<span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

			<span class="token comment">//跳出循环</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有值为%d的结点\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//删除值为x的所有结点</span>
<span class="token keyword">int</span> <span class="token function">SListNodeDelPro</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>
	SLIST <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>			<span class="token comment">//临时释放节点</span>
	<span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>


	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">==</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token comment">//上一个节点指向当前节点的下一个节点</span>
			pPre<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
			pTmp <span class="token operator">=</span> pCur<span class="token punctuation">;</span>		<span class="token comment">//临时释放节点</span>


			<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
			<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
			pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>

			<span class="token comment">//临时释放节点</span>
			<span class="token function">free</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

			<span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
			flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

			<span class="token comment">//结束本次循环，没有跳出循环，看是否有重复值为x的结点</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	
	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span> <span class="token comment">//标志位，0代表没有值为x的结点，1代表有</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有值为%d的结点\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//链表节点排序</span>
<span class="token keyword">int</span> <span class="token function">SListNodeSort</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
	SLIST tmp<span class="token punctuation">;</span> <span class="token comment">//临时交换变量</span>
	
	<span class="token comment">//选择法排序</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>pPre <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span> pPre <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> pPre <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>pCur <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">;</span> pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>pPre<span class="token operator">-></span>id <span class="token operator">></span> pCur<span class="token operator">-></span>id<span class="token punctuation">)</span> <span class="token comment">//升序</span>
			<span class="token punctuation">&#123;</span>
				<span class="token comment">//交换数据域</span>
				tmp <span class="token operator">=</span> <span class="token operator">*</span>pCur<span class="token punctuation">;</span>
				<span class="token operator">*</span>pCur <span class="token operator">=</span> <span class="token operator">*</span>pPre<span class="token punctuation">;</span>
				<span class="token operator">*</span>pPre <span class="token operator">=</span> tmp<span class="token punctuation">;</span>

				<span class="token comment">//交换指针域（重要）</span>
				tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
				pCur<span class="token operator">-></span>next <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">;</span>
				pPre<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//假如原来链表是升序的,升序插入新节点</span>
<span class="token comment">//不能插入节点后再排序，是升序插入新节点x</span>
<span class="token keyword">int</span> <span class="token function">SListNodeInsertPro</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//先排序，保证原来链表是升序的</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">SListNodeSort</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ret<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token punctuation">;</span>		<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>	<span class="token comment">//当前节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//找到合适节点，假如x = 3</span>
		<span class="token comment">//链表为：1 2 4 5</span>
		<span class="token comment">//那么 4 节点为合适节点</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>pCur<span class="token operator">-></span>id <span class="token operator">>=</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">//保存当前节点</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//当前节点往后移动，当前节点指向下一个节点</span>
		<span class="token comment">//pPre和pCur相差一个节点，pPre为上一个节点，pCur为当前节点</span>
		pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//程序执行到这，有2种情况</span>
	<span class="token comment">//1. 找到匹配节点，pCur为当前匹配节点，pPre为上一个节点</span>
	<span class="token comment">//2. 没有找到匹配节点，节点移动到结尾，pPre为最后一个节点，pCur为NULL</span>
	

	<span class="token comment">//新节点分配空间</span>
	SLIST <span class="token operator">*</span>pNew <span class="token operator">=</span> <span class="token punctuation">(</span>SLIST <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SLIST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pNew <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//pNew成员变量赋值</span>
	pNew<span class="token operator">-></span>id <span class="token operator">=</span> x<span class="token punctuation">;</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//pPre的next指向pNew</span>
	pPre<span class="token operator">-></span>next <span class="token operator">=</span> pNew<span class="token punctuation">;</span>

	<span class="token comment">//pNew的next指向pCur</span>
	pNew<span class="token operator">-></span>next <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//翻转链表的节点（不是排序，是翻转）</span>
<span class="token keyword">int</span> <span class="token function">SListNodeReverse</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pHead<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> pHead<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//上一个节点</span>
	SLIST <span class="token operator">*</span>pPre <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>

	<span class="token comment">//当前节点，pCur和pPre相差一个节点</span>
	SLIST <span class="token operator">*</span>pCur <span class="token operator">=</span> pPre<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">//pHead->next->next</span>

	SLIST <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//临时节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pCur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//先保存pCur的下一个节点</span>
		pTmp <span class="token operator">=</span> pCur<span class="token operator">-></span>next<span class="token punctuation">;</span>

		<span class="token comment">//原来： pPre->next = pCur</span>
		<span class="token comment">//翻转： pCur->next = pPre</span>
		<span class="token comment">//pCur的next指向pPre</span>
		pCur<span class="token operator">-></span>next <span class="token operator">=</span> pPre<span class="token punctuation">;</span>

		<span class="token comment">//pPre往后移动一个节点，pPre指向pCur</span>
		pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>

		<span class="token comment">//pCur往后移动一个节点，pCur指向pTmp</span>
		pCur <span class="token operator">=</span> pTmp<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">//确定头结点和尾结点</span>
	<span class="token comment">//程序执行到这，说明pCur为NULL，pPre为最后一个有效节点</span>
	<span class="token comment">//而翻转后，pPre为头结点指向的第一个有效节点</span>

	<span class="token comment">//先确定翻转后的尾结点</span>
	pHead<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token comment">//在确定头结点</span>
	pHead<span class="token operator">-></span>next <span class="token operator">=</span> pPre<span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//释放所有节点</span>
<span class="token keyword">int</span> <span class="token function">SListDestroy</span><span class="token punctuation">(</span>SLIST <span class="token operator">*</span>pHead<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	SLIST <span class="token operator">*</span>pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>	<span class="token comment">//临时释放节点</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>pHead <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token comment">//临时释放节点</span>
		pTmp <span class="token operator">=</span> pHead<span class="token punctuation">;</span>

		<span class="token comment">//头结点指向头结点next节点</span>
		pHead <span class="token operator">=</span> pHead<span class="token operator">-></span>next<span class="token punctuation">;</span>
		
		<span class="token function">free</span><span class="token punctuation">(</span>pTmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		pTmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	SLIST <span class="token operator">*</span>pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	pHead <span class="token operator">=</span> <span class="token function">SListCreat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建头结点</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n创建头结点后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	
	<span class="token function">SListNodeInsert</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在4前面插入3</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n在4前面插入3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	
	<span class="token function">SListNodeDel</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除第一个值为4的结点</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n删除第一个值为4的结点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">SListNodeSort</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//链表节点排序</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n链表节点排序\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">SListNodeInsertPro</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//升序插入5</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n升序插入5后\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token comment">//翻转链表的节点（不是排序，是翻转）</span>
	<span class="token function">SListNodeReverse</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n翻转链表的节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">SListDestroy</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放所有节点</span>
	pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token function">SListPrint</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历所有节点</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="指针函数和函数指针"><a href="#指针函数和函数指针" class="headerlink" title="指针函数和函数指针"></a>指针函数和函数指针</h4><ol>
<li><p>指针函数（返回指针值的函数）</p>
<ul>
<li>一个函数可以带回一个整型值、字符值、实型值等，也可以带回指针型的数据，即地址。</li>
<li>这种带回指针值的函数，一般定义形式为：类型名 *函数名（参数表列）;</li>
</ul>
</li>
<li><p>函数指针（指向函数的指针）</p>
<ul>
<li>一个函数在编译时被分配一个入口地址，这个地址就称为函数的指针，函数名代表函数的入口地址。</li>
</ul>
</li>
</ol>
<ul>
<li>这一点和数组一样，因此我们可以用一个指针变量来存放这个入口地址，然后通过该指针变量调用函数。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span> 
	c <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token comment">//这是通常用的方法，我们也可以定义一个函数指针，通过指针来调用这个函数。</span>
	
	<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指向函数指针变量的定义形式</span>
	p <span class="token operator">=</span> max<span class="token punctuation">;</span>	        <span class="token comment">//将函数的入口地址赋给函数指针变量p</span>
	c <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用max函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ol start="3">
<li>回调函数     <ul>
<li>函数指针变量常见的用途之一是把指针作为参数传递到其他函数，指向函数的指针也可以作为参数，以实现函数地址的传递。<ol>
<li>写一个函数A,A里面有一个参数是个函数指针:<ul>
<li><code>int funcA(int a, int (*Pcall)(int b));</code></li>
<li>注意回调函数做形式参数函数名和*号要用括号搞在一起，否则 就会被返回值类型占有.</li>
</ul>
</li>
<li>有个实体函数，那他要指向一个函数B,这个函数的类型应该和A的函数参数类型一样:<ul>
<li><code>int funcB(int c); </code></li>
</ul>
</li>
<li>使用A函数把参数赋值后,A中的形参Pcall函数指针指向了一个函数funB的地址: <ul>
<li><code>funcA(36,funcB);</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in funcB:%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
    
<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Pcall<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> PA <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> PS <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">Pcall</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用回调函数,传参数a</span>
    <span class="token function">Pcall</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PS</span>
    <span class="token function">Pcall</span><span class="token punctuation">(</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PA</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将funcB当做参数传递给funcA</span>
    <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>函数类型的别名</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pCall<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将 int (*)(int b)类型的指针 起别名 pCall</span>

pCall pCallA<span class="token punctuation">;</span>           <span class="token comment">//定义一个函数指针</span>
pCall pCallB<span class="token punctuation">;</span>           <span class="token comment">//定义一个函数指针</span>
     
<span class="token keyword">int</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in funcB:%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> 
    
<span class="token keyword">int</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> pCallA<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>               
    <span class="token keyword">int</span> PA <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> PS <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> 
    <span class="token function">PcallA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用回调函数,传参数a</span>
    <span class="token function">PcallA</span><span class="token punctuation">(</span>PS<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PS</span>
    <span class="token function">PcallA</span><span class="token punctuation">(</span>PA<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用回调函数,传参数PA</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将funcB当做参数传递给funcA</span>
    <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> funcB<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>奇葩的变量笔试题</li>
</ul>
<blockquote>
<p>给定以下类型的变量a的定义式：</p>
<p>a) 一个整型（An integer）</p>
<p>b) 一个指向整型的指针（A pointer to an integer）</p>
<p>c) 一个指向指向整型的指针（A pointer to a pointer to an integer）</p>
<p>d) 一个10个存放整型的数组（An array of 10 integers）</p>
<p>e) 一个10个存放指向整型指针的数组</p>
<p>（An array of 10 pointers to integers）</p>
<p>f) 一个指向存放10个整型数组的指针</p>
<p>（A pointer to an array of 10 integers）</p>
<p>g) 一个指向 需要一个整型参数并且返回值是一个整型函数的指针</p>
<p>（A pointer to a function that takes an integer as an argument and returns an integer）</p>
<p>h) 一个存放10个 指向 需要一个整型参数并且返回值是一个整型函数的指针的数组</p>
<p>（An array of ten pointers to functions that take an integer argument and return an integer）</p>
</blockquote>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><h4 id="预处理-1"><a href="#预处理-1" class="headerlink" title="预处理"></a>预处理</h4><ol>
<li>预处理的基本概念<ul>
<li>C语言对源程序处理的四个步骤：预处理、编译、汇编、链接。</li>
<li>预处理是在程序源代码被编译之前，由预处理器（Preprocessor）对程序源代码进行的处理。这个过程并不对程序的源代码语法进行解析，但它会把源代码分割或处理成为特定的符号为下一步的编译做准备工作。</li>
</ul>
</li>
<li>预编译命令<ul>
<li>Ｃ编译器提供的预处理功能主要有以下四种：<ol>
<li>文件包含 #include</li>
<li>宏定义  #define</li>
<li>条件编译 #if #endif ..</li>
<li>一些特殊作用的预定义宏</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="文件包含处理"><a href="#文件包含处理" class="headerlink" title="文件包含处理"></a>文件包含处理</h4><ol>
<li>文件包含处理<ul>
<li>文件包含处理”是指一个源文件可以将另外一个文件的全部内容包含进来。Ｃ语言提供了#include命令用来实现“文件包含”的操作。</li>
<li><img src="http://qiniu.orangew.cn/img/wps3099.tmp.jpg" alt="img"></li>
</ul>
</li>
<li>#include&lt; &gt; 与 #include “”的区别<ul>
<li>“”表示系统先在file1.c所在的当前目录找file1.h，如果找不到，再按系统指定的目录检索。</li>
<li>&lt; &gt;表示系统直接按系统指定的目录检索。</li>
<li>注意<ul>
<li>#include &lt;&gt;常用于包含库函数的头文件</li>
<li>#include “”常用于包含自定义的头文件</li>
<li>理论上#include可以包含任意格式的文件(.c .h等) ，但我们一般用于头文件的包含。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><ol>
<li>基本概念<ul>
<li>在源程序中，允许一个标识符（宏名）来表示一个语言符号字符串用指定的符号代替指定的信息。</li>
<li>在C语言中，“宏”分为：无参数的宏和有参数的宏。</li>
</ul>
</li>
<li>无参数的宏定义<ul>
<li>#define　宏名　字符串</li>
<li>例: #define    PI    3.141926</li>
<li>在编译预处理时，将程序中在该语句以后出现的所有的PI都用3.1415926代替。</li>
<li>这种方法使用户能以一个简单的名字代替一个长的字符串，在预编译时将宏名替换成字符串的过程称为“宏展开”。宏定义，只在宏定义的文件中起作用。</li>
</ul>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415f</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">float</span> L<span class="token punctuation">,</span>S<span class="token punctuation">,</span>R<span class="token punctuation">,</span>V<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input Radius:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	L<span class="token operator">=</span><span class="token number">2.0f</span><span class="token operator">*</span>PI<span class="token operator">*</span>R<span class="token punctuation">;</span>
	S<span class="token operator">=</span>PI<span class="token operator">*</span>R<span class="token operator">*</span>R<span class="token punctuation">;</span>
	V<span class="token operator">=</span><span class="token number">4.0f</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span>PI<span class="token operator">*</span>R<span class="token operator">*</span>R<span class="token operator">*</span>R<span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"L=%.4f,S=%.4f,V=%.4f\n"</span><span class="token punctuation">,</span>L<span class="token punctuation">,</span>S<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
   	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>说明<ol>
<li>宏名一般用大写，以便于与变量区别</li>
<li>字符串可以是常数、表达式等</li>
<li>宏定义不作语法检查，只有在编译被宏展开后的源程序才会报错</li>
<li>宏定义不是C语言，不在行末加分号</li>
<li>宏名有效范围为从定义到本源文件结束</li>
<li>可以用#undef命令终止宏定义的作用域</li>
<li>在宏定义中，可以引用已定义的宏名</li>
</ol>
</li>
</ul>
<ol start="3">
<li>带参数的宏定义<ol>
<li>格式：#define 宏名(形参表) 字符串</li>
<li>调用：宏名(形参表)</li>
<li>宏展开：进行宏替换</li>
</ol>
</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQ_1</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SQ_2</span><span class="token expression"><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  y<span class="token operator">*</span>y</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	num_1 <span class="token operator">=</span> <span class="token function">SQ_1</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//num_1 = (a+1)*(a+1); </span>
	num_2 <span class="token operator">=</span> <span class="token function">SQ_2</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//num_2 = a+1*a+1; </span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num_1 = %d\n"</span><span class="token punctuation">,</span>num_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num_2 = %d\n"</span><span class="token punctuation">,</span>num_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
   	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h4><ol>
<li><p>基本概念</p>
<ul>
<li>一般情况下，源程序中所有的行都参加编译。但有时希望对部分源程序行只在满足一定条件时才编译，即对这部分源程序行指定编译条件。</li>
<li><img src="http://qiniu.orangew.cn/img/wpsB7C8.tmp.jpg" alt="img"></li>
</ul>
</li>
<li><p>条件编译的作用</p>
<ol>
<li><p>防止头文件被重复包含引用</p>
<blockquote>
<p>#ifndef _SOMEFILE_H</p>
<p>#define _SOMEFILE_H</p>
<p> //需要声明的变量、函数</p>
<p>​    //宏定义</p>
<p>​    //结构体</p>
<p>#endif</p>
</blockquote>
</li>
<li><p> 软件裁剪（同样的C源代码，条件选项不同可以编译出不同的可执行程序。）</p>
</li>
</ol>
<blockquote>
<p>#include &lt;stdio.h&gt;</p>
<p>#include &lt;stdlib.h&gt;</p>
<p>#define BIG 1</p>
<p>int main(void)</p>
<p>{</p>
<p>​    char str[20] = “C Language”;</p>
<p>​    char C;</p>
<p>​    int i = 0;</p>
<p>​    while ((C = str[i++]) != ‘\0’)</p>
<p>​    {</p>
<p>#if BIG</p>
<p>​        if (C &gt;= ‘a’ &amp;&amp; C &lt;= ‘z’)</p>
<p>​            C = C - 32;</p>
<p>#else</p>
<p>​        if (C &gt;= ‘A’&amp;&amp; C &lt;= ‘Z’)</p>
<p>​            C = C + 32;</p>
<p>#endif</p>
<p>​        printf(“%c”, C);</p>
<p>​    }</p>
<p>​    system(“pause”);</p>
<p>​    return 0;</p>
<p>}</p>
</blockquote>
</li>
</ol>
<h4 id="一些特殊的预定宏"><a href="#一些特殊的预定宏" class="headerlink" title="一些特殊的预定宏"></a>一些特殊的预定宏</h4><ul>
<li>C编译器，提供了几个特殊形式的预定义宏，在实际编程中可以直接使用，很方便。</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//	__FILE__			宏所在文件的源文件名 </span>
<span class="token comment">//	__LINE__			宏所在行的行号</span>
<span class="token comment">//	__DATE__			代码编译的日期</span>
<span class="token comment">//	__TIME__			代码编译的时间</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__DATE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token constant">__TIME__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
   下面定义了一套socket客户端发送报文接受报文的api接口
   请写出这套接口api的调用方法
 */</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_INC_Demo01_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_INC_Demo01_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token comment">//------------------第一套api接口---Begin--------------------------------//</span>
    <span class="token comment">//客户端初始化 获取handle上下</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketInit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>handle <span class="token comment">/*out*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//客户端发报文</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketSend</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle <span class="token comment">/*in*/</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token comment">/*in*/</span><span class="token punctuation">,</span>  <span class="token keyword">int</span> buflen <span class="token comment">/*in*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//客户端收报文</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketRev</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle <span class="token comment">/*in*/</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token comment">/*in*/</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buflen <span class="token comment">/*in out*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//客户端释放资源</span>
    <span class="token keyword">int</span> <span class="token function">cltSocketDestory</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token comment">/*in*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//------------------第一套api接口---End-----------------------------------//</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>windows动态库生成的文件有</li>
</ul>
<blockquote>
<p><code>socketClient.lib</code></p>
<p><code>socketClient.dll</code></p>
</blockquote>
<ul>
<li>windows 动态库是dll文件和lib文件组合。</li>
<li><code>xxx.lib</code>：编译代码时，需要链接此文件</li>
<li><code>xxx.dll</code>：运行程序时，需要链接此文件</li>
<li>当发现windows动态库没有lib文件生成时候，需要在动态库中每个函数头部添加头衔。</li>
<li><code>__declspec(dllexport)</code></li>
</ul>
<h3 id="附录A：Win32环境下动态链接库-DLL-编程原理"><a href="#附录A：Win32环境下动态链接库-DLL-编程原理" class="headerlink" title="附录A：Win32环境下动态链接库(DLL)编程原理"></a>附录A：Win32环境下动态链接库(DLL)编程原理</h3><p>​        比较大的应用程序都由很多模块组成，这些模块分别完成相对独立的功能，它们彼此协作来完成整个软件系统的工作。其中可能存在一些模块的功能较为通用，在构造其它软件系统时仍会被使用。在构造软件系统时，如果将所有模块的源代码都静态编译到整个应用程序EXE文件中，会产生一些问题：一个缺点是增加了应用程序的大小，它会占用更多的磁盘空间，程序运行时也会消耗较大的内存空间，造成系统资源的浪费；另一个缺点是，在编写大的EXE程序时，在每次修改重建时都必须调整编译所有源代码，增加了编译过程的复杂性，也不利于阶段性的单元测试。 </p>
<p>　　Windows系统平台上提供了一种完全不同的较有效的编程和运行环境，你可以将独立的程序模块创建为较小的DLL(Dynamic Linkable Library)文件，并可对它们单独编译和测试。在运行时，只有当EXE程序确实要调用这些DLL模块的情况下，系统才会将它们装载到内存空间中。这种 方式不仅减少了EXE文件的大小和对内存空间的需求，而且使这些DLL模块可以同时被多个应用程序使用。Microsoft Windows自己就将一些主要的系统功能以DLL模块的形式实现。例如IE中的一些基本功能就是由DLL文件实现的，它可以被其它应用程序调用和集成。</p>
<p>　 　一般来说，DLL是一种磁盘文件（通常带有DLL扩展名），它由全局数据、服务函数和资源组成，在运行时被系统加载到进程的虚拟空间中，成为调用进程的 一部分。如果与其它DLL之间没有冲突，该文件通常映射到进程虚拟空间的同一地址上。DLL模块中包含各种导出函数，用于向外界提供服务。Windows 在加载DLL模块时将进程函数调用与DLL文件的导出函数相匹配。</p>
<p>　　在Win32环境中，每个进程都复制了自己的读/写全局变量。如果想要与其它进程共享内存，必须使用内存映射文件或者声明一个共享数据段。DLL模块需要的堆栈内存都是从运行进程的堆栈中分配出来的。</p>
<p>　　DLL现在越来越容易编写。Win32已经大大简化了其编程模式，并有许多来自AppWizard和MFC类库的支持。</p>
<p>　　一、导出和导入函数的匹配</p>
<p>　 　DLL文件中包含一个导出函数表。这些导出函数由它们的符号名和称为标识号的整数与外界联系起来。函数表中还包含了DLL中函数的地址。当应用程序加载 DLL模块时时，它并不知道调用函数的实际地址，但它知道函数的符号名和标识号。动态链接过程在加载的DLL模块时动态建立一个函数调用与函数地址的对应 表。如果重新编译和重建DLL文件，并不需要修改应用程序，除非你改变了导出函数的符号名和参数序列。</p>
<p>　　简单的DLL文件只为应用程序提供导出函数，比较复杂的DLL文件除了提供导出函数以外，还调用其它DLL文件中的函数。这样，一个特殊的DLL可以既有导入函数，又有导入函数。这并不是一个问题，因为动态链接过程可以处理交叉相关的情况。</p>
<p>　　在DLL代码中，必须像下面这样明确声明导出函数：</p>
<p><code>__declspec(dllexport) int MyFunction(int n);</code></p>
<p>　　但也可以在模块定义(DEF)文件中列出导出函数，不过这样做常常引起更多的麻烦。在应用程序方面，要求像下面这样明确声明相应的输入函数：</p>
<p><code>__declspec(dllimport) int MyFuncition(int n);</code></p>
<p>　　仅有导入和导出声明并不能使应用程序内部的函数调用链接到相应的DLL文件上。应用程序的项目必须为链接程序指定所需的输入库（LIB文件）。而且应用程序事实上必须至少包含一个对DLL函数的调用。</p>
<p>　　二、与DLL模块建立链接</p>
<p>　　应用程序导入函数与DLL文件中的导出函数进行链接有两种方式：隐式链接和显式链接。所谓的隐式链接是指在应用程序中不需指明DLL文件的实际存储路径，程序员不需关心DLL文件的实际装载。而显式链接与此相反。</p>
<p>　 　采用隐式链接方式，程序员在建立一个DLL文件时，链接程序会自动生成一个与之对应的LIB导入文件。该文件包含了每一个DLL导出函数的符号名和可选 的标识号，但是并不含有实际的代码。LIB文件作为DLL的替代文件被编译到应用程序项目中。当程序员通过静态链接方式编译生成应用程序时，应用程序中的 调用函数与LIB文件中导出符号相匹配，这些符号或标识号进入到生成的EXE文件中。LIB文件中也包含了对应的DLL文件名（但不是完全的路径名），链接程序将其存储在EXE文件内部。当应用程序运行过程中需要加载DLL文件时，Windows根据这些信息发现并加载DLL，然后通过符号名或标识号实现 对DLL函数的动态链接。</p>
<p>　　显式链接方式对于集成化的开发语言（例如VB）比较适合。有了显式链接，程序员就不必再使用导入文件，而是直接调用Win32 的LoadLibary函数，并指定DLL的路径作为参数。LoadLibary返回HINSTANCE参数，应用程序在调用 GetProcAddress函数时使用这一参数。GetProcAddress函数将符号名或标识号转换为DLL内部的地址。假设有一个导出如下函数的 DLL文件：</p>
<p><code>extern &quot;C&quot; __declspec(dllexport) double SquareRoot(double d);</code></p>
<p>下面是应用程序对该导出函数的显式链接的例子：</p>
<p>下面是应用程序对该导出函数的显式链接的例子：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">double</span><span class="token punctuation">(</span>SQRTPROC<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
HINSTANCE hInstance<span class="token punctuation">;</span>
SQRTPROC<span class="token operator">*</span> pFunction<span class="token punctuation">;</span>

<span class="token function">VERIFY</span><span class="token punctuation">(</span>hInstance<span class="token operator">=</span><span class="token operator">::</span><span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">"c:\\winnt\\system32\\mydll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">VERIFY</span><span class="token punctuation">(</span>pFunction<span class="token operator">=</span><span class="token punctuation">(</span>SQRTPROC<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hInstance<span class="token punctuation">,</span><span class="token string">"SquareRoot"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">double</span> d<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>pFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">81.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用该DLL函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>　 　在隐式链接方式中，所有被应用程序调用的DLL文件都会在应用程序EXE文件加载时被加载在到内存中；但如果采用显式链接方式，程序员可以决定DLL文 件何时加载或不加载。显式链接在运行时决定加载哪个DLL文件。例如，可以将一个带有字符串资源的DLL模块以英语加载，而另一个以西班牙语加载。应用程 序在用户选择了合适的语种后再加载与之对应的DLL文件。</p>
<p>　　三、使用符号名链接与标识号链接</p>
<p>　 　在Win16环境中，符号名链接效率较低，所有那时标识号链接是主要的链接方式。在Win32环境中，符号名链接的效率得到了改善。Microsoft 现在推荐使用符号名链接。但在MFC库中的DLL版本仍然采用的是标识号链接。一个典型的MFC程序可能会链接到数百个MFC DLL函数上。采用标识号链接的应用程序的EXE文件体相对较小，因为它不必包含导入函数的长字符串符号名。</p>
<p>​         四、编写DllMain函数</p>
<p>　　DllMain函数是DLL模块的默认入口点。当Windows加载 DLL模块时调用这一函数。系统首先调用全局对象的构造函数，然后调用全局函数DLLMain。DLLMain函数不仅在将DLL链接加载到进程时被调 用，在DLL模块与进程分离时（以及其它时候）也被调用。下面是一个框架DLLMain函数的例子。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">HINSTANCE g_hInstance<span class="token punctuation">;</span>

<span class="token keyword">extern</span> <span class="token string">"C"</span> 
<span class="token keyword">int</span> APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span>DWORD dwReason<span class="token punctuation">,</span>LPVOID lpReserved<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dwReason<span class="token operator">==</span>DLL_PROCESS_ATTACH<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">TRACE0</span><span class="token punctuation">(</span><span class="token string">"EX22A.DLL Initializing!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//在这里进行初始化</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dwReason<span class="token operator">=</span>DLL_PROCESS_DETACH<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">TRACE0</span><span class="token punctuation">(</span><span class="token string">"EX22A.DLL Terminating!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//在这里进行清除工作</span>
    <span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//成功</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>　　如果程序员没有为DLL模块编写一个DLLMain函数，系统会从其它运行库中引入一个不做任何操作的缺省DLLMain函数版本。在单个线程启动和终止时，DLLMain函数也被调用。正如由dwReason参数所表明的那样。</p>
<p>　　五、模块句柄</p>
<p>　 　进程中的每个DLL模块被全局唯一的32字节的HINSTANCE句柄标识。进程自己还有一个HINSTANCE句柄。所有这些模块句柄都只有在特定的 进程内部有效，它们代表了DLL或EXE模块在进程虚拟空间中的起始地址。在Win32中，HINSTANCE和HMODULE的值是相同的，这个两种类 型可以替换使用。进程模块句柄几乎总是等于0x400000，而DLL模块的加载地址的缺省句柄是0x10000000。如果程序同时使用了几个DLL模 块，每一个都会有不同的HINSTANCE值。这是因为在创建DLL文件时指定了不同的基地址，或者是因为加载程序对DLL代码进行了重定位。<br>模块句柄对于加载资源特别重要。Win32 的FindResource函数中带有一个HINSTANCE参数。EXE和DLL都有其自己的资源。如果应用程序需要来自于DLL的资源，就将此参数指定为DLL的模块句柄。如果需要EXE文件中包含的资源，就指定EXE的模块句柄。</p>
<p>　　但是在使用这些句柄之前存在一个问题，你怎样得到它们呢？如果需要得到EXE模块句柄，调用带有Null参数的Win32函数GetModuleHandle；如果需要DLL模块句柄，就调用以DLL文件名为参数的Win32函数GetModuleHandle。</p>
<p>　　六、应用程序怎样找到DLL文件</p>
<p>　　如果应用程序使用LoadLibrary显式链接，那么在这个函数的参数中可以指定DLL文件的完整路径。如果不指定路径，或是进行隐式链接，Windows将遵循下面的搜索顺序来定位DLL：</p>
<p>　　1． 包含EXE文件的目录，<br>　　2． 进程的当前工作目录，<br>　　3． Windows系统目录，<br>　　4． Windows目录，<br>　　5． 列在Path环境变量中的一系列目录。</p>
<p>　 　这里有一个很容易发生错误的陷阱。如果你使用VC＋＋进行项目开发，并且为DLL模块专门创建了一个项目，然后将生成的DLL文件拷贝到系统目录下，从 应用程序中调用DLL模块。到目前为止，一切正常。接下来对DLL模块做了一些修改后重新生成了新的DLL文件，但你忘记将新的DLL文件拷贝到系统目录 下。下一次当你运行应用程序时，它仍加载了老版本的DLL文件，这可要当心！</p>
<p>　　七、调试DLL程序</p>
<p>　　Microsoft 的VC＋＋是开发和测试DLL 的有效工具，只需从DLL项目中运行调试程序即可。当你第一次这样操作时，调试程序会向你询问EXE文件的路径。此后每次在调试程序中运行DLL时，调试 程序会自动加载该EXE文件。然后该EXE文件用上面的搜索序列发现DLL文件，这意味着你必须设置Path环境变量让其包含DLL文件的磁盘路径，或者 也可以将DLL文件拷贝到搜索序列中的目录路径下。</p>
<p>​         八、DLL分配的内存需要用dll提供的API释放</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
</search>
